//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Thu 25-Mar-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//



#include "CAST.h"
static TYPE_AS_Expr vdm_CAST_MatchVal2Expr(const TYPE_AS_MatchVal &);
static TYPE_AS_RecordConstructorExpr vdm_CAST_RecordPattern2Expr(const TYPE_AS_RecordPattern &);
static TYPE_AS_BinaryExpr vdm_CAST_SeqConcPattern2Expr(const TYPE_AS_SeqConcPattern &);
static TYPE_AS_SeqEnumerationExpr vdm_CAST_SeqEnumPattern2Expr(const TYPE_AS_SeqEnumPattern &);
static TYPE_AS_SetEnumerationExpr vdm_CAST_SetEnumPattern2Expr(const TYPE_AS_SetEnumPattern &);
static TYPE_AS_BinaryExpr vdm_CAST_SetUnionPattern2Expr(const TYPE_AS_SetUnionPattern &);
static TYPE_AS_TupleConstructorExpr vdm_CAST_TuplePattern2Expr(const TYPE_AS_TuplePattern &);

void init_CAST_VDMLib() {
  VDMGetDefaultRecInfoMap().NewTag(TOKEN, 1);
  VDMGetDefaultRecInfoMap().SetSymTag(TOKEN, "token");
}
#ifdef DEF_CAST_USERIMPL

#include "CAST_userimpl.cc"

#endif


void init_CAST() { init_CAST_VDMLib(); }
#ifndef DEF_CAST_MatchVal2Expr

TYPE_AS_Expr vdm_CAST_MatchVal2Expr(const TYPE_AS_MatchVal &var_1_1) {
  Record vdm_CAST_val;
  bool succ_2 = true;
  if (var_1_1.IsRecord() && vdm_AS_MatchVal == var_1_1.GetTag()) {
    Sequence e_l_4;
    for (int i_5 = 1; i_5 <= var_1_1.Length(); i_5++) 
      e_l_4.ImpAppend(var_1_1.GetField(i_5));
    if (succ_2 = 2 == (Int) e_l_4.Length()) 
      vdm_CAST_val = (Generic) e_l_4.Hd();
  }
  else 
    succ_2 = false;
  if (!succ_2) 
    RunTime("Pattern Match in Function Apply in function : MatchVal2Expr failed");
  return (Generic) vdm_CAST_val;
}
#endif

#ifndef DEF_CAST_Pattern2Expr

TYPE_AS_Expr vdm_CAST_Pattern2Expr(const TYPE_AS_Pattern &vdm_CAST_pat) {
  Generic varRes_3;
  bool succ_4 = true;
  {
    succ_4 = true;
    if (vdm_CAST_pat.IsRecord() && vdm_AS_PatternName == ((Record) vdm_CAST_pat).GetTag()) {
      Sequence e_l_7;
      for (int i_8 = 1; i_8 <= ((Record) vdm_CAST_pat).Length(); i_8++) 
        e_l_7.ImpAppend(((Record) vdm_CAST_pat).GetField(i_8));
      if (succ_4 = 2 == (Int) e_l_7.Length()) {}
    }
    else 
      succ_4 = false;
    if (succ_4) 
      varRes_3 = vdm_CAST_PatternName2Expr((Generic) vdm_CAST_pat);
  }
  if (!succ_4) {
    succ_4 = true;
    if (vdm_CAST_pat.IsRecord() && vdm_AS_MatchVal == ((Record) vdm_CAST_pat).GetTag()) {
      Sequence e_l_10;
      for (int i_11 = 1; i_11 <= ((Record) vdm_CAST_pat).Length(); i_11++) 
        e_l_10.ImpAppend(((Record) vdm_CAST_pat).GetField(i_11));
      if (succ_4 = 2 == (Int) e_l_10.Length()) {}
    }
    else 
      succ_4 = false;
    if (succ_4) 
      varRes_3 = vdm_CAST_MatchVal2Expr((Generic) vdm_CAST_pat);
  }
  if (!succ_4) {
    succ_4 = true;
    if (vdm_CAST_pat.IsRecord() && vdm_AS_SetEnumPattern == ((Record) vdm_CAST_pat).GetTag()) {
      Sequence e_l_13;
      for (int i_14 = 1; i_14 <= ((Record) vdm_CAST_pat).Length(); i_14++) 
        e_l_13.ImpAppend(((Record) vdm_CAST_pat).GetField(i_14));
      if (succ_4 = 2 == (Int) e_l_13.Length()) {}
    }
    else 
      succ_4 = false;
    if (succ_4) 
      varRes_3 = vdm_CAST_SetEnumPattern2Expr((Generic) vdm_CAST_pat);
  }
  if (!succ_4) {
    succ_4 = true;
    if (vdm_CAST_pat.IsRecord() && vdm_AS_SetUnionPattern == ((Record) vdm_CAST_pat).GetTag()) {
      Sequence e_l_16;
      for (int i_17 = 1; i_17 <= ((Record) vdm_CAST_pat).Length(); i_17++) 
        e_l_16.ImpAppend(((Record) vdm_CAST_pat).GetField(i_17));
      if (succ_4 = 3 == (Int) e_l_16.Length()) {}
    }
    else 
      succ_4 = false;
    if (succ_4) 
      varRes_3 = vdm_CAST_SetUnionPattern2Expr((Generic) vdm_CAST_pat);
  }
  if (!succ_4) {
    succ_4 = true;
    if (vdm_CAST_pat.IsRecord() && vdm_AS_SeqEnumPattern == ((Record) vdm_CAST_pat).GetTag()) {
      Sequence e_l_19;
      for (int i_20 = 1; i_20 <= ((Record) vdm_CAST_pat).Length(); i_20++) 
        e_l_19.ImpAppend(((Record) vdm_CAST_pat).GetField(i_20));
      if (succ_4 = 2 == (Int) e_l_19.Length()) {}
    }
    else 
      succ_4 = false;
    if (succ_4) 
      varRes_3 = vdm_CAST_SeqEnumPattern2Expr((Generic) vdm_CAST_pat);
  }
  if (!succ_4) {
    succ_4 = true;
    if (vdm_CAST_pat.IsRecord() && vdm_AS_SeqConcPattern == ((Record) vdm_CAST_pat).GetTag()) {
      Sequence e_l_22;
      for (int i_23 = 1; i_23 <= ((Record) vdm_CAST_pat).Length(); i_23++) 
        e_l_22.ImpAppend(((Record) vdm_CAST_pat).GetField(i_23));
      if (succ_4 = 3 == (Int) e_l_22.Length()) {}
    }
    else 
      succ_4 = false;
    if (succ_4) 
      varRes_3 = vdm_CAST_SeqConcPattern2Expr((Generic) vdm_CAST_pat);
  }
  if (!succ_4) {
    succ_4 = true;
    if (vdm_CAST_pat.IsRecord() && vdm_AS_RecordPattern == ((Record) vdm_CAST_pat).GetTag()) {
      Sequence e_l_25;
      for (int i_26 = 1; i_26 <= ((Record) vdm_CAST_pat).Length(); i_26++) 
        e_l_25.ImpAppend(((Record) vdm_CAST_pat).GetField(i_26));
      if (succ_4 = 3 == (Int) e_l_25.Length()) {}
    }
    else 
      succ_4 = false;
    if (succ_4) 
      varRes_3 = vdm_CAST_RecordPattern2Expr((Generic) vdm_CAST_pat);
  }
  if (!succ_4) {
    succ_4 = true;
    if (vdm_CAST_pat.IsRecord() && vdm_AS_TuplePattern == ((Record) vdm_CAST_pat).GetTag()) {
      Sequence e_l_28;
      for (int i_29 = 1; i_29 <= ((Record) vdm_CAST_pat).Length(); i_29++) 
        e_l_28.ImpAppend(((Record) vdm_CAST_pat).GetField(i_29));
      if (succ_4 = 2 == (Int) e_l_28.Length()) {}
    }
    else 
      succ_4 = false;
    if (succ_4) 
      varRes_3 = vdm_CAST_TuplePattern2Expr((Generic) vdm_CAST_pat);
  }
  if (!succ_4) 
    RunTime("Can not evaluate an undefined expression");
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_CAST_PatternName2Expr

TYPE_AS_Expr vdm_CAST_PatternName2Expr(const TYPE_AS_PatternName &var_1_1) {
  Int vdm_CAST_cid;
  Generic vdm_CAST_nm;
  bool succ_2 = true;
  if (var_1_1.IsRecord() && vdm_AS_PatternName == var_1_1.GetTag()) {
    Sequence e_l_9;
    for (int i_10 = 1; i_10 <= var_1_1.Length(); i_10++) 
      e_l_9.ImpAppend(var_1_1.GetField(i_10));
    if (succ_2 = 2 == (Int) e_l_9.Length()) {
      vdm_CAST_nm = (Generic) e_l_9.Hd();
      vdm_CAST_cid = (Generic) e_l_9[2];
    }
  }
  else 
    succ_2 = false;
  if (!succ_2) 
    RunTime("Pattern Match in Function Apply in function : PatternName2Expr failed");
  Record varRes_3;
  Generic tmpRE_5 = vdm_CAST_nm;
  if (vdm_CAST_nm.IsRecord()) {
    Record tmpRec_7 = tmpRE_5;
    int mu_6;
    if (tmpRec_7.Is(vdm_AS_OldName)) 
      mu_6 = pos_AS_OldName_cid;
    else 
      if (tmpRec_7.Is(vdm_AS_Name)) 
        mu_6 = pos_AS_Name_cid;
      else 
        RunTime("Unknown record field selector in record modifier expression");
    tmpRec_7.SetField(mu_6, vdm_CAST_cid);
    varRes_3 = tmpRec_7;
  }
  else 
    RunTime("A record was expected in record modifier expression");
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_CAST_pre_PatternName2Expr

Bool vdm_CAST_pre_PatternName2Expr(const TYPE_AS_PatternName &var_1_1) {
  Int vdm_CAST_cid;
  Generic vdm_CAST_nm;
  bool succ_2 = true;
  if (var_1_1.IsRecord() && vdm_AS_PatternName == var_1_1.GetTag()) {
    Sequence e_l_5;
    for (int i_6 = 1; i_6 <= var_1_1.Length(); i_6++) 
      e_l_5.ImpAppend(var_1_1.GetField(i_6));
    if (succ_2 = 2 == (Int) e_l_5.Length()) {
      vdm_CAST_nm = (Generic) e_l_5.Hd();
      vdm_CAST_cid = (Generic) e_l_5[2];
    }
  }
  else 
    succ_2 = false;
  if (!succ_2) 
    RunTime("Pattern Match in Function Apply in function : pre_PatternName2Expr failed");
  Bool varRes_3;
  if (vdm_CAST_nm.IsRecord()) 
    varRes_3 = vdm_AS_Name == ((Record) vdm_CAST_nm).GetTag();
  else 
    varRes_3 = false;
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_CAST_RecordPattern2Expr

TYPE_AS_RecordConstructorExpr vdm_CAST_RecordPattern2Expr(const TYPE_AS_RecordPattern &var_1_1) {
  Int vdm_CAST_cid;
  Sequence vdm_CAST_els;
  Record vdm_CAST_nm(vdm_AS_Name, length_AS_Name);
  bool succ_2 = true;
  if (var_1_1.IsRecord() && vdm_AS_RecordPattern == var_1_1.GetTag()) {
    Sequence e_l_25;
    for (int i_26 = 1; i_26 <= var_1_1.Length(); i_26++) 
      e_l_25.ImpAppend(var_1_1.GetField(i_26));
    if (succ_2 = 3 == (Int) e_l_25.Length()) {
      vdm_CAST_nm = (Generic) e_l_25.Hd();
      vdm_CAST_els = (Generic) e_l_25[2];
      vdm_CAST_cid = (Generic) e_l_25[3];
    }
  }
  else 
    succ_2 = false;
  if (!succ_2) 
    RunTime("Pattern Match in Function Apply in function : RecordPattern2Expr failed");
  Record varRes_3(vdm_AS_RecordConstructorExpr, length_AS_RecordConstructorExpr);
  {
    Sequence vdm_CAST_expr_uels;
    {
      Sequence res_l_6;
      Set resBind_s_8;
      Set riseq_12;
      int max_13 = (Int) vdm_CAST_els.Length();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.Insert((Int) i_14);
      resBind_s_8 = riseq_12;
      Sequence bind_l_7;
      if ((Int) resBind_s_8.Card() != (Int) 0) 
        bind_l_7 = Sort(resBind_s_8);
      bool succ_9 = true;
      Int vdm_CAST_i;
      Generic tmpe_20;
      for (int i_19 = bind_l_7.First(tmpe_20); i_19; i_19 = bind_l_7.Next(tmpe_20)) {
        Int e_10 = tmpe_20;
        vdm_CAST_i = e_10;
        if (succ_9) 
          res_l_6.ImpAppend(vdm_CAST_Pattern2Expr((Generic) (Record) vdm_CAST_els[vdm_CAST_i.GetValue()]));
      }
      vdm_CAST_expr_uels = res_l_6;
    }
    Record vdm_CAST_expr(vdm_AS_RecordConstructorExpr, length_AS_RecordConstructorExpr);
    vdm_CAST_expr = Record(vdm_AS_RecordConstructorExpr, length_AS_RecordConstructorExpr);
    vdm_CAST_expr.SetField(1, vdm_CAST_nm);
    vdm_CAST_expr.SetField(2, vdm_CAST_expr_uels);
    vdm_CAST_expr.SetField(3, vdm_CAST_cid);
    varRes_3 = vdm_CAST_expr;
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_CAST_SeqConcPattern2Expr

TYPE_AS_BinaryExpr vdm_CAST_SeqConcPattern2Expr(const TYPE_AS_SeqConcPattern &var_1_1) {
  Int vdm_CAST_cid;
  Record vdm_CAST_lp;
  Record vdm_CAST_rp;
  bool succ_2 = true;
  if (var_1_1.IsRecord() && vdm_AS_SeqConcPattern == var_1_1.GetTag()) {
    Sequence e_l_14;
    for (int i_15 = 1; i_15 <= var_1_1.Length(); i_15++) 
      e_l_14.ImpAppend(var_1_1.GetField(i_15));
    if (succ_2 = 3 == (Int) e_l_14.Length()) {
      vdm_CAST_lp = (Generic) e_l_14.Hd();
      vdm_CAST_rp = (Generic) e_l_14[2];
      vdm_CAST_cid = (Generic) e_l_14[3];
    }
  }
  else 
    succ_2 = false;
  if (!succ_2) 
    RunTime("Pattern Match in Function Apply in function : SeqConcPattern2Expr failed");
  Record varRes_3(vdm_AS_BinaryExpr, length_AS_BinaryExpr);
  {
    Record vdm_CAST_expr1 = vdm_CAST_Pattern2Expr((Generic) vdm_CAST_lp);
    Record vdm_CAST_expr2 = vdm_CAST_Pattern2Expr((Generic) vdm_CAST_rp);
    Record vdm_CAST_expr(vdm_AS_BinaryExpr, length_AS_BinaryExpr);
    vdm_CAST_expr = Record(vdm_AS_BinaryExpr, length_AS_BinaryExpr);
    vdm_CAST_expr.SetField(1, vdm_CAST_expr1);
    vdm_CAST_expr.SetField(2, (Quote) "SEQCONC");
    vdm_CAST_expr.SetField(3, vdm_CAST_expr2);
    vdm_CAST_expr.SetField(4, vdm_CAST_cid);
    varRes_3 = vdm_CAST_expr;
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_CAST_SeqEnumPattern2Expr

TYPE_AS_SeqEnumerationExpr vdm_CAST_SeqEnumPattern2Expr(const TYPE_AS_SeqEnumPattern &var_1_1) {
  Int vdm_CAST_cid;
  Sequence vdm_CAST_els;
  bool succ_2 = true;
  if (var_1_1.IsRecord() && vdm_AS_SeqEnumPattern == var_1_1.GetTag()) {
    Sequence e_l_24;
    for (int i_25 = 1; i_25 <= var_1_1.Length(); i_25++) 
      e_l_24.ImpAppend(var_1_1.GetField(i_25));
    if (succ_2 = 2 == (Int) e_l_24.Length()) {
      vdm_CAST_els = (Generic) e_l_24.Hd();
      vdm_CAST_cid = (Generic) e_l_24[2];
    }
  }
  else 
    succ_2 = false;
  if (!succ_2) 
    RunTime("Pattern Match in Function Apply in function : SeqEnumPattern2Expr failed");
  Record varRes_3(vdm_AS_SeqEnumerationExpr, length_AS_SeqEnumerationExpr);
  {
    Sequence vdm_CAST_expr_uels;
    {
      Sequence res_l_6;
      Set resBind_s_8;
      Set riseq_12;
      int max_13 = (Int) vdm_CAST_els.Length();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.Insert((Int) i_14);
      resBind_s_8 = riseq_12;
      Sequence bind_l_7;
      if ((Int) resBind_s_8.Card() != (Int) 0) 
        bind_l_7 = Sort(resBind_s_8);
      bool succ_9 = true;
      Int vdm_CAST_i;
      Generic tmpe_20;
      for (int i_19 = bind_l_7.First(tmpe_20); i_19; i_19 = bind_l_7.Next(tmpe_20)) {
        Int e_10 = tmpe_20;
        vdm_CAST_i = e_10;
        if (succ_9) 
          res_l_6.ImpAppend(vdm_CAST_Pattern2Expr((Generic) (Record) vdm_CAST_els[vdm_CAST_i.GetValue()]));
      }
      vdm_CAST_expr_uels = res_l_6;
    }
    Record vdm_CAST_expr(vdm_AS_SeqEnumerationExpr, length_AS_SeqEnumerationExpr);
    vdm_CAST_expr = Record(vdm_AS_SeqEnumerationExpr, length_AS_SeqEnumerationExpr);
    vdm_CAST_expr.SetField(1, vdm_CAST_expr_uels);
    vdm_CAST_expr.SetField(2, vdm_CAST_cid);
    varRes_3 = vdm_CAST_expr;
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_CAST_SetEnumPattern2Expr

TYPE_AS_SetEnumerationExpr vdm_CAST_SetEnumPattern2Expr(const TYPE_AS_SetEnumPattern &var_1_1) {
  Int vdm_CAST_cid;
  Sequence vdm_CAST_els;
  bool succ_2 = true;
  if (var_1_1.IsRecord() && vdm_AS_SetEnumPattern == var_1_1.GetTag()) {
    Sequence e_l_24;
    for (int i_25 = 1; i_25 <= var_1_1.Length(); i_25++) 
      e_l_24.ImpAppend(var_1_1.GetField(i_25));
    if (succ_2 = 2 == (Int) e_l_24.Length()) {
      vdm_CAST_els = (Generic) e_l_24.Hd();
      vdm_CAST_cid = (Generic) e_l_24[2];
    }
  }
  else 
    succ_2 = false;
  if (!succ_2) 
    RunTime("Pattern Match in Function Apply in function : SetEnumPattern2Expr failed");
  Record varRes_3(vdm_AS_SetEnumerationExpr, length_AS_SetEnumerationExpr);
  {
    Sequence vdm_CAST_expr_uels;
    {
      Sequence res_l_6;
      Set resBind_s_8;
      Set riseq_12;
      int max_13 = (Int) vdm_CAST_els.Length();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.Insert((Int) i_14);
      resBind_s_8 = riseq_12;
      Sequence bind_l_7;
      if ((Int) resBind_s_8.Card() != (Int) 0) 
        bind_l_7 = Sort(resBind_s_8);
      bool succ_9 = true;
      Int vdm_CAST_i;
      Generic tmpe_20;
      for (int i_19 = bind_l_7.First(tmpe_20); i_19; i_19 = bind_l_7.Next(tmpe_20)) {
        Int e_10 = tmpe_20;
        vdm_CAST_i = e_10;
        if (succ_9) 
          res_l_6.ImpAppend(vdm_CAST_Pattern2Expr((Generic) (Record) vdm_CAST_els[vdm_CAST_i.GetValue()]));
      }
      vdm_CAST_expr_uels = res_l_6;
    }
    Record vdm_CAST_expr(vdm_AS_SetEnumerationExpr, length_AS_SetEnumerationExpr);
    vdm_CAST_expr = Record(vdm_AS_SetEnumerationExpr, length_AS_SetEnumerationExpr);
    vdm_CAST_expr.SetField(1, vdm_CAST_expr_uels);
    vdm_CAST_expr.SetField(2, vdm_CAST_cid);
    varRes_3 = vdm_CAST_expr;
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_CAST_SetUnionPattern2Expr

TYPE_AS_BinaryExpr vdm_CAST_SetUnionPattern2Expr(const TYPE_AS_SetUnionPattern &var_1_1) {
  Int vdm_CAST_cid;
  Record vdm_CAST_lp;
  Record vdm_CAST_rp;
  bool succ_2 = true;
  if (var_1_1.IsRecord() && vdm_AS_SetUnionPattern == var_1_1.GetTag()) {
    Sequence e_l_14;
    for (int i_15 = 1; i_15 <= var_1_1.Length(); i_15++) 
      e_l_14.ImpAppend(var_1_1.GetField(i_15));
    if (succ_2 = 3 == (Int) e_l_14.Length()) {
      vdm_CAST_lp = (Generic) e_l_14.Hd();
      vdm_CAST_rp = (Generic) e_l_14[2];
      vdm_CAST_cid = (Generic) e_l_14[3];
    }
  }
  else 
    succ_2 = false;
  if (!succ_2) 
    RunTime("Pattern Match in Function Apply in function : SetUnionPattern2Expr failed");
  Record varRes_3(vdm_AS_BinaryExpr, length_AS_BinaryExpr);
  {
    Record vdm_CAST_expr1 = vdm_CAST_Pattern2Expr((Generic) vdm_CAST_lp);
    Record vdm_CAST_expr2 = vdm_CAST_Pattern2Expr((Generic) vdm_CAST_rp);
    Record vdm_CAST_expr(vdm_AS_BinaryExpr, length_AS_BinaryExpr);
    vdm_CAST_expr = Record(vdm_AS_BinaryExpr, length_AS_BinaryExpr);
    vdm_CAST_expr.SetField(1, vdm_CAST_expr1);
    vdm_CAST_expr.SetField(2, (Quote) "SETUNION");
    vdm_CAST_expr.SetField(3, vdm_CAST_expr2);
    vdm_CAST_expr.SetField(4, vdm_CAST_cid);
    varRes_3 = vdm_CAST_expr;
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_CAST_TuplePattern2Expr

TYPE_AS_TupleConstructorExpr vdm_CAST_TuplePattern2Expr(const TYPE_AS_TuplePattern &var_1_1) {
  Int vdm_CAST_cid;
  Sequence vdm_CAST_els;
  bool succ_2 = true;
  if (var_1_1.IsRecord() && vdm_AS_TuplePattern == var_1_1.GetTag()) {
    Sequence e_l_24;
    for (int i_25 = 1; i_25 <= var_1_1.Length(); i_25++) 
      e_l_24.ImpAppend(var_1_1.GetField(i_25));
    if (succ_2 = 2 == (Int) e_l_24.Length()) {
      vdm_CAST_els = (Generic) e_l_24.Hd();
      vdm_CAST_cid = (Generic) e_l_24[2];
    }
  }
  else 
    succ_2 = false;
  if (!succ_2) 
    RunTime("Pattern Match in Function Apply in function : TuplePattern2Expr failed");
  Record varRes_3(vdm_AS_TupleConstructorExpr, length_AS_TupleConstructorExpr);
  {
    Sequence vdm_CAST_expr_uels;
    {
      Sequence res_l_6;
      Set resBind_s_8;
      Set riseq_12;
      int max_13 = (Int) vdm_CAST_els.Length();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.Insert((Int) i_14);
      resBind_s_8 = riseq_12;
      Sequence bind_l_7;
      if ((Int) resBind_s_8.Card() != (Int) 0) 
        bind_l_7 = Sort(resBind_s_8);
      bool succ_9 = true;
      Int vdm_CAST_i;
      Generic tmpe_20;
      for (int i_19 = bind_l_7.First(tmpe_20); i_19; i_19 = bind_l_7.Next(tmpe_20)) {
        Int e_10 = tmpe_20;
        vdm_CAST_i = e_10;
        if (succ_9) 
          res_l_6.ImpAppend(vdm_CAST_Pattern2Expr((Generic) (Record) vdm_CAST_els[vdm_CAST_i.GetValue()]));
      }
      vdm_CAST_expr_uels = res_l_6;
    }
    Record vdm_CAST_expr(vdm_AS_TupleConstructorExpr, length_AS_TupleConstructorExpr);
    vdm_CAST_expr = Record(vdm_AS_TupleConstructorExpr, length_AS_TupleConstructorExpr);
    vdm_CAST_expr.SetField(1, vdm_CAST_expr_uels);
    vdm_CAST_expr.SetField(2, vdm_CAST_cid);
    varRes_3 = vdm_CAST_expr;
  }
  return (Generic) varRes_3;
}
#endif

