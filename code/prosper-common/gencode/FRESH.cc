//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Wed 03-Nov-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//



#include "FRESH.h"
static Int vdm_FRESH_next;

void TYPE_FRESH_FRESH::Init(Int p1) { SetField(1, p1); }

Int TYPE_FRESH_FRESH::get_next() const { return (Int) GetField(1); }

void TYPE_FRESH_FRESH::set_next(const Int &p) { SetField(1, p); }
static Int vdm_FRESH_GetNext();
static type_cL vdm_FRESH_Nat2str(const Int &);

void init_FRESH_VDMLib() {
  VDMGetDefaultRecInfoMap().NewTag(TOKEN, 1);
  VDMGetDefaultRecInfoMap().SetSymTag(TOKEN, "token");
}
#ifdef DEF_FRESH_USERIMPL

#include "FRESH_userimpl.cc"

#endif


void init_FRESH() {
  vdm_FRESH_next = (Int) 1;
  init_FRESH_VDMLib();
}
#ifndef DEF_FRESH_GetName

TYPE_AS_Name vdm_FRESH_GetName(const type_cL &vdm_FRESH_basename, const type_7AS_NameCS &vdm_FRESH_used_unames) {
  Record varRes_4(vdm_AS_Name, length_AS_Name);
  varRes_4 = Record(vdm_AS_Name, length_AS_Name);
  Sequence tmpVar_5;
  Sequence e_seq_6;
  Sequence var1_7;
  var1_7.ImpConc(vdm_FRESH_basename).ImpConc(Sequence("_"));
  e_seq_6.ImpConc(var1_7).ImpConc(vdm_FRESH_Nat2str((Generic) vdm_FRESH_GetNext()));
  tmpVar_5 = Sequence().ImpAppend(e_seq_6);
  varRes_4.SetField(1, tmpVar_5);
  varRes_4.SetField(2, vdm_CI_NilContextId);
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_FRESH_post_GetName

Bool vdm_FRESH_post_GetName(const type_cL &vdm_FRESH_basename, const type_7AS_NameCS &vdm_FRESH_used_unames, const TYPE_AS_Name &vdm_FRESH_RESULT) {
  Bool varRes_5;
  varRes_5 = !(Bool) vdm_FRESH_used_unames.InSet((Generic) vdm_FRESH_RESULT);
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_FRESH_GetNameList

type_7AS_NameCL vdm_FRESH_GetNameList(const type_cL &vdm_FRESH_bname, const Int &vdm_FRESH_num, const type_7AS_NameCS &vdm_FRESH_used_unames) {
  Sequence varRes_5;
  {
    Sequence res_l_6;
    Set resBind_s_8;
    resBind_s_8 = Set();
    int ubi_13 = vdm_FRESH_num.GetValue();
    for (int count_14 = ((Int) 1).GetValue(); count_14 <= ubi_13; count_14++) 
      resBind_s_8.Insert((Int) count_14);
    Sequence bind_l_7;
    if ((Int) resBind_s_8.Card() != (Int) 0) 
      bind_l_7 = Sort(resBind_s_8);
    bool succ_9 = true;
    Int vdm_FRESH_i;
    Generic tmpe_19;
    for (int i_18 = bind_l_7.First(tmpe_19); i_18; i_18 = bind_l_7.Next(tmpe_19)) {
      Int e_10 = tmpe_19;
      vdm_FRESH_i = e_10;
      if (succ_9) 
        res_l_6.ImpAppend(vdm_FRESH_GetName((Generic) vdm_FRESH_bname, (Generic) vdm_FRESH_used_unames));
    }
    varRes_5 = res_l_6;
  }
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_FRESH_post_GetNameList

Bool vdm_FRESH_post_GetNameList(const type_cL &vdm_FRESH_bname, const Int &vdm_FRESH_num, const type_7AS_NameCS &vdm_FRESH_used_unames, const type_7AS_NameCL &vdm_FRESH_RESULT) {
  Bool varRes_6;
{ if ((varRes_6 = (Bool) ((Int) vdm_FRESH_RESULT.Length() == vdm_FRESH_num)).GetValue()) {
   Bool var2_11;
   bool tmpQuant_12 = true;
   {
     bool succ_18 = true;
     Set e_set_19;     Set riseq_21;     int max_22 = (Int) vdm_FRESH_RESULT.Length();     for (int i_23 = 1; i_23 <= max_22; i_23++) 
       riseq_21.Insert((Int) i_23);     e_set_19 = riseq_21;
     Int vdm_FRESH_i;
     {
       Generic tmpe_26;
       for (int bb_25 = e_set_19.First(tmpe_26); bb_25 && tmpQuant_12; bb_25 = e_set_19.Next(tmpe_26)) {
         Int elem_24 = tmpe_26;
         succ_18 = true;         vdm_FRESH_i = elem_24;         if (succ_18) {
           Bool pred_13;
           pred_13 = !(Bool) vdm_FRESH_used_unames.InSet((Generic) (Record) vdm_FRESH_RESULT[vdm_FRESH_i.GetValue()]);
           if (pred_13.GetValue()) {}
           else 
             tmpQuant_12 = false;
         }
       }
     }
   }
   var2_11 = (Bool) tmpQuant_12;
   varRes_6 = var2_11;
 } }
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_FRESH_Nat2str

type_cL vdm_FRESH_Nat2str(const Int &vdm_FRESH_n) {
  Sequence varRes_3;
  {
    Int vdm_FRESH_d = (Int) (vdm_FRESH_n / (Int) 10);
    Int vdm_FRESH_r = vdm_FRESH_n - (Int) 10 * vdm_FRESH_d;
    Sequence vdm_FRESH_r_ustr;
    bool succ_14 = true;
    {
      succ_14 = true;
      if (vdm_FRESH_r != (Int) 0) 
        succ_14 = false;
      if (succ_14) 
        vdm_FRESH_r_ustr = Sequence("0");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_FRESH_r != (Int) 1) 
        succ_14 = false;
      if (succ_14) 
        vdm_FRESH_r_ustr = Sequence("1");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_FRESH_r != (Int) 2) 
        succ_14 = false;
      if (succ_14) 
        vdm_FRESH_r_ustr = Sequence("2");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_FRESH_r != (Int) 3) 
        succ_14 = false;
      if (succ_14) 
        vdm_FRESH_r_ustr = Sequence("3");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_FRESH_r != (Int) 4) 
        succ_14 = false;
      if (succ_14) 
        vdm_FRESH_r_ustr = Sequence("4");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_FRESH_r != (Int) 5) 
        succ_14 = false;
      if (succ_14) 
        vdm_FRESH_r_ustr = Sequence("5");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_FRESH_r != (Int) 6) 
        succ_14 = false;
      if (succ_14) 
        vdm_FRESH_r_ustr = Sequence("6");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_FRESH_r != (Int) 7) 
        succ_14 = false;
      if (succ_14) 
        vdm_FRESH_r_ustr = Sequence("7");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_FRESH_r != (Int) 8) 
        succ_14 = false;
      if (succ_14) 
        vdm_FRESH_r_ustr = Sequence("8");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_FRESH_r != (Int) 9) 
        succ_14 = false;
      if (succ_14) 
        vdm_FRESH_r_ustr = Sequence("9");
    }
    if (!succ_14) 
      RunTime("No \'others\' branch in CasesExpr");
    Sequence vdm_FRESH_d_ustr;
    if (((Bool) (vdm_FRESH_d == (Int) 0)).GetValue()) 
      vdm_FRESH_d_ustr = Sequence("");
    else 
      vdm_FRESH_d_ustr = vdm_FRESH_Nat2str((Generic) vdm_FRESH_d);
    varRes_3.ImpConc(vdm_FRESH_d_ustr).ImpConc(vdm_FRESH_r_ustr);
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_FRESH_GetNext

Int vdm_FRESH_GetNext() {
  vdm_FRESH_next = vdm_FRESH_next + (Int) 1;
  return (Generic) (vdm_FRESH_next - (Int) 1);
}
#endif

