//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Tue 12-Oct-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _PID_anonym_h
#define _PID_anonym_h

#include "PID_userdef.h"
#include "metaiv.h"
class type_FL;
class type_14AS_PatternNameCS;
class type_typevariableS;
class type_typevariableL;
#ifndef TAG_type_FL
#define TAG_type_FL (TAG_PID + 1)
#endif

#ifndef TAG_type_14AS_PatternNameCS
#define TAG_type_14AS_PatternNameCS (TAG_PID + 2)
#endif

#ifndef TAG_type_typevariableS
#define TAG_type_typevariableS (TAG_PID + 3)
#endif

#ifndef TAG_type_typevariableL
#define TAG_type_typevariableL (TAG_PID + 4)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "CI_uAUX_anonym.h"
#include "REP_anonym.h"
#ifndef DECL_type_FL
#define DECL_type_FL 1

class type_FL : public SEQ<Generic> {
public:

  type_FL() : SEQ<Generic>() {}

  type_FL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_FL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_FL"; }
} ;
#endif

#ifndef DECL_type_14AS_PatternNameCS
#define DECL_type_14AS_PatternNameCS 1

class type_14AS_PatternNameCS : public SET<TYPE_AS_PatternName> {
public:

  type_14AS_PatternNameCS() : SET<TYPE_AS_PatternName>() {}

  type_14AS_PatternNameCS(const SET<TYPE_AS_PatternName> &c) : SET<TYPE_AS_PatternName>(c) {}

  type_14AS_PatternNameCS(const Generic &c) : SET<TYPE_AS_PatternName>(c) {}

  const char * GetTypeName() const { return "type_14AS_PatternNameCS"; }
} ;
#endif

#ifndef DECL_type_typevariableS
#define DECL_type_typevariableS 1

class type_typevariableS : public SET<Generic> {
public:

  type_typevariableS() : SET<Generic>() {}

  type_typevariableS(const SET<Generic> &c) : SET<Generic>(c) {}

  type_typevariableS(const Generic &c) : SET<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableS"; }
} ;
#endif

#ifndef DECL_type_typevariableL
#define DECL_type_typevariableL 1

class type_typevariableL : public SEQ<Generic> {
public:

  type_typevariableL() : SEQ<Generic>() {}

  type_typevariableL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_typevariableL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableL"; }
} ;
#endif


#endif

