//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Fri 05-Nov-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//



#include "SPEC_uAST.h"
static Sequence vdm_SPEC_uAST_typeDefs;
static Sequence vdm_SPEC_uAST_fnDefs;

void TYPE_SPEC_uAST_SPEC::Init(type_7AS_NameCL p1, type_7AS_NameCL p2) {
  SetField(1, p1);
  SetField(2, p2);
}

type_7AS_NameCL TYPE_SPEC_uAST_SPEC::get_typeDefs() const { return (type_7AS_NameCL) GetField(1); }

void TYPE_SPEC_uAST_SPEC::set_typeDefs(const type_7AS_NameCL &p) { SetField(1, p); }

type_7AS_NameCL TYPE_SPEC_uAST_SPEC::get_fnDefs() const { return (type_7AS_NameCL) GetField(2); }

void TYPE_SPEC_uAST_SPEC::set_fnDefs(const type_7AS_NameCL &p) { SetField(2, p); }

void init_SPEC_uAST_VDMLib() {
  VDMGetDefaultRecInfoMap().NewTag(TOKEN, 1);
  VDMGetDefaultRecInfoMap().SetSymTag(TOKEN, "token");
}

#include "SPEC_uAST_userimpl.cc"


void init_SPEC_uAST() { init_SPEC_uAST_VDMLib(); }
#ifndef DEF_SPEC_uAST_post_GetAst

Bool vdm_SPEC_uAST_post_GetAst(const TYPE_AS_Module &vdm_SPEC_uAST_x) { return (Generic) (Bool) true; }
#endif

#ifndef DEF_SPEC_uAST_post_GetFnDef

Bool vdm_SPEC_uAST_post_GetFnDef(const TYPE_AS_Name &vdm_SPEC_uAST_nm, const TYPE_AS_FnDef &vdm_SPEC_uAST_fndef) {
  Bool varRes_4;
  Record var2_6;
  Map tmp_m_7;
  Generic tmpRec_8;
  if (vdm_SPEC_uAST_GetAst().Is(vdm_AS_Module)) 
    tmpRec_8 = vdm_SPEC_uAST_GetAst().GetField(pos_AS_Module_defs);
  else 
    RunTime("Unknown record field selector");
  if (tmpRec_8.IsRecord()) 
    if (((Record) tmpRec_8).Is(vdm_AS_Definitions)) 
      tmp_m_7 = ((Record) tmpRec_8).GetField(pos_AS_Definitions_fnm);
    else 
      RunTime("Unknown record field selector");
  else 
    RunTime("A record was expected");
  var2_6 = (Record) tmp_m_7[(Generic) vdm_SPEC_uAST_nm];
  varRes_4 = (Bool) (vdm_SPEC_uAST_fndef == var2_6);
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_SPEC_uAST_GetFnDefMap

type_7AS_NameCFM vdm_SPEC_uAST_GetFnDefMap() {
  Map varRes_2;
  Generic tmpRec_3;
  if (vdm_SPEC_uAST_GetAst().Is(vdm_AS_Module)) 
    tmpRec_3 = vdm_SPEC_uAST_GetAst().GetField(pos_AS_Module_defs);
  else 
    RunTime("Unknown record field selector");
  if (tmpRec_3.IsRecord()) 
    if (((Record) tmpRec_3).Is(vdm_AS_Definitions)) 
      varRes_2 = ((Record) tmpRec_3).GetField(pos_AS_Definitions_fnm);
    else 
      RunTime("Unknown record field selector");
  else 
    RunTime("A record was expected");
  return (Generic) varRes_2;
}
#endif

#ifndef DEF_SPEC_uAST_post_GetFnDefNames

Bool vdm_SPEC_uAST_post_GetFnDefNames(const type_7AS_NameCL &vdm_SPEC_uAST_fndefs) {
  Bool varRes_3;
  Sequence var2_5;
  Set par_6;
  Map unArg_7;
  Generic tmpRec_8;
  if (vdm_SPEC_uAST_GetAst().Is(vdm_AS_Module)) 
    tmpRec_8 = vdm_SPEC_uAST_GetAst().GetField(pos_AS_Module_defs);
  else 
    RunTime("Unknown record field selector");
  if (tmpRec_8.IsRecord()) 
    if (((Record) tmpRec_8).Is(vdm_AS_Definitions)) 
      unArg_7 = ((Record) tmpRec_8).GetField(pos_AS_Definitions_fnm);
    else 
      RunTime("Unknown record field selector");
  else 
    RunTime("A record was expected");
  par_6 = unArg_7.Dom();
  var2_5 = vdm_SPEC_uAST_SetToSeq((Generic) par_6);
  varRes_3 = (Bool) (vdm_SPEC_uAST_fndefs == var2_5);
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_SPEC_uAST_post_GetTypeDef

Bool vdm_SPEC_uAST_post_GetTypeDef(const TYPE_AS_Name &vdm_SPEC_uAST_nm, const TYPE_AS_TypeDef &vdm_SPEC_uAST_typedef) {
  Bool varRes_4;
  Record var2_6(vdm_AS_TypeDef, length_AS_TypeDef);
  Map tmp_m_7;
  Generic tmpRec_8;
  if (vdm_SPEC_uAST_GetAst().Is(vdm_AS_Module)) 
    tmpRec_8 = vdm_SPEC_uAST_GetAst().GetField(pos_AS_Module_defs);
  else 
    RunTime("Unknown record field selector");
  if (tmpRec_8.IsRecord()) 
    if (((Record) tmpRec_8).Is(vdm_AS_Definitions)) 
      tmp_m_7 = ((Record) tmpRec_8).GetField(pos_AS_Definitions_typem);
    else 
      RunTime("Unknown record field selector");
  else 
    RunTime("A record was expected");
  var2_6 = (Record) tmp_m_7[(Generic) vdm_SPEC_uAST_nm];
  varRes_4 = (Bool) (vdm_SPEC_uAST_typedef == var2_6);
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_SPEC_uAST_GetTypeDefMap

type_7AS_NameC10AS_TypeDefCM vdm_SPEC_uAST_GetTypeDefMap() {
  Map varRes_2;
  Generic tmpRec_3;
  if (vdm_SPEC_uAST_GetAst().Is(vdm_AS_Module)) 
    tmpRec_3 = vdm_SPEC_uAST_GetAst().GetField(pos_AS_Module_defs);
  else 
    RunTime("Unknown record field selector");
  if (tmpRec_3.IsRecord()) 
    if (((Record) tmpRec_3).Is(vdm_AS_Definitions)) 
      varRes_2 = ((Record) tmpRec_3).GetField(pos_AS_Definitions_typem);
    else 
      RunTime("Unknown record field selector");
  else 
    RunTime("A record was expected");
  return (Generic) varRes_2;
}
#endif

#ifndef DEF_SPEC_uAST_post_GetTypeDefNames

Bool vdm_SPEC_uAST_post_GetTypeDefNames(const type_7AS_NameCL &vdm_SPEC_uAST_tpdefs) {
  Bool varRes_3;
  Sequence var2_5;
  Set par_6;
  Map unArg_7;
  Generic tmpRec_8;
  if (vdm_SPEC_uAST_GetAst().Is(vdm_AS_Module)) 
    tmpRec_8 = vdm_SPEC_uAST_GetAst().GetField(pos_AS_Module_defs);
  else 
    RunTime("Unknown record field selector");
  if (tmpRec_8.IsRecord()) 
    if (((Record) tmpRec_8).Is(vdm_AS_Definitions)) 
      unArg_7 = ((Record) tmpRec_8).GetField(pos_AS_Definitions_typem);
    else 
      RunTime("Unknown record field selector");
  else 
    RunTime("A record was expected");
  par_6 = unArg_7.Dom();
  var2_5 = vdm_SPEC_uAST_SetToSeq((Generic) par_6);
  varRes_3 = (Bool) (vdm_SPEC_uAST_tpdefs == var2_5);
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_SPEC_uAST_post_GetValueDefSeq

Bool vdm_SPEC_uAST_post_GetValueDefSeq(const type_11AS_ValueDefCL &vdm_SPEC_uAST_valuem) {
  Bool varRes_3;
  Sequence var2_5;
  Generic tmpRec_6;
  if (vdm_SPEC_uAST_GetAst().Is(vdm_AS_Module)) 
    tmpRec_6 = vdm_SPEC_uAST_GetAst().GetField(pos_AS_Module_defs);
  else 
    RunTime("Unknown record field selector");
  if (tmpRec_6.IsRecord()) 
    if (((Record) tmpRec_6).Is(vdm_AS_Definitions)) 
      var2_5 = ((Record) tmpRec_6).GetField(pos_AS_Definitions_valuem);
    else 
      RunTime("Unknown record field selector");
  else 
    RunTime("A record was expected");
  varRes_3 = (Bool) (vdm_SPEC_uAST_valuem == var2_5);
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_SPEC_uAST_SetToSeq

type_typevariableL vdm_SPEC_uAST_SetToSeq(const type_typevariableS &vdm_SPEC_uAST_s) {
  Sequence varRes_3;
  if (((Bool) (vdm_SPEC_uAST_s == Set())).GetValue()) 
    varRes_3 = Sequence();
  else {
    Set tmpSet_8;
    tmpSet_8 = vdm_SPEC_uAST_s;
    Generic vdm_SPEC_uAST_x;
    bool succ_10 = false;
    Generic tmpe_13;
    for (int bb_12 = tmpSet_8.First(tmpe_13); bb_12 && !succ_10; bb_12 = tmpSet_8.Next(tmpe_13)) {
      Generic tmpElem_11 = tmpe_13;
      succ_10 = true;      vdm_SPEC_uAST_x = tmpElem_11;
    }
    if (!succ_10) 
      RunTime("The binding environment was empty");
    Sequence var1_14;
    Set par_15;
    Set var2_17;
    var2_17 = Set().Insert(vdm_SPEC_uAST_x);
    par_15 = vdm_SPEC_uAST_s;
    par_15.ImpDiff(var2_17);
    var1_14 = vdm_SPEC_uAST_SetToSeq((Generic) par_15);
    Sequence var2_19;
    var2_19 = Sequence().ImpAppend(vdm_SPEC_uAST_x);
    varRes_3.ImpConc(var1_14).ImpConc(var2_19);
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_SPEC_uAST_GetFnDefName

TYPE_SPEC_uAST_string vdm_SPEC_uAST_GetFnDefName(const Int &vdm_SPEC_uAST_index) { return (Generic) vdm_PP_uMEDIATOR_PrintName((Generic) (Record) vdm_SPEC_uAST_fnDefs[vdm_SPEC_uAST_index.GetValue()]); }
#endif

#ifndef DEF_SPEC_uAST_post_GetModuleName

Bool vdm_SPEC_uAST_post_GetModuleName(const TYPE_AS_Name &var_1_1, const TYPE_SPEC_uAST_SPEC &var_2_2, const TYPE_SPEC_uAST_SPEC &var_3_3) {
  Sequence vdm_SPEC_uAST_fnDefs;
  Record vdm_SPEC_uAST_nm(vdm_AS_Name, length_AS_Name);
  Sequence vdm_SPEC_uAST_typeDefs;
  Sequence _vdm_SPEC_uAST_fnDefs;
  Sequence _vdm_SPEC_uAST_typeDefs;
  bool succ_4 = true;
  vdm_SPEC_uAST_nm = var_1_1;
  if (var_2_2.IsRecord() && vdm_SPEC_uAST_SPEC == var_2_2.GetTag()) {
    Sequence e_l_9;
    for (int i_10 = 1; i_10 <= var_2_2.Length(); i_10++) 
      e_l_9.ImpAppend(var_2_2.GetField(i_10));
    if (succ_4 = 2 == (Int) e_l_9.Length()) {
      _vdm_SPEC_uAST_typeDefs = (Sequence) e_l_9.Hd();
      _vdm_SPEC_uAST_fnDefs = (Sequence) e_l_9[2];
    }
  }
  else 
    succ_4 = false;
  if (var_3_3.IsRecord() && vdm_SPEC_uAST_SPEC == var_3_3.GetTag()) {
    Sequence e_l_11;
    for (int i_12 = 1; i_12 <= var_3_3.Length(); i_12++) 
      e_l_11.ImpAppend(var_3_3.GetField(i_12));
    if (succ_4 = 2 == (Int) e_l_11.Length()) {
      vdm_SPEC_uAST_typeDefs = (Sequence) e_l_11.Hd();
      vdm_SPEC_uAST_fnDefs = (Sequence) e_l_11[2];
    }
  }
  else 
    succ_4 = false;
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : post_GetModuleName failed");
  Bool varRes_5;
  Record var2_7(vdm_AS_Name, length_AS_Name);
  if (vdm_SPEC_uAST_GetAst().Is(vdm_AS_Module)) 
    var2_7 = vdm_SPEC_uAST_GetAst().GetField(pos_AS_Module_nm);
  else 
    RunTime("Unknown record field selector");
  varRes_5 = (Bool) (vdm_SPEC_uAST_nm == var2_7);
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_SPEC_uAST_GetNumberOfFnDefs

Int vdm_SPEC_uAST_GetNumberOfFnDefs() { return (Generic) (Int) vdm_SPEC_uAST_fnDefs.Length(); }
#endif

#ifndef DEF_SPEC_uAST_GetNumberOfTypeDefs

Int vdm_SPEC_uAST_GetNumberOfTypeDefs() { return (Generic) (Int) vdm_SPEC_uAST_typeDefs.Length(); }
#endif

#ifndef DEF_SPEC_uAST_GetTypeDefName

TYPE_SPEC_uAST_string vdm_SPEC_uAST_GetTypeDefName(const Int &vdm_SPEC_uAST_index) { return (Generic) vdm_PP_uMEDIATOR_PrintName((Generic) (Record) vdm_SPEC_uAST_typeDefs[vdm_SPEC_uAST_index.GetValue()]); }
#endif

#ifndef DEF_SPEC_uAST_setup

void vdm_SPEC_uAST_setup() {
  vdm_SPEC_uAST_typeDefs = vdm_SPEC_uAST_GetTypeDefNames();
  vdm_SPEC_uAST_fnDefs = vdm_SPEC_uAST_GetFnDefNames();
}
#endif

