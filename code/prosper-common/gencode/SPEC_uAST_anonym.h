//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Fri 05-Nov-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _SPEC_uAST_anonym_h
#define _SPEC_uAST_anonym_h

#include "SPEC_uAST_userdef.h"
#include "metaiv.h"
class TYPE_SPEC_uAST_SPEC;
class type_7AS_NameCL;
class type_cL;
class type_7AS_NameCFM;
class type_7AS_NameC10AS_TypeDefCM;
class type_11AS_ValueDefCL;
class type_typevariableS;
class type_typevariableL;
#define TYPE_SPEC_uAST_string type_cL
#ifndef TAG_type_7AS_NameCL
#define TAG_type_7AS_NameCL (TAG_SPEC_uAST + 1)
#endif

#ifndef TAG_type_cL
#define TAG_type_cL (TAG_SPEC_uAST + 2)
#endif

#ifndef TAG_type_7AS_NameCFM
#define TAG_type_7AS_NameCFM (TAG_SPEC_uAST + 3)
#endif

#ifndef TAG_type_7AS_NameC10AS_TypeDefCM
#define TAG_type_7AS_NameC10AS_TypeDefCM (TAG_SPEC_uAST + 4)
#endif

#ifndef TAG_type_11AS_ValueDefCL
#define TAG_type_11AS_ValueDefCL (TAG_SPEC_uAST + 5)
#endif

#ifndef TAG_type_typevariableS
#define TAG_type_typevariableS (TAG_SPEC_uAST + 6)
#endif

#ifndef TAG_type_typevariableL
#define TAG_type_typevariableL (TAG_SPEC_uAST + 7)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "PP_uMEDIATOR_anonym.h"
#include "REP_anonym.h"
#ifndef TAG_TYPE_SPEC_uAST_SPEC
#define TAG_TYPE_SPEC_uAST_SPEC (TAG_SPEC_uAST + 8)
#endif

#ifndef DECL_type_7AS_NameCL
#define DECL_type_7AS_NameCL 1

class type_7AS_NameCL : public SEQ<TYPE_AS_Name> {
public:

  type_7AS_NameCL() : SEQ<TYPE_AS_Name>() {}

  type_7AS_NameCL(const SEQ<TYPE_AS_Name> &c) : SEQ<TYPE_AS_Name>(c) {}

  type_7AS_NameCL(const Generic &c) : SEQ<TYPE_AS_Name>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCL"; }
} ;
#endif

#ifndef DECL_type_cL
#define DECL_type_cL 1

class type_cL : public SEQ<Char> {
public:

  type_cL() : SEQ<Char>() {}

  type_cL(const SEQ<Char> &c) : SEQ<Char>(c) {}

  type_cL(const Generic &c) : SEQ<Char>(c) {}

  const char * GetTypeName() const { return "type_cL"; }
} ;
#endif

#ifndef DECL_type_7AS_NameCFM
#define DECL_type_7AS_NameCFM 1

class type_7AS_NameCFM : public MAP<TYPE_AS_Name,Generic> {
public:

  type_7AS_NameCFM() : MAP<TYPE_AS_Name,Generic>() {}

  type_7AS_NameCFM(const MAP<TYPE_AS_Name,Generic> &c) : MAP<TYPE_AS_Name,Generic>(c) {}

  type_7AS_NameCFM(const Generic &c) : MAP<TYPE_AS_Name,Generic>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCFM"; }
} ;
#endif

#ifndef DECL_type_7AS_NameC10AS_TypeDefCM
#define DECL_type_7AS_NameC10AS_TypeDefCM 1

class type_7AS_NameC10AS_TypeDefCM : public MAP<TYPE_AS_Name,TYPE_AS_TypeDef> {
public:

  type_7AS_NameC10AS_TypeDefCM() : MAP<TYPE_AS_Name,TYPE_AS_TypeDef>() {}

  type_7AS_NameC10AS_TypeDefCM(const MAP<TYPE_AS_Name,TYPE_AS_TypeDef> &c) : MAP<TYPE_AS_Name,TYPE_AS_TypeDef>(c) {}

  type_7AS_NameC10AS_TypeDefCM(const Generic &c) : MAP<TYPE_AS_Name,TYPE_AS_TypeDef>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameC10AS_TypeDefCM"; }
} ;
#endif

#ifndef DECL_type_11AS_ValueDefCL
#define DECL_type_11AS_ValueDefCL 1

class type_11AS_ValueDefCL : public SEQ<TYPE_AS_ValueDef> {
public:

  type_11AS_ValueDefCL() : SEQ<TYPE_AS_ValueDef>() {}

  type_11AS_ValueDefCL(const SEQ<TYPE_AS_ValueDef> &c) : SEQ<TYPE_AS_ValueDef>(c) {}

  type_11AS_ValueDefCL(const Generic &c) : SEQ<TYPE_AS_ValueDef>(c) {}

  const char * GetTypeName() const { return "type_11AS_ValueDefCL"; }
} ;
#endif

#ifndef DECL_type_typevariableS
#define DECL_type_typevariableS 1

class type_typevariableS : public SET<Generic> {
public:

  type_typevariableS() : SET<Generic>() {}

  type_typevariableS(const SET<Generic> &c) : SET<Generic>(c) {}

  type_typevariableS(const Generic &c) : SET<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableS"; }
} ;
#endif

#ifndef DECL_type_typevariableL
#define DECL_type_typevariableL 1

class type_typevariableL : public SEQ<Generic> {
public:

  type_typevariableL() : SEQ<Generic>() {}

  type_typevariableL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_typevariableL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableL"; }
} ;
#endif


#endif

