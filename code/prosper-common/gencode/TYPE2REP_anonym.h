//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Thu 25-Mar-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _TYPE2REP_anonym_h
#define _TYPE2REP_anonym_h

#include "TYPE2REP_userdef.h"
#include "metaiv.h"
class type_FS;
class type_8AS_FieldCL;
class type_12REP_FieldRepCL;
class type_FL;
#ifndef TAG_type_FS
#define TAG_type_FS (TAG_TYPE2REP + 1)
#endif

#ifndef TAG_type_8AS_FieldCL
#define TAG_type_8AS_FieldCL (TAG_TYPE2REP + 2)
#endif

#ifndef TAG_type_12REP_FieldRepCL
#define TAG_type_12REP_FieldRepCL (TAG_TYPE2REP + 3)
#endif

#ifndef TAG_type_FL
#define TAG_type_FL (TAG_TYPE2REP + 4)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "REP_anonym.h"
#ifndef DECL_type_FS
#define DECL_type_FS 1

class type_FS : public SET<Generic> {
public:

  type_FS() : SET<Generic>() {}

  type_FS(const SET<Generic> &c) : SET<Generic>(c) {}

  type_FS(const Generic &c) : SET<Generic>(c) {}

  const char * GetTypeName() const { return "type_FS"; }
} ;
#endif

#ifndef DECL_type_8AS_FieldCL
#define DECL_type_8AS_FieldCL 1

class type_8AS_FieldCL : public SEQ<TYPE_AS_Field> {
public:

  type_8AS_FieldCL() : SEQ<TYPE_AS_Field>() {}

  type_8AS_FieldCL(const SEQ<TYPE_AS_Field> &c) : SEQ<TYPE_AS_Field>(c) {}

  type_8AS_FieldCL(const Generic &c) : SEQ<TYPE_AS_Field>(c) {}

  const char * GetTypeName() const { return "type_8AS_FieldCL"; }
} ;
#endif

#ifndef DECL_type_12REP_FieldRepCL
#define DECL_type_12REP_FieldRepCL 1

class type_12REP_FieldRepCL : public SEQ<TYPE_REP_FieldRep> {
public:

  type_12REP_FieldRepCL() : SEQ<TYPE_REP_FieldRep>() {}

  type_12REP_FieldRepCL(const SEQ<TYPE_REP_FieldRep> &c) : SEQ<TYPE_REP_FieldRep>(c) {}

  type_12REP_FieldRepCL(const Generic &c) : SEQ<TYPE_REP_FieldRep>(c) {}

  const char * GetTypeName() const { return "type_12REP_FieldRepCL"; }
} ;
#endif

#ifndef DECL_type_FL
#define DECL_type_FL 1

class type_FL : public SEQ<Generic> {
public:

  type_FL() : SEQ<Generic>() {}

  type_FL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_FL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_FL"; }
} ;
#endif


#endif

