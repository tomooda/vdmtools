//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 05-Jul-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _CHECK_anonym_h
#define _CHECK_anonym_h

#include "CHECK_userdef.h"
#include "metaiv.h"
extern const Quote quote_Func;
extern const Quote quote_Map;
extern const Quote quote_MapFunc;
extern const Quote quote_Num;
extern const Quote quote_NumFunc;
extern const Quote quote_NumMap;
extern const Quote quote_NumMapFunc;
extern const Quote quote_Other;
extern const Quote quote_Seq;
extern const Quote quote_SeqFunc;
extern const Quote quote_SeqMap;
extern const Quote quote_SeqMapFunc;
extern const Quote quote_Set;
extern const Quote quote_NO_OVERLAP;
class type_7AS_NameCS;
class type_21POGTP_ProofObligationCL;
class type_FS;
class type_iS;
class type_US;
class type_15REP_TypeNameRepC15REP_TypeNameRepC2P;
class type_15REP_TypeNameRepC15REP_TypeNameRepC2PS;
class type_typevariableS;
class type_typevariableL;
class type_FL;
class type_21AS_RecordModificationCL;
#define TYPE_CHECK_TypeAbbrev Generic
#ifndef TAG_type_7AS_NameCS
#define TAG_type_7AS_NameCS (TAG_CHECK + 1)
#endif

#ifndef TAG_type_21POGTP_ProofObligationCL
#define TAG_type_21POGTP_ProofObligationCL (TAG_CHECK + 2)
#endif

#ifndef TAG_type_FS
#define TAG_type_FS (TAG_CHECK + 3)
#endif

#ifndef TAG_type_iS
#define TAG_type_iS (TAG_CHECK + 4)
#endif

#ifndef TAG_type_US
#define TAG_type_US (TAG_CHECK + 5)
#endif

#ifndef TAG_type_15REP_TypeNameRepC15REP_TypeNameRepC2P
#define TAG_type_15REP_TypeNameRepC15REP_TypeNameRepC2P (TAG_CHECK + 6)
#endif

#ifndef TAG_type_15REP_TypeNameRepC15REP_TypeNameRepC2PS
#define TAG_type_15REP_TypeNameRepC15REP_TypeNameRepC2PS (TAG_CHECK + 7)
#endif

#ifndef TAG_type_typevariableS
#define TAG_type_typevariableS (TAG_CHECK + 8)
#endif

#ifndef TAG_type_typevariableL
#define TAG_type_typevariableL (TAG_CHECK + 9)
#endif

#ifndef TAG_type_FL
#define TAG_type_FL (TAG_CHECK + 10)
#endif

#ifndef TAG_type_21AS_RecordModificationCL
#define TAG_type_21AS_RecordModificationCL (TAG_CHECK + 11)
#endif

#ifndef TAG_quote_Func
#define TAG_quote_Func (TAG_CHECK + 12)
#endif

#ifndef TAG_quote_Map
#define TAG_quote_Map (TAG_CHECK + 13)
#endif

#ifndef TAG_quote_MapFunc
#define TAG_quote_MapFunc (TAG_CHECK + 14)
#endif

#ifndef TAG_quote_Num
#define TAG_quote_Num (TAG_CHECK + 15)
#endif

#ifndef TAG_quote_NumFunc
#define TAG_quote_NumFunc (TAG_CHECK + 16)
#endif

#ifndef TAG_quote_NumMap
#define TAG_quote_NumMap (TAG_CHECK + 17)
#endif

#ifndef TAG_quote_NumMapFunc
#define TAG_quote_NumMapFunc (TAG_CHECK + 18)
#endif

#ifndef TAG_quote_Other
#define TAG_quote_Other (TAG_CHECK + 19)
#endif

#ifndef TAG_quote_Seq
#define TAG_quote_Seq (TAG_CHECK + 20)
#endif

#ifndef TAG_quote_SeqFunc
#define TAG_quote_SeqFunc (TAG_CHECK + 21)
#endif

#ifndef TAG_quote_SeqMap
#define TAG_quote_SeqMap (TAG_CHECK + 22)
#endif

#ifndef TAG_quote_SeqMapFunc
#define TAG_quote_SeqMapFunc (TAG_CHECK + 23)
#endif

#ifndef TAG_quote_Set
#define TAG_quote_Set (TAG_CHECK + 24)
#endif

#ifndef TAG_quote_NO_OVERLAP
#define TAG_quote_NO_OVERLAP (TAG_CHECK + 25)
#endif


#include "AS_anonym.h"
#include "CAST_anonym.h"
#include "CI_anonym.h"
#include "CI_uAUX_anonym.h"
#include "FRESH_anonym.h"
#include "GEN_uINV_anonym.h"
#include "GEN_uPO_anonym.h"
#include "POGTP_anonym.h"
#include "PURE_uPAT_anonym.h"
#include "REP_anonym.h"
#include "REP2TYPE_anonym.h"
#include "TYPE2REP_anonym.h"
#ifndef DECL_type_7AS_NameCS
#define DECL_type_7AS_NameCS 1

class type_7AS_NameCS : public SET<TYPE_AS_Name> {
public:

  type_7AS_NameCS() : SET<TYPE_AS_Name>() {}

  type_7AS_NameCS(const SET<TYPE_AS_Name> &c) : SET<TYPE_AS_Name>(c) {}

  type_7AS_NameCS(const Generic &c) : SET<TYPE_AS_Name>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCS"; }
} ;
#endif

#ifndef DECL_type_21POGTP_ProofObligationCL
#define DECL_type_21POGTP_ProofObligationCL 1

class type_21POGTP_ProofObligationCL : public SEQ<TYPE_POGTP_ProofObligation> {
public:

  type_21POGTP_ProofObligationCL() : SEQ<TYPE_POGTP_ProofObligation>() {}

  type_21POGTP_ProofObligationCL(const SEQ<TYPE_POGTP_ProofObligation> &c) : SEQ<TYPE_POGTP_ProofObligation>(c) {}

  type_21POGTP_ProofObligationCL(const Generic &c) : SEQ<TYPE_POGTP_ProofObligation>(c) {}

  const char * GetTypeName() const { return "type_21POGTP_ProofObligationCL"; }
} ;
#endif

#ifndef DECL_type_FS
#define DECL_type_FS 1

class type_FS : public SET<Generic> {
public:

  type_FS() : SET<Generic>() {}

  type_FS(const SET<Generic> &c) : SET<Generic>(c) {}

  type_FS(const Generic &c) : SET<Generic>(c) {}

  const char * GetTypeName() const { return "type_FS"; }
} ;
#endif

#ifndef DECL_type_iS
#define DECL_type_iS 1

class type_iS : public SET<Int> {
public:

  type_iS() : SET<Int>() {}

  type_iS(const SET<Int> &c) : SET<Int>(c) {}

  type_iS(const Generic &c) : SET<Int>(c) {}

  const char * GetTypeName() const { return "type_iS"; }
} ;
#endif

#ifndef DECL_type_US
#define DECL_type_US 1

class type_US : public SET<Generic> {
public:

  type_US() : SET<Generic>() {}

  type_US(const SET<Generic> &c) : SET<Generic>(c) {}

  type_US(const Generic &c) : SET<Generic>(c) {}

  const char * GetTypeName() const { return "type_US"; }
} ;
#endif

#ifndef DECL_type_15REP_TypeNameRepC15REP_TypeNameRepC2P
#define DECL_type_15REP_TypeNameRepC15REP_TypeNameRepC2P 1

class type_15REP_TypeNameRepC15REP_TypeNameRepC2P : public Tuple {
public:

  type_15REP_TypeNameRepC15REP_TypeNameRepC2P() : Tuple(2) {}
  void Init(TYPE_REP_TypeNameRep p2, TYPE_REP_TypeNameRep p3);

  type_15REP_TypeNameRepC15REP_TypeNameRepC2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_15REP_TypeNameRepC15REP_TypeNameRepC2P"; }
  TYPE_REP_TypeNameRep get_1() const;
  void set_1(const TYPE_REP_TypeNameRep &p);
  TYPE_REP_TypeNameRep get_2() const;
  void set_2(const TYPE_REP_TypeNameRep &p);
} ;
#endif

#ifndef DECL_type_15REP_TypeNameRepC15REP_TypeNameRepC2PS
#define DECL_type_15REP_TypeNameRepC15REP_TypeNameRepC2PS 1

class type_15REP_TypeNameRepC15REP_TypeNameRepC2PS : public SET<type_15REP_TypeNameRepC15REP_TypeNameRepC2P> {
public:

  type_15REP_TypeNameRepC15REP_TypeNameRepC2PS() : SET<type_15REP_TypeNameRepC15REP_TypeNameRepC2P>() {}

  type_15REP_TypeNameRepC15REP_TypeNameRepC2PS(const SET<type_15REP_TypeNameRepC15REP_TypeNameRepC2P> &c) : SET<type_15REP_TypeNameRepC15REP_TypeNameRepC2P>(c) {}

  type_15REP_TypeNameRepC15REP_TypeNameRepC2PS(const Generic &c) : SET<type_15REP_TypeNameRepC15REP_TypeNameRepC2P>(c) {}

  const char * GetTypeName() const { return "type_15REP_TypeNameRepC15REP_TypeNameRepC2PS"; }
} ;
#endif

#ifndef DECL_type_typevariableS
#define DECL_type_typevariableS 1

class type_typevariableS : public SET<Generic> {
public:

  type_typevariableS() : SET<Generic>() {}

  type_typevariableS(const SET<Generic> &c) : SET<Generic>(c) {}

  type_typevariableS(const Generic &c) : SET<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableS"; }
} ;
#endif

#ifndef DECL_type_typevariableL
#define DECL_type_typevariableL 1

class type_typevariableL : public SEQ<Generic> {
public:

  type_typevariableL() : SEQ<Generic>() {}

  type_typevariableL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_typevariableL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableL"; }
} ;
#endif

#ifndef DECL_type_FL
#define DECL_type_FL 1

class type_FL : public SEQ<Generic> {
public:

  type_FL() : SEQ<Generic>() {}

  type_FL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_FL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_FL"; }
} ;
#endif

#ifndef DECL_type_21AS_RecordModificationCL
#define DECL_type_21AS_RecordModificationCL 1

class type_21AS_RecordModificationCL : public SEQ<TYPE_AS_RecordModification> {
public:

  type_21AS_RecordModificationCL() : SEQ<TYPE_AS_RecordModification>() {}

  type_21AS_RecordModificationCL(const SEQ<TYPE_AS_RecordModification> &c) : SEQ<TYPE_AS_RecordModification>(c) {}

  type_21AS_RecordModificationCL(const Generic &c) : SEQ<TYPE_AS_RecordModification>(c) {}

  const char * GetTypeName() const { return "type_21AS_RecordModificationCL"; }
} ;
#endif


#endif

