//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Thu 25-Nov-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _GEN_uPO_anonym_h
#define _GEN_uPO_anonym_h

#include "GEN_uPO_userdef.h"
#include "metaiv.h"
extern const Quote quote_CasesExpr;
extern const Quote quote_DInter;
extern const Quote quote_Division;
extern const Quote quote_ExistsUnique;
extern const Quote quote_FiniteMap;
extern const Quote quote_FiniteSet;
extern const Quote quote_FlatType;
extern const Quote quote_FuncComp;
extern const Quote quote_FuncIteration;
extern const Quote quote_FunctionApplication;
extern const Quote quote_FunctionPatterns;
extern const Quote quote_IntDivision;
extern const Quote quote_Invariants;
extern const Quote quote_LetBeStExpr;
extern const Quote quote_MapApplication;
extern const Quote quote_MapCompatible;
extern const Quote quote_MapComposition;
extern const Quote quote_MapComprehension;
extern const Quote quote_MapDistributedMerge;
extern const Quote quote_MapEnumeration;
extern const Quote quote_MapInverse;
extern const Quote quote_MapIteration;
extern const Quote quote_MapMerge;
extern const Quote quote_MapSeqOfCompatible;
extern const Quote quote_MapSetOfCompatible;
extern const Quote quote_Modulus;
extern const Quote quote_NonEmptySeq;
extern const Quote quote_NonEmptySet;
extern const Quote quote_NonEndoIteration;
extern const Quote quote_NonZero;
extern const Quote quote_OperationSat;
extern const Quote quote_PatternBinding;
extern const Quote quote_PostCondition;
extern const Quote quote_Remainder;
extern const Quote quote_Satisfiability;
extern const Quote quote_SeqApplication;
extern const Quote quote_SeqComprehension;
extern const Quote quote_SeqHead;
extern const Quote quote_SeqModification;
extern const Quote quote_SeqTail;
extern const Quote quote_SetComprehension;
extern const Quote quote_Subtype;
extern const Quote quote_TupleSelect;
extern const Quote quote_ValueBinding;
class type_cL;
class type_FL;
class type_7AS_NameCS;
class type_typevariableS;
class type_typevariableL;
class type_21POGTP_ProofObligationCL;
class type_11AS_CaseAltnCL;
class type_FLL;
class type_15AS_MultTypeBindCL;
class type_9AS_MapletCL;
#ifndef TAG_type_cL
#define TAG_type_cL (TAG_GEN_uPO + 1)
#endif

#ifndef TAG_type_FL
#define TAG_type_FL (TAG_GEN_uPO + 2)
#endif

#ifndef TAG_type_7AS_NameCS
#define TAG_type_7AS_NameCS (TAG_GEN_uPO + 3)
#endif

#ifndef TAG_type_typevariableS
#define TAG_type_typevariableS (TAG_GEN_uPO + 4)
#endif

#ifndef TAG_type_typevariableL
#define TAG_type_typevariableL (TAG_GEN_uPO + 5)
#endif

#ifndef TAG_type_21POGTP_ProofObligationCL
#define TAG_type_21POGTP_ProofObligationCL (TAG_GEN_uPO + 6)
#endif

#ifndef TAG_type_11AS_CaseAltnCL
#define TAG_type_11AS_CaseAltnCL (TAG_GEN_uPO + 7)
#endif

#ifndef TAG_type_FLL
#define TAG_type_FLL (TAG_GEN_uPO + 8)
#endif

#ifndef TAG_type_15AS_MultTypeBindCL
#define TAG_type_15AS_MultTypeBindCL (TAG_GEN_uPO + 9)
#endif

#ifndef TAG_type_9AS_MapletCL
#define TAG_type_9AS_MapletCL (TAG_GEN_uPO + 10)
#endif

#ifndef TAG_quote_CasesExpr
#define TAG_quote_CasesExpr (TAG_GEN_uPO + 11)
#endif

#ifndef TAG_quote_DInter
#define TAG_quote_DInter (TAG_GEN_uPO + 12)
#endif

#ifndef TAG_quote_Division
#define TAG_quote_Division (TAG_GEN_uPO + 13)
#endif

#ifndef TAG_quote_ExistsUnique
#define TAG_quote_ExistsUnique (TAG_GEN_uPO + 14)
#endif

#ifndef TAG_quote_FiniteMap
#define TAG_quote_FiniteMap (TAG_GEN_uPO + 15)
#endif

#ifndef TAG_quote_FiniteSet
#define TAG_quote_FiniteSet (TAG_GEN_uPO + 16)
#endif

#ifndef TAG_quote_FlatType
#define TAG_quote_FlatType (TAG_GEN_uPO + 17)
#endif

#ifndef TAG_quote_FuncComp
#define TAG_quote_FuncComp (TAG_GEN_uPO + 18)
#endif

#ifndef TAG_quote_FuncIteration
#define TAG_quote_FuncIteration (TAG_GEN_uPO + 19)
#endif

#ifndef TAG_quote_FunctionApplication
#define TAG_quote_FunctionApplication (TAG_GEN_uPO + 20)
#endif

#ifndef TAG_quote_FunctionPatterns
#define TAG_quote_FunctionPatterns (TAG_GEN_uPO + 21)
#endif

#ifndef TAG_quote_IntDivision
#define TAG_quote_IntDivision (TAG_GEN_uPO + 22)
#endif

#ifndef TAG_quote_Invariants
#define TAG_quote_Invariants (TAG_GEN_uPO + 23)
#endif

#ifndef TAG_quote_LetBeStExpr
#define TAG_quote_LetBeStExpr (TAG_GEN_uPO + 24)
#endif

#ifndef TAG_quote_MapApplication
#define TAG_quote_MapApplication (TAG_GEN_uPO + 25)
#endif

#ifndef TAG_quote_MapCompatible
#define TAG_quote_MapCompatible (TAG_GEN_uPO + 26)
#endif

#ifndef TAG_quote_MapComposition
#define TAG_quote_MapComposition (TAG_GEN_uPO + 27)
#endif

#ifndef TAG_quote_MapComprehension
#define TAG_quote_MapComprehension (TAG_GEN_uPO + 28)
#endif

#ifndef TAG_quote_MapDistributedMerge
#define TAG_quote_MapDistributedMerge (TAG_GEN_uPO + 29)
#endif

#ifndef TAG_quote_MapEnumeration
#define TAG_quote_MapEnumeration (TAG_GEN_uPO + 30)
#endif

#ifndef TAG_quote_MapInverse
#define TAG_quote_MapInverse (TAG_GEN_uPO + 31)
#endif

#ifndef TAG_quote_MapIteration
#define TAG_quote_MapIteration (TAG_GEN_uPO + 32)
#endif

#ifndef TAG_quote_MapMerge
#define TAG_quote_MapMerge (TAG_GEN_uPO + 33)
#endif

#ifndef TAG_quote_MapSeqOfCompatible
#define TAG_quote_MapSeqOfCompatible (TAG_GEN_uPO + 34)
#endif

#ifndef TAG_quote_MapSetOfCompatible
#define TAG_quote_MapSetOfCompatible (TAG_GEN_uPO + 35)
#endif

#ifndef TAG_quote_Modulus
#define TAG_quote_Modulus (TAG_GEN_uPO + 36)
#endif

#ifndef TAG_quote_NonEmptySeq
#define TAG_quote_NonEmptySeq (TAG_GEN_uPO + 37)
#endif

#ifndef TAG_quote_NonEmptySet
#define TAG_quote_NonEmptySet (TAG_GEN_uPO + 38)
#endif

#ifndef TAG_quote_NonEndoIteration
#define TAG_quote_NonEndoIteration (TAG_GEN_uPO + 39)
#endif

#ifndef TAG_quote_NonZero
#define TAG_quote_NonZero (TAG_GEN_uPO + 40)
#endif

#ifndef TAG_quote_OperationSat
#define TAG_quote_OperationSat (TAG_GEN_uPO + 41)
#endif

#ifndef TAG_quote_PatternBinding
#define TAG_quote_PatternBinding (TAG_GEN_uPO + 42)
#endif

#ifndef TAG_quote_PostCondition
#define TAG_quote_PostCondition (TAG_GEN_uPO + 43)
#endif

#ifndef TAG_quote_Remainder
#define TAG_quote_Remainder (TAG_GEN_uPO + 44)
#endif

#ifndef TAG_quote_Satisfiability
#define TAG_quote_Satisfiability (TAG_GEN_uPO + 45)
#endif

#ifndef TAG_quote_SeqApplication
#define TAG_quote_SeqApplication (TAG_GEN_uPO + 46)
#endif

#ifndef TAG_quote_SeqComprehension
#define TAG_quote_SeqComprehension (TAG_GEN_uPO + 47)
#endif

#ifndef TAG_quote_SeqHead
#define TAG_quote_SeqHead (TAG_GEN_uPO + 48)
#endif

#ifndef TAG_quote_SeqModification
#define TAG_quote_SeqModification (TAG_GEN_uPO + 49)
#endif

#ifndef TAG_quote_SeqTail
#define TAG_quote_SeqTail (TAG_GEN_uPO + 50)
#endif

#ifndef TAG_quote_SetComprehension
#define TAG_quote_SetComprehension (TAG_GEN_uPO + 51)
#endif

#ifndef TAG_quote_Subtype
#define TAG_quote_Subtype (TAG_GEN_uPO + 52)
#endif

#ifndef TAG_quote_TupleSelect
#define TAG_quote_TupleSelect (TAG_GEN_uPO + 53)
#endif

#ifndef TAG_quote_ValueBinding
#define TAG_quote_ValueBinding (TAG_GEN_uPO + 54)
#endif


#include "AS_anonym.h"
#include "CAST_anonym.h"
#include "CHECK_anonym.h"
#include "CI_anonym.h"
#include "CI_uAUX_anonym.h"
#include "CON_uENV_anonym.h"
#include "FRESH_anonym.h"
#include "POGTP_anonym.h"
#include "PURE_uPAT_anonym.h"
#include "REP_anonym.h"
#ifndef DECL_type_cL
#define DECL_type_cL 1

class type_cL : public SEQ<Char> {
public:

  type_cL() : SEQ<Char>() {}

  type_cL(const SEQ<Char> &c) : SEQ<Char>(c) {}

  type_cL(const Generic &c) : SEQ<Char>(c) {}

  const char * GetTypeName() const { return "type_cL"; }
} ;
#endif

#ifndef DECL_type_FL
#define DECL_type_FL 1

class type_FL : public SEQ<Generic> {
public:

  type_FL() : SEQ<Generic>() {}

  type_FL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_FL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_FL"; }
} ;
#endif

#ifndef DECL_type_7AS_NameCS
#define DECL_type_7AS_NameCS 1

class type_7AS_NameCS : public SET<TYPE_AS_Name> {
public:

  type_7AS_NameCS() : SET<TYPE_AS_Name>() {}

  type_7AS_NameCS(const SET<TYPE_AS_Name> &c) : SET<TYPE_AS_Name>(c) {}

  type_7AS_NameCS(const Generic &c) : SET<TYPE_AS_Name>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCS"; }
} ;
#endif

#ifndef DECL_type_typevariableS
#define DECL_type_typevariableS 1

class type_typevariableS : public SET<Generic> {
public:

  type_typevariableS() : SET<Generic>() {}

  type_typevariableS(const SET<Generic> &c) : SET<Generic>(c) {}

  type_typevariableS(const Generic &c) : SET<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableS"; }
} ;
#endif

#ifndef DECL_type_typevariableL
#define DECL_type_typevariableL 1

class type_typevariableL : public SEQ<Generic> {
public:

  type_typevariableL() : SEQ<Generic>() {}

  type_typevariableL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_typevariableL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableL"; }
} ;
#endif

#ifndef DECL_type_21POGTP_ProofObligationCL
#define DECL_type_21POGTP_ProofObligationCL 1

class type_21POGTP_ProofObligationCL : public SEQ<TYPE_POGTP_ProofObligation> {
public:

  type_21POGTP_ProofObligationCL() : SEQ<TYPE_POGTP_ProofObligation>() {}

  type_21POGTP_ProofObligationCL(const SEQ<TYPE_POGTP_ProofObligation> &c) : SEQ<TYPE_POGTP_ProofObligation>(c) {}

  type_21POGTP_ProofObligationCL(const Generic &c) : SEQ<TYPE_POGTP_ProofObligation>(c) {}

  const char * GetTypeName() const { return "type_21POGTP_ProofObligationCL"; }
} ;
#endif

#ifndef DECL_type_11AS_CaseAltnCL
#define DECL_type_11AS_CaseAltnCL 1

class type_11AS_CaseAltnCL : public SEQ<TYPE_AS_CaseAltn> {
public:

  type_11AS_CaseAltnCL() : SEQ<TYPE_AS_CaseAltn>() {}

  type_11AS_CaseAltnCL(const SEQ<TYPE_AS_CaseAltn> &c) : SEQ<TYPE_AS_CaseAltn>(c) {}

  type_11AS_CaseAltnCL(const Generic &c) : SEQ<TYPE_AS_CaseAltn>(c) {}

  const char * GetTypeName() const { return "type_11AS_CaseAltnCL"; }
} ;
#endif

#ifndef DECL_type_FLL
#define DECL_type_FLL 1

class type_FLL : public SEQ<type_FL> {
public:

  type_FLL() : SEQ<type_FL>() {}

  type_FLL(const SEQ<type_FL> &c) : SEQ<type_FL>(c) {}

  type_FLL(const Generic &c) : SEQ<type_FL>(c) {}

  const char * GetTypeName() const { return "type_FLL"; }
} ;
#endif

#ifndef DECL_type_15AS_MultTypeBindCL
#define DECL_type_15AS_MultTypeBindCL 1

class type_15AS_MultTypeBindCL : public SEQ<TYPE_AS_MultTypeBind> {
public:

  type_15AS_MultTypeBindCL() : SEQ<TYPE_AS_MultTypeBind>() {}

  type_15AS_MultTypeBindCL(const SEQ<TYPE_AS_MultTypeBind> &c) : SEQ<TYPE_AS_MultTypeBind>(c) {}

  type_15AS_MultTypeBindCL(const Generic &c) : SEQ<TYPE_AS_MultTypeBind>(c) {}

  const char * GetTypeName() const { return "type_15AS_MultTypeBindCL"; }
} ;
#endif

#ifndef DECL_type_9AS_MapletCL
#define DECL_type_9AS_MapletCL 1

class type_9AS_MapletCL : public SEQ<TYPE_AS_Maplet> {
public:

  type_9AS_MapletCL() : SEQ<TYPE_AS_Maplet>() {}

  type_9AS_MapletCL(const SEQ<TYPE_AS_Maplet> &c) : SEQ<TYPE_AS_Maplet>(c) {}

  type_9AS_MapletCL(const Generic &c) : SEQ<TYPE_AS_Maplet>(c) {}

  const char * GetTypeName() const { return "type_9AS_MapletCL"; }
} ;
#endif


#endif

