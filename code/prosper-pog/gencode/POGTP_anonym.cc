//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Thu 25-Mar-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//



#include "POGTP_userdef.h"
#include "metaiv.h"
#include "POGTP.h"
#include "AS.h"
#include "CI.h"
#include "CI_uAUX.h"
#include "REP.h"
#if !DEF_quote_CasesExpr && DECL_quote_CasesExpr
#define DEF_quote_CasesExpr 1
const Quote quote_CasesExpr("CasesExpr");
#endif

#if !DEF_quote_DInter && DECL_quote_DInter
#define DEF_quote_DInter 1
const Quote quote_DInter("DInter");
#endif

#if !DEF_quote_Division && DECL_quote_Division
#define DEF_quote_Division 1
const Quote quote_Division("Division");
#endif

#if !DEF_quote_ExistsUnique && DECL_quote_ExistsUnique
#define DEF_quote_ExistsUnique 1
const Quote quote_ExistsUnique("ExistsUnique");
#endif

#if !DEF_quote_FiniteMap && DECL_quote_FiniteMap
#define DEF_quote_FiniteMap 1
const Quote quote_FiniteMap("FiniteMap");
#endif

#if !DEF_quote_FiniteSet && DECL_quote_FiniteSet
#define DEF_quote_FiniteSet 1
const Quote quote_FiniteSet("FiniteSet");
#endif

#if !DEF_quote_FlatType && DECL_quote_FlatType
#define DEF_quote_FlatType 1
const Quote quote_FlatType("FlatType");
#endif

#if !DEF_quote_FuncComp && DECL_quote_FuncComp
#define DEF_quote_FuncComp 1
const Quote quote_FuncComp("FuncComp");
#endif

#if !DEF_quote_FuncIteration && DECL_quote_FuncIteration
#define DEF_quote_FuncIteration 1
const Quote quote_FuncIteration("FuncIteration");
#endif

#if !DEF_quote_FunctionApplication && DECL_quote_FunctionApplication
#define DEF_quote_FunctionApplication 1
const Quote quote_FunctionApplication("FunctionApplication");
#endif

#if !DEF_quote_FunctionPatterns && DECL_quote_FunctionPatterns
#define DEF_quote_FunctionPatterns 1
const Quote quote_FunctionPatterns("FunctionPatterns");
#endif

#if !DEF_quote_IntDivision && DECL_quote_IntDivision
#define DEF_quote_IntDivision 1
const Quote quote_IntDivision("IntDivision");
#endif

#if !DEF_quote_Invariants && DECL_quote_Invariants
#define DEF_quote_Invariants 1
const Quote quote_Invariants("Invariants");
#endif

#if !DEF_quote_LetBeStExpr && DECL_quote_LetBeStExpr
#define DEF_quote_LetBeStExpr 1
const Quote quote_LetBeStExpr("LetBeStExpr");
#endif

#if !DEF_quote_MapApplication && DECL_quote_MapApplication
#define DEF_quote_MapApplication 1
const Quote quote_MapApplication("MapApplication");
#endif

#if !DEF_quote_MapCompatible && DECL_quote_MapCompatible
#define DEF_quote_MapCompatible 1
const Quote quote_MapCompatible("MapCompatible");
#endif

#if !DEF_quote_MapComposition && DECL_quote_MapComposition
#define DEF_quote_MapComposition 1
const Quote quote_MapComposition("MapComposition");
#endif

#if !DEF_quote_MapComprehension && DECL_quote_MapComprehension
#define DEF_quote_MapComprehension 1
const Quote quote_MapComprehension("MapComprehension");
#endif

#if !DEF_quote_MapDistributedMerge && DECL_quote_MapDistributedMerge
#define DEF_quote_MapDistributedMerge 1
const Quote quote_MapDistributedMerge("MapDistributedMerge");
#endif

#if !DEF_quote_MapEnumeration && DECL_quote_MapEnumeration
#define DEF_quote_MapEnumeration 1
const Quote quote_MapEnumeration("MapEnumeration");
#endif

#if !DEF_quote_MapInverse && DECL_quote_MapInverse
#define DEF_quote_MapInverse 1
const Quote quote_MapInverse("MapInverse");
#endif

#if !DEF_quote_MapIteration && DECL_quote_MapIteration
#define DEF_quote_MapIteration 1
const Quote quote_MapIteration("MapIteration");
#endif

#if !DEF_quote_MapMerge && DECL_quote_MapMerge
#define DEF_quote_MapMerge 1
const Quote quote_MapMerge("MapMerge");
#endif

#if !DEF_quote_MapSeqOfCompatible && DECL_quote_MapSeqOfCompatible
#define DEF_quote_MapSeqOfCompatible 1
const Quote quote_MapSeqOfCompatible("MapSeqOfCompatible");
#endif

#if !DEF_quote_MapSetOfCompatible && DECL_quote_MapSetOfCompatible
#define DEF_quote_MapSetOfCompatible 1
const Quote quote_MapSetOfCompatible("MapSetOfCompatible");
#endif

#if !DEF_quote_Modulus && DECL_quote_Modulus
#define DEF_quote_Modulus 1
const Quote quote_Modulus("Modulus");
#endif

#if !DEF_quote_NonEmptySeq && DECL_quote_NonEmptySeq
#define DEF_quote_NonEmptySeq 1
const Quote quote_NonEmptySeq("NonEmptySeq");
#endif

#if !DEF_quote_NonEmptySet && DECL_quote_NonEmptySet
#define DEF_quote_NonEmptySet 1
const Quote quote_NonEmptySet("NonEmptySet");
#endif

#if !DEF_quote_NonEndoIteration && DECL_quote_NonEndoIteration
#define DEF_quote_NonEndoIteration 1
const Quote quote_NonEndoIteration("NonEndoIteration");
#endif

#if !DEF_quote_NonZero && DECL_quote_NonZero
#define DEF_quote_NonZero 1
const Quote quote_NonZero("NonZero");
#endif

#if !DEF_quote_OperationSat && DECL_quote_OperationSat
#define DEF_quote_OperationSat 1
const Quote quote_OperationSat("OperationSat");
#endif

#if !DEF_quote_PatternBinding && DECL_quote_PatternBinding
#define DEF_quote_PatternBinding 1
const Quote quote_PatternBinding("PatternBinding");
#endif

#if !DEF_quote_PostCondition && DECL_quote_PostCondition
#define DEF_quote_PostCondition 1
const Quote quote_PostCondition("PostCondition");
#endif

#if !DEF_quote_Remainder && DECL_quote_Remainder
#define DEF_quote_Remainder 1
const Quote quote_Remainder("Remainder");
#endif

#if !DEF_quote_Satisfiability && DECL_quote_Satisfiability
#define DEF_quote_Satisfiability 1
const Quote quote_Satisfiability("Satisfiability");
#endif

#if !DEF_quote_SeqApplication && DECL_quote_SeqApplication
#define DEF_quote_SeqApplication 1
const Quote quote_SeqApplication("SeqApplication");
#endif

#if !DEF_quote_SeqComprehension && DECL_quote_SeqComprehension
#define DEF_quote_SeqComprehension 1
const Quote quote_SeqComprehension("SeqComprehension");
#endif

#if !DEF_quote_SeqHead && DECL_quote_SeqHead
#define DEF_quote_SeqHead 1
const Quote quote_SeqHead("SeqHead");
#endif

#if !DEF_quote_SeqModification && DECL_quote_SeqModification
#define DEF_quote_SeqModification 1
const Quote quote_SeqModification("SeqModification");
#endif

#if !DEF_quote_SeqTail && DECL_quote_SeqTail
#define DEF_quote_SeqTail 1
const Quote quote_SeqTail("SeqTail");
#endif

#if !DEF_quote_SetComprehension && DECL_quote_SetComprehension
#define DEF_quote_SetComprehension 1
const Quote quote_SetComprehension("SetComprehension");
#endif

#if !DEF_quote_Subtype && DECL_quote_Subtype
#define DEF_quote_Subtype 1
const Quote quote_Subtype("Subtype");
#endif

#if !DEF_quote_TupleSelect && DECL_quote_TupleSelect
#define DEF_quote_TupleSelect 1
const Quote quote_TupleSelect("TupleSelect");
#endif

#if !DEF_quote_ValueBinding && DECL_quote_ValueBinding
#define DEF_quote_ValueBinding 1
const Quote quote_ValueBinding("ValueBinding");
#endif

#if !DEF_quote_conjectures && DECL_quote_conjectures
#define DEF_quote_conjectures 1
const Quote quote_conjectures("conjectures");
#endif

#if !DEF_quote_expression && DECL_quote_expression
#define DEF_quote_expression 1
const Quote quote_expression("expression");
#endif

#if !DEF_quote_functions && DECL_quote_functions
#define DEF_quote_functions 1
const Quote quote_functions("functions");
#endif

#if !DEF_quote_operations && DECL_quote_operations
#define DEF_quote_operations 1
const Quote quote_operations("operations");
#endif

#if !DEF_quote_types && DECL_quote_types
#define DEF_quote_types 1
const Quote quote_types("types");
#endif

#if !DEF_quote_values && DECL_quote_values
#define DEF_quote_values 1
const Quote quote_values("values");
#endif

#if !DEF_type_FF2P && DECL_type_FF2P
#define DEF_type_FF2P 1

void type_FF2P::Init(TYPE_AS_PatternBind p1, TYPE_AS_Expr p2) {
  SetField(1, p1);
  SetField(2, p2);
}

TYPE_AS_PatternBind type_FF2P::get_1() const { return (TYPE_AS_PatternBind) GetField(1); }

void type_FF2P::set_1(const TYPE_AS_PatternBind &p) { SetField(1, p); }

TYPE_AS_Expr type_FF2P::get_2() const { return (TYPE_AS_Expr) GetField(2); }

void type_FF2P::set_2(const TYPE_AS_Expr &p) { SetField(2, p); }
#endif

