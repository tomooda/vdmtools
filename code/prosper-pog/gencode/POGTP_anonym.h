//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Thu 25-Mar-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _POGTP_anonym_h
#define _POGTP_anonym_h

#include "POGTP_userdef.h"
#include "metaiv.h"
extern const Quote quote_CasesExpr;
extern const Quote quote_DInter;
extern const Quote quote_Division;
extern const Quote quote_ExistsUnique;
extern const Quote quote_FiniteMap;
extern const Quote quote_FiniteSet;
extern const Quote quote_FlatType;
extern const Quote quote_FuncComp;
extern const Quote quote_FuncIteration;
extern const Quote quote_FunctionApplication;
extern const Quote quote_FunctionPatterns;
extern const Quote quote_IntDivision;
extern const Quote quote_Invariants;
extern const Quote quote_LetBeStExpr;
extern const Quote quote_MapApplication;
extern const Quote quote_MapCompatible;
extern const Quote quote_MapComposition;
extern const Quote quote_MapComprehension;
extern const Quote quote_MapDistributedMerge;
extern const Quote quote_MapEnumeration;
extern const Quote quote_MapInverse;
extern const Quote quote_MapIteration;
extern const Quote quote_MapMerge;
extern const Quote quote_MapSeqOfCompatible;
extern const Quote quote_MapSetOfCompatible;
extern const Quote quote_Modulus;
extern const Quote quote_NonEmptySeq;
extern const Quote quote_NonEmptySet;
extern const Quote quote_NonEndoIteration;
extern const Quote quote_NonZero;
extern const Quote quote_OperationSat;
extern const Quote quote_PatternBinding;
extern const Quote quote_PostCondition;
extern const Quote quote_Remainder;
extern const Quote quote_Satisfiability;
extern const Quote quote_SeqApplication;
extern const Quote quote_SeqComprehension;
extern const Quote quote_SeqHead;
extern const Quote quote_SeqModification;
extern const Quote quote_SeqTail;
extern const Quote quote_SetComprehension;
extern const Quote quote_Subtype;
extern const Quote quote_TupleSelect;
extern const Quote quote_ValueBinding;
extern const Quote quote_conjectures;
extern const Quote quote_expression;
extern const Quote quote_functions;
extern const Quote quote_operations;
extern const Quote quote_types;
extern const Quote quote_values;
class TYPE_POGTP_Context;
class TYPE_POGTP_LocContext;
class TYPE_POGTP_ProofObligation;
class type_FL;
class type_FF2P;
class type_7AS_NameCL;
#define TYPE_POGTP_LocClassification Generic
#define TYPE_POGTP_ExprContext Generic
#define TYPE_POGTP_Classification Generic
#ifndef TAG_type_FL
#define TAG_type_FL (TAG_POGTP + 1)
#endif

#ifndef TAG_type_FF2P
#define TAG_type_FF2P (TAG_POGTP + 2)
#endif

#ifndef TAG_type_7AS_NameCL
#define TAG_type_7AS_NameCL (TAG_POGTP + 3)
#endif

#ifndef TAG_quote_CasesExpr
#define TAG_quote_CasesExpr (TAG_POGTP + 4)
#endif

#ifndef TAG_quote_DInter
#define TAG_quote_DInter (TAG_POGTP + 5)
#endif

#ifndef TAG_quote_Division
#define TAG_quote_Division (TAG_POGTP + 6)
#endif

#ifndef TAG_quote_ExistsUnique
#define TAG_quote_ExistsUnique (TAG_POGTP + 7)
#endif

#ifndef TAG_quote_FiniteMap
#define TAG_quote_FiniteMap (TAG_POGTP + 8)
#endif

#ifndef TAG_quote_FiniteSet
#define TAG_quote_FiniteSet (TAG_POGTP + 9)
#endif

#ifndef TAG_quote_FlatType
#define TAG_quote_FlatType (TAG_POGTP + 10)
#endif

#ifndef TAG_quote_FuncComp
#define TAG_quote_FuncComp (TAG_POGTP + 11)
#endif

#ifndef TAG_quote_FuncIteration
#define TAG_quote_FuncIteration (TAG_POGTP + 12)
#endif

#ifndef TAG_quote_FunctionApplication
#define TAG_quote_FunctionApplication (TAG_POGTP + 13)
#endif

#ifndef TAG_quote_FunctionPatterns
#define TAG_quote_FunctionPatterns (TAG_POGTP + 14)
#endif

#ifndef TAG_quote_IntDivision
#define TAG_quote_IntDivision (TAG_POGTP + 15)
#endif

#ifndef TAG_quote_Invariants
#define TAG_quote_Invariants (TAG_POGTP + 16)
#endif

#ifndef TAG_quote_LetBeStExpr
#define TAG_quote_LetBeStExpr (TAG_POGTP + 17)
#endif

#ifndef TAG_quote_MapApplication
#define TAG_quote_MapApplication (TAG_POGTP + 18)
#endif

#ifndef TAG_quote_MapCompatible
#define TAG_quote_MapCompatible (TAG_POGTP + 19)
#endif

#ifndef TAG_quote_MapComposition
#define TAG_quote_MapComposition (TAG_POGTP + 20)
#endif

#ifndef TAG_quote_MapComprehension
#define TAG_quote_MapComprehension (TAG_POGTP + 21)
#endif

#ifndef TAG_quote_MapDistributedMerge
#define TAG_quote_MapDistributedMerge (TAG_POGTP + 22)
#endif

#ifndef TAG_quote_MapEnumeration
#define TAG_quote_MapEnumeration (TAG_POGTP + 23)
#endif

#ifndef TAG_quote_MapInverse
#define TAG_quote_MapInverse (TAG_POGTP + 24)
#endif

#ifndef TAG_quote_MapIteration
#define TAG_quote_MapIteration (TAG_POGTP + 25)
#endif

#ifndef TAG_quote_MapMerge
#define TAG_quote_MapMerge (TAG_POGTP + 26)
#endif

#ifndef TAG_quote_MapSeqOfCompatible
#define TAG_quote_MapSeqOfCompatible (TAG_POGTP + 27)
#endif

#ifndef TAG_quote_MapSetOfCompatible
#define TAG_quote_MapSetOfCompatible (TAG_POGTP + 28)
#endif

#ifndef TAG_quote_Modulus
#define TAG_quote_Modulus (TAG_POGTP + 29)
#endif

#ifndef TAG_quote_NonEmptySeq
#define TAG_quote_NonEmptySeq (TAG_POGTP + 30)
#endif

#ifndef TAG_quote_NonEmptySet
#define TAG_quote_NonEmptySet (TAG_POGTP + 31)
#endif

#ifndef TAG_quote_NonEndoIteration
#define TAG_quote_NonEndoIteration (TAG_POGTP + 32)
#endif

#ifndef TAG_quote_NonZero
#define TAG_quote_NonZero (TAG_POGTP + 33)
#endif

#ifndef TAG_quote_OperationSat
#define TAG_quote_OperationSat (TAG_POGTP + 34)
#endif

#ifndef TAG_quote_PatternBinding
#define TAG_quote_PatternBinding (TAG_POGTP + 35)
#endif

#ifndef TAG_quote_PostCondition
#define TAG_quote_PostCondition (TAG_POGTP + 36)
#endif

#ifndef TAG_quote_Remainder
#define TAG_quote_Remainder (TAG_POGTP + 37)
#endif

#ifndef TAG_quote_Satisfiability
#define TAG_quote_Satisfiability (TAG_POGTP + 38)
#endif

#ifndef TAG_quote_SeqApplication
#define TAG_quote_SeqApplication (TAG_POGTP + 39)
#endif

#ifndef TAG_quote_SeqComprehension
#define TAG_quote_SeqComprehension (TAG_POGTP + 40)
#endif

#ifndef TAG_quote_SeqHead
#define TAG_quote_SeqHead (TAG_POGTP + 41)
#endif

#ifndef TAG_quote_SeqModification
#define TAG_quote_SeqModification (TAG_POGTP + 42)
#endif

#ifndef TAG_quote_SeqTail
#define TAG_quote_SeqTail (TAG_POGTP + 43)
#endif

#ifndef TAG_quote_SetComprehension
#define TAG_quote_SetComprehension (TAG_POGTP + 44)
#endif

#ifndef TAG_quote_Subtype
#define TAG_quote_Subtype (TAG_POGTP + 45)
#endif

#ifndef TAG_quote_TupleSelect
#define TAG_quote_TupleSelect (TAG_POGTP + 46)
#endif

#ifndef TAG_quote_ValueBinding
#define TAG_quote_ValueBinding (TAG_POGTP + 47)
#endif

#ifndef TAG_quote_conjectures
#define TAG_quote_conjectures (TAG_POGTP + 48)
#endif

#ifndef TAG_quote_expression
#define TAG_quote_expression (TAG_POGTP + 49)
#endif

#ifndef TAG_quote_functions
#define TAG_quote_functions (TAG_POGTP + 50)
#endif

#ifndef TAG_quote_operations
#define TAG_quote_operations (TAG_POGTP + 51)
#endif

#ifndef TAG_quote_types
#define TAG_quote_types (TAG_POGTP + 52)
#endif

#ifndef TAG_quote_values
#define TAG_quote_values (TAG_POGTP + 53)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "CI_uAUX_anonym.h"
#include "REP_anonym.h"
#ifndef TAG_TYPE_POGTP_Context
#define TAG_TYPE_POGTP_Context (TAG_POGTP + 54)
#endif

#ifndef TAG_TYPE_POGTP_LocContext
#define TAG_TYPE_POGTP_LocContext (TAG_POGTP + 55)
#endif

#ifndef TAG_TYPE_POGTP_ProofObligation
#define TAG_TYPE_POGTP_ProofObligation (TAG_POGTP + 56)
#endif

#ifndef DECL_type_FL
#define DECL_type_FL 1

class type_FL : public SEQ<Generic> {
public:

  type_FL() : SEQ<Generic>() {}

  type_FL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_FL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_FL"; }
} ;
#endif

#ifndef DECL_type_FF2P
#define DECL_type_FF2P 1

class type_FF2P : public Tuple {
public:

  type_FF2P() : Tuple(2) {}
  void Init(TYPE_AS_PatternBind p2, TYPE_AS_Expr p3);

  type_FF2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_FF2P"; }
  TYPE_AS_PatternBind get_1() const;
  void set_1(const TYPE_AS_PatternBind &p);
  TYPE_AS_Expr get_2() const;
  void set_2(const TYPE_AS_Expr &p);
} ;
#endif

#ifndef DECL_type_7AS_NameCL
#define DECL_type_7AS_NameCL 1

class type_7AS_NameCL : public SEQ<TYPE_AS_Name> {
public:

  type_7AS_NameCL() : SEQ<TYPE_AS_Name>() {}

  type_7AS_NameCL(const SEQ<TYPE_AS_Name> &c) : SEQ<TYPE_AS_Name>(c) {}

  type_7AS_NameCL(const Generic &c) : SEQ<TYPE_AS_Name>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCL"; }
} ;
#endif


#endif

