//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Fri 22-Oct-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _POG_uDEF_anonym_h
#define _POG_uDEF_anonym_h

#include "POG_uDEF_userdef.h"
#include "metaiv.h"
class type_21POGTP_ProofObligationCL;
class type_FL;
class type_12POG_uPAT_POGC13POGTP_ContextC2P;
class type_FLL;
class type_FLLF2P;
class type_typevariableS;
class type_typevariableL;
#ifndef TAG_type_21POGTP_ProofObligationCL
#define TAG_type_21POGTP_ProofObligationCL (TAG_POG_uDEF + 1)
#endif

#ifndef TAG_type_FL
#define TAG_type_FL (TAG_POG_uDEF + 2)
#endif

#ifndef TAG_type_12POG_uPAT_POGC13POGTP_ContextC2P
#define TAG_type_12POG_uPAT_POGC13POGTP_ContextC2P (TAG_POG_uDEF + 3)
#endif

#ifndef TAG_type_FLL
#define TAG_type_FLL (TAG_POG_uDEF + 4)
#endif

#ifndef TAG_type_FLLF2P
#define TAG_type_FLLF2P (TAG_POG_uDEF + 5)
#endif

#ifndef TAG_type_typevariableS
#define TAG_type_typevariableS (TAG_POG_uDEF + 6)
#endif

#ifndef TAG_type_typevariableL
#define TAG_type_typevariableL (TAG_POG_uDEF + 7)
#endif


#include "AS_anonym.h"
#include "CHECK_anonym.h"
#include "CI_anonym.h"
#include "GEN_uPO_anonym.h"
#include "POGTP_anonym.h"
#include "POG_uEXPR_anonym.h"
#include "POG_uPAT_anonym.h"
#include "REP_anonym.h"
#ifndef DECL_type_21POGTP_ProofObligationCL
#define DECL_type_21POGTP_ProofObligationCL 1

class type_21POGTP_ProofObligationCL : public SEQ<TYPE_POGTP_ProofObligation> {
public:

  type_21POGTP_ProofObligationCL() : SEQ<TYPE_POGTP_ProofObligation>() {}

  type_21POGTP_ProofObligationCL(const SEQ<TYPE_POGTP_ProofObligation> &c) : SEQ<TYPE_POGTP_ProofObligation>(c) {}

  type_21POGTP_ProofObligationCL(const Generic &c) : SEQ<TYPE_POGTP_ProofObligation>(c) {}

  const char * GetTypeName() const { return "type_21POGTP_ProofObligationCL"; }
} ;
#endif

#ifndef DECL_type_FL
#define DECL_type_FL 1

class type_FL : public SEQ<Generic> {
public:

  type_FL() : SEQ<Generic>() {}

  type_FL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_FL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_FL"; }
} ;
#endif

#ifndef DECL_type_12POG_uPAT_POGC13POGTP_ContextC2P
#define DECL_type_12POG_uPAT_POGC13POGTP_ContextC2P 1

class type_12POG_uPAT_POGC13POGTP_ContextC2P : public Tuple {
public:

  type_12POG_uPAT_POGC13POGTP_ContextC2P() : Tuple(2) {}
  void Init(TYPE_POG_uPAT_POG p2, TYPE_POGTP_Context p3);

  type_12POG_uPAT_POGC13POGTP_ContextC2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_12POG_uPAT_POGC13POGTP_ContextC2P"; }
  TYPE_POG_uPAT_POG get_1() const;
  void set_1(const TYPE_POG_uPAT_POG &p);
  TYPE_POGTP_Context get_2() const;
  void set_2(const TYPE_POGTP_Context &p);
} ;
#endif

#ifndef DECL_type_FLL
#define DECL_type_FLL 1

class type_FLL : public SEQ<type_FL> {
public:

  type_FLL() : SEQ<type_FL>() {}

  type_FLL(const SEQ<type_FL> &c) : SEQ<type_FL>(c) {}

  type_FLL(const Generic &c) : SEQ<type_FL>(c) {}

  const char * GetTypeName() const { return "type_FLL"; }
} ;
#endif

#ifndef DECL_type_FLLF2P
#define DECL_type_FLLF2P 1

class type_FLLF2P : public Tuple {
public:

  type_FLLF2P() : Tuple(2) {}
  void Init(type_FLL p2, TYPE_AS_Type p3);

  type_FLLF2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_FLLF2P"; }
  type_FLL get_1() const;
  void set_1(const type_FLL &p);
  TYPE_AS_Type get_2() const;
  void set_2(const TYPE_AS_Type &p);
} ;
#endif

#ifndef DECL_type_typevariableS
#define DECL_type_typevariableS 1

class type_typevariableS : public SET<Generic> {
public:

  type_typevariableS() : SET<Generic>() {}

  type_typevariableS(const SET<Generic> &c) : SET<Generic>(c) {}

  type_typevariableS(const Generic &c) : SET<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableS"; }
} ;
#endif

#ifndef DECL_type_typevariableL
#define DECL_type_typevariableL 1

class type_typevariableL : public SEQ<Generic> {
public:

  type_typevariableL() : SEQ<Generic>() {}

  type_typevariableL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_typevariableL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableL"; }
} ;
#endif


#endif

