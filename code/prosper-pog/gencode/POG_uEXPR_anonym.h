//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 05-Jul-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _POG_uEXPR_anonym_h
#define _POG_uEXPR_anonym_h

#include "POG_uEXPR_userdef.h"
#include "metaiv.h"
class TYPE_POG_uEXPR_POG;
class type_21POGTP_ProofObligationCL;
class type_7AS_NameCS;
class type_11AS_CaseAltnCL;
class type_13POGTP_ContextCL;
class type_13POGTP_ContextCLL;
class type_13AS_ElseifExprCL;
class type_FL;
#ifndef TAG_type_21POGTP_ProofObligationCL
#define TAG_type_21POGTP_ProofObligationCL (TAG_POG_uEXPR + 1)
#endif

#ifndef TAG_type_7AS_NameCS
#define TAG_type_7AS_NameCS (TAG_POG_uEXPR + 2)
#endif

#ifndef TAG_type_11AS_CaseAltnCL
#define TAG_type_11AS_CaseAltnCL (TAG_POG_uEXPR + 3)
#endif

#ifndef TAG_type_13POGTP_ContextCL
#define TAG_type_13POGTP_ContextCL (TAG_POG_uEXPR + 4)
#endif

#ifndef TAG_type_13POGTP_ContextCLL
#define TAG_type_13POGTP_ContextCLL (TAG_POG_uEXPR + 5)
#endif

#ifndef TAG_type_13AS_ElseifExprCL
#define TAG_type_13AS_ElseifExprCL (TAG_POG_uEXPR + 6)
#endif

#ifndef TAG_type_FL
#define TAG_type_FL (TAG_POG_uEXPR + 7)
#endif


#include "AS_anonym.h"
#include "CAST_anonym.h"
#include "CHECK_anonym.h"
#include "CI_anonym.h"
#include "CI_uAUX_anonym.h"
#include "GEN_uPO_anonym.h"
#include "POGTP_anonym.h"
#include "POG_uDEF_anonym.h"
#include "POG_uPAT_anonym.h"
#include "PURE_uPAT_anonym.h"
#include "REP_anonym.h"
#ifndef TAG_TYPE_POG_uEXPR_POG
#define TAG_TYPE_POG_uEXPR_POG (TAG_POG_uEXPR + 8)
#endif

#ifndef DECL_type_21POGTP_ProofObligationCL
#define DECL_type_21POGTP_ProofObligationCL 1

class type_21POGTP_ProofObligationCL : public SEQ<TYPE_POGTP_ProofObligation> {
public:

  type_21POGTP_ProofObligationCL() : SEQ<TYPE_POGTP_ProofObligation>() {}

  type_21POGTP_ProofObligationCL(const SEQ<TYPE_POGTP_ProofObligation> &c) : SEQ<TYPE_POGTP_ProofObligation>(c) {}

  type_21POGTP_ProofObligationCL(const Generic &c) : SEQ<TYPE_POGTP_ProofObligation>(c) {}

  const char * GetTypeName() const { return "type_21POGTP_ProofObligationCL"; }
} ;
#endif

#ifndef DECL_type_7AS_NameCS
#define DECL_type_7AS_NameCS 1

class type_7AS_NameCS : public SET<TYPE_AS_Name> {
public:

  type_7AS_NameCS() : SET<TYPE_AS_Name>() {}

  type_7AS_NameCS(const SET<TYPE_AS_Name> &c) : SET<TYPE_AS_Name>(c) {}

  type_7AS_NameCS(const Generic &c) : SET<TYPE_AS_Name>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCS"; }
} ;
#endif

#ifndef DECL_type_11AS_CaseAltnCL
#define DECL_type_11AS_CaseAltnCL 1

class type_11AS_CaseAltnCL : public SEQ<TYPE_AS_CaseAltn> {
public:

  type_11AS_CaseAltnCL() : SEQ<TYPE_AS_CaseAltn>() {}

  type_11AS_CaseAltnCL(const SEQ<TYPE_AS_CaseAltn> &c) : SEQ<TYPE_AS_CaseAltn>(c) {}

  type_11AS_CaseAltnCL(const Generic &c) : SEQ<TYPE_AS_CaseAltn>(c) {}

  const char * GetTypeName() const { return "type_11AS_CaseAltnCL"; }
} ;
#endif

#ifndef DECL_type_13POGTP_ContextCL
#define DECL_type_13POGTP_ContextCL 1

class type_13POGTP_ContextCL : public SEQ<TYPE_POGTP_Context> {
public:

  type_13POGTP_ContextCL() : SEQ<TYPE_POGTP_Context>() {}

  type_13POGTP_ContextCL(const SEQ<TYPE_POGTP_Context> &c) : SEQ<TYPE_POGTP_Context>(c) {}

  type_13POGTP_ContextCL(const Generic &c) : SEQ<TYPE_POGTP_Context>(c) {}

  const char * GetTypeName() const { return "type_13POGTP_ContextCL"; }
} ;
#endif

#ifndef DECL_type_13POGTP_ContextCLL
#define DECL_type_13POGTP_ContextCLL 1

class type_13POGTP_ContextCLL : public SEQ<type_13POGTP_ContextCL> {
public:

  type_13POGTP_ContextCLL() : SEQ<type_13POGTP_ContextCL>() {}

  type_13POGTP_ContextCLL(const SEQ<type_13POGTP_ContextCL> &c) : SEQ<type_13POGTP_ContextCL>(c) {}

  type_13POGTP_ContextCLL(const Generic &c) : SEQ<type_13POGTP_ContextCL>(c) {}

  const char * GetTypeName() const { return "type_13POGTP_ContextCLL"; }
} ;
#endif

#ifndef DECL_type_13AS_ElseifExprCL
#define DECL_type_13AS_ElseifExprCL 1

class type_13AS_ElseifExprCL : public SEQ<TYPE_AS_ElseifExpr> {
public:

  type_13AS_ElseifExprCL() : SEQ<TYPE_AS_ElseifExpr>() {}

  type_13AS_ElseifExprCL(const SEQ<TYPE_AS_ElseifExpr> &c) : SEQ<TYPE_AS_ElseifExpr>(c) {}

  type_13AS_ElseifExprCL(const Generic &c) : SEQ<TYPE_AS_ElseifExpr>(c) {}

  const char * GetTypeName() const { return "type_13AS_ElseifExprCL"; }
} ;
#endif

#ifndef DECL_type_FL
#define DECL_type_FL 1

class type_FL : public SEQ<Generic> {
public:

  type_FL() : SEQ<Generic>() {}

  type_FL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_FL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_FL"; }
} ;
#endif


#endif

