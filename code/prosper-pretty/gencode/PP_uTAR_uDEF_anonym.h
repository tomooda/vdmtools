//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 11-Oct-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _PP_uTAR_uDEF_anonym_h
#define _PP_uTAR_uDEF_anonym_h

#include "PP_uTAR_uDEF_userdef.h"
#include "metaiv.h"
extern const Quote quote_NOTYETSPEC;
class type_cL;
class type_cLL;
class type_cLLL;
class type_7AS_NameCcLM;
class type_typevariableS;
class type_typevariableL;
class type_19CI_TokenContextInfoCL;
class type_i7AS_NameCM;
class type_7AS_NameCFM;
class type_UL;
#define TYPE_PP_uTAR_uDEF_string type_cL
#define TYPE_PP_uTAR_uDEF_ValueDef type_cL
#define TYPE_PP_uTAR_uDEF_TypeVarList type_cLL
#define TYPE_PP_uTAR_uDEF_TypeDef type_cL
#define TYPE_PP_uTAR_uDEF_PatTypePair type_cL
#define TYPE_PP_uTAR_uDEF_ParametersList type_cLLL
#define TYPE_PP_uTAR_uDEF_Parameters type_cLL
#define TYPE_PP_uTAR_uDEF_ParameterTypes type_cLL
#define TYPE_PP_uTAR_uDEF_NameType type_cL
#define TYPE_PP_uTAR_uDEF_Module type_cL
#define TYPE_PP_uTAR_uDEF_LocalDef type_cL
#define TYPE_PP_uTAR_uDEF_Invariant type_cL
#define TYPE_PP_uTAR_uDEF_Interface TYPE_AS_Interface
#define TYPE_PP_uTAR_uDEF_ImplModule Token
#define TYPE_PP_uTAR_uDEF_ImplFnDef type_cL
#define TYPE_PP_uTAR_uDEF_GlobalValueDef type_cL
#define TYPE_PP_uTAR_uDEF_FnDef type_cL
#define TYPE_PP_uTAR_uDEF_FnBody type_cL
#define TYPE_PP_uTAR_uDEF_ExtExplFnDef type_cL
#define TYPE_PP_uTAR_uDEF_ExplFnDef type_cL
#define TYPE_PP_uTAR_uDEF_Document type_cL
#define TYPE_PP_uTAR_uDEF_Definitions type_cL
#define TYPE_PP_uTAR_uDEF_AstCI type_cL
#ifndef TAG_type_cL
#define TAG_type_cL (TAG_PP_uTAR_uDEF + 1)
#endif

#ifndef TAG_type_cLL
#define TAG_type_cLL (TAG_PP_uTAR_uDEF + 2)
#endif

#ifndef TAG_type_cLLL
#define TAG_type_cLLL (TAG_PP_uTAR_uDEF + 3)
#endif

#ifndef TAG_type_7AS_NameCcLM
#define TAG_type_7AS_NameCcLM (TAG_PP_uTAR_uDEF + 4)
#endif

#ifndef TAG_type_typevariableS
#define TAG_type_typevariableS (TAG_PP_uTAR_uDEF + 5)
#endif

#ifndef TAG_type_typevariableL
#define TAG_type_typevariableL (TAG_PP_uTAR_uDEF + 6)
#endif

#ifndef TAG_type_19CI_TokenContextInfoCL
#define TAG_type_19CI_TokenContextInfoCL (TAG_PP_uTAR_uDEF + 7)
#endif

#ifndef TAG_type_i7AS_NameCM
#define TAG_type_i7AS_NameCM (TAG_PP_uTAR_uDEF + 8)
#endif

#ifndef TAG_type_7AS_NameCFM
#define TAG_type_7AS_NameCFM (TAG_PP_uTAR_uDEF + 9)
#endif

#ifndef TAG_type_UL
#define TAG_type_UL (TAG_PP_uTAR_uDEF + 10)
#endif

#ifndef TAG_quote_NOTYETSPEC
#define TAG_quote_NOTYETSPEC (TAG_PP_uTAR_uDEF + 11)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "PP_uTAR_uEXPR_anonym.h"
#include "PP_uTAR_uPAT_anonym.h"
#include "PP_uTAR_uTYPE_anonym.h"
#include "REP_anonym.h"
#ifndef DECL_type_cL
#define DECL_type_cL 1

class type_cL : public SEQ<Char> {
public:

  type_cL() : SEQ<Char>() {}

  type_cL(const SEQ<Char> &c) : SEQ<Char>(c) {}

  type_cL(const Generic &c) : SEQ<Char>(c) {}

  const char * GetTypeName() const { return "type_cL"; }
} ;
#endif

#ifndef DECL_type_cLL
#define DECL_type_cLL 1

class type_cLL : public SEQ<type_cL> {
public:

  type_cLL() : SEQ<type_cL>() {}

  type_cLL(const SEQ<type_cL> &c) : SEQ<type_cL>(c) {}

  type_cLL(const Generic &c) : SEQ<type_cL>(c) {}

  const char * GetTypeName() const { return "type_cLL"; }
} ;
#endif

#ifndef DECL_type_cLLL
#define DECL_type_cLLL 1

class type_cLLL : public SEQ<type_cLL> {
public:

  type_cLLL() : SEQ<type_cLL>() {}

  type_cLLL(const SEQ<type_cLL> &c) : SEQ<type_cLL>(c) {}

  type_cLLL(const Generic &c) : SEQ<type_cLL>(c) {}

  const char * GetTypeName() const { return "type_cLLL"; }
} ;
#endif

#ifndef DECL_type_7AS_NameCcLM
#define DECL_type_7AS_NameCcLM 1

class type_7AS_NameCcLM : public MAP<TYPE_AS_Name,type_cL> {
public:

  type_7AS_NameCcLM() : MAP<TYPE_AS_Name,type_cL>() {}

  type_7AS_NameCcLM(const MAP<TYPE_AS_Name,type_cL> &c) : MAP<TYPE_AS_Name,type_cL>(c) {}

  type_7AS_NameCcLM(const Generic &c) : MAP<TYPE_AS_Name,type_cL>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCcLM"; }
} ;
#endif

#ifndef DECL_type_typevariableS
#define DECL_type_typevariableS 1

class type_typevariableS : public SET<Generic> {
public:

  type_typevariableS() : SET<Generic>() {}

  type_typevariableS(const SET<Generic> &c) : SET<Generic>(c) {}

  type_typevariableS(const Generic &c) : SET<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableS"; }
} ;
#endif

#ifndef DECL_type_typevariableL
#define DECL_type_typevariableL 1

class type_typevariableL : public SEQ<Generic> {
public:

  type_typevariableL() : SEQ<Generic>() {}

  type_typevariableL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_typevariableL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableL"; }
} ;
#endif

#ifndef DECL_type_19CI_TokenContextInfoCL
#define DECL_type_19CI_TokenContextInfoCL 1

class type_19CI_TokenContextInfoCL : public SEQ<TYPE_CI_TokenContextInfo> {
public:

  type_19CI_TokenContextInfoCL() : SEQ<TYPE_CI_TokenContextInfo>() {}

  type_19CI_TokenContextInfoCL(const SEQ<TYPE_CI_TokenContextInfo> &c) : SEQ<TYPE_CI_TokenContextInfo>(c) {}

  type_19CI_TokenContextInfoCL(const Generic &c) : SEQ<TYPE_CI_TokenContextInfo>(c) {}

  const char * GetTypeName() const { return "type_19CI_TokenContextInfoCL"; }
} ;
#endif

#ifndef DECL_type_i7AS_NameCM
#define DECL_type_i7AS_NameCM 1

class type_i7AS_NameCM : public MAP<Int,TYPE_AS_Name> {
public:

  type_i7AS_NameCM() : MAP<Int,TYPE_AS_Name>() {}

  type_i7AS_NameCM(const MAP<Int,TYPE_AS_Name> &c) : MAP<Int,TYPE_AS_Name>(c) {}

  type_i7AS_NameCM(const Generic &c) : MAP<Int,TYPE_AS_Name>(c) {}

  const char * GetTypeName() const { return "type_i7AS_NameCM"; }
} ;
#endif

#ifndef DECL_type_7AS_NameCFM
#define DECL_type_7AS_NameCFM 1

class type_7AS_NameCFM : public MAP<TYPE_AS_Name,Generic> {
public:

  type_7AS_NameCFM() : MAP<TYPE_AS_Name,Generic>() {}

  type_7AS_NameCFM(const MAP<TYPE_AS_Name,Generic> &c) : MAP<TYPE_AS_Name,Generic>(c) {}

  type_7AS_NameCFM(const Generic &c) : MAP<TYPE_AS_Name,Generic>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCFM"; }
} ;
#endif

#ifndef DECL_type_UL
#define DECL_type_UL 1

class type_UL : public SEQ<Generic> {
public:

  type_UL() : SEQ<Generic>() {}

  type_UL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_UL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_UL"; }
} ;
#endif


#endif

