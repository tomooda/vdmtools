//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 11-Oct-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//



#include "PP_uTAR_uEXPR.h"

void TYPE_PP_uTAR_uEXPR_ELSEIFEXPR::Init(TYPE_PP_uTAR_uEXPR_EXPR p1, TYPE_PP_uTAR_uEXPR_EXPR p2) {
  SetField(1, p1);
  SetField(2, p2);
}

TYPE_PP_uTAR_uEXPR_EXPR TYPE_PP_uTAR_uEXPR_ELSEIFEXPR::get_test() const { return (TYPE_PP_uTAR_uEXPR_EXPR) GetField(1); }

void TYPE_PP_uTAR_uEXPR_ELSEIFEXPR::set_test(const TYPE_PP_uTAR_uEXPR_EXPR &p) { SetField(1, p); }

TYPE_PP_uTAR_uEXPR_EXPR TYPE_PP_uTAR_uEXPR_ELSEIFEXPR::get_cons() const { return (TYPE_PP_uTAR_uEXPR_EXPR) GetField(2); }

void TYPE_PP_uTAR_uEXPR_ELSEIFEXPR::set_cons(const TYPE_PP_uTAR_uEXPR_EXPR &p) { SetField(2, p); }

void init_PP_uTAR_uEXPR_VDMLib() {
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_PP_uTAR_uEXPR_ELSEIFEXPR, 2);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_PP_uTAR_uEXPR_ELSEIFEXPR, "PP_uTAR_uEXPR`ELSEIFEXPR");
  VDMGetDefaultRecInfoMap().NewTag(TOKEN, 1);
  VDMGetDefaultRecInfoMap().SetSymTag(TOKEN, "token");
}
#ifdef DEF_PP_uTAR_uEXPR_USERIMPL

#include "PP_uTAR_uEXPR_userimpl.cc"

#endif


void init_PP_uTAR_uEXPR() { init_PP_uTAR_uEXPR_VDMLib(); }
#ifndef DEF_PP_uTAR_uEXPR_List2CommaList

TYPE_PP_uTAR_uEXPR_string vdm_PP_uTAR_uEXPR_List2CommaList(const type_cLL &vdm_PP_uTAR_uEXPR_ss) {
  Sequence varRes_3;
  if (((Bool) (vdm_PP_uTAR_uEXPR_ss == Sequence())).GetValue()) 
    varRes_3 = Sequence("");
  else {
    Sequence vdm_PP_uTAR_uEXPR_head = (Sequence) vdm_PP_uTAR_uEXPR_ss.Hd();
    Sequence vdm_PP_uTAR_uEXPR_tail;
    if (((Bool) (vdm_PP_uTAR_uEXPR_ss.Tl() == Sequence())).GetValue()) 
      vdm_PP_uTAR_uEXPR_tail = Sequence("");
    else 
      vdm_PP_uTAR_uEXPR_tail.ImpConc(Sequence(", ")).ImpConc(vdm_PP_uTAR_uEXPR_List2CommaList((Generic) vdm_PP_uTAR_uEXPR_ss.Tl()));
    varRes_3.ImpConc(vdm_PP_uTAR_uEXPR_head).ImpConc(vdm_PP_uTAR_uEXPR_tail);
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_List2SeparatorList

TYPE_PP_uTAR_uEXPR_string vdm_PP_uTAR_uEXPR_List2SeparatorList(const TYPE_PP_uTAR_uEXPR_string &vdm_PP_uTAR_uEXPR_separator, const type_cLL &vdm_PP_uTAR_uEXPR_ss) {
  Sequence varRes_4;
  if (((Bool) (vdm_PP_uTAR_uEXPR_ss == Sequence())).GetValue()) 
    varRes_4 = Sequence("");
  else {
    Sequence vdm_PP_uTAR_uEXPR_head = (Sequence) vdm_PP_uTAR_uEXPR_ss.Hd();
    Sequence vdm_PP_uTAR_uEXPR_tail;
    if (((Bool) (vdm_PP_uTAR_uEXPR_ss.Tl() == Sequence())).GetValue()) 
      vdm_PP_uTAR_uEXPR_tail = Sequence("");
    else 
      vdm_PP_uTAR_uEXPR_tail.ImpConc(vdm_PP_uTAR_uEXPR_separator).ImpConc(vdm_PP_uTAR_uEXPR_List2SeparatorList((Generic) vdm_PP_uTAR_uEXPR_separator, (Generic) vdm_PP_uTAR_uEXPR_ss.Tl()));
    varRes_4.ImpConc(vdm_PP_uTAR_uEXPR_head).ImpConc(vdm_PP_uTAR_uEXPR_tail);
  }
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_Nat2str

TYPE_PP_uTAR_uEXPR_string vdm_PP_uTAR_uEXPR_Nat2str(const Int &vdm_PP_uTAR_uEXPR_n) {
  Sequence varRes_3;
  {
    Int vdm_PP_uTAR_uEXPR_d = (Int) (vdm_PP_uTAR_uEXPR_n / (Int) 10);
    Int vdm_PP_uTAR_uEXPR_r = vdm_PP_uTAR_uEXPR_n - (Int) 10 * vdm_PP_uTAR_uEXPR_d;
    Sequence vdm_PP_uTAR_uEXPR_r_ustr;
    bool succ_14 = true;
    {
      succ_14 = true;
      if (vdm_PP_uTAR_uEXPR_r != (Int) 0) 
        succ_14 = false;
      if (succ_14) 
        vdm_PP_uTAR_uEXPR_r_ustr = Sequence("0");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_PP_uTAR_uEXPR_r != (Int) 1) 
        succ_14 = false;
      if (succ_14) 
        vdm_PP_uTAR_uEXPR_r_ustr = Sequence("1");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_PP_uTAR_uEXPR_r != (Int) 2) 
        succ_14 = false;
      if (succ_14) 
        vdm_PP_uTAR_uEXPR_r_ustr = Sequence("2");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_PP_uTAR_uEXPR_r != (Int) 3) 
        succ_14 = false;
      if (succ_14) 
        vdm_PP_uTAR_uEXPR_r_ustr = Sequence("3");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_PP_uTAR_uEXPR_r != (Int) 4) 
        succ_14 = false;
      if (succ_14) 
        vdm_PP_uTAR_uEXPR_r_ustr = Sequence("4");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_PP_uTAR_uEXPR_r != (Int) 5) 
        succ_14 = false;
      if (succ_14) 
        vdm_PP_uTAR_uEXPR_r_ustr = Sequence("5");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_PP_uTAR_uEXPR_r != (Int) 6) 
        succ_14 = false;
      if (succ_14) 
        vdm_PP_uTAR_uEXPR_r_ustr = Sequence("6");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_PP_uTAR_uEXPR_r != (Int) 7) 
        succ_14 = false;
      if (succ_14) 
        vdm_PP_uTAR_uEXPR_r_ustr = Sequence("7");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_PP_uTAR_uEXPR_r != (Int) 8) 
        succ_14 = false;
      if (succ_14) 
        vdm_PP_uTAR_uEXPR_r_ustr = Sequence("8");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_PP_uTAR_uEXPR_r != (Int) 9) 
        succ_14 = false;
      if (succ_14) 
        vdm_PP_uTAR_uEXPR_r_ustr = Sequence("9");
    }
    if (!succ_14) 
      RunTime("No \'others\' branch in CasesExpr");
    Sequence vdm_PP_uTAR_uEXPR_d_ustr;
    if (((Bool) (vdm_PP_uTAR_uEXPR_d == (Int) 0)).GetValue()) 
      vdm_PP_uTAR_uEXPR_d_ustr = Sequence("");
    else 
      vdm_PP_uTAR_uEXPR_d_ustr = vdm_PP_uTAR_uEXPR_Nat2str((Generic) vdm_PP_uTAR_uEXPR_d);
    varRes_3.ImpConc(vdm_PP_uTAR_uEXPR_d_ustr).ImpConc(vdm_PP_uTAR_uEXPR_r_ustr);
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_Real2str

type_cLcL2P vdm_PP_uTAR_uEXPR_Real2str(const Real &vdm_PP_uTAR_uEXPR_x) {
  Tuple varRes_3;
  if (((Bool) (IsInteger(vdm_PP_uTAR_uEXPR_x) && ((Int) vdm_PP_uTAR_uEXPR_x).GetValue() >= 0)).GetValue()) {
    varRes_3 = Tuple(2);
    varRes_3.SetField(1, vdm_PP_uTAR_uEXPR_Nat2str((Generic) vdm_PP_uTAR_uEXPR_x));
    varRes_3.SetField(2, Sequence(""));
  }
  else {
    bool succ_7;
    Sequence vdm_PP_uTAR_uEXPR_val;
    Int par_9;
    if (vdm_PP_uTAR_uEXPR_x.IsReal()) {
      double tmp_11 = ((Real) vdm_PP_uTAR_uEXPR_x).GetValue();
      par_9 = (Int) (int) floor(tmp_11);
    }
    else 
      par_9 = vdm_PP_uTAR_uEXPR_x;
    vdm_PP_uTAR_uEXPR_val = vdm_PP_uTAR_uEXPR_Nat2str((Generic) par_9);
    Tuple tmpVal_12(2);
    Real par_13;    Real var2_15;    Int var2_17;    if (vdm_PP_uTAR_uEXPR_x.IsReal()) {
      double tmp_19 = ((Real) vdm_PP_uTAR_uEXPR_x).GetValue();
      var2_17 = (Int) (int) floor(tmp_19);
    }
    else 
      var2_17 = vdm_PP_uTAR_uEXPR_x;    var2_15 = vdm_PP_uTAR_uEXPR_x - var2_17;    par_13 = (Int) 10 * var2_15;    tmpVal_12 = vdm_PP_uTAR_uEXPR_Real2str((Generic) par_13);
    Sequence vdm_PP_uTAR_uEXPR_val1;
    Sequence vdm_PP_uTAR_uEXPR_val2;
    succ_7 = true;
    if (tmpVal_12.IsTuple()) {
      Sequence e_l_20;
      for (int i_21 = 1; i_21 <= ((Tuple) tmpVal_12).Length(); i_21++) 
        e_l_20.ImpAppend(((Tuple) tmpVal_12).GetField(i_21));
      if (succ_7 = 2 == (Int) e_l_20.Length()) {
        vdm_PP_uTAR_uEXPR_val1 = (Sequence) e_l_20.Hd();
        vdm_PP_uTAR_uEXPR_val2 = (Sequence) e_l_20[2];
      }
    }
    else 
      succ_7 = false;
    if (!succ_7) 
      RunTime("Pattern match did not succeed in value definition");
    varRes_3 = Tuple(2);
    varRes_3.SetField(1, vdm_PP_uTAR_uEXPR_val);
    Sequence tmpVar_23;
    tmpVar_23.ImpConc(vdm_PP_uTAR_uEXPR_val1).ImpConc(vdm_PP_uTAR_uEXPR_val2);
    varRes_3.SetField(2, tmpVar_23);
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_pre_Real2str

Bool vdm_PP_uTAR_uEXPR_pre_Real2str(const Real &vdm_PP_uTAR_uEXPR_x) { return (Generic) (Bool) ((vdm_PP_uTAR_uEXPR_x.GetValue()) >= (((Int) 0).GetValue())); }
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uAllOrExistsExpr

TYPE_PP_uTAR_uEXPR_AllOrExistsExpr vdm_PP_uTAR_uEXPR_tar_uAllOrExistsExpr(const TYPE_AS_AllOrExistsQuantifier &var_1_1, const TYPE_PP_uTAR_uPAT_BindList &var_2_2, const TYPE_PP_uTAR_uEXPR_Expr &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Sequence vdm_PP_uTAR_uEXPR_mbindlist;
  Sequence vdm_PP_uTAR_uEXPR_pred;
  Generic vdm_PP_uTAR_uEXPR_quant;
  bool succ_5 = true;
  vdm_PP_uTAR_uEXPR_quant = var_1_1;
  vdm_PP_uTAR_uEXPR_mbindlist = var_2_2;
  vdm_PP_uTAR_uEXPR_pred = var_3_3;
  if (succ_5) {}
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uAllOrExistsExpr failed");
  Sequence varRes_6;
  {
    Sequence vdm_PP_uTAR_uEXPR_pp_uquant;
    bool succ_9 = true;
    {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_quant != (Quote) "ALL") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uquant = Sequence("forall ");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_quant != (Quote) "EXISTS") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uquant = Sequence("exists ");
    }
    if (!succ_9) 
      RunTime("No \'others\' branch in CasesExpr");
    Sequence var1_14;
    Sequence var1_15;
    Sequence var1_16;
    Sequence var1_17;
    var1_17.ImpConc(Sequence("(")).ImpConc(vdm_PP_uTAR_uEXPR_pp_uquant);
    var1_16.ImpConc(var1_17).ImpConc(vdm_PP_uTAR_uEXPR_List2CommaList((Generic) vdm_PP_uTAR_uEXPR_mbindlist));
    var1_15.ImpConc(var1_16).ImpConc(Sequence(" &\n"));
    var1_14.ImpConc(var1_15).ImpConc(vdm_PP_uTAR_uEXPR_pred);
    varRes_6.ImpConc(var1_14).ImpConc(Sequence(")"));
  }
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uApplyExpr

TYPE_PP_uTAR_uEXPR_ApplyExpr vdm_PP_uTAR_uEXPR_tar_uApplyExpr(const TYPE_AS_ApplyExpr &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const type_cLL &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Sequence vdm_PP_uTAR_uEXPR_arg;
  Record vdm_PP_uTAR_uEXPR_expr(vdm_AS_ApplyExpr, length_AS_ApplyExpr);
  Sequence vdm_PP_uTAR_uEXPR_fct;
  bool succ_5 = true;
  vdm_PP_uTAR_uEXPR_expr = var_1_1;
  vdm_PP_uTAR_uEXPR_fct = var_2_2;
  vdm_PP_uTAR_uEXPR_arg = var_3_3;
  if (succ_5) {}
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uApplyExpr failed");
  Sequence varRes_6;
  Sequence var1_7;
  Sequence var1_8;
  var1_8.ImpConc(vdm_PP_uTAR_uEXPR_fct).ImpConc(Sequence("("));
  var1_7.ImpConc(var1_8).ImpConc(vdm_PP_uTAR_uEXPR_List2CommaList((Generic) vdm_PP_uTAR_uEXPR_arg));
  varRes_6.ImpConc(var1_7).ImpConc(Sequence(")"));
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uBinaryExpr

TYPE_PP_uTAR_uEXPR_BinaryExpr vdm_PP_uTAR_uEXPR_tar_uBinaryExpr(const TYPE_PP_uTAR_uEXPR_Expr &vdm_PP_uTAR_uEXPR_expr1, const TYPE_AS_BinaryOp &vdm_PP_uTAR_uEXPR_op, const TYPE_PP_uTAR_uEXPR_Expr &vdm_PP_uTAR_uEXPR_expr2, const TYPE_CI_ContextId &vdm_PP_uTAR_uEXPR_cid) {
  Sequence varRes_6;
  {
    Generic vdm_PP_uTAR_uEXPR_pp_uop;
    bool succ_9 = true;
    {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMPLUS") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("+");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMMINUS") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("-");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMMULT") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("*");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMDIV") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("/");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMREM") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMMOD") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("mod");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "INTDIV") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("div");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMEXP") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("**");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMLT") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("<");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMLE") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("<=");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMGT") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence(">");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMGE") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence(">=");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "AND") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("and\n");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "OR") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("or\n");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "IMPLY") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("=>\n");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "EQUIV") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("<=>");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "EQ") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("=");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NE") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("<>");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SETUNION") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("union");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SETINTERSECT") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("inter");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SETMINUS") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("\\");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SUBSET") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("subset");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "PROPERSUBSET") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("psubset");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "INSET") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("in set");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NOTINSET") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("not in set");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SEQCONC") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("^");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "MAPMERGE") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("munion");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "MAPDOMRESTTO") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("<:");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "MAPDOMRESTBY") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("<-:");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "MAPRNGRESTTO") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence(":>");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "MAPRNGRESTBY") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence(":->");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "COMPOSE") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("comp");
    }
    if (!succ_9) 
      RunTime("Can not evaluate an undefined expression");
    Sequence var1_44;
    Sequence var1_45;
    Sequence var1_46;
    var1_46.ImpConc(vdm_PP_uTAR_uEXPR_expr1).ImpConc(Sequence(" "));
    var1_45.ImpConc(var1_46).ImpConc(vdm_PP_uTAR_uEXPR_pp_uop);
    var1_44.ImpConc(var1_45).ImpConc(Sequence(" "));
    varRes_6.ImpConc(var1_44).ImpConc(vdm_PP_uTAR_uEXPR_expr2);
  }
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uBoolLit

TYPE_PP_uTAR_uEXPR_BoolLit vdm_PP_uTAR_uEXPR_tar_uBoolLit(const Bool &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Bool vdm_PP_uTAR_uEXPR_val;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_val = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uBoolLit failed");
  Sequence varRes_4;
  if (((Bool) (vdm_PP_uTAR_uEXPR_val == (Bool) true)).GetValue()) 
    varRes_4 = Sequence("true");
  else 
    varRes_4 = Sequence("false");
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uBracketedExpr

TYPE_PP_uTAR_uEXPR_BracketedExpr vdm_PP_uTAR_uEXPR_tar_uBracketedExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Sequence vdm_PP_uTAR_uEXPR_expr;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_expr = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uBracketedExpr failed");
  Sequence varRes_4;
  Sequence var1_5;
  var1_5.ImpConc(Sequence("(")).ImpConc(vdm_PP_uTAR_uEXPR_expr);
  varRes_4.ImpConc(var1_5).ImpConc(Sequence(")"));
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uCaseAltn

TYPE_PP_uTAR_uEXPR_CaseAltn vdm_PP_uTAR_uEXPR_tar_uCaseAltn(const type_cLL &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_expr;
  Sequence vdm_PP_uTAR_uEXPR_pats;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_pats = var_1_1;
  vdm_PP_uTAR_uEXPR_expr = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uCaseAltn failed");
  Sequence varRes_5;
  Sequence var1_6;
  var1_6.ImpConc(vdm_PP_uTAR_uEXPR_List2CommaList((Generic) vdm_PP_uTAR_uEXPR_pats)).ImpConc(Sequence(" -> "));
  varRes_5.ImpConc(var1_6).ImpConc(vdm_PP_uTAR_uEXPR_expr);
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uCasesExpr

TYPE_PP_uTAR_uEXPR_CasesExpr vdm_PP_uTAR_uEXPR_tar_uCasesExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const type_cLL &var_2_2, const Generic &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Sequence vdm_PP_uTAR_uEXPR_altns;
  Generic vdm_PP_uTAR_uEXPR_oth;
  Sequence vdm_PP_uTAR_uEXPR_sel;
  bool succ_5 = true;
  vdm_PP_uTAR_uEXPR_sel = var_1_1;
  vdm_PP_uTAR_uEXPR_altns = var_2_2;
  vdm_PP_uTAR_uEXPR_oth = var_3_3;
  if (succ_5) {}
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uCasesExpr failed");
  Sequence varRes_6;
  Sequence var1_7;
  Sequence var1_8;
  Sequence var1_9;
  Sequence var1_10;
  var1_10.ImpConc(Sequence("cases ")).ImpConc(vdm_PP_uTAR_uEXPR_sel);
  var1_9.ImpConc(var1_10).ImpConc(Sequence(":\n"));
  var1_8.ImpConc(var1_9).ImpConc(vdm_PP_uTAR_uEXPR_List2SeparatorList((Generic) Sequence(",\n"), (Generic) vdm_PP_uTAR_uEXPR_altns));
  Sequence var2_17;
  if (((Bool) (vdm_PP_uTAR_uEXPR_oth == Nil())).GetValue()) 
    var2_17 = Sequence("");
  else 
    var2_17.ImpConc(Sequence(",\nothers -> ")).ImpConc(vdm_PP_uTAR_uEXPR_oth);
  var1_7.ImpConc(var1_8).ImpConc(var2_17);
  varRes_6.ImpConc(var1_7).ImpConc(Sequence("\nend"));
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uCharLit

TYPE_PP_uTAR_uEXPR_CharLit vdm_PP_uTAR_uEXPR_tar_uCharLit(const Char &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Char vdm_PP_uTAR_uEXPR_val;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_val = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uCharLit failed");
  Sequence varRes_4;
  Sequence var1_5;
  Sequence var2_7;
  var2_7 = Sequence().ImpAppend(vdm_PP_uTAR_uEXPR_val);
  var1_5.ImpConc(Sequence("\'")).ImpConc(var2_7);
  varRes_4.ImpConc(var1_5).ImpConc(Sequence("\'"));
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uDefExpr

TYPE_PP_uTAR_uEXPR_DefExpr vdm_PP_uTAR_uEXPR_tar_uDefExpr(const type_cLcL2PL &vdm_PP_uTAR_uEXPR_defs, const TYPE_PP_uTAR_uEXPR_Expr &vdm_PP_uTAR_uEXPR_in_ue, const TYPE_CI_ContextId &vdm_PP_uTAR_uEXPR_cid) {
  Generic varRes_5;
  RunTime("Can not evaluate an undefined expression");
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uElseIfExpr

TYPE_PP_uTAR_uEXPR_ElseifExpr vdm_PP_uTAR_uEXPR_tar_uElseIfExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_cons;
  Sequence vdm_PP_uTAR_uEXPR_test;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_test = var_1_1;
  vdm_PP_uTAR_uEXPR_cons = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uElseIfExpr failed");
  Record varRes_5(vdm_PP_uTAR_uEXPR_ELSEIFEXPR, length_PP_uTAR_uEXPR_ELSEIFEXPR);
  varRes_5 = Record(vdm_PP_uTAR_uEXPR_ELSEIFEXPR, length_PP_uTAR_uEXPR_ELSEIFEXPR);
  varRes_5.SetField(1, vdm_PP_uTAR_uEXPR_test);
  varRes_5.SetField(2, vdm_PP_uTAR_uEXPR_cons);
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uExistsUniqueExpr

TYPE_PP_uTAR_uEXPR_ExistsUniqueExpr vdm_PP_uTAR_uEXPR_tar_uExistsUniqueExpr(const TYPE_PP_uTAR_uPAT_Bind &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_bd;
  Sequence vdm_PP_uTAR_uEXPR_pred;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_bd = var_1_1;
  vdm_PP_uTAR_uEXPR_pred = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uExistsUniqueExpr failed");
  Sequence varRes_5;
  Sequence var1_6;
  Sequence var1_7;
  Sequence var1_8;
  var1_8.ImpConc(Sequence("(exists1 ")).ImpConc(vdm_PP_uTAR_uEXPR_bd);
  var1_7.ImpConc(var1_8).ImpConc(Sequence(" &\n"));
  var1_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_pred);
  varRes_5.ImpConc(var1_6).ImpConc(Sequence(")"));
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uFctTypeInstExpr

TYPE_PP_uTAR_uEXPR_FctTypeInstExpr vdm_PP_uTAR_uEXPR_tar_uFctTypeInstExpr(const TYPE_PP_uTAR_uEXPR_NameName &var_1_1, const type_cLL &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_inst;
  Sequence vdm_PP_uTAR_uEXPR_polyfct;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_polyfct = var_1_1;
  vdm_PP_uTAR_uEXPR_inst = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uFctTypeInstExpr failed");
  Sequence varRes_5;
  Sequence var1_6;
  Sequence var1_7;
  var1_7.ImpConc(vdm_PP_uTAR_uEXPR_polyfct).ImpConc(Sequence("["));
  var1_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_inst);
  varRes_5.ImpConc(var1_6).ImpConc(Sequence("]"));
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uFieldSelectExpr

TYPE_PP_uTAR_uEXPR_Expr vdm_PP_uTAR_uEXPR_tar_uFieldSelectExpr(const TYPE_AS_FieldSelectExpr &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_PP_uTAR_uEXPR_NameName &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Sequence vdm_PP_uTAR_uEXPR_field;
  Sequence vdm_PP_uTAR_uEXPR_rec;
  bool succ_5 = true;
  if (succ_5) {}
  vdm_PP_uTAR_uEXPR_rec = var_2_2;
  vdm_PP_uTAR_uEXPR_field = var_3_3;
  if (succ_5) {}
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uFieldSelectExpr failed");
  Sequence varRes_6;
  Sequence var1_7;
  var1_7.ImpConc(vdm_PP_uTAR_uEXPR_rec).ImpConc(Sequence("."));
  varRes_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_field);
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uIds

TYPE_PP_uTAR_uEXPR_Ids vdm_PP_uTAR_uEXPR_tar_uIds(const TYPE_AS_Ids &vdm_PP_uTAR_uEXPR_ids) {
  Sequence varRes_3;
  if (((Bool) ((Int) vdm_PP_uTAR_uEXPR_ids.Length() == (Int) 1)).GetValue()) 
    varRes_3 = (Sequence) vdm_PP_uTAR_uEXPR_ids.Hd();
  else {
    Sequence vdm_PP_uTAR_uEXPR_head = (Sequence) vdm_PP_uTAR_uEXPR_ids.Hd();
    Sequence vdm_PP_uTAR_uEXPR_tail;
    if (((Bool) (vdm_PP_uTAR_uEXPR_ids.Tl() == Sequence())).GetValue()) 
      vdm_PP_uTAR_uEXPR_tail = Sequence("");
    else 
      vdm_PP_uTAR_uEXPR_tail.ImpConc(Sequence("`")).ImpConc(vdm_PP_uTAR_uEXPR_tar_uIds((Generic) vdm_PP_uTAR_uEXPR_ids.Tl()));
    varRes_3.ImpConc(vdm_PP_uTAR_uEXPR_head).ImpConc(vdm_PP_uTAR_uEXPR_tail);
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_pre_tar_uIds

Bool vdm_PP_uTAR_uEXPR_pre_tar_uIds(const TYPE_AS_Ids &vdm_PP_uTAR_uEXPR_ids) { return (Generic) (Bool) !(vdm_PP_uTAR_uEXPR_ids == Sequence()); }
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uIfExpr

TYPE_PP_uTAR_uEXPR_IfExpr vdm_PP_uTAR_uEXPR_tar_uIfExpr(const TYPE_PP_uTAR_uEXPR_Expr &vdm_PP_uTAR_uEXPR_test, const TYPE_PP_uTAR_uEXPR_Expr &vdm_PP_uTAR_uEXPR_cons, const type_24PP_uTAR_uEXPR_ELSEIFEXPRCL &vdm_PP_uTAR_uEXPR_elsif, const TYPE_PP_uTAR_uEXPR_Expr &vdm_PP_uTAR_uEXPR_altn, const TYPE_CI_ContextId &vdm_PP_uTAR_uEXPR_cid) {
  Sequence varRes_7;
  Sequence var1_8;
  Sequence var1_9;
  Sequence var1_10;
  Sequence var1_11;
  var1_11.ImpConc(Sequence("if ")).ImpConc(vdm_PP_uTAR_uEXPR_test);
  var1_10.ImpConc(var1_11).ImpConc(Sequence(" then\n"));
  var1_9.ImpConc(var1_10).ImpConc(vdm_PP_uTAR_uEXPR_cons);
  var1_8.ImpConc(var1_9).ImpConc(Sequence("\n"));
  Sequence var2_17;
  if (((Bool) (vdm_PP_uTAR_uEXPR_elsif == Sequence())).GetValue()) 
    var2_17.ImpConc(Sequence("else\n")).ImpConc(vdm_PP_uTAR_uEXPR_altn);
  else {
    Record vdm_PP_uTAR_uEXPR_head = (Record) vdm_PP_uTAR_uEXPR_elsif.Hd();
    Sequence vdm_PP_uTAR_uEXPR_tail = vdm_PP_uTAR_uEXPR_elsif.Tl();
    Sequence var2_28;
    Sequence par_29;
    if (vdm_PP_uTAR_uEXPR_head.Is(vdm_PP_uTAR_uEXPR_ELSEIFEXPR)) 
      par_29 = vdm_PP_uTAR_uEXPR_head.GetField(pos_PP_uTAR_uEXPR_ELSEIFEXPR_test);
    else 
      RunTime("Unknown record field selector");
    Sequence par_31;
    if (vdm_PP_uTAR_uEXPR_head.Is(vdm_PP_uTAR_uEXPR_ELSEIFEXPR)) 
      par_31 = vdm_PP_uTAR_uEXPR_head.GetField(pos_PP_uTAR_uEXPR_ELSEIFEXPR_cons);
    else 
      RunTime("Unknown record field selector");
    var2_28 = vdm_PP_uTAR_uEXPR_tar_uIfExpr((Generic) par_29, (Generic) par_31, (Generic) vdm_PP_uTAR_uEXPR_tail, (Generic) vdm_PP_uTAR_uEXPR_altn, (Generic) vdm_PP_uTAR_uEXPR_cid);
    var2_17.ImpConc(Sequence("else")).ImpConc(var2_28);
  }
  varRes_7.ImpConc(var1_8).ImpConc(var2_17);
  return (Generic) varRes_7;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uIotaExpr

TYPE_PP_uTAR_uEXPR_IotaExpr vdm_PP_uTAR_uEXPR_tar_uIotaExpr(const TYPE_PP_uTAR_uPAT_Bind &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_bd;
  Sequence vdm_PP_uTAR_uEXPR_pred;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_bd = var_1_1;
  vdm_PP_uTAR_uEXPR_pred = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uIotaExpr failed");
  Sequence varRes_5;
  Sequence var1_6;
  Sequence var1_7;
  Sequence var1_8;
  var1_8.ImpConc(Sequence("(iota ")).ImpConc(vdm_PP_uTAR_uEXPR_bd);
  var1_7.ImpConc(var1_8).ImpConc(Sequence(" &\n"));
  var1_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_pred);
  varRes_5.ImpConc(var1_6).ImpConc(Sequence(")"));
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uIsExpr

TYPE_PP_uTAR_uEXPR_IsExpr vdm_PP_uTAR_uEXPR_tar_uIsExpr(const type_cL &vdm_PP_uTAR_uEXPR_type, const TYPE_PP_uTAR_uEXPR_Expr &vdm_PP_uTAR_uEXPR_arg, const TYPE_CI_ContextId &vdm_PP_uTAR_uEXPR_cid) {
  Sequence varRes_5;
  Sequence var1_6;
  Sequence var1_7;
  Sequence var1_8;
  var1_8.ImpConc(Sequence("is_")).ImpConc(vdm_PP_uTAR_uEXPR_type);
  var1_7.ImpConc(var1_8).ImpConc(Sequence("("));
  var1_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_arg);
  varRes_5.ImpConc(var1_6).ImpConc(Sequence(")"));
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uLambdaExpr

TYPE_PP_uTAR_uEXPR_LambdaExpr vdm_PP_uTAR_uEXPR_tar_uLambdaExpr(const type_cLL &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_body;
  Sequence vdm_PP_uTAR_uEXPR_parm;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_parm = var_1_1;
  vdm_PP_uTAR_uEXPR_body = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uLambdaExpr failed");
  Sequence varRes_5;
  Sequence var1_6;
  Sequence var1_7;
  var1_7.ImpConc(Sequence("lambda ")).ImpConc(vdm_PP_uTAR_uEXPR_List2CommaList((Generic) vdm_PP_uTAR_uEXPR_parm));
  var1_6.ImpConc(var1_7).ImpConc(Sequence(" & "));
  varRes_5.ImpConc(var1_6).ImpConc(vdm_PP_uTAR_uEXPR_body);
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uLetBeSTExpr

TYPE_PP_uTAR_uEXPR_LetBeSTExpr vdm_PP_uTAR_uEXPR_tar_uLetBeSTExpr(const TYPE_PP_uTAR_uPAT_Bind &var_1_1, const Generic &var_2_2, const TYPE_PP_uTAR_uEXPR_Expr &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Sequence vdm_PP_uTAR_uEXPR_bind;
  Sequence vdm_PP_uTAR_uEXPR_in_ue;
  Generic vdm_PP_uTAR_uEXPR_st_ue;
  bool succ_5 = true;
  vdm_PP_uTAR_uEXPR_bind = var_1_1;
  vdm_PP_uTAR_uEXPR_st_ue = var_2_2;
  vdm_PP_uTAR_uEXPR_in_ue = var_3_3;
  if (succ_5) {}
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uLetBeSTExpr failed");
  Sequence varRes_6;
  Sequence var1_7;
  Sequence var1_8;
  Sequence var1_9;
  var1_9.ImpConc(Sequence("let ")).ImpConc(vdm_PP_uTAR_uEXPR_bind);
  Sequence var2_12;
  if (((Bool) (vdm_PP_uTAR_uEXPR_st_ue == Nil())).GetValue()) 
    var2_12 = Sequence(" ");
  else {
    Sequence var1_17;
    var1_17.ImpConc(Sequence(" be st ")).ImpConc(vdm_PP_uTAR_uEXPR_st_ue);
    var2_12.ImpConc(var1_17).ImpConc(Sequence("\n"));
  }
  var1_8.ImpConc(var1_9).ImpConc(var2_12);
  var1_7.ImpConc(var1_8).ImpConc(Sequence("in  "));
  varRes_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_in_ue);
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uLetExpr

TYPE_PP_uTAR_uEXPR_LetExpr vdm_PP_uTAR_uEXPR_tar_uLetExpr(const type_cLL &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_defs;
  Sequence vdm_PP_uTAR_uEXPR_expr;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_defs = var_1_1;
  vdm_PP_uTAR_uEXPR_expr = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uLetExpr failed");
  Sequence varRes_5;
  Sequence var1_6;
  Sequence var1_7;
  Sequence var1_8;
  Sequence var1_9;
  Sequence var1_10;
  var1_10.ImpConc(Sequence("(let ")).ImpConc(vdm_PP_uTAR_uEXPR_List2CommaList((Generic) vdm_PP_uTAR_uEXPR_defs));
  var1_9.ImpConc(var1_10).ImpConc(Sequence("\n"));
  var1_8.ImpConc(var1_9).ImpConc(Sequence("in\n"));
  var1_7.ImpConc(var1_8).ImpConc(Sequence("    "));
  var1_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_expr);
  varRes_5.ImpConc(var1_6).ImpConc(Sequence(")"));
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uMapComprehensionExpr

TYPE_PP_uTAR_uEXPR_MapComprehensionExpr vdm_PP_uTAR_uEXPR_tar_uMapComprehensionExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const TYPE_PP_uTAR_uPAT_BindList &var_2_2, const Generic &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Sequence vdm_PP_uTAR_uEXPR_elem;
  Sequence vdm_PP_uTAR_uEXPR_mbindlist;
  Generic vdm_PP_uTAR_uEXPR_pred;
  bool succ_5 = true;
  vdm_PP_uTAR_uEXPR_elem = var_1_1;
  vdm_PP_uTAR_uEXPR_mbindlist = var_2_2;
  vdm_PP_uTAR_uEXPR_pred = var_3_3;
  if (succ_5) {}
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uMapComprehensionExpr failed");
  Sequence varRes_6;
  Sequence var1_7;
  Sequence var1_8;
  Sequence var1_9;
  Sequence var1_10;
  var1_10.ImpConc(Sequence("{")).ImpConc(vdm_PP_uTAR_uEXPR_elem);
  var1_9.ImpConc(var1_10).ImpConc(Sequence(" | "));
  var1_8.ImpConc(var1_9).ImpConc(vdm_PP_uTAR_uEXPR_List2CommaList((Generic) vdm_PP_uTAR_uEXPR_mbindlist));
  Sequence var2_16;
  if (((Bool) (vdm_PP_uTAR_uEXPR_pred == Nil())).GetValue()) 
    var2_16 = Sequence("");
  else 
    var2_16.ImpConc(Sequence(" & ")).ImpConc(vdm_PP_uTAR_uEXPR_pred);
  var1_7.ImpConc(var1_8).ImpConc(var2_16);
  varRes_6.ImpConc(var1_7).ImpConc(Sequence("}"));
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uMapEnumerationExpr

TYPE_PP_uTAR_uEXPR_MapEnumerationExpr vdm_PP_uTAR_uEXPR_tar_uMapEnumerationExpr(const type_cLL &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Sequence vdm_PP_uTAR_uEXPR_els;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_els = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uMapEnumerationExpr failed");
  Sequence varRes_4;
  if (((Bool) (vdm_PP_uTAR_uEXPR_els == Sequence())).GetValue()) 
    varRes_4 = Sequence("{|->}");
  else {
    Sequence var1_9;
    var1_9.ImpConc(Sequence("{")).ImpConc(vdm_PP_uTAR_uEXPR_List2SeparatorList((Generic) Sequence(","), (Generic) vdm_PP_uTAR_uEXPR_els));
    varRes_4.ImpConc(var1_9).ImpConc(Sequence("}"));
  }
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uMapInverseExpr

TYPE_PP_uTAR_uEXPR_MapInverseExpr vdm_PP_uTAR_uEXPR_tar_uMapInverseExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Sequence vdm_PP_uTAR_uEXPR_expr;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_expr = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uMapInverseExpr failed");
  Sequence varRes_4;
  Sequence var1_5;
  var1_5.ImpConc(Sequence("inverse (")).ImpConc(vdm_PP_uTAR_uEXPR_expr);
  varRes_4.ImpConc(var1_5).ImpConc(Sequence(")"));
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uMaplet

TYPE_PP_uTAR_uEXPR_Maplet vdm_PP_uTAR_uEXPR_tar_uMaplet(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_mdom;
  Sequence vdm_PP_uTAR_uEXPR_mrng;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_mdom = var_1_1;
  vdm_PP_uTAR_uEXPR_mrng = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uMaplet failed");
  Sequence varRes_5;
  Sequence var1_6;
  var1_6.ImpConc(vdm_PP_uTAR_uEXPR_mdom).ImpConc(Sequence(" |-> "));
  varRes_5.ImpConc(var1_6).ImpConc(vdm_PP_uTAR_uEXPR_mrng);
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uNameExpr

TYPE_PP_uTAR_uEXPR_NameExpr vdm_PP_uTAR_uEXPR_tar_uNameExpr(const TYPE_PP_uTAR_uEXPR_Ids &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Sequence vdm_PP_uTAR_uEXPR_ids;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_ids = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uNameExpr failed");
  return (Generic) vdm_PP_uTAR_uEXPR_ids;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uNameName

TYPE_PP_uTAR_uEXPR_NameName vdm_PP_uTAR_uEXPR_tar_uNameName(const TYPE_PP_uTAR_uEXPR_Ids &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Sequence vdm_PP_uTAR_uEXPR_ids;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_ids = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uNameName failed");
  return (Generic) vdm_PP_uTAR_uEXPR_ids;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uNameType

TYPE_PP_uTAR_uEXPR_NameType vdm_PP_uTAR_uEXPR_tar_uNameType(const TYPE_PP_uTAR_uEXPR_Ids &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Sequence vdm_PP_uTAR_uEXPR_ids;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_ids = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uNameType failed");
  return (Generic) vdm_PP_uTAR_uEXPR_ids;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uNilLit

TYPE_PP_uTAR_uEXPR_NilLit vdm_PP_uTAR_uEXPR_tar_uNilLit(const TYPE_CI_ContextId &var_1_1) {
  bool succ_2 = true;
  if (succ_2) {}
  if (!succ_2) 
    RunTime("Pattern Match in Function Apply in function : tar_uNilLit failed");
  return (Generic) Sequence("nil");
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uPreConditionApplyExpr

TYPE_PP_uTAR_uEXPR_PreConditionApplyExpr vdm_PP_uTAR_uEXPR_tar_uPreConditionApplyExpr(const TYPE_AS_PreConditionApplyExpr &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const type_cLL &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Sequence vdm_PP_uTAR_uEXPR_arg;
  Int vdm_PP_uTAR_uEXPR_cid;
  Sequence vdm_PP_uTAR_uEXPR_fct;
  bool succ_5 = true;
  if (succ_5) {}
  vdm_PP_uTAR_uEXPR_fct = var_2_2;
  vdm_PP_uTAR_uEXPR_arg = var_3_3;
  vdm_PP_uTAR_uEXPR_cid = var_4_4;
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uPreConditionApplyExpr failed");
  Sequence varRes_6;
  Sequence var1_7;
  Sequence var1_8;
  Sequence var1_9;
  var1_9.ImpConc(Sequence("pre_(")).ImpConc(vdm_PP_uTAR_uEXPR_fct);
  var1_8.ImpConc(var1_9).ImpConc(Sequence(","));
  var1_7.ImpConc(var1_8).ImpConc(vdm_PP_uTAR_uEXPR_List2CommaList((Generic) vdm_PP_uTAR_uEXPR_arg));
  varRes_6.ImpConc(var1_7).ImpConc(Sequence(")"));
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uPrefixExpr

TYPE_PP_uTAR_uEXPR_PrefixExpr vdm_PP_uTAR_uEXPR_tar_uPrefixExpr(const TYPE_AS_PrefixExpr &var_1_1, const TYPE_AS_UnaryOp &var_2_2, const TYPE_PP_uTAR_uEXPR_Expr &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Record vdm_PP_uTAR_uEXPR_as_uexpr(vdm_AS_PrefixExpr, length_AS_PrefixExpr);
  Sequence vdm_PP_uTAR_uEXPR_expr;
  Generic vdm_PP_uTAR_uEXPR_op;
  bool succ_5 = true;
  vdm_PP_uTAR_uEXPR_as_uexpr = var_1_1;
  vdm_PP_uTAR_uEXPR_op = var_2_2;
  vdm_PP_uTAR_uEXPR_expr = var_3_3;
  if (succ_5) {}
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uPrefixExpr failed");
  Sequence varRes_6;
  {
    Generic vdm_PP_uTAR_uEXPR_pp_uop;
    bool succ_9 = true;
    {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMPLUS") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("+");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMMINUS") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("-");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NUMABS") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("abs");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "FLOOR") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("floor");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "NOT") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("not");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SETCARD") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("card");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SETDISTRUNION") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("dunion");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SETDISTRINTERSECT") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("dinter");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SETPOWER") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("power");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SEQLEN") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("len");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SEQDISTRCONC") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("conc");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SEQELEMS") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("elems");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SEQINDICES") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("inds");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SEQTAIL") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("tl");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "SEQHEAD") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("hd");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "MAPDOM") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("dom");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "MAPRNG") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("rng");
    }
    if (!succ_9) {
      succ_9 = true;
      if (vdm_PP_uTAR_uEXPR_op != (Quote) "MAPDISTRMERGE") 
        succ_9 = false;
      if (succ_9) 
        vdm_PP_uTAR_uEXPR_pp_uop = Sequence("merge");
    }
    if (!succ_9) 
      RunTime("Can not evaluate an undefined expression");
    Sequence var1_30;
    Sequence var1_31;
    var1_31.ImpConc(vdm_PP_uTAR_uEXPR_pp_uop).ImpConc(Sequence(" ("));
    var1_30.ImpConc(var1_31).ImpConc(vdm_PP_uTAR_uEXPR_expr);
    varRes_6.ImpConc(var1_30).ImpConc(Sequence(")"));
  }
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uQuoteLit

TYPE_PP_uTAR_uEXPR_QuoteLit vdm_PP_uTAR_uEXPR_tar_uQuoteLit(const type_cL &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Sequence vdm_PP_uTAR_uEXPR_name;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_name = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uQuoteLit failed");
  Sequence varRes_4;
  Sequence var1_5;
  var1_5.ImpConc(Sequence("<")).ImpConc(vdm_PP_uTAR_uEXPR_name);
  varRes_4.ImpConc(var1_5).ImpConc(Sequence(">"));
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uRealLit

TYPE_PP_uTAR_uEXPR_RealLit vdm_PP_uTAR_uEXPR_tar_uRealLit(const Real &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Real vdm_PP_uTAR_uEXPR_val;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_val = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uRealLit failed");
  Sequence varRes_4;
  {
    bool succ_5;
    Sequence vdm_PP_uTAR_uEXPR_sign;
    Bool cond_8;
    Real var2_10;
    double tmp_12 = vdm_PP_uTAR_uEXPR_val.GetValue();
    if (tmp_12 < 0) 
      var2_10 = (Real) (-tmp_12);
    else 
      var2_10 = (Real) tmp_12;
    cond_8 = (Bool) (vdm_PP_uTAR_uEXPR_val == var2_10);
    if (cond_8.GetValue()) 
      vdm_PP_uTAR_uEXPR_sign = Sequence("");
    else 
      vdm_PP_uTAR_uEXPR_sign = Sequence("-");
    Real vdm_PP_uTAR_uEXPR_abs_uval;
    double tmp_15 = vdm_PP_uTAR_uEXPR_val.GetValue();
    if (tmp_15 < 0) 
      vdm_PP_uTAR_uEXPR_abs_uval = (Real) (-tmp_15);
    else 
      vdm_PP_uTAR_uEXPR_abs_uval = (Real) tmp_15;
    Tuple tmpVal_16(2);
    tmpVal_16 = vdm_PP_uTAR_uEXPR_Real2str((Generic) vdm_PP_uTAR_uEXPR_abs_uval);
    Sequence vdm_PP_uTAR_uEXPR_x;
    Sequence vdm_PP_uTAR_uEXPR_y;
    succ_5 = true;
    if (tmpVal_16.IsTuple()) {
      Sequence e_l_18;
      for (int i_19 = 1; i_19 <= ((Tuple) tmpVal_16).Length(); i_19++) 
        e_l_18.ImpAppend(((Tuple) tmpVal_16).GetField(i_19));
      if (succ_5 = 2 == (Int) e_l_18.Length()) {
        vdm_PP_uTAR_uEXPR_x = (Sequence) e_l_18.Hd();
        vdm_PP_uTAR_uEXPR_y = (Sequence) e_l_18[2];
      }
    }
    else 
      succ_5 = false;
    if (!succ_5) 
      RunTime("Pattern match did not succeed in value definition");
    Sequence vdm_PP_uTAR_uEXPR_deci;
    if (((Bool) (vdm_PP_uTAR_uEXPR_y == Sequence(""))).GetValue()) 
      vdm_PP_uTAR_uEXPR_deci = Sequence("");
    else 
      vdm_PP_uTAR_uEXPR_deci.ImpConc(Sequence(".")).ImpConc(vdm_PP_uTAR_uEXPR_y);
    Sequence var1_27;
    var1_27.ImpConc(vdm_PP_uTAR_uEXPR_sign).ImpConc(vdm_PP_uTAR_uEXPR_x);
    varRes_4.ImpConc(var1_27).ImpConc(vdm_PP_uTAR_uEXPR_deci);
  }
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uRecordConstructorExpr

TYPE_PP_uTAR_uEXPR_RecordConstructorExpr vdm_PP_uTAR_uEXPR_tar_uRecordConstructorExpr(const TYPE_PP_uTAR_uEXPR_NameName &var_1_1, const type_cLL &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_fields;
  Sequence vdm_PP_uTAR_uEXPR_tag;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_tag = var_1_1;
  vdm_PP_uTAR_uEXPR_fields = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uRecordConstructorExpr failed");
  Sequence varRes_5;
  Sequence var1_6;
  Sequence var1_7;
  Sequence var1_8;
  var1_8.ImpConc(Sequence("mk_")).ImpConc(vdm_PP_uTAR_uEXPR_tag);
  var1_7.ImpConc(var1_8).ImpConc(Sequence("("));
  var1_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_List2SeparatorList((Generic) Sequence(","), (Generic) vdm_PP_uTAR_uEXPR_fields));
  varRes_5.ImpConc(var1_6).ImpConc(Sequence(")"));
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uRecordModification

TYPE_PP_uTAR_uEXPR_RecordModification vdm_PP_uTAR_uEXPR_tar_uRecordModification(const TYPE_PP_uTAR_uEXPR_NameName &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_field;
  Sequence vdm_PP_uTAR_uEXPR_new;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_field = var_1_1;
  vdm_PP_uTAR_uEXPR_new = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uRecordModification failed");
  Sequence varRes_5;
  Sequence var1_6;
  var1_6.ImpConc(vdm_PP_uTAR_uEXPR_field).ImpConc(Sequence("|->"));
  varRes_5.ImpConc(var1_6).ImpConc(vdm_PP_uTAR_uEXPR_new);
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uRecordModifierExpr

TYPE_PP_uTAR_uEXPR_RecordModifierExpr vdm_PP_uTAR_uEXPR_tar_uRecordModifierExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const type_cLL &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_mods;
  Sequence vdm_PP_uTAR_uEXPR_rec;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_rec = var_1_1;
  vdm_PP_uTAR_uEXPR_mods = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uRecordModifierExpr failed");
  Sequence varRes_5;
  Sequence var1_6;
  Sequence var1_7;
  Sequence var1_8;
  var1_8.ImpConc(Sequence("mu(")).ImpConc(vdm_PP_uTAR_uEXPR_rec);
  var1_7.ImpConc(var1_8).ImpConc(Sequence(","));
  var1_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_List2SeparatorList((Generic) Sequence(","), (Generic) vdm_PP_uTAR_uEXPR_mods));
  varRes_5.ImpConc(var1_6).ImpConc(Sequence(")"));
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uSeqComprehensionExpr

TYPE_PP_uTAR_uEXPR_SeqComprehensionExpr vdm_PP_uTAR_uEXPR_tar_uSeqComprehensionExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const TYPE_PP_uTAR_uPAT_Bind &var_2_2, const Generic &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Sequence vdm_PP_uTAR_uEXPR_bind;
  Sequence vdm_PP_uTAR_uEXPR_elem;
  Generic vdm_PP_uTAR_uEXPR_pred;
  bool succ_5 = true;
  vdm_PP_uTAR_uEXPR_elem = var_1_1;
  vdm_PP_uTAR_uEXPR_bind = var_2_2;
  vdm_PP_uTAR_uEXPR_pred = var_3_3;
  if (succ_5) {}
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uSeqComprehensionExpr failed");
  Sequence varRes_6;
  Sequence var1_7;
  Sequence var1_8;
  Sequence var1_9;
  Sequence var1_10;
  var1_10.ImpConc(Sequence("[")).ImpConc(vdm_PP_uTAR_uEXPR_elem);
  var1_9.ImpConc(var1_10).ImpConc(Sequence(" | "));
  var1_8.ImpConc(var1_9).ImpConc(vdm_PP_uTAR_uEXPR_bind);
  Sequence var2_15;
  if (((Bool) (vdm_PP_uTAR_uEXPR_pred == Nil())).GetValue()) 
    var2_15 = Sequence("");
  else 
    var2_15.ImpConc(Sequence(" & ")).ImpConc(vdm_PP_uTAR_uEXPR_pred);
  var1_7.ImpConc(var1_8).ImpConc(var2_15);
  varRes_6.ImpConc(var1_7).ImpConc(Sequence("]"));
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uSeqEnumerationExpr

TYPE_PP_uTAR_uEXPR_SeqEnumerationExpr vdm_PP_uTAR_uEXPR_tar_uSeqEnumerationExpr(const type_cLL &vdm_PP_uTAR_uEXPR_els, const TYPE_CI_ContextId &vdm_PP_uTAR_uEXPR_cid) {
  Sequence varRes_4;
  Sequence var1_5;
  var1_5.ImpConc(Sequence("[")).ImpConc(vdm_PP_uTAR_uEXPR_List2SeparatorList((Generic) Sequence(","), (Generic) vdm_PP_uTAR_uEXPR_els));
  varRes_4.ImpConc(var1_5).ImpConc(Sequence("]"));
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uSeqModifyMapOverrideExpr

TYPE_PP_uTAR_uEXPR_SeqModifyMapOverrideExpr vdm_PP_uTAR_uEXPR_tar_uSeqModifyMapOverrideExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_mapexp;
  Sequence vdm_PP_uTAR_uEXPR_seqmap;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_seqmap = var_1_1;
  vdm_PP_uTAR_uEXPR_mapexp = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uSeqModifyMapOverrideExpr failed");
  Sequence varRes_5;
  Sequence var1_6;
  var1_6.ImpConc(vdm_PP_uTAR_uEXPR_seqmap).ImpConc(Sequence(" ++ "));
  varRes_5.ImpConc(var1_6).ImpConc(vdm_PP_uTAR_uEXPR_mapexp);
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uSetComprehensionExpr

TYPE_PP_uTAR_uEXPR_SetComprehensionExpr vdm_PP_uTAR_uEXPR_tar_uSetComprehensionExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const TYPE_PP_uTAR_uPAT_BindList &var_2_2, const Generic &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Sequence vdm_PP_uTAR_uEXPR_elem;
  Sequence vdm_PP_uTAR_uEXPR_mbindlist;
  Generic vdm_PP_uTAR_uEXPR_pred;
  bool succ_5 = true;
  vdm_PP_uTAR_uEXPR_elem = var_1_1;
  vdm_PP_uTAR_uEXPR_mbindlist = var_2_2;
  vdm_PP_uTAR_uEXPR_pred = var_3_3;
  if (succ_5) {}
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uSetComprehensionExpr failed");
  Sequence varRes_6;
  Sequence var1_7;
  Sequence var1_8;
  Sequence var1_9;
  Sequence var1_10;
  var1_10.ImpConc(Sequence("{")).ImpConc(vdm_PP_uTAR_uEXPR_elem);
  var1_9.ImpConc(var1_10).ImpConc(Sequence(" | "));
  var1_8.ImpConc(var1_9).ImpConc(vdm_PP_uTAR_uEXPR_List2CommaList((Generic) vdm_PP_uTAR_uEXPR_mbindlist));
  Sequence var2_16;
  if (((Bool) (vdm_PP_uTAR_uEXPR_pred == Nil())).GetValue()) 
    var2_16 = Sequence("");
  else 
    var2_16.ImpConc(Sequence(" & ")).ImpConc(vdm_PP_uTAR_uEXPR_pred);
  var1_7.ImpConc(var1_8).ImpConc(var2_16);
  varRes_6.ImpConc(var1_7).ImpConc(Sequence("}"));
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uSetEnumerationExpr

TYPE_PP_uTAR_uEXPR_SetEnumerationExpr vdm_PP_uTAR_uEXPR_tar_uSetEnumerationExpr(const type_cLL &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Sequence vdm_PP_uTAR_uEXPR_els;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_els = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uSetEnumerationExpr failed");
  Sequence varRes_4;
  Sequence var1_5;
  var1_5.ImpConc(Sequence("{")).ImpConc(vdm_PP_uTAR_uEXPR_List2SeparatorList((Generic) Sequence(","), (Generic) vdm_PP_uTAR_uEXPR_els));
  varRes_4.ImpConc(var1_5).ImpConc(Sequence("}"));
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uSetRangeExpr

TYPE_PP_uTAR_uEXPR_SetRangeExpr vdm_PP_uTAR_uEXPR_tar_uSetRangeExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_lb;
  Sequence vdm_PP_uTAR_uEXPR_ub;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_lb = var_1_1;
  vdm_PP_uTAR_uEXPR_ub = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uSetRangeExpr failed");
  Sequence varRes_5;
  Sequence var1_6;
  Sequence var1_7;
  Sequence var1_8;
  var1_8.ImpConc(Sequence("{")).ImpConc(vdm_PP_uTAR_uEXPR_lb);
  var1_7.ImpConc(var1_8).ImpConc(Sequence(",...,"));
  var1_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_ub);
  varRes_5.ImpConc(var1_6).ImpConc(Sequence("}"));
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uSubSequenceExpr

TYPE_PP_uTAR_uEXPR_SubSequenceExpr vdm_PP_uTAR_uEXPR_tar_uSubSequenceExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_PP_uTAR_uEXPR_Expr &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Sequence vdm_PP_uTAR_uEXPR_frompos;
  Sequence vdm_PP_uTAR_uEXPR_sequence;
  Sequence vdm_PP_uTAR_uEXPR_topos;
  bool succ_5 = true;
  vdm_PP_uTAR_uEXPR_sequence = var_1_1;
  vdm_PP_uTAR_uEXPR_frompos = var_2_2;
  vdm_PP_uTAR_uEXPR_topos = var_3_3;
  if (succ_5) {}
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uSubSequenceExpr failed");
  Sequence varRes_6;
  Sequence var1_7;
  Sequence var1_8;
  Sequence var1_9;
  Sequence var1_10;
  var1_10.ImpConc(vdm_PP_uTAR_uEXPR_sequence).ImpConc(Sequence("("));
  var1_9.ImpConc(var1_10).ImpConc(vdm_PP_uTAR_uEXPR_frompos);
  var1_8.ImpConc(var1_9).ImpConc(Sequence(",...,"));
  var1_7.ImpConc(var1_8).ImpConc(vdm_PP_uTAR_uEXPR_topos);
  varRes_6.ImpConc(var1_7).ImpConc(Sequence(")"));
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uTextLit

TYPE_PP_uTAR_uEXPR_TextLit vdm_PP_uTAR_uEXPR_tar_uTextLit(const type_cL &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Sequence vdm_PP_uTAR_uEXPR_str;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_str = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uTextLit failed");
  Sequence varRes_4;
  Sequence var1_5;
  var1_5.ImpConc(Sequence("\"")).ImpConc(vdm_PP_uTAR_uEXPR_str);
  varRes_4.ImpConc(var1_5).ImpConc(Sequence("\""));
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uTokenConstructorExpr

TYPE_PP_uTAR_uEXPR_TokenConstructorExpr vdm_PP_uTAR_uEXPR_tar_uTokenConstructorExpr(const TYPE_PP_uTAR_uEXPR_Expr &vdm_PP_uTAR_uEXPR_expr, const TYPE_CI_ContextId &vdm_PP_uTAR_uEXPR_cid) {
  Sequence varRes_4;
  Sequence var1_5;
  var1_5.ImpConc(Sequence("mk_token(")).ImpConc(vdm_PP_uTAR_uEXPR_expr);
  varRes_4.ImpConc(var1_5).ImpConc(Sequence(")"));
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uTupleConstructorExpr

TYPE_PP_uTAR_uEXPR_TupleConstructorExpr vdm_PP_uTAR_uEXPR_tar_uTupleConstructorExpr(const type_cLL &var_1_1, const TYPE_CI_ContextId &var_2_2) {
  Sequence vdm_PP_uTAR_uEXPR_els;
  bool succ_3 = true;
  vdm_PP_uTAR_uEXPR_els = var_1_1;
  if (succ_3) {}
  if (!succ_3) 
    RunTime("Pattern Match in Function Apply in function : tar_uTupleConstructorExpr failed");
  Sequence varRes_4;
  Sequence var1_5;
  var1_5.ImpConc(Sequence("mk_(")).ImpConc(vdm_PP_uTAR_uEXPR_List2SeparatorList((Generic) Sequence(","), (Generic) vdm_PP_uTAR_uEXPR_els));
  varRes_4.ImpConc(var1_5).ImpConc(Sequence(")"));
  return (Generic) varRes_4;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uTupleSelectExpr

TYPE_PP_uTAR_uEXPR_Expr vdm_PP_uTAR_uEXPR_tar_uTupleSelectExpr(const TYPE_AS_TupleSelectExpr &var_1_1, const TYPE_PP_uTAR_uEXPR_Expr &var_2_2, const TYPE_PP_uTAR_uEXPR_Expr &var_3_3, const TYPE_CI_ContextId &var_4_4) {
  Sequence vdm_PP_uTAR_uEXPR_num;
  Sequence vdm_PP_uTAR_uEXPR_tuple;
  bool succ_5 = true;
  if (succ_5) {}
  vdm_PP_uTAR_uEXPR_tuple = var_2_2;
  vdm_PP_uTAR_uEXPR_num = var_3_3;
  if (succ_5) {}
  if (!succ_5) 
    RunTime("Pattern Match in Function Apply in function : tar_uTupleSelectExpr failed");
  Sequence varRes_6;
  Sequence var1_7;
  var1_7.ImpConc(vdm_PP_uTAR_uEXPR_tuple).ImpConc(Sequence(".#"));
  varRes_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_num);
  return (Generic) varRes_6;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uTypeJudgementExpr

TYPE_PP_uTAR_uEXPR_IsExpr vdm_PP_uTAR_uEXPR_tar_uTypeJudgementExpr(const TYPE_PP_uTAR_uEXPR_Expr &var_1_1, const TYPE_PP_uTAR_uTYPE_Type &var_2_2, const TYPE_CI_ContextId &var_3_3) {
  Sequence vdm_PP_uTAR_uEXPR_expr;
  Sequence vdm_PP_uTAR_uEXPR_type;
  bool succ_4 = true;
  vdm_PP_uTAR_uEXPR_expr = var_1_1;
  vdm_PP_uTAR_uEXPR_type = var_2_2;
  if (succ_4) {}
  if (!succ_4) 
    RunTime("Pattern Match in Function Apply in function : tar_uTypeJudgementExpr failed");
  Sequence varRes_5;
  Sequence var1_6;
  Sequence var1_7;
  Sequence var1_8;
  var1_8.ImpConc(Sequence("is_(")).ImpConc(vdm_PP_uTAR_uEXPR_expr);
  var1_7.ImpConc(var1_8).ImpConc(Sequence(","));
  var1_6.ImpConc(var1_7).ImpConc(vdm_PP_uTAR_uEXPR_type);
  varRes_5.ImpConc(var1_6).ImpConc(Sequence(")"));
  return (Generic) varRes_5;
}
#endif

#ifndef DEF_PP_uTAR_uEXPR_tar_uUndefinedExpr

TYPE_PP_uTAR_uEXPR_UndefinedExpr vdm_PP_uTAR_uEXPR_tar_uUndefinedExpr(const TYPE_CI_ContextId &var_1_1) {
  bool succ_2 = true;
  if (succ_2) {}
  if (!succ_2) 
    RunTime("Pattern Match in Function Apply in function : tar_uUndefinedExpr failed");
  return (Generic) Sequence("undefined");
}
#endif

