//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 11-Oct-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _PP_uTAR_uPAT_anonym_h
#define _PP_uTAR_uPAT_anonym_h

#include "PP_uTAR_uPAT_userdef.h"
#include "metaiv.h"
class type_cL;
class type_cLL;
#define TYPE_PP_uTAR_uPAT_string type_cL
#define TYPE_PP_uTAR_uPAT_TypeBind type_cL
#define TYPE_PP_uTAR_uPAT_TuplePattern type_cL
#define TYPE_PP_uTAR_uPAT_SetUnionPattern type_cL
#define TYPE_PP_uTAR_uPAT_SetPattern type_cL
#define TYPE_PP_uTAR_uPAT_SetEnumPattern type_cL
#define TYPE_PP_uTAR_uPAT_SetBind type_cL
#define TYPE_PP_uTAR_uPAT_SeqPattern type_cL
#define TYPE_PP_uTAR_uPAT_SeqEnumPattern type_cL
#define TYPE_PP_uTAR_uPAT_SeqConcPattern type_cL
#define TYPE_PP_uTAR_uPAT_RecordPattern type_cL
#define TYPE_PP_uTAR_uPAT_PatternName type_cL
#define TYPE_PP_uTAR_uPAT_PatternBind type_cL
#define TYPE_PP_uTAR_uPAT_Pattern type_cL
#define TYPE_PP_uTAR_uPAT_PATTERN type_cL
#define TYPE_PP_uTAR_uPAT_MultTypeBind type_cL
#define TYPE_PP_uTAR_uPAT_MultSetBind type_cL
#define TYPE_PP_uTAR_uPAT_MultBind type_cL
#define TYPE_PP_uTAR_uPAT_MatchVal type_cL
#define TYPE_PP_uTAR_uPAT_BindList type_cLL
#define TYPE_PP_uTAR_uPAT_Bind type_cL
#define TYPE_PP_uTAR_uPAT_BIND type_cL
#ifndef TAG_type_cL
#define TAG_type_cL (TAG_PP_uTAR_uPAT + 1)
#endif

#ifndef TAG_type_cLL
#define TAG_type_cLL (TAG_PP_uTAR_uPAT + 2)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "PP_uTAR_uEXPR_anonym.h"
#include "PP_uTAR_uTYPE_anonym.h"
#include "PP_uTRA_uTYPE_anonym.h"
#include "REP_anonym.h"
#ifndef DECL_type_cL
#define DECL_type_cL 1

class type_cL : public SEQ<Char> {
public:

  type_cL() : SEQ<Char>() {}

  type_cL(const SEQ<Char> &c) : SEQ<Char>(c) {}

  type_cL(const Generic &c) : SEQ<Char>(c) {}

  const char * GetTypeName() const { return "type_cL"; }
} ;
#endif

#ifndef DECL_type_cLL
#define DECL_type_cLL 1

class type_cLL : public SEQ<type_cL> {
public:

  type_cLL() : SEQ<type_cL>() {}

  type_cLL(const SEQ<type_cL> &c) : SEQ<type_cL>(c) {}

  type_cLL(const Generic &c) : SEQ<type_cL>(c) {}

  const char * GetTypeName() const { return "type_cLL"; }
} ;
#endif


#endif

