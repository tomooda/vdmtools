//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 11-Oct-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _PP_uTAR_uTYPE_anonym_h
#define _PP_uTAR_uTYPE_anonym_h

#include "PP_uTAR_uTYPE_userdef.h"
#include "metaiv.h"
class type_cL;
class type_cLL;
#define TYPE_PP_uTAR_uTYPE_string type_cL
#define TYPE_PP_uTAR_uTYPE_UnionType type_cL
#define TYPE_PP_uTAR_uTYPE_TypeVar type_cL
#define TYPE_PP_uTAR_uTYPE_TypeName type_cL
#define TYPE_PP_uTAR_uTYPE_Type type_cL
#define TYPE_PP_uTAR_uTYPE_TotalFnType type_cL
#define TYPE_PP_uTAR_uTYPE_TYPE type_cL
#define TYPE_PP_uTAR_uTYPE_SetType type_cL
#define TYPE_PP_uTAR_uTYPE_SeqType type_cL
#define TYPE_PP_uTAR_uTYPE_Seq1Type type_cL
#define TYPE_PP_uTAR_uTYPE_Seq0Type type_cL
#define TYPE_PP_uTAR_uTYPE_QuoteType type_cL
#define TYPE_PP_uTAR_uTYPE_ProductType type_cL
#define TYPE_PP_uTAR_uTYPE_PartialFnType type_cL
#define TYPE_PP_uTAR_uTYPE_OptionalType type_cL
#define TYPE_PP_uTAR_uTYPE_OpType type_cL
#define TYPE_PP_uTAR_uTYPE_Name type_cL
#define TYPE_PP_uTAR_uTYPE_MapType type_cL
#define TYPE_PP_uTAR_uTYPE_InjectiveMapType type_cL
#define TYPE_PP_uTAR_uTYPE_Ids type_cL
#define TYPE_PP_uTAR_uTYPE_GeneralMapType type_cL
#define TYPE_PP_uTAR_uTYPE_FnType type_cL
#define TYPE_PP_uTAR_uTYPE_Field type_cL
#define TYPE_PP_uTAR_uTYPE_FIELD type_cL
#define TYPE_PP_uTAR_uTYPE_DiscretionaryType type_cLL
#define TYPE_PP_uTAR_uTYPE_CompositeType type_cL
#define TYPE_PP_uTAR_uTYPE_BracketedType type_cL
#define TYPE_PP_uTAR_uTYPE_BasicType type_cL
#ifndef TAG_type_cL
#define TAG_type_cL (TAG_PP_uTAR_uTYPE + 1)
#endif

#ifndef TAG_type_cLL
#define TAG_type_cLL (TAG_PP_uTAR_uTYPE + 2)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "REP_anonym.h"
#ifndef DECL_type_cL
#define DECL_type_cL 1

class type_cL : public SEQ<Char> {
public:

  type_cL() : SEQ<Char>() {}

  type_cL(const SEQ<Char> &c) : SEQ<Char>(c) {}

  type_cL(const Generic &c) : SEQ<Char>(c) {}

  const char * GetTypeName() const { return "type_cL"; }
} ;
#endif

#ifndef DECL_type_cLL
#define DECL_type_cLL 1

class type_cLL : public SEQ<type_cL> {
public:

  type_cLL() : SEQ<type_cL>() {}

  type_cLL(const SEQ<type_cL> &c) : SEQ<type_cL>(c) {}

  type_cLL(const Generic &c) : SEQ<type_cL>(c) {}

  const char * GetTypeName() const { return "type_cLL"; }
} ;
#endif


#endif

