//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Thu 21-Oct-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _TRF_uTAR_uEXPR_anonym_h
#define _TRF_uTAR_uEXPR_anonym_h

#include "TRF_uTAR_uEXPR_userdef.h"
#include "metaiv.h"
extern const Quote quote_ALL;
extern const Quote quote_EXISTS;
extern const Quote quote_AND;
extern const Quote quote_COMPOSE;
extern const Quote quote_EQ;
extern const Quote quote_EQUIV;
extern const Quote quote_IMPLY;
extern const Quote quote_INSET;
extern const Quote quote_INTDIV;
extern const Quote quote_MAPDOMRESTBY;
extern const Quote quote_MAPDOMRESTTO;
extern const Quote quote_MAPMERGE;
extern const Quote quote_MAPRNGRESTBY;
extern const Quote quote_MAPRNGRESTTO;
extern const Quote quote_NE;
extern const Quote quote_NOTINSET;
extern const Quote quote_NUMDIV;
extern const Quote quote_NUMEXP;
extern const Quote quote_NUMGE;
extern const Quote quote_NUMGT;
extern const Quote quote_NUMLE;
extern const Quote quote_NUMLT;
extern const Quote quote_NUMMINUS;
extern const Quote quote_NUMMOD;
extern const Quote quote_NUMMULT;
extern const Quote quote_NUMPLUS;
extern const Quote quote_NUMREM;
extern const Quote quote_OR;
extern const Quote quote_PROPERSUBSET;
extern const Quote quote_SEQCONC;
extern const Quote quote_SETINTERSECT;
extern const Quote quote_SETMINUS;
extern const Quote quote_SETUNION;
extern const Quote quote_SUBSET;
extern const Quote quote_FLOOR;
extern const Quote quote_MAPDISTRMERGE;
extern const Quote quote_MAPDOM;
extern const Quote quote_MAPRNG;
extern const Quote quote_NOT;
extern const Quote quote_NUMABS;
extern const Quote quote_SEQDISTRCONC;
extern const Quote quote_SEQELEMS;
extern const Quote quote_SEQHEAD;
extern const Quote quote_SEQINDICES;
extern const Quote quote_SEQLEN;
extern const Quote quote_SEQTAIL;
extern const Quote quote_SETCARD;
extern const Quote quote_SETDISTRINTERSECT;
extern const Quote quote_SETDISTRUNION;
extern const Quote quote_SETPOWER;
class TYPE_TRF_uTAR_uEXPR_AllOrExistsExpr;
class TYPE_TRF_uTAR_uEXPR_ApplyExpr;
class TYPE_TRF_uTAR_uEXPR_BinaryExpr;
class TYPE_TRF_uTAR_uEXPR_BoolLit;
class TYPE_TRF_uTAR_uEXPR_BracketedExpr;
class TYPE_TRF_uTAR_uEXPR_CaseAltn;
class TYPE_TRF_uTAR_uEXPR_CasesExpr;
class TYPE_TRF_uTAR_uEXPR_CharLit;
class TYPE_TRF_uTAR_uEXPR_DefExpr;
class TYPE_TRF_uTAR_uEXPR_ElseifExpr;
class TYPE_TRF_uTAR_uEXPR_ExistsUniqueExpr;
class TYPE_TRF_uTAR_uEXPR_FctTypeInstExpr;
class TYPE_TRF_uTAR_uEXPR_FieldSelectExpr;
class TYPE_TRF_uTAR_uEXPR_IfExpr;
class TYPE_TRF_uTAR_uEXPR_IotaExpr;
class TYPE_TRF_uTAR_uEXPR_IsExpr;
class TYPE_TRF_uTAR_uEXPR_LambdaExpr;
class TYPE_TRF_uTAR_uEXPR_LetBeSTExpr;
class TYPE_TRF_uTAR_uEXPR_LetExpr;
class TYPE_TRF_uTAR_uEXPR_MapComprehensionExpr;
class TYPE_TRF_uTAR_uEXPR_MapEnumerationExpr;
class TYPE_TRF_uTAR_uEXPR_MapInverseExpr;
class TYPE_TRF_uTAR_uEXPR_NameExpr;
class TYPE_TRF_uTAR_uEXPR_NilLit;
class TYPE_TRF_uTAR_uEXPR_NumLit;
class TYPE_TRF_uTAR_uEXPR_OldName;
class TYPE_TRF_uTAR_uEXPR_PreConditionApplyExpr;
class TYPE_TRF_uTAR_uEXPR_PrefixExpr;
class TYPE_TRF_uTAR_uEXPR_QuoteLit;
class TYPE_TRF_uTAR_uEXPR_RealLit;
class TYPE_TRF_uTAR_uEXPR_RecordConstructorExpr;
class TYPE_TRF_uTAR_uEXPR_RecordModifierExpr;
class TYPE_TRF_uTAR_uEXPR_SeqComprehensionExpr;
class TYPE_TRF_uTAR_uEXPR_SeqEnumerationExpr;
class TYPE_TRF_uTAR_uEXPR_SeqModifyMapOverrideExpr;
class TYPE_TRF_uTAR_uEXPR_SetComprehensionExpr;
class TYPE_TRF_uTAR_uEXPR_SetEnumerationExpr;
class TYPE_TRF_uTAR_uEXPR_SetRangeExpr;
class TYPE_TRF_uTAR_uEXPR_SubSequenceExpr;
class TYPE_TRF_uTAR_uEXPR_TextLit;
class TYPE_TRF_uTAR_uEXPR_TokenConstructorExpr;
class TYPE_TRF_uTAR_uEXPR_TupleConstructorExpr;
class TYPE_TRF_uTAR_uEXPR_TupleSelectExpr;
class TYPE_TRF_uTAR_uEXPR_TypeJudgementExpr;
class TYPE_TRF_uTAR_uEXPR_UndefinedExpr;
class TYPE_TRF_uTAR_uEXPR_Maplet;
class TYPE_TRF_uTAR_uEXPR_RecordModification;
class type_cL;
class type_cLL;
class type_cLLS;
class type_FFb3P;
class type_FL;
class type_FFL2P;
class type_typevariableS;
class type_typevariableL;
class type_FLL;
class type_dL;
class type_23TRF_uTAR_uEXPR_CaseAltnCL;
class type_Fd2P;
class type_Fd2PL;
class type_25TRF_uTAR_uEXPR_ElseifExprCL;
class type_22TRF_uTAR_uPAT_TypeBindCL;
class type_21TRF_uTAR_uEXPR_MapletCL;
class type_33TRF_uTAR_uEXPR_RecordModificationCL;
class type_FF2P;
class type_FF2PL;
class type_FLFL2P;
#define TYPE_TRF_uTAR_uEXPR_UnaryExpr Record
#define TYPE_TRF_uTAR_uEXPR_QuantExpr Record
#define TYPE_TRF_uTAR_uEXPR_NameType TYPE_AS_Name
#define TYPE_TRF_uTAR_uEXPR_NameName TYPE_AS_Name
#define TYPE_TRF_uTAR_uEXPR_Literal Record
#define TYPE_TRF_uTAR_uEXPR_Ids type_cLL
#define TYPE_TRF_uTAR_uEXPR_Identifiers type_cLLS
#define TYPE_TRF_uTAR_uEXPR_Id type_cL
#define TYPE_TRF_uTAR_uEXPR_Expr Record
#ifndef TAG_type_cL
#define TAG_type_cL (TAG_TRF_uTAR_uEXPR + 1)
#endif

#ifndef TAG_type_cLL
#define TAG_type_cLL (TAG_TRF_uTAR_uEXPR + 2)
#endif

#ifndef TAG_type_cLLS
#define TAG_type_cLLS (TAG_TRF_uTAR_uEXPR + 3)
#endif

#ifndef TAG_type_FFb3P
#define TAG_type_FFb3P (TAG_TRF_uTAR_uEXPR + 4)
#endif

#ifndef TAG_type_FL
#define TAG_type_FL (TAG_TRF_uTAR_uEXPR + 5)
#endif

#ifndef TAG_type_FFL2P
#define TAG_type_FFL2P (TAG_TRF_uTAR_uEXPR + 6)
#endif

#ifndef TAG_type_typevariableS
#define TAG_type_typevariableS (TAG_TRF_uTAR_uEXPR + 7)
#endif

#ifndef TAG_type_typevariableL
#define TAG_type_typevariableL (TAG_TRF_uTAR_uEXPR + 8)
#endif

#ifndef TAG_type_FLL
#define TAG_type_FLL (TAG_TRF_uTAR_uEXPR + 9)
#endif

#ifndef TAG_type_dL
#define TAG_type_dL (TAG_TRF_uTAR_uEXPR + 10)
#endif

#ifndef TAG_type_23TRF_uTAR_uEXPR_CaseAltnCL
#define TAG_type_23TRF_uTAR_uEXPR_CaseAltnCL (TAG_TRF_uTAR_uEXPR + 11)
#endif

#ifndef TAG_type_Fd2P
#define TAG_type_Fd2P (TAG_TRF_uTAR_uEXPR + 12)
#endif

#ifndef TAG_type_Fd2PL
#define TAG_type_Fd2PL (TAG_TRF_uTAR_uEXPR + 13)
#endif

#ifndef TAG_type_25TRF_uTAR_uEXPR_ElseifExprCL
#define TAG_type_25TRF_uTAR_uEXPR_ElseifExprCL (TAG_TRF_uTAR_uEXPR + 14)
#endif

#ifndef TAG_type_22TRF_uTAR_uPAT_TypeBindCL
#define TAG_type_22TRF_uTAR_uPAT_TypeBindCL (TAG_TRF_uTAR_uEXPR + 15)
#endif

#ifndef TAG_type_21TRF_uTAR_uEXPR_MapletCL
#define TAG_type_21TRF_uTAR_uEXPR_MapletCL (TAG_TRF_uTAR_uEXPR + 16)
#endif

#ifndef TAG_type_33TRF_uTAR_uEXPR_RecordModificationCL
#define TAG_type_33TRF_uTAR_uEXPR_RecordModificationCL (TAG_TRF_uTAR_uEXPR + 17)
#endif

#ifndef TAG_type_FF2P
#define TAG_type_FF2P (TAG_TRF_uTAR_uEXPR + 18)
#endif

#ifndef TAG_type_FF2PL
#define TAG_type_FF2PL (TAG_TRF_uTAR_uEXPR + 19)
#endif

#ifndef TAG_type_FLFL2P
#define TAG_type_FLFL2P (TAG_TRF_uTAR_uEXPR + 20)
#endif

#ifndef TAG_quote_ALL
#define TAG_quote_ALL (TAG_TRF_uTAR_uEXPR + 21)
#endif

#ifndef TAG_quote_EXISTS
#define TAG_quote_EXISTS (TAG_TRF_uTAR_uEXPR + 22)
#endif

#ifndef TAG_quote_AND
#define TAG_quote_AND (TAG_TRF_uTAR_uEXPR + 23)
#endif

#ifndef TAG_quote_COMPOSE
#define TAG_quote_COMPOSE (TAG_TRF_uTAR_uEXPR + 24)
#endif

#ifndef TAG_quote_EQ
#define TAG_quote_EQ (TAG_TRF_uTAR_uEXPR + 25)
#endif

#ifndef TAG_quote_EQUIV
#define TAG_quote_EQUIV (TAG_TRF_uTAR_uEXPR + 26)
#endif

#ifndef TAG_quote_IMPLY
#define TAG_quote_IMPLY (TAG_TRF_uTAR_uEXPR + 27)
#endif

#ifndef TAG_quote_INSET
#define TAG_quote_INSET (TAG_TRF_uTAR_uEXPR + 28)
#endif

#ifndef TAG_quote_INTDIV
#define TAG_quote_INTDIV (TAG_TRF_uTAR_uEXPR + 29)
#endif

#ifndef TAG_quote_MAPDOMRESTBY
#define TAG_quote_MAPDOMRESTBY (TAG_TRF_uTAR_uEXPR + 30)
#endif

#ifndef TAG_quote_MAPDOMRESTTO
#define TAG_quote_MAPDOMRESTTO (TAG_TRF_uTAR_uEXPR + 31)
#endif

#ifndef TAG_quote_MAPMERGE
#define TAG_quote_MAPMERGE (TAG_TRF_uTAR_uEXPR + 32)
#endif

#ifndef TAG_quote_MAPRNGRESTBY
#define TAG_quote_MAPRNGRESTBY (TAG_TRF_uTAR_uEXPR + 33)
#endif

#ifndef TAG_quote_MAPRNGRESTTO
#define TAG_quote_MAPRNGRESTTO (TAG_TRF_uTAR_uEXPR + 34)
#endif

#ifndef TAG_quote_NE
#define TAG_quote_NE (TAG_TRF_uTAR_uEXPR + 35)
#endif

#ifndef TAG_quote_NOTINSET
#define TAG_quote_NOTINSET (TAG_TRF_uTAR_uEXPR + 36)
#endif

#ifndef TAG_quote_NUMDIV
#define TAG_quote_NUMDIV (TAG_TRF_uTAR_uEXPR + 37)
#endif

#ifndef TAG_quote_NUMEXP
#define TAG_quote_NUMEXP (TAG_TRF_uTAR_uEXPR + 38)
#endif

#ifndef TAG_quote_NUMGE
#define TAG_quote_NUMGE (TAG_TRF_uTAR_uEXPR + 39)
#endif

#ifndef TAG_quote_NUMGT
#define TAG_quote_NUMGT (TAG_TRF_uTAR_uEXPR + 40)
#endif

#ifndef TAG_quote_NUMLE
#define TAG_quote_NUMLE (TAG_TRF_uTAR_uEXPR + 41)
#endif

#ifndef TAG_quote_NUMLT
#define TAG_quote_NUMLT (TAG_TRF_uTAR_uEXPR + 42)
#endif

#ifndef TAG_quote_NUMMINUS
#define TAG_quote_NUMMINUS (TAG_TRF_uTAR_uEXPR + 43)
#endif

#ifndef TAG_quote_NUMMOD
#define TAG_quote_NUMMOD (TAG_TRF_uTAR_uEXPR + 44)
#endif

#ifndef TAG_quote_NUMMULT
#define TAG_quote_NUMMULT (TAG_TRF_uTAR_uEXPR + 45)
#endif

#ifndef TAG_quote_NUMPLUS
#define TAG_quote_NUMPLUS (TAG_TRF_uTAR_uEXPR + 46)
#endif

#ifndef TAG_quote_NUMREM
#define TAG_quote_NUMREM (TAG_TRF_uTAR_uEXPR + 47)
#endif

#ifndef TAG_quote_OR
#define TAG_quote_OR (TAG_TRF_uTAR_uEXPR + 48)
#endif

#ifndef TAG_quote_PROPERSUBSET
#define TAG_quote_PROPERSUBSET (TAG_TRF_uTAR_uEXPR + 49)
#endif

#ifndef TAG_quote_SEQCONC
#define TAG_quote_SEQCONC (TAG_TRF_uTAR_uEXPR + 50)
#endif

#ifndef TAG_quote_SETINTERSECT
#define TAG_quote_SETINTERSECT (TAG_TRF_uTAR_uEXPR + 51)
#endif

#ifndef TAG_quote_SETMINUS
#define TAG_quote_SETMINUS (TAG_TRF_uTAR_uEXPR + 52)
#endif

#ifndef TAG_quote_SETUNION
#define TAG_quote_SETUNION (TAG_TRF_uTAR_uEXPR + 53)
#endif

#ifndef TAG_quote_SUBSET
#define TAG_quote_SUBSET (TAG_TRF_uTAR_uEXPR + 54)
#endif

#ifndef TAG_quote_FLOOR
#define TAG_quote_FLOOR (TAG_TRF_uTAR_uEXPR + 55)
#endif

#ifndef TAG_quote_MAPDISTRMERGE
#define TAG_quote_MAPDISTRMERGE (TAG_TRF_uTAR_uEXPR + 56)
#endif

#ifndef TAG_quote_MAPDOM
#define TAG_quote_MAPDOM (TAG_TRF_uTAR_uEXPR + 57)
#endif

#ifndef TAG_quote_MAPRNG
#define TAG_quote_MAPRNG (TAG_TRF_uTAR_uEXPR + 58)
#endif

#ifndef TAG_quote_NOT
#define TAG_quote_NOT (TAG_TRF_uTAR_uEXPR + 59)
#endif

#ifndef TAG_quote_NUMABS
#define TAG_quote_NUMABS (TAG_TRF_uTAR_uEXPR + 60)
#endif

#ifndef TAG_quote_SEQDISTRCONC
#define TAG_quote_SEQDISTRCONC (TAG_TRF_uTAR_uEXPR + 61)
#endif

#ifndef TAG_quote_SEQELEMS
#define TAG_quote_SEQELEMS (TAG_TRF_uTAR_uEXPR + 62)
#endif

#ifndef TAG_quote_SEQHEAD
#define TAG_quote_SEQHEAD (TAG_TRF_uTAR_uEXPR + 63)
#endif

#ifndef TAG_quote_SEQINDICES
#define TAG_quote_SEQINDICES (TAG_TRF_uTAR_uEXPR + 64)
#endif

#ifndef TAG_quote_SEQLEN
#define TAG_quote_SEQLEN (TAG_TRF_uTAR_uEXPR + 65)
#endif

#ifndef TAG_quote_SEQTAIL
#define TAG_quote_SEQTAIL (TAG_TRF_uTAR_uEXPR + 66)
#endif

#ifndef TAG_quote_SETCARD
#define TAG_quote_SETCARD (TAG_TRF_uTAR_uEXPR + 67)
#endif

#ifndef TAG_quote_SETDISTRINTERSECT
#define TAG_quote_SETDISTRINTERSECT (TAG_TRF_uTAR_uEXPR + 68)
#endif

#ifndef TAG_quote_SETDISTRUNION
#define TAG_quote_SETDISTRUNION (TAG_TRF_uTAR_uEXPR + 69)
#endif

#ifndef TAG_quote_SETPOWER
#define TAG_quote_SETPOWER (TAG_TRF_uTAR_uEXPR + 70)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "CI_uAUX_anonym.h"
#include "EXP_uPAT_anonym.h"
#include "PID_anonym.h"
#include "PURE_uPAT2_anonym.h"
#include "REP_anonym.h"
#include "REP2TYPE_anonym.h"
#include "TRF_uCAST_anonym.h"
#include "TRF_uTAR_uDEF_anonym.h"
#include "TRF_uTAR_uPAT_anonym.h"
#include "TRF_uTAR_uTYPE_anonym.h"
#ifndef TAG_TYPE_TRF_uTAR_uEXPR_AllOrExistsExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_AllOrExistsExpr (TAG_TRF_uTAR_uEXPR + 71)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_ApplyExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_ApplyExpr (TAG_TRF_uTAR_uEXPR + 72)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_BinaryExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_BinaryExpr (TAG_TRF_uTAR_uEXPR + 73)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_BoolLit
#define TAG_TYPE_TRF_uTAR_uEXPR_BoolLit (TAG_TRF_uTAR_uEXPR + 74)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_BracketedExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_BracketedExpr (TAG_TRF_uTAR_uEXPR + 75)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_CaseAltn
#define TAG_TYPE_TRF_uTAR_uEXPR_CaseAltn (TAG_TRF_uTAR_uEXPR + 76)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_CasesExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_CasesExpr (TAG_TRF_uTAR_uEXPR + 77)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_CharLit
#define TAG_TYPE_TRF_uTAR_uEXPR_CharLit (TAG_TRF_uTAR_uEXPR + 78)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_DefExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_DefExpr (TAG_TRF_uTAR_uEXPR + 79)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_ElseifExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_ElseifExpr (TAG_TRF_uTAR_uEXPR + 80)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_ExistsUniqueExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_ExistsUniqueExpr (TAG_TRF_uTAR_uEXPR + 81)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_FctTypeInstExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_FctTypeInstExpr (TAG_TRF_uTAR_uEXPR + 82)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_FieldSelectExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_FieldSelectExpr (TAG_TRF_uTAR_uEXPR + 83)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_IfExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_IfExpr (TAG_TRF_uTAR_uEXPR + 84)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_IotaExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_IotaExpr (TAG_TRF_uTAR_uEXPR + 85)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_IsExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_IsExpr (TAG_TRF_uTAR_uEXPR + 86)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_LambdaExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_LambdaExpr (TAG_TRF_uTAR_uEXPR + 87)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_LetBeSTExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_LetBeSTExpr (TAG_TRF_uTAR_uEXPR + 88)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_LetExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_LetExpr (TAG_TRF_uTAR_uEXPR + 89)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_MapComprehensionExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_MapComprehensionExpr (TAG_TRF_uTAR_uEXPR + 90)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_MapEnumerationExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_MapEnumerationExpr (TAG_TRF_uTAR_uEXPR + 91)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_MapInverseExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_MapInverseExpr (TAG_TRF_uTAR_uEXPR + 92)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_NameExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_NameExpr (TAG_TRF_uTAR_uEXPR + 93)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_NilLit
#define TAG_TYPE_TRF_uTAR_uEXPR_NilLit (TAG_TRF_uTAR_uEXPR + 94)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_NumLit
#define TAG_TYPE_TRF_uTAR_uEXPR_NumLit (TAG_TRF_uTAR_uEXPR + 95)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_OldName
#define TAG_TYPE_TRF_uTAR_uEXPR_OldName (TAG_TRF_uTAR_uEXPR + 96)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_PreConditionApplyExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_PreConditionApplyExpr (TAG_TRF_uTAR_uEXPR + 97)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_PrefixExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_PrefixExpr (TAG_TRF_uTAR_uEXPR + 98)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_QuoteLit
#define TAG_TYPE_TRF_uTAR_uEXPR_QuoteLit (TAG_TRF_uTAR_uEXPR + 99)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_RealLit
#define TAG_TYPE_TRF_uTAR_uEXPR_RealLit (TAG_TRF_uTAR_uEXPR + 100)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_RecordConstructorExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_RecordConstructorExpr (TAG_TRF_uTAR_uEXPR + 101)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_RecordModifierExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_RecordModifierExpr (TAG_TRF_uTAR_uEXPR + 102)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_SeqComprehensionExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_SeqComprehensionExpr (TAG_TRF_uTAR_uEXPR + 103)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_SeqEnumerationExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_SeqEnumerationExpr (TAG_TRF_uTAR_uEXPR + 104)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_SeqModifyMapOverrideExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_SeqModifyMapOverrideExpr (TAG_TRF_uTAR_uEXPR + 105)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_SetComprehensionExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_SetComprehensionExpr (TAG_TRF_uTAR_uEXPR + 106)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_SetEnumerationExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_SetEnumerationExpr (TAG_TRF_uTAR_uEXPR + 107)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_SetRangeExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_SetRangeExpr (TAG_TRF_uTAR_uEXPR + 108)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_SubSequenceExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_SubSequenceExpr (TAG_TRF_uTAR_uEXPR + 109)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_TextLit
#define TAG_TYPE_TRF_uTAR_uEXPR_TextLit (TAG_TRF_uTAR_uEXPR + 110)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_TokenConstructorExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_TokenConstructorExpr (TAG_TRF_uTAR_uEXPR + 111)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_TupleConstructorExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_TupleConstructorExpr (TAG_TRF_uTAR_uEXPR + 112)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_TupleSelectExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_TupleSelectExpr (TAG_TRF_uTAR_uEXPR + 113)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_TypeJudgementExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_TypeJudgementExpr (TAG_TRF_uTAR_uEXPR + 114)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_UndefinedExpr
#define TAG_TYPE_TRF_uTAR_uEXPR_UndefinedExpr (TAG_TRF_uTAR_uEXPR + 115)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_Maplet
#define TAG_TYPE_TRF_uTAR_uEXPR_Maplet (TAG_TRF_uTAR_uEXPR + 116)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uEXPR_RecordModification
#define TAG_TYPE_TRF_uTAR_uEXPR_RecordModification (TAG_TRF_uTAR_uEXPR + 117)
#endif

#ifndef DECL_type_cL
#define DECL_type_cL 1

class type_cL : public SEQ<Char> {
public:

  type_cL() : SEQ<Char>() {}

  type_cL(const SEQ<Char> &c) : SEQ<Char>(c) {}

  type_cL(const Generic &c) : SEQ<Char>(c) {}

  const char * GetTypeName() const { return "type_cL"; }
} ;
#endif

#ifndef DECL_type_cLL
#define DECL_type_cLL 1

class type_cLL : public SEQ<type_cL> {
public:

  type_cLL() : SEQ<type_cL>() {}

  type_cLL(const SEQ<type_cL> &c) : SEQ<type_cL>(c) {}

  type_cLL(const Generic &c) : SEQ<type_cL>(c) {}

  const char * GetTypeName() const { return "type_cLL"; }
} ;
#endif

#ifndef DECL_type_cLLS
#define DECL_type_cLLS 1

class type_cLLS : public SET<type_cLL> {
public:

  type_cLLS() : SET<type_cLL>() {}

  type_cLLS(const SET<type_cLL> &c) : SET<type_cLL>(c) {}

  type_cLLS(const Generic &c) : SET<type_cLL>(c) {}

  const char * GetTypeName() const { return "type_cLLS"; }
} ;
#endif

#ifndef DECL_type_FFb3P
#define DECL_type_FFb3P 1

class type_FFb3P : public Tuple {
public:

  type_FFb3P() : Tuple(3) {}
  void Init(Generic p2, TYPE_AS_Bind p3, Bool p4);

  type_FFb3P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_FFb3P"; }
  Generic get_1() const;
  void set_1(const Generic &p);
  TYPE_AS_Bind get_2() const;
  void set_2(const TYPE_AS_Bind &p);
  Bool get_3() const;
  void set_3(const Bool &p);
} ;
#endif

#ifndef DECL_type_FL
#define DECL_type_FL 1

class type_FL : public SEQ<Generic> {
public:

  type_FL() : SEQ<Generic>() {}

  type_FL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_FL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_FL"; }
} ;
#endif

#ifndef DECL_type_FFL2P
#define DECL_type_FFL2P 1

class type_FFL2P : public Tuple {
public:

  type_FFL2P() : Tuple(2) {}
  void Init(Generic p2, TYPE_AS_BindList p3);

  type_FFL2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_FFL2P"; }
  Generic get_1() const;
  void set_1(const Generic &p);
  TYPE_AS_BindList get_2() const;
  void set_2(const TYPE_AS_BindList &p);
} ;
#endif

#ifndef DECL_type_typevariableS
#define DECL_type_typevariableS 1

class type_typevariableS : public SET<Generic> {
public:

  type_typevariableS() : SET<Generic>() {}

  type_typevariableS(const SET<Generic> &c) : SET<Generic>(c) {}

  type_typevariableS(const Generic &c) : SET<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableS"; }
} ;
#endif

#ifndef DECL_type_typevariableL
#define DECL_type_typevariableL 1

class type_typevariableL : public SEQ<Generic> {
public:

  type_typevariableL() : SEQ<Generic>() {}

  type_typevariableL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_typevariableL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableL"; }
} ;
#endif

#ifndef DECL_type_FLL
#define DECL_type_FLL 1

class type_FLL : public SEQ<type_FL> {
public:

  type_FLL() : SEQ<type_FL>() {}

  type_FLL(const SEQ<type_FL> &c) : SEQ<type_FL>(c) {}

  type_FLL(const Generic &c) : SEQ<type_FL>(c) {}

  const char * GetTypeName() const { return "type_FLL"; }
} ;
#endif

#ifndef DECL_type_dL
#define DECL_type_dL 1

class type_dL : public SEQ<Record> {
public:

  type_dL() : SEQ<Record>() {}

  type_dL(const SEQ<Record> &c) : SEQ<Record>(c) {}

  type_dL(const Generic &c) : SEQ<Record>(c) {}

  const char * GetTypeName() const { return "type_dL"; }
} ;
#endif

#ifndef DECL_type_23TRF_uTAR_uEXPR_CaseAltnCL
#define DECL_type_23TRF_uTAR_uEXPR_CaseAltnCL 1

class type_23TRF_uTAR_uEXPR_CaseAltnCL : public SEQ<TYPE_TRF_uTAR_uEXPR_CaseAltn> {
public:

  type_23TRF_uTAR_uEXPR_CaseAltnCL() : SEQ<TYPE_TRF_uTAR_uEXPR_CaseAltn>() {}

  type_23TRF_uTAR_uEXPR_CaseAltnCL(const SEQ<TYPE_TRF_uTAR_uEXPR_CaseAltn> &c) : SEQ<TYPE_TRF_uTAR_uEXPR_CaseAltn>(c) {}

  type_23TRF_uTAR_uEXPR_CaseAltnCL(const Generic &c) : SEQ<TYPE_TRF_uTAR_uEXPR_CaseAltn>(c) {}

  const char * GetTypeName() const { return "type_23TRF_uTAR_uEXPR_CaseAltnCL"; }
} ;
#endif

#ifndef DECL_type_Fd2P
#define DECL_type_Fd2P 1

class type_Fd2P : public Tuple {
public:

  type_Fd2P() : Tuple(2) {}
  void Init(TYPE_TRF_uTAR_uPAT_PatternBind p2, TYPE_TRF_uTAR_uEXPR_Expr p3);

  type_Fd2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_Fd2P"; }
  TYPE_TRF_uTAR_uPAT_PatternBind get_1() const;
  void set_1(const TYPE_TRF_uTAR_uPAT_PatternBind &p);
  TYPE_TRF_uTAR_uEXPR_Expr get_2() const;
  void set_2(const TYPE_TRF_uTAR_uEXPR_Expr &p);
} ;
#endif

#ifndef DECL_type_Fd2PL
#define DECL_type_Fd2PL 1

class type_Fd2PL : public SEQ<type_Fd2P> {
public:

  type_Fd2PL() : SEQ<type_Fd2P>() {}

  type_Fd2PL(const SEQ<type_Fd2P> &c) : SEQ<type_Fd2P>(c) {}

  type_Fd2PL(const Generic &c) : SEQ<type_Fd2P>(c) {}

  const char * GetTypeName() const { return "type_Fd2PL"; }
} ;
#endif

#ifndef DECL_type_25TRF_uTAR_uEXPR_ElseifExprCL
#define DECL_type_25TRF_uTAR_uEXPR_ElseifExprCL 1

class type_25TRF_uTAR_uEXPR_ElseifExprCL : public SEQ<TYPE_TRF_uTAR_uEXPR_ElseifExpr> {
public:

  type_25TRF_uTAR_uEXPR_ElseifExprCL() : SEQ<TYPE_TRF_uTAR_uEXPR_ElseifExpr>() {}

  type_25TRF_uTAR_uEXPR_ElseifExprCL(const SEQ<TYPE_TRF_uTAR_uEXPR_ElseifExpr> &c) : SEQ<TYPE_TRF_uTAR_uEXPR_ElseifExpr>(c) {}

  type_25TRF_uTAR_uEXPR_ElseifExprCL(const Generic &c) : SEQ<TYPE_TRF_uTAR_uEXPR_ElseifExpr>(c) {}

  const char * GetTypeName() const { return "type_25TRF_uTAR_uEXPR_ElseifExprCL"; }
} ;
#endif

#ifndef DECL_type_22TRF_uTAR_uPAT_TypeBindCL
#define DECL_type_22TRF_uTAR_uPAT_TypeBindCL 1

class type_22TRF_uTAR_uPAT_TypeBindCL : public SEQ<TYPE_TRF_uTAR_uPAT_TypeBind> {
public:

  type_22TRF_uTAR_uPAT_TypeBindCL() : SEQ<TYPE_TRF_uTAR_uPAT_TypeBind>() {}

  type_22TRF_uTAR_uPAT_TypeBindCL(const SEQ<TYPE_TRF_uTAR_uPAT_TypeBind> &c) : SEQ<TYPE_TRF_uTAR_uPAT_TypeBind>(c) {}

  type_22TRF_uTAR_uPAT_TypeBindCL(const Generic &c) : SEQ<TYPE_TRF_uTAR_uPAT_TypeBind>(c) {}

  const char * GetTypeName() const { return "type_22TRF_uTAR_uPAT_TypeBindCL"; }
} ;
#endif

#ifndef DECL_type_21TRF_uTAR_uEXPR_MapletCL
#define DECL_type_21TRF_uTAR_uEXPR_MapletCL 1

class type_21TRF_uTAR_uEXPR_MapletCL : public SEQ<TYPE_TRF_uTAR_uEXPR_Maplet> {
public:

  type_21TRF_uTAR_uEXPR_MapletCL() : SEQ<TYPE_TRF_uTAR_uEXPR_Maplet>() {}

  type_21TRF_uTAR_uEXPR_MapletCL(const SEQ<TYPE_TRF_uTAR_uEXPR_Maplet> &c) : SEQ<TYPE_TRF_uTAR_uEXPR_Maplet>(c) {}

  type_21TRF_uTAR_uEXPR_MapletCL(const Generic &c) : SEQ<TYPE_TRF_uTAR_uEXPR_Maplet>(c) {}

  const char * GetTypeName() const { return "type_21TRF_uTAR_uEXPR_MapletCL"; }
} ;
#endif

#ifndef DECL_type_33TRF_uTAR_uEXPR_RecordModificationCL
#define DECL_type_33TRF_uTAR_uEXPR_RecordModificationCL 1

class type_33TRF_uTAR_uEXPR_RecordModificationCL : public SEQ<TYPE_TRF_uTAR_uEXPR_RecordModification> {
public:

  type_33TRF_uTAR_uEXPR_RecordModificationCL() : SEQ<TYPE_TRF_uTAR_uEXPR_RecordModification>() {}

  type_33TRF_uTAR_uEXPR_RecordModificationCL(const SEQ<TYPE_TRF_uTAR_uEXPR_RecordModification> &c) : SEQ<TYPE_TRF_uTAR_uEXPR_RecordModification>(c) {}

  type_33TRF_uTAR_uEXPR_RecordModificationCL(const Generic &c) : SEQ<TYPE_TRF_uTAR_uEXPR_RecordModification>(c) {}

  const char * GetTypeName() const { return "type_33TRF_uTAR_uEXPR_RecordModificationCL"; }
} ;
#endif

#ifndef DECL_type_FF2P
#define DECL_type_FF2P 1

class type_FF2P : public Tuple {
public:

  type_FF2P() : Tuple(2) {}
  void Init(TYPE_AS_Expr p2, TYPE_AS_MultBind p3);

  type_FF2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_FF2P"; }
  TYPE_AS_Expr get_1() const;
  void set_1(const TYPE_AS_Expr &p);
  TYPE_AS_MultBind get_2() const;
  void set_2(const TYPE_AS_MultBind &p);
} ;
#endif

#ifndef DECL_type_FF2PL
#define DECL_type_FF2PL 1

class type_FF2PL : public SEQ<type_FF2P> {
public:

  type_FF2PL() : SEQ<type_FF2P>() {}

  type_FF2PL(const SEQ<type_FF2P> &c) : SEQ<type_FF2P>(c) {}

  type_FF2PL(const Generic &c) : SEQ<type_FF2P>(c) {}

  const char * GetTypeName() const { return "type_FF2PL"; }
} ;
#endif

#ifndef DECL_type_FLFL2P
#define DECL_type_FLFL2P 1

class type_FLFL2P : public Tuple {
public:

  type_FLFL2P() : Tuple(2) {}
  void Init(type_FL p2, TYPE_AS_BindList p3);

  type_FLFL2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_FLFL2P"; }
  type_FL get_1() const;
  void set_1(const type_FL &p);
  TYPE_AS_BindList get_2() const;
  void set_2(const TYPE_AS_BindList &p);
} ;
#endif


#endif

