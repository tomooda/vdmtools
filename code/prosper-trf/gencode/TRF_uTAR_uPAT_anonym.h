//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Thu 21-Oct-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _TRF_uTAR_uPAT_anonym_h
#define _TRF_uTAR_uPAT_anonym_h

#include "TRF_uTAR_uPAT_userdef.h"
#include "metaiv.h"
class TYPE_TRF_uTAR_uPAT_SetBind;
class TYPE_TRF_uTAR_uPAT_TypeBind;
class TYPE_TRF_uTAR_uPAT_MULTSETBIND;
class TYPE_TRF_uTAR_uPAT_MULTTYPEBIND;
class TYPE_TRF_uTAR_uPAT_MatchVal;
class TYPE_TRF_uTAR_uPAT_PatternName;
class TYPE_TRF_uTAR_uPAT_RecordPattern;
class TYPE_TRF_uTAR_uPAT_SeqConcPattern;
class TYPE_TRF_uTAR_uPAT_SeqEnumPattern;
class TYPE_TRF_uTAR_uPAT_SetEnumPattern;
class TYPE_TRF_uTAR_uPAT_SetUnionPattern;
class TYPE_TRF_uTAR_uPAT_TuplePattern;
class type_dL;
class type_dLL;
class type_cL;
class type_cLL;
class type_cLLS;
class type_25TRF_uTAR_uPAT_MULTSETBINDCL;
class type_26TRF_uTAR_uPAT_MULTTYPEBINDCL;
#define TYPE_TRF_uTAR_uPAT_SetPattern Record
#define TYPE_TRF_uTAR_uPAT_SeqPattern Record
#define TYPE_TRF_uTAR_uPAT_PatternIds type_cLLS
#define TYPE_TRF_uTAR_uPAT_PatternBind Record
#define TYPE_TRF_uTAR_uPAT_Pattern Record
#define TYPE_TRF_uTAR_uPAT_MultTypeBind type_26TRF_uTAR_uPAT_MULTTYPEBINDCL
#define TYPE_TRF_uTAR_uPAT_MultSetBind type_25TRF_uTAR_uPAT_MULTSETBINDCL
#define TYPE_TRF_uTAR_uPAT_MultBind type_dL
#define TYPE_TRF_uTAR_uPAT_Identifiers type_cLLS
#define TYPE_TRF_uTAR_uPAT_BindList type_dLL
#define TYPE_TRF_uTAR_uPAT_Bind Record
#ifndef TAG_type_dL
#define TAG_type_dL (TAG_TRF_uTAR_uPAT + 1)
#endif

#ifndef TAG_type_dLL
#define TAG_type_dLL (TAG_TRF_uTAR_uPAT + 2)
#endif

#ifndef TAG_type_cL
#define TAG_type_cL (TAG_TRF_uTAR_uPAT + 3)
#endif

#ifndef TAG_type_cLL
#define TAG_type_cLL (TAG_TRF_uTAR_uPAT + 4)
#endif

#ifndef TAG_type_cLLS
#define TAG_type_cLLS (TAG_TRF_uTAR_uPAT + 5)
#endif

#ifndef TAG_type_25TRF_uTAR_uPAT_MULTSETBINDCL
#define TAG_type_25TRF_uTAR_uPAT_MULTSETBINDCL (TAG_TRF_uTAR_uPAT + 6)
#endif

#ifndef TAG_type_26TRF_uTAR_uPAT_MULTTYPEBINDCL
#define TAG_type_26TRF_uTAR_uPAT_MULTTYPEBINDCL (TAG_TRF_uTAR_uPAT + 7)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "REP_anonym.h"
#include "TRF_uTAR_uEXPR_anonym.h"
#include "TRF_uTAR_uTYPE_anonym.h"
#ifndef TAG_TYPE_TRF_uTAR_uPAT_SetBind
#define TAG_TYPE_TRF_uTAR_uPAT_SetBind (TAG_TRF_uTAR_uPAT + 8)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uPAT_TypeBind
#define TAG_TYPE_TRF_uTAR_uPAT_TypeBind (TAG_TRF_uTAR_uPAT + 9)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uPAT_MULTSETBIND
#define TAG_TYPE_TRF_uTAR_uPAT_MULTSETBIND (TAG_TRF_uTAR_uPAT + 10)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uPAT_MULTTYPEBIND
#define TAG_TYPE_TRF_uTAR_uPAT_MULTTYPEBIND (TAG_TRF_uTAR_uPAT + 11)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uPAT_MatchVal
#define TAG_TYPE_TRF_uTAR_uPAT_MatchVal (TAG_TRF_uTAR_uPAT + 12)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uPAT_PatternName
#define TAG_TYPE_TRF_uTAR_uPAT_PatternName (TAG_TRF_uTAR_uPAT + 13)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uPAT_RecordPattern
#define TAG_TYPE_TRF_uTAR_uPAT_RecordPattern (TAG_TRF_uTAR_uPAT + 14)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uPAT_SeqConcPattern
#define TAG_TYPE_TRF_uTAR_uPAT_SeqConcPattern (TAG_TRF_uTAR_uPAT + 15)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uPAT_SeqEnumPattern
#define TAG_TYPE_TRF_uTAR_uPAT_SeqEnumPattern (TAG_TRF_uTAR_uPAT + 16)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uPAT_SetEnumPattern
#define TAG_TYPE_TRF_uTAR_uPAT_SetEnumPattern (TAG_TRF_uTAR_uPAT + 17)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uPAT_SetUnionPattern
#define TAG_TYPE_TRF_uTAR_uPAT_SetUnionPattern (TAG_TRF_uTAR_uPAT + 18)
#endif

#ifndef TAG_TYPE_TRF_uTAR_uPAT_TuplePattern
#define TAG_TYPE_TRF_uTAR_uPAT_TuplePattern (TAG_TRF_uTAR_uPAT + 19)
#endif

#ifndef DECL_type_dL
#define DECL_type_dL 1

class type_dL : public SEQ<Record> {
public:

  type_dL() : SEQ<Record>() {}

  type_dL(const SEQ<Record> &c) : SEQ<Record>(c) {}

  type_dL(const Generic &c) : SEQ<Record>(c) {}

  const char * GetTypeName() const { return "type_dL"; }
} ;
#endif

#ifndef DECL_type_dLL
#define DECL_type_dLL 1

class type_dLL : public SEQ<type_dL> {
public:

  type_dLL() : SEQ<type_dL>() {}

  type_dLL(const SEQ<type_dL> &c) : SEQ<type_dL>(c) {}

  type_dLL(const Generic &c) : SEQ<type_dL>(c) {}

  const char * GetTypeName() const { return "type_dLL"; }
} ;
#endif

#ifndef DECL_type_cL
#define DECL_type_cL 1

class type_cL : public SEQ<Char> {
public:

  type_cL() : SEQ<Char>() {}

  type_cL(const SEQ<Char> &c) : SEQ<Char>(c) {}

  type_cL(const Generic &c) : SEQ<Char>(c) {}

  const char * GetTypeName() const { return "type_cL"; }
} ;
#endif

#ifndef DECL_type_cLL
#define DECL_type_cLL 1

class type_cLL : public SEQ<type_cL> {
public:

  type_cLL() : SEQ<type_cL>() {}

  type_cLL(const SEQ<type_cL> &c) : SEQ<type_cL>(c) {}

  type_cLL(const Generic &c) : SEQ<type_cL>(c) {}

  const char * GetTypeName() const { return "type_cLL"; }
} ;
#endif

#ifndef DECL_type_cLLS
#define DECL_type_cLLS 1

class type_cLLS : public SET<type_cLL> {
public:

  type_cLLS() : SET<type_cLL>() {}

  type_cLLS(const SET<type_cLL> &c) : SET<type_cLL>(c) {}

  type_cLLS(const Generic &c) : SET<type_cLL>(c) {}

  const char * GetTypeName() const { return "type_cLLS"; }
} ;
#endif

#ifndef DECL_type_25TRF_uTAR_uPAT_MULTSETBINDCL
#define DECL_type_25TRF_uTAR_uPAT_MULTSETBINDCL 1

class type_25TRF_uTAR_uPAT_MULTSETBINDCL : public SEQ<TYPE_TRF_uTAR_uPAT_MULTSETBIND> {
public:

  type_25TRF_uTAR_uPAT_MULTSETBINDCL() : SEQ<TYPE_TRF_uTAR_uPAT_MULTSETBIND>() {}

  type_25TRF_uTAR_uPAT_MULTSETBINDCL(const SEQ<TYPE_TRF_uTAR_uPAT_MULTSETBIND> &c) : SEQ<TYPE_TRF_uTAR_uPAT_MULTSETBIND>(c) {}

  type_25TRF_uTAR_uPAT_MULTSETBINDCL(const Generic &c) : SEQ<TYPE_TRF_uTAR_uPAT_MULTSETBIND>(c) {}

  const char * GetTypeName() const { return "type_25TRF_uTAR_uPAT_MULTSETBINDCL"; }
} ;
#endif

#ifndef DECL_type_26TRF_uTAR_uPAT_MULTTYPEBINDCL
#define DECL_type_26TRF_uTAR_uPAT_MULTTYPEBINDCL 1

class type_26TRF_uTAR_uPAT_MULTTYPEBINDCL : public SEQ<TYPE_TRF_uTAR_uPAT_MULTTYPEBIND> {
public:

  type_26TRF_uTAR_uPAT_MULTTYPEBINDCL() : SEQ<TYPE_TRF_uTAR_uPAT_MULTTYPEBIND>() {}

  type_26TRF_uTAR_uPAT_MULTTYPEBINDCL(const SEQ<TYPE_TRF_uTAR_uPAT_MULTTYPEBIND> &c) : SEQ<TYPE_TRF_uTAR_uPAT_MULTTYPEBIND>(c) {}

  type_26TRF_uTAR_uPAT_MULTTYPEBINDCL(const Generic &c) : SEQ<TYPE_TRF_uTAR_uPAT_MULTTYPEBIND>(c) {}

  const char * GetTypeName() const { return "type_26TRF_uTAR_uPAT_MULTTYPEBINDCL"; }
} ;
#endif


#endif

