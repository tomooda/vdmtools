//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Tue 02-Nov-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _DEP_uANA_anonym_h
#define _DEP_uANA_anonym_h

#include "DEP_uANA_userdef.h"
#include "metaiv.h"
class TYPE_DEP_uANA_Graph;
class TYPE_DEP_uANA_OrderedGraph;
class type_7AS_NameC7AS_NameC2P;
class type_7AS_NameCS;
class type_7AS_NameC7AS_NameC2PS;
class type_7AS_NameCL;
class type_cL;
class type_cLS;
class type_7AS_NameCcLSM;
class type_7AS_NameCLL;
class type_typevariableS;
class type_typevariableL;
class type_typevariableLL;
#define TYPE_DEP_uANA_string type_cL
#define TYPE_DEP_uANA_Vertex TYPE_AS_Name
#define TYPE_DEP_uANA_Edges type_7AS_NameC7AS_NameC2P
#ifndef TAG_type_7AS_NameC7AS_NameC2P
#define TAG_type_7AS_NameC7AS_NameC2P (TAG_DEP_uANA + 1)
#endif

#ifndef TAG_type_7AS_NameCS
#define TAG_type_7AS_NameCS (TAG_DEP_uANA + 2)
#endif

#ifndef TAG_type_7AS_NameC7AS_NameC2PS
#define TAG_type_7AS_NameC7AS_NameC2PS (TAG_DEP_uANA + 3)
#endif

#ifndef TAG_type_7AS_NameCL
#define TAG_type_7AS_NameCL (TAG_DEP_uANA + 4)
#endif

#ifndef TAG_type_cL
#define TAG_type_cL (TAG_DEP_uANA + 5)
#endif

#ifndef TAG_type_cLS
#define TAG_type_cLS (TAG_DEP_uANA + 6)
#endif

#ifndef TAG_type_7AS_NameCcLSM
#define TAG_type_7AS_NameCcLSM (TAG_DEP_uANA + 7)
#endif

#ifndef TAG_type_7AS_NameCLL
#define TAG_type_7AS_NameCLL (TAG_DEP_uANA + 8)
#endif

#ifndef TAG_type_typevariableS
#define TAG_type_typevariableS (TAG_DEP_uANA + 9)
#endif

#ifndef TAG_type_typevariableL
#define TAG_type_typevariableL (TAG_DEP_uANA + 10)
#endif

#ifndef TAG_type_typevariableLL
#define TAG_type_typevariableLL (TAG_DEP_uANA + 11)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "HOL_anonym.h"
#include "REP_anonym.h"
#include "TRL_uTAR_uDEF_anonym.h"
#include "TRL_uTAR_uEXPR_anonym.h"
#include "TRL_uTAR_uPAT_anonym.h"
#include "TRL_uTAR_uTYPE_anonym.h"
#ifndef TAG_TYPE_DEP_uANA_Graph
#define TAG_TYPE_DEP_uANA_Graph (TAG_DEP_uANA + 12)
#endif

#ifndef TAG_TYPE_DEP_uANA_OrderedGraph
#define TAG_TYPE_DEP_uANA_OrderedGraph (TAG_DEP_uANA + 13)
#endif

#ifndef DECL_type_7AS_NameC7AS_NameC2P
#define DECL_type_7AS_NameC7AS_NameC2P 1

class type_7AS_NameC7AS_NameC2P : public Tuple {
public:

  type_7AS_NameC7AS_NameC2P() : Tuple(2) {}
  void Init(TYPE_DEP_uANA_Vertex p2, TYPE_DEP_uANA_Vertex p3);

  type_7AS_NameC7AS_NameC2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_7AS_NameC7AS_NameC2P"; }
  TYPE_DEP_uANA_Vertex get_1() const;
  void set_1(const TYPE_DEP_uANA_Vertex &p);
  TYPE_DEP_uANA_Vertex get_2() const;
  void set_2(const TYPE_DEP_uANA_Vertex &p);
} ;
#endif

#ifndef DECL_type_7AS_NameCS
#define DECL_type_7AS_NameCS 1

class type_7AS_NameCS : public SET<TYPE_AS_Name> {
public:

  type_7AS_NameCS() : SET<TYPE_AS_Name>() {}

  type_7AS_NameCS(const SET<TYPE_AS_Name> &c) : SET<TYPE_AS_Name>(c) {}

  type_7AS_NameCS(const Generic &c) : SET<TYPE_AS_Name>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCS"; }
} ;
#endif

#ifndef DECL_type_7AS_NameC7AS_NameC2PS
#define DECL_type_7AS_NameC7AS_NameC2PS 1

class type_7AS_NameC7AS_NameC2PS : public SET<type_7AS_NameC7AS_NameC2P> {
public:

  type_7AS_NameC7AS_NameC2PS() : SET<type_7AS_NameC7AS_NameC2P>() {}

  type_7AS_NameC7AS_NameC2PS(const SET<type_7AS_NameC7AS_NameC2P> &c) : SET<type_7AS_NameC7AS_NameC2P>(c) {}

  type_7AS_NameC7AS_NameC2PS(const Generic &c) : SET<type_7AS_NameC7AS_NameC2P>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameC7AS_NameC2PS"; }
} ;
#endif

#ifndef DECL_type_7AS_NameCL
#define DECL_type_7AS_NameCL 1

class type_7AS_NameCL : public SEQ<TYPE_AS_Name> {
public:

  type_7AS_NameCL() : SEQ<TYPE_AS_Name>() {}

  type_7AS_NameCL(const SEQ<TYPE_AS_Name> &c) : SEQ<TYPE_AS_Name>(c) {}

  type_7AS_NameCL(const Generic &c) : SEQ<TYPE_AS_Name>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCL"; }
} ;
#endif

#ifndef DECL_type_cL
#define DECL_type_cL 1

class type_cL : public SEQ<Char> {
public:

  type_cL() : SEQ<Char>() {}

  type_cL(const SEQ<Char> &c) : SEQ<Char>(c) {}

  type_cL(const Generic &c) : SEQ<Char>(c) {}

  const char * GetTypeName() const { return "type_cL"; }
} ;
#endif

#ifndef DECL_type_cLS
#define DECL_type_cLS 1

class type_cLS : public SET<type_cL> {
public:

  type_cLS() : SET<type_cL>() {}

  type_cLS(const SET<type_cL> &c) : SET<type_cL>(c) {}

  type_cLS(const Generic &c) : SET<type_cL>(c) {}

  const char * GetTypeName() const { return "type_cLS"; }
} ;
#endif

#ifndef DECL_type_7AS_NameCcLSM
#define DECL_type_7AS_NameCcLSM 1

class type_7AS_NameCcLSM : public MAP<TYPE_AS_Name,type_cLS> {
public:

  type_7AS_NameCcLSM() : MAP<TYPE_AS_Name,type_cLS>() {}

  type_7AS_NameCcLSM(const MAP<TYPE_AS_Name,type_cLS> &c) : MAP<TYPE_AS_Name,type_cLS>(c) {}

  type_7AS_NameCcLSM(const Generic &c) : MAP<TYPE_AS_Name,type_cLS>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCcLSM"; }
} ;
#endif

#ifndef DECL_type_7AS_NameCLL
#define DECL_type_7AS_NameCLL 1

class type_7AS_NameCLL : public SEQ<type_7AS_NameCL> {
public:

  type_7AS_NameCLL() : SEQ<type_7AS_NameCL>() {}

  type_7AS_NameCLL(const SEQ<type_7AS_NameCL> &c) : SEQ<type_7AS_NameCL>(c) {}

  type_7AS_NameCLL(const Generic &c) : SEQ<type_7AS_NameCL>(c) {}

  const char * GetTypeName() const { return "type_7AS_NameCLL"; }
} ;
#endif

#ifndef DECL_type_typevariableS
#define DECL_type_typevariableS 1

class type_typevariableS : public SET<Generic> {
public:

  type_typevariableS() : SET<Generic>() {}

  type_typevariableS(const SET<Generic> &c) : SET<Generic>(c) {}

  type_typevariableS(const Generic &c) : SET<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableS"; }
} ;
#endif

#ifndef DECL_type_typevariableL
#define DECL_type_typevariableL 1

class type_typevariableL : public SEQ<Generic> {
public:

  type_typevariableL() : SEQ<Generic>() {}

  type_typevariableL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_typevariableL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_typevariableL"; }
} ;
#endif

#ifndef DECL_type_typevariableLL
#define DECL_type_typevariableLL 1

class type_typevariableLL : public SEQ<type_typevariableL> {
public:

  type_typevariableLL() : SEQ<type_typevariableL>() {}

  type_typevariableLL(const SEQ<type_typevariableL> &c) : SEQ<type_typevariableL>(c) {}

  type_typevariableLL(const Generic &c) : SEQ<type_typevariableL>(c) {}

  const char * GetTypeName() const { return "type_typevariableLL"; }
} ;
#endif


#endif

