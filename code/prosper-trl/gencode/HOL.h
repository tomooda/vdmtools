//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Wed 05-Apr-00 by the VDM-SLtoC++ Code Generator
// (v3.3.2 - Thu 02-Dec-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _HOL_h
#define _HOL_h

#include <math.h>
#include "metaiv.h"
#include "cg.h"
#include "cg_aux.h"
#include "HOL_anonym.h"
enum  {
  vdm_HOL_Abs = TAG_TYPE_HOL_Abs,
  length_HOL_Abs = 2,
  pos_HOL_Abs_Bvar = 1,
  pos_HOL_Abs_Body = 2,
  vdm_HOL_Bool_utype = TAG_TYPE_HOL_Bool_utype,
  length_HOL_Bool_utype = 0,
  vdm_HOL_Boolean = TAG_TYPE_HOL_Boolean,
  length_HOL_Boolean = 1,
  pos_HOL_Boolean_val = 1,
  vdm_HOL_Char = TAG_TYPE_HOL_Char,
  length_HOL_Char = 1,
  pos_HOL_Char_val = 1,
  vdm_HOL_Char_utype = TAG_TYPE_HOL_Char_utype,
  length_HOL_Char_utype = 0,
  vdm_HOL_Comb = TAG_TYPE_HOL_Comb,
  length_HOL_Comb = 2,
  pos_HOL_Comb_Rator = 1,
  pos_HOL_Comb_Rand = 2,
  vdm_HOL_Cond = TAG_TYPE_HOL_Cond,
  length_HOL_Cond = 3,
  pos_HOL_Cond_cond = 1,
  pos_HOL_Cond_larm = 2,
  pos_HOL_Cond_rarm = 3,
  vdm_HOL_Conj = TAG_TYPE_HOL_Conj,
  length_HOL_Conj = 1,
  pos_HOL_Conj_conjs = 1,
  vdm_HOL_Const = TAG_TYPE_HOL_Const,
  length_HOL_Const = 2,
  pos_HOL_Const_Name = 1,
  pos_HOL_Const_Ty = 2,
  vdm_HOL_Disj = TAG_TYPE_HOL_Disj,
  length_HOL_Disj = 1,
  pos_HOL_Disj_disjs = 1,
  vdm_HOL_Eq = TAG_TYPE_HOL_Eq,
  length_HOL_Eq = 2,
  pos_HOL_Eq_lhs = 1,
  pos_HOL_Eq_rhs = 2,
  vdm_HOL_Exists = TAG_TYPE_HOL_Exists,
  length_HOL_Exists = 2,
  pos_HOL_Exists_Bvar = 1,
  pos_HOL_Exists_Body = 2,
  vdm_HOL_Exists1 = TAG_TYPE_HOL_Exists1,
  length_HOL_Exists1 = 2,
  pos_HOL_Exists1_Bvar = 1,
  pos_HOL_Exists1_Body = 2,
  vdm_HOL_Forall = TAG_TYPE_HOL_Forall,
  length_HOL_Forall = 2,
  pos_HOL_Forall_Bvar = 1,
  pos_HOL_Forall_Body = 2,
  vdm_HOL_Fun_utype = TAG_TYPE_HOL_Fun_utype,
  length_HOL_Fun_utype = 1,
  pos_HOL_Fun_utype_elmtps = 1,
  vdm_HOL_Imp = TAG_TYPE_HOL_Imp,
  length_HOL_Imp = 2,
  pos_HOL_Imp_ant = 1,
  pos_HOL_Imp_conseq = 2,
  vdm_HOL_Ind = TAG_TYPE_HOL_Ind,
  length_HOL_Ind = 1,
  pos_HOL_Ind_val = 1,
  vdm_HOL_Ind_utype = TAG_TYPE_HOL_Ind_utype,
  length_HOL_Ind_utype = 0,
  vdm_HOL_Int_utype = TAG_TYPE_HOL_Int_utype,
  length_HOL_Int_utype = 0,
  vdm_HOL_Integer = TAG_TYPE_HOL_Integer,
  length_HOL_Integer = 1,
  pos_HOL_Integer_val = 1,
  vdm_HOL_Let = TAG_TYPE_HOL_Let,
  length_HOL_Let = 2,
  pos_HOL_Let_body = 1,
  pos_HOL_Let_defs = 2,
  vdm_HOL_List = TAG_TYPE_HOL_List,
  length_HOL_List = 2,
  pos_HOL_List_elms = 1,
  pos_HOL_List_tp = 2,
  vdm_HOL_List_utype = TAG_TYPE_HOL_List_utype,
  length_HOL_List_utype = 1,
  pos_HOL_List_utype_elmtp = 1,
  vdm_HOL_Map = TAG_TYPE_HOL_Map,
  length_HOL_Map = 2,
  pos_HOL_Map_elms = 1,
  pos_HOL_Map_tp = 2,
  vdm_HOL_Map_utype = TAG_TYPE_HOL_Map_utype,
  length_HOL_Map_utype = 1,
  pos_HOL_Map_utype_elmtps = 1,
  vdm_HOL_Neg = TAG_TYPE_HOL_Neg,
  length_HOL_Neg = 1,
  pos_HOL_Neg_Term = 1,
  vdm_HOL_Num_utype = TAG_TYPE_HOL_Num_utype,
  length_HOL_Num_utype = 0,
  vdm_HOL_Numeral = TAG_TYPE_HOL_Numeral,
  length_HOL_Numeral = 1,
  pos_HOL_Numeral_val = 1,
  vdm_HOL_Option_utype = TAG_TYPE_HOL_Option_utype,
  length_HOL_Option_utype = 1,
  pos_HOL_Option_utype_elmtp = 1,
  vdm_HOL_Pair = TAG_TYPE_HOL_Pair,
  length_HOL_Pair = 1,
  pos_HOL_Pair_elms = 1,
  vdm_HOL_Prod_utype = TAG_TYPE_HOL_Prod_utype,
  length_HOL_Prod_utype = 1,
  pos_HOL_Prod_utype_elmtps = 1,
  vdm_HOL_Proj = TAG_TYPE_HOL_Proj,
  length_HOL_Proj = 2,
  pos_HOL_Proj_i = 1,
  pos_HOL_Proj_tp = 2,
  vdm_HOL_Real = TAG_TYPE_HOL_Real,
  length_HOL_Real = 1,
  pos_HOL_Real_val = 1,
  vdm_HOL_Real_utype = TAG_TYPE_HOL_Real_utype,
  length_HOL_Real_utype = 0,
  vdm_HOL_Select = TAG_TYPE_HOL_Select,
  length_HOL_Select = 2,
  pos_HOL_Select_Bvar = 1,
  pos_HOL_Select_Body = 2,
  vdm_HOL_Set = TAG_TYPE_HOL_Set,
  length_HOL_Set = 2,
  pos_HOL_Set_elms = 1,
  pos_HOL_Set_tp = 2,
  vdm_HOL_Set_utype = TAG_TYPE_HOL_Set_utype,
  length_HOL_Set_utype = 1,
  pos_HOL_Set_utype_elmtp = 1,
  vdm_HOL_String = TAG_TYPE_HOL_String,
  length_HOL_String = 1,
  pos_HOL_String_val = 1,
  vdm_HOL_Var = TAG_TYPE_HOL_Var,
  length_HOL_Var = 2,
  pos_HOL_Var_Name = 1,
  pos_HOL_Var_Ty = 2,
  vdm_HOL_const_udef = TAG_TYPE_HOL_const_udef,
  length_HOL_const_udef = 3,
  pos_HOL_const_udef_name = 1,
  pos_HOL_const_udef_type = 2,
  pos_HOL_const_udef_expr = 3,
  vdm_HOL_datatype_udef = TAG_TYPE_HOL_datatype_udef,
  length_HOL_datatype_udef = 2,
  pos_HOL_datatype_udef_name = 1,
  pos_HOL_datatype_udef_type = 2,
  vdm_HOL_field = TAG_TYPE_HOL_field,
  length_HOL_field = 2,
  pos_HOL_field_name = 1,
  pos_HOL_field_tp = 2,
  vdm_HOL_func_udef = TAG_TYPE_HOL_func_udef,
  length_HOL_func_udef = 4,
  pos_HOL_func_udef_name = 1,
  pos_HOL_func_udef_fntype = 2,
  pos_HOL_func_udef_parms = 3,
  pos_HOL_func_udef_body = 4,
  vdm_HOL_po_udef = TAG_TYPE_HOL_po_udef,
  length_HOL_po_udef = 2,
  pos_HOL_po_udef_name = 1,
  pos_HOL_po_udef_expr = 2,
  vdm_HOL_pred_udef = TAG_TYPE_HOL_pred_udef,
  length_HOL_pred_udef = 4,
  pos_HOL_pred_udef_name = 1,
  pos_HOL_pred_udef_fntype = 2,
  pos_HOL_pred_udef_parms = 3,
  pos_HOL_pred_udef_body = 4,
  vdm_HOL_quote_utype = TAG_TYPE_HOL_quote_utype,
  length_HOL_quote_utype = 1,
  pos_HOL_quote_utype_name = 1,
  vdm_HOL_record = TAG_TYPE_HOL_record,
  length_HOL_record = 2,
  pos_HOL_record_tag = 1,
  pos_HOL_record_fields = 2,
  vdm_HOL_select_udef = TAG_TYPE_HOL_select_udef,
  length_HOL_select_udef = 4,
  pos_HOL_select_udef_name = 1,
  pos_HOL_select_udef_fntype = 2,
  pos_HOL_select_udef_parms = 3,
  pos_HOL_select_udef_body = 4,
  vdm_HOL_spec = TAG_TYPE_HOL_spec,
  length_HOL_spec = 3,
  pos_HOL_spec_tpdefs = 1,
  pos_HOL_spec_fndefs = 2,
  pos_HOL_spec_podefs = 3,
  vdm_HOL_sum = TAG_TYPE_HOL_sum,
  length_HOL_sum = 1,
  pos_HOL_sum_elms = 1,
  vdm_HOL_type = TAG_TYPE_HOL_type,
  length_HOL_type = 2,
  pos_HOL_type_name = 1,
  pos_HOL_type_args = 2,
  vdm_HOL_type_uabbrev_udef = TAG_TYPE_HOL_type_uabbrev_udef,
  length_HOL_type_uabbrev_udef = 2,
  pos_HOL_type_uabbrev_udef_name = 1,
  pos_HOL_type_uabbrev_udef_type = 2,
  vdm_HOL_vartype = TAG_TYPE_HOL_vartype,
  length_HOL_vartype = 1,
  pos_HOL_vartype_name = 1
};

class TYPE_HOL_Abs : public Record {
public:

  TYPE_HOL_Abs() : Record(TAG_TYPE_HOL_Abs, 2) {}
  void Init(type_dL p2, TYPE_HOL_term p3);

  TYPE_HOL_Abs(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Abs"; }
  type_dL get_Bvar() const;
  void set_Bvar(const type_dL &p);
  TYPE_HOL_term get_Body() const;
  void set_Body(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_Bool_utype : public Record {
public:

  TYPE_HOL_Bool_utype() : Record(TAG_TYPE_HOL_Bool_utype, 0) {}
  void Init();

  TYPE_HOL_Bool_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Bool_utype"; }
} ;

class TYPE_HOL_Boolean : public Record {
public:

  TYPE_HOL_Boolean() : Record(TAG_TYPE_HOL_Boolean, 1) {}
  void Init(Bool p2);

  TYPE_HOL_Boolean(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Boolean"; }
  Bool get_val() const;
  void set_val(const Bool &p);
} ;

class TYPE_HOL_Char : public Record {
public:

  TYPE_HOL_Char() : Record(TAG_TYPE_HOL_Char, 1) {}
  void Init(Char p2);

  TYPE_HOL_Char(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Char"; }
  Char get_val() const;
  void set_val(const Char &p);
} ;

class TYPE_HOL_Char_utype : public Record {
public:

  TYPE_HOL_Char_utype() : Record(TAG_TYPE_HOL_Char_utype, 0) {}
  void Init();

  TYPE_HOL_Char_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Char_utype"; }
} ;

class TYPE_HOL_Comb : public Record {
public:

  TYPE_HOL_Comb() : Record(TAG_TYPE_HOL_Comb, 2) {}
  void Init(TYPE_HOL_term p2, type_dL p3);

  TYPE_HOL_Comb(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Comb"; }
  TYPE_HOL_term get_Rator() const;
  void set_Rator(const TYPE_HOL_term &p);
  type_dL get_Rand() const;
  void set_Rand(const type_dL &p);
} ;

class TYPE_HOL_Cond : public Record {
public:

  TYPE_HOL_Cond() : Record(TAG_TYPE_HOL_Cond, 3) {}
  void Init(TYPE_HOL_term p2, TYPE_HOL_term p3, TYPE_HOL_term p4);

  TYPE_HOL_Cond(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Cond"; }
  TYPE_HOL_term get_cond() const;
  void set_cond(const TYPE_HOL_term &p);
  TYPE_HOL_term get_larm() const;
  void set_larm(const TYPE_HOL_term &p);
  TYPE_HOL_term get_rarm() const;
  void set_rarm(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_Conj : public Record {
public:

  TYPE_HOL_Conj() : Record(TAG_TYPE_HOL_Conj, 1) {}
  void Init(type_dL p2);

  TYPE_HOL_Conj(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Conj"; }
  type_dL get_conjs() const;
  void set_conjs(const type_dL &p);
} ;

class TYPE_HOL_Const : public Record {
public:

  TYPE_HOL_Const() : Record(TAG_TYPE_HOL_Const, 2) {}
  void Init(TYPE_HOL_const_uname p2, TYPE_HOL_term_utype p3);

  TYPE_HOL_Const(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Const"; }
  TYPE_HOL_const_uname get_Name() const;
  void set_Name(const TYPE_HOL_const_uname &p);
  TYPE_HOL_term_utype get_Ty() const;
  void set_Ty(const TYPE_HOL_term_utype &p);
} ;

class TYPE_HOL_Disj : public Record {
public:

  TYPE_HOL_Disj() : Record(TAG_TYPE_HOL_Disj, 1) {}
  void Init(type_dL p2);

  TYPE_HOL_Disj(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Disj"; }
  type_dL get_disjs() const;
  void set_disjs(const type_dL &p);
} ;

class TYPE_HOL_Eq : public Record {
public:

  TYPE_HOL_Eq() : Record(TAG_TYPE_HOL_Eq, 2) {}
  void Init(TYPE_HOL_term p2, TYPE_HOL_term p3);

  TYPE_HOL_Eq(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Eq"; }
  TYPE_HOL_term get_lhs() const;
  void set_lhs(const TYPE_HOL_term &p);
  TYPE_HOL_term get_rhs() const;
  void set_rhs(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_Exists : public Record {
public:

  TYPE_HOL_Exists() : Record(TAG_TYPE_HOL_Exists, 2) {}
  void Init(type_dL p2, TYPE_HOL_term p3);

  TYPE_HOL_Exists(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Exists"; }
  type_dL get_Bvar() const;
  void set_Bvar(const type_dL &p);
  TYPE_HOL_term get_Body() const;
  void set_Body(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_Exists1 : public Record {
public:

  TYPE_HOL_Exists1() : Record(TAG_TYPE_HOL_Exists1, 2) {}
  void Init(type_dL p2, TYPE_HOL_term p3);

  TYPE_HOL_Exists1(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Exists1"; }
  type_dL get_Bvar() const;
  void set_Bvar(const type_dL &p);
  TYPE_HOL_term get_Body() const;
  void set_Body(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_Forall : public Record {
public:

  TYPE_HOL_Forall() : Record(TAG_TYPE_HOL_Forall, 2) {}
  void Init(type_dL p2, TYPE_HOL_term p3);

  TYPE_HOL_Forall(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Forall"; }
  type_dL get_Bvar() const;
  void set_Bvar(const type_dL &p);
  TYPE_HOL_term get_Body() const;
  void set_Body(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_Fun_utype : public Record {
public:

  TYPE_HOL_Fun_utype() : Record(TAG_TYPE_HOL_Fun_utype, 1) {}
  void Init(type_dL p2);

  TYPE_HOL_Fun_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Fun_utype"; }
  type_dL get_elmtps() const;
  void set_elmtps(const type_dL &p);
} ;

class TYPE_HOL_Imp : public Record {
public:

  TYPE_HOL_Imp() : Record(TAG_TYPE_HOL_Imp, 2) {}
  void Init(TYPE_HOL_term p2, TYPE_HOL_term p3);

  TYPE_HOL_Imp(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Imp"; }
  TYPE_HOL_term get_ant() const;
  void set_ant(const TYPE_HOL_term &p);
  TYPE_HOL_term get_conseq() const;
  void set_conseq(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_Ind : public Record {
public:

  TYPE_HOL_Ind() : Record(TAG_TYPE_HOL_Ind, 1) {}
  void Init(Token p2);

  TYPE_HOL_Ind(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Ind"; }
  Token get_val() const;
  void set_val(const Token &p);
} ;

class TYPE_HOL_Ind_utype : public Record {
public:

  TYPE_HOL_Ind_utype() : Record(TAG_TYPE_HOL_Ind_utype, 0) {}
  void Init();

  TYPE_HOL_Ind_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Ind_utype"; }
} ;

class TYPE_HOL_Int_utype : public Record {
public:

  TYPE_HOL_Int_utype() : Record(TAG_TYPE_HOL_Int_utype, 0) {}
  void Init();

  TYPE_HOL_Int_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Int_utype"; }
} ;

class TYPE_HOL_Integer : public Record {
public:

  TYPE_HOL_Integer() : Record(TAG_TYPE_HOL_Integer, 1) {}
  void Init(Int p2);

  TYPE_HOL_Integer(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Integer"; }
  Int get_val() const;
  void set_val(const Int &p);
} ;

class TYPE_HOL_Let : public Record {
public:

  TYPE_HOL_Let() : Record(TAG_TYPE_HOL_Let, 2) {}
  void Init(TYPE_HOL_term p2, type_dd2PL p3);

  TYPE_HOL_Let(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Let"; }
  TYPE_HOL_term get_body() const;
  void set_body(const TYPE_HOL_term &p);
  type_dd2PL get_defs() const;
  void set_defs(const type_dd2PL &p);
} ;

class TYPE_HOL_List : public Record {
public:

  TYPE_HOL_List() : Record(TAG_TYPE_HOL_List, 2) {}
  void Init(type_dL p2, TYPE_HOL_term_utype p3);

  TYPE_HOL_List(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_List"; }
  type_dL get_elms() const;
  void set_elms(const type_dL &p);
  TYPE_HOL_term_utype get_tp() const;
  void set_tp(const TYPE_HOL_term_utype &p);
} ;

class TYPE_HOL_List_utype : public Record {
public:

  TYPE_HOL_List_utype() : Record(TAG_TYPE_HOL_List_utype, 1) {}
  void Init(TYPE_HOL_term_utype p2);

  TYPE_HOL_List_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_List_utype"; }
  TYPE_HOL_term_utype get_elmtp() const;
  void set_elmtp(const TYPE_HOL_term_utype &p);
} ;

class TYPE_HOL_Map : public Record {
public:

  TYPE_HOL_Map() : Record(TAG_TYPE_HOL_Map, 2) {}
  void Init(type_dL p2, TYPE_HOL_term_utype p3);

  TYPE_HOL_Map(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Map"; }
  type_dL get_elms() const;
  void set_elms(const type_dL &p);
  TYPE_HOL_term_utype get_tp() const;
  void set_tp(const TYPE_HOL_term_utype &p);
} ;

class TYPE_HOL_Map_utype : public Record {
public:

  TYPE_HOL_Map_utype() : Record(TAG_TYPE_HOL_Map_utype, 1) {}
  void Init(type_dL p2);

  TYPE_HOL_Map_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Map_utype"; }
  type_dL get_elmtps() const;
  void set_elmtps(const type_dL &p);
} ;

class TYPE_HOL_Neg : public Record {
public:

  TYPE_HOL_Neg() : Record(TAG_TYPE_HOL_Neg, 1) {}
  void Init(TYPE_HOL_term p2);

  TYPE_HOL_Neg(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Neg"; }
  TYPE_HOL_term get_Term() const;
  void set_Term(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_Num_utype : public Record {
public:

  TYPE_HOL_Num_utype() : Record(TAG_TYPE_HOL_Num_utype, 0) {}
  void Init();

  TYPE_HOL_Num_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Num_utype"; }
} ;

class TYPE_HOL_Numeral : public Record {
public:

  TYPE_HOL_Numeral() : Record(TAG_TYPE_HOL_Numeral, 1) {}
  void Init(Int p2);

  TYPE_HOL_Numeral(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Numeral"; }
  Int get_val() const;
  void set_val(const Int &p);
} ;

class TYPE_HOL_Option_utype : public Record {
public:

  TYPE_HOL_Option_utype() : Record(TAG_TYPE_HOL_Option_utype, 1) {}
  void Init(TYPE_HOL_term_utype p2);

  TYPE_HOL_Option_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Option_utype"; }
  TYPE_HOL_term_utype get_elmtp() const;
  void set_elmtp(const TYPE_HOL_term_utype &p);
} ;

class TYPE_HOL_Pair : public Record {
public:

  TYPE_HOL_Pair() : Record(TAG_TYPE_HOL_Pair, 1) {}
  void Init(type_dL p2);

  TYPE_HOL_Pair(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Pair"; }
  type_dL get_elms() const;
  void set_elms(const type_dL &p);
} ;

class TYPE_HOL_Prod_utype : public Record {
public:

  TYPE_HOL_Prod_utype() : Record(TAG_TYPE_HOL_Prod_utype, 1) {}
  void Init(type_dL p2);

  TYPE_HOL_Prod_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Prod_utype"; }
  type_dL get_elmtps() const;
  void set_elmtps(const type_dL &p);
} ;

class TYPE_HOL_Proj : public Record {
public:

  TYPE_HOL_Proj() : Record(TAG_TYPE_HOL_Proj, 2) {}
  void Init(Int p2, TYPE_HOL_Prod_utype p3);

  TYPE_HOL_Proj(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Proj"; }
  Int get_i() const;
  void set_i(const Int &p);
  TYPE_HOL_Prod_utype get_tp() const;
  void set_tp(const TYPE_HOL_Prod_utype &p);
} ;

class TYPE_HOL_Real : public Record {
public:

  TYPE_HOL_Real() : Record(TAG_TYPE_HOL_Real, 1) {}
  void Init(Real p2);

  TYPE_HOL_Real(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Real"; }
  Real get_val() const;
  void set_val(const Real &p);
} ;

class TYPE_HOL_Real_utype : public Record {
public:

  TYPE_HOL_Real_utype() : Record(TAG_TYPE_HOL_Real_utype, 0) {}
  void Init();

  TYPE_HOL_Real_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Real_utype"; }
} ;

class TYPE_HOL_Select : public Record {
public:

  TYPE_HOL_Select() : Record(TAG_TYPE_HOL_Select, 2) {}
  void Init(TYPE_HOL_bound_uvar p2, TYPE_HOL_term p3);

  TYPE_HOL_Select(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Select"; }
  TYPE_HOL_bound_uvar get_Bvar() const;
  void set_Bvar(const TYPE_HOL_bound_uvar &p);
  TYPE_HOL_term get_Body() const;
  void set_Body(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_Set : public Record {
public:

  TYPE_HOL_Set() : Record(TAG_TYPE_HOL_Set, 2) {}
  void Init(type_dL p2, TYPE_HOL_term_utype p3);

  TYPE_HOL_Set(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Set"; }
  type_dL get_elms() const;
  void set_elms(const type_dL &p);
  TYPE_HOL_term_utype get_tp() const;
  void set_tp(const TYPE_HOL_term_utype &p);
} ;

class TYPE_HOL_Set_utype : public Record {
public:

  TYPE_HOL_Set_utype() : Record(TAG_TYPE_HOL_Set_utype, 1) {}
  void Init(TYPE_HOL_term_utype p2);

  TYPE_HOL_Set_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Set_utype"; }
  TYPE_HOL_term_utype get_elmtp() const;
  void set_elmtp(const TYPE_HOL_term_utype &p);
} ;

class TYPE_HOL_String : public Record {
public:

  TYPE_HOL_String() : Record(TAG_TYPE_HOL_String, 1) {}
  void Init(type_cL p2);

  TYPE_HOL_String(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_String"; }
  type_cL get_val() const;
  void set_val(const type_cL &p);
} ;

class TYPE_HOL_Var : public Record {
public:

  TYPE_HOL_Var() : Record(TAG_TYPE_HOL_Var, 2) {}
  void Init(TYPE_HOL_var_uname p2, TYPE_HOL_type_uexpr p3);

  TYPE_HOL_Var(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_Var"; }
  TYPE_HOL_var_uname get_Name() const;
  void set_Name(const TYPE_HOL_var_uname &p);
  TYPE_HOL_type_uexpr get_Ty() const;
  void set_Ty(const TYPE_HOL_type_uexpr &p);
} ;

class TYPE_HOL_const_udef : public Record {
public:

  TYPE_HOL_const_udef() : Record(TAG_TYPE_HOL_const_udef, 3) {}
  void Init(TYPE_HOL_func_uname p2, TYPE_HOL_term_utype p3, TYPE_HOL_term p4);

  TYPE_HOL_const_udef(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_const_udef"; }
  TYPE_HOL_func_uname get_name() const;
  void set_name(const TYPE_HOL_func_uname &p);
  TYPE_HOL_term_utype get_type() const;
  void set_type(const TYPE_HOL_term_utype &p);
  TYPE_HOL_term get_expr() const;
  void set_expr(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_datatype_udef : public Record {
public:

  TYPE_HOL_datatype_udef() : Record(TAG_TYPE_HOL_datatype_udef, 2) {}
  void Init(TYPE_HOL_type_uname p2, TYPE_HOL_datatype p3);

  TYPE_HOL_datatype_udef(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_datatype_udef"; }
  TYPE_HOL_type_uname get_name() const;
  void set_name(const TYPE_HOL_type_uname &p);
  TYPE_HOL_datatype get_type() const;
  void set_type(const TYPE_HOL_datatype &p);
} ;

class TYPE_HOL_field : public Record {
public:

  TYPE_HOL_field() : Record(TAG_TYPE_HOL_field, 2) {}
  void Init(TYPE_HOL_field_uname p2, TYPE_HOL_term_utype p3);

  TYPE_HOL_field(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_field"; }
  TYPE_HOL_field_uname get_name() const;
  void set_name(const TYPE_HOL_field_uname &p);
  TYPE_HOL_term_utype get_tp() const;
  void set_tp(const TYPE_HOL_term_utype &p);
} ;

class TYPE_HOL_func_udef : public Record {
public:

  TYPE_HOL_func_udef() : Record(TAG_TYPE_HOL_func_udef, 4) {}
  void Init(TYPE_HOL_func_uname p2, TYPE_HOL_term_utype p3, type_dL p4, TYPE_HOL_term p5);

  TYPE_HOL_func_udef(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_func_udef"; }
  TYPE_HOL_func_uname get_name() const;
  void set_name(const TYPE_HOL_func_uname &p);
  TYPE_HOL_term_utype get_fntype() const;
  void set_fntype(const TYPE_HOL_term_utype &p);
  type_dL get_parms() const;
  void set_parms(const type_dL &p);
  TYPE_HOL_term get_body() const;
  void set_body(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_po_udef : public Record {
public:

  TYPE_HOL_po_udef() : Record(TAG_TYPE_HOL_po_udef, 2) {}
  void Init(TYPE_HOL_func_uname p2, TYPE_HOL_term p3);

  TYPE_HOL_po_udef(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_po_udef"; }
  TYPE_HOL_func_uname get_name() const;
  void set_name(const TYPE_HOL_func_uname &p);
  TYPE_HOL_term get_expr() const;
  void set_expr(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_pred_udef : public Record {
public:

  TYPE_HOL_pred_udef() : Record(TAG_TYPE_HOL_pred_udef, 4) {}
  void Init(TYPE_HOL_func_uname p2, TYPE_HOL_term_utype p3, type_dL p4, TYPE_HOL_term p5);

  TYPE_HOL_pred_udef(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_pred_udef"; }
  TYPE_HOL_func_uname get_name() const;
  void set_name(const TYPE_HOL_func_uname &p);
  TYPE_HOL_term_utype get_fntype() const;
  void set_fntype(const TYPE_HOL_term_utype &p);
  type_dL get_parms() const;
  void set_parms(const type_dL &p);
  TYPE_HOL_term get_body() const;
  void set_body(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_quote_utype : public Record {
public:

  TYPE_HOL_quote_utype() : Record(TAG_TYPE_HOL_quote_utype, 1) {}
  void Init(TYPE_HOL_type_uname p2);

  TYPE_HOL_quote_utype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_quote_utype"; }
  TYPE_HOL_type_uname get_name() const;
  void set_name(const TYPE_HOL_type_uname &p);
} ;

class TYPE_HOL_record : public Record {
public:

  TYPE_HOL_record() : Record(TAG_TYPE_HOL_record, 2) {}
  void Init(TYPE_HOL_type_uname p2, type_9HOL_fieldCL p3);

  TYPE_HOL_record(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_record"; }
  TYPE_HOL_type_uname get_tag() const;
  void set_tag(const TYPE_HOL_type_uname &p);
  type_9HOL_fieldCL get_fields() const;
  void set_fields(const type_9HOL_fieldCL &p);
} ;

class TYPE_HOL_select_udef : public Record {
public:

  TYPE_HOL_select_udef() : Record(TAG_TYPE_HOL_select_udef, 4) {}
  void Init(TYPE_HOL_func_uname p2, TYPE_HOL_term_utype p3, type_dL p4, TYPE_HOL_term p5);

  TYPE_HOL_select_udef(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_select_udef"; }
  TYPE_HOL_func_uname get_name() const;
  void set_name(const TYPE_HOL_func_uname &p);
  TYPE_HOL_term_utype get_fntype() const;
  void set_fntype(const TYPE_HOL_term_utype &p);
  type_dL get_parms() const;
  void set_parms(const type_dL &p);
  TYPE_HOL_term get_body() const;
  void set_body(const TYPE_HOL_term &p);
} ;

class TYPE_HOL_spec : public Record {
public:

  TYPE_HOL_spec() : Record(TAG_TYPE_HOL_spec, 3) {}
  void Init(type_dLL p2, type_dLL p3, type_11HOL_po_udefCL p4);

  TYPE_HOL_spec(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_spec"; }
  type_dLL get_tpdefs() const;
  void set_tpdefs(const type_dLL &p);
  type_dLL get_fndefs() const;
  void set_fndefs(const type_dLL &p);
  type_11HOL_po_udefCL get_podefs() const;
  void set_podefs(const type_11HOL_po_udefCL &p);
} ;

class TYPE_HOL_sum : public Record {
public:

  TYPE_HOL_sum() : Record(TAG_TYPE_HOL_sum, 1) {}
  void Init(type_dL p2);

  TYPE_HOL_sum(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_sum"; }
  type_dL get_elms() const;
  void set_elms(const type_dL &p);
} ;

class TYPE_HOL_type : public Record {
public:

  TYPE_HOL_type() : Record(TAG_TYPE_HOL_type, 2) {}
  void Init(TYPE_HOL_type_uname p2, type_dL p3);

  TYPE_HOL_type(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_type"; }
  TYPE_HOL_type_uname get_name() const;
  void set_name(const TYPE_HOL_type_uname &p);
  type_dL get_args() const;
  void set_args(const type_dL &p);
} ;

class TYPE_HOL_type_uabbrev_udef : public Record {
public:

  TYPE_HOL_type_uabbrev_udef() : Record(TAG_TYPE_HOL_type_uabbrev_udef, 2) {}
  void Init(TYPE_HOL_type_uname p2, TYPE_HOL_term_utype p3);

  TYPE_HOL_type_uabbrev_udef(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_type_uabbrev_udef"; }
  TYPE_HOL_type_uname get_name() const;
  void set_name(const TYPE_HOL_type_uname &p);
  TYPE_HOL_term_utype get_type() const;
  void set_type(const TYPE_HOL_term_utype &p);
} ;

class TYPE_HOL_vartype : public Record {
public:

  TYPE_HOL_vartype() : Record(TAG_TYPE_HOL_vartype, 1) {}
  void Init(TYPE_HOL_type_uname p2);

  TYPE_HOL_vartype(const Generic &c) : Record(c) {}

  const char * GetTypeName() const { return "TYPE_HOL_vartype"; }
  TYPE_HOL_type_uname get_name() const;
  void set_name(const TYPE_HOL_type_uname &p);
} ;
void init_HOL();

#endif

