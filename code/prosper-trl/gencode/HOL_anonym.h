//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Wed 05-Apr-00 by the VDM-SLtoC++ Code Generator
// (v3.3.2 - Thu 02-Dec-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _HOL_anonym_h
#define _HOL_anonym_h

#include "HOL_userdef.h"
#include "metaiv.h"
class TYPE_HOL_Boolean;
class TYPE_HOL_Char;
class TYPE_HOL_Cond;
class TYPE_HOL_Const;
class TYPE_HOL_Eq;
class TYPE_HOL_Imp;
class TYPE_HOL_Ind;
class TYPE_HOL_Integer;
class TYPE_HOL_Neg;
class TYPE_HOL_Numeral;
class TYPE_HOL_Proj;
class TYPE_HOL_Real;
class TYPE_HOL_Select;
class TYPE_HOL_String;
class TYPE_HOL_Var;
class TYPE_HOL_Set;
class TYPE_HOL_Pair;
class TYPE_HOL_Map;
class TYPE_HOL_List;
class TYPE_HOL_Let;
class TYPE_HOL_Forall;
class TYPE_HOL_Exists1;
class TYPE_HOL_Exists;
class TYPE_HOL_Disj;
class TYPE_HOL_Conj;
class TYPE_HOL_Comb;
class TYPE_HOL_Abs;
class TYPE_HOL_Bool_utype;
class TYPE_HOL_Char_utype;
class TYPE_HOL_Ind_utype;
class TYPE_HOL_Int_utype;
class TYPE_HOL_List_utype;
class TYPE_HOL_Num_utype;
class TYPE_HOL_Option_utype;
class TYPE_HOL_Real_utype;
class TYPE_HOL_Set_utype;
class TYPE_HOL_quote_utype;
class TYPE_HOL_field;
class TYPE_HOL_record;
class TYPE_HOL_vartype;
class TYPE_HOL_type;
class TYPE_HOL_sum;
class TYPE_HOL_Prod_utype;
class TYPE_HOL_Map_utype;
class TYPE_HOL_Fun_utype;
class TYPE_HOL_const_udef;
class TYPE_HOL_datatype_udef;
class TYPE_HOL_func_udef;
class TYPE_HOL_pred_udef;
class TYPE_HOL_select_udef;
class TYPE_HOL_po_udef;
class TYPE_HOL_type_uabbrev_udef;
class TYPE_HOL_spec;
class type_cL;
class type_dL;
class type_dd2P;
class type_dd2PL;
class type_9HOL_fieldCL;
class type_dLL;
class type_11HOL_po_udefCL;
#define TYPE_HOL_var_uname type_cL
#define TYPE_HOL_type_uname type_cL
#define TYPE_HOL_type_uexpr Record
#define TYPE_HOL_type_udef Record
#define TYPE_HOL_term_utype Record
#define TYPE_HOL_term Record
#define TYPE_HOL_string type_cL
#define TYPE_HOL_spec_uname type_cL
#define TYPE_HOL_ident_uname type_cL
#define TYPE_HOL_func_uname type_cL
#define TYPE_HOL_fn_udef Record
#define TYPE_HOL_field_uname type_cL
#define TYPE_HOL_datatype Record
#define TYPE_HOL_const_uname type_cL
#define TYPE_HOL_bound_uvar Record
#define TYPE_HOL_arg_uname type_cL
#ifndef TAG_type_cL
#define TAG_type_cL (TAG_HOL + 1)
#endif

#ifndef TAG_type_dL
#define TAG_type_dL (TAG_HOL + 2)
#endif

#ifndef TAG_type_dd2P
#define TAG_type_dd2P (TAG_HOL + 3)
#endif

#ifndef TAG_type_dd2PL
#define TAG_type_dd2PL (TAG_HOL + 4)
#endif

#ifndef TAG_type_9HOL_fieldCL
#define TAG_type_9HOL_fieldCL (TAG_HOL + 5)
#endif

#ifndef TAG_type_dLL
#define TAG_type_dLL (TAG_HOL + 6)
#endif

#ifndef TAG_type_11HOL_po_udefCL
#define TAG_type_11HOL_po_udefCL (TAG_HOL + 7)
#endif

#ifndef TAG_TYPE_HOL_Boolean
#define TAG_TYPE_HOL_Boolean (TAG_HOL + 8)
#endif

#ifndef TAG_TYPE_HOL_Char
#define TAG_TYPE_HOL_Char (TAG_HOL + 9)
#endif

#ifndef TAG_TYPE_HOL_Cond
#define TAG_TYPE_HOL_Cond (TAG_HOL + 10)
#endif

#ifndef TAG_TYPE_HOL_Const
#define TAG_TYPE_HOL_Const (TAG_HOL + 11)
#endif

#ifndef TAG_TYPE_HOL_Eq
#define TAG_TYPE_HOL_Eq (TAG_HOL + 12)
#endif

#ifndef TAG_TYPE_HOL_Imp
#define TAG_TYPE_HOL_Imp (TAG_HOL + 13)
#endif

#ifndef TAG_TYPE_HOL_Ind
#define TAG_TYPE_HOL_Ind (TAG_HOL + 14)
#endif

#ifndef TAG_TYPE_HOL_Integer
#define TAG_TYPE_HOL_Integer (TAG_HOL + 15)
#endif

#ifndef TAG_TYPE_HOL_Neg
#define TAG_TYPE_HOL_Neg (TAG_HOL + 16)
#endif

#ifndef TAG_TYPE_HOL_Numeral
#define TAG_TYPE_HOL_Numeral (TAG_HOL + 17)
#endif

#ifndef TAG_TYPE_HOL_Proj
#define TAG_TYPE_HOL_Proj (TAG_HOL + 18)
#endif

#ifndef TAG_TYPE_HOL_Real
#define TAG_TYPE_HOL_Real (TAG_HOL + 19)
#endif

#ifndef TAG_TYPE_HOL_Select
#define TAG_TYPE_HOL_Select (TAG_HOL + 20)
#endif

#ifndef TAG_TYPE_HOL_String
#define TAG_TYPE_HOL_String (TAG_HOL + 21)
#endif

#ifndef TAG_TYPE_HOL_Var
#define TAG_TYPE_HOL_Var (TAG_HOL + 22)
#endif

#ifndef TAG_TYPE_HOL_Set
#define TAG_TYPE_HOL_Set (TAG_HOL + 23)
#endif

#ifndef TAG_TYPE_HOL_Pair
#define TAG_TYPE_HOL_Pair (TAG_HOL + 24)
#endif

#ifndef TAG_TYPE_HOL_Map
#define TAG_TYPE_HOL_Map (TAG_HOL + 25)
#endif

#ifndef TAG_TYPE_HOL_List
#define TAG_TYPE_HOL_List (TAG_HOL + 26)
#endif

#ifndef TAG_TYPE_HOL_Let
#define TAG_TYPE_HOL_Let (TAG_HOL + 27)
#endif

#ifndef TAG_TYPE_HOL_Forall
#define TAG_TYPE_HOL_Forall (TAG_HOL + 28)
#endif

#ifndef TAG_TYPE_HOL_Exists1
#define TAG_TYPE_HOL_Exists1 (TAG_HOL + 29)
#endif

#ifndef TAG_TYPE_HOL_Exists
#define TAG_TYPE_HOL_Exists (TAG_HOL + 30)
#endif

#ifndef TAG_TYPE_HOL_Disj
#define TAG_TYPE_HOL_Disj (TAG_HOL + 31)
#endif

#ifndef TAG_TYPE_HOL_Conj
#define TAG_TYPE_HOL_Conj (TAG_HOL + 32)
#endif

#ifndef TAG_TYPE_HOL_Comb
#define TAG_TYPE_HOL_Comb (TAG_HOL + 33)
#endif

#ifndef TAG_TYPE_HOL_Abs
#define TAG_TYPE_HOL_Abs (TAG_HOL + 34)
#endif

#ifndef TAG_TYPE_HOL_Bool_utype
#define TAG_TYPE_HOL_Bool_utype (TAG_HOL + 35)
#endif

#ifndef TAG_TYPE_HOL_Char_utype
#define TAG_TYPE_HOL_Char_utype (TAG_HOL + 36)
#endif

#ifndef TAG_TYPE_HOL_Ind_utype
#define TAG_TYPE_HOL_Ind_utype (TAG_HOL + 37)
#endif

#ifndef TAG_TYPE_HOL_Int_utype
#define TAG_TYPE_HOL_Int_utype (TAG_HOL + 38)
#endif

#ifndef TAG_TYPE_HOL_List_utype
#define TAG_TYPE_HOL_List_utype (TAG_HOL + 39)
#endif

#ifndef TAG_TYPE_HOL_Num_utype
#define TAG_TYPE_HOL_Num_utype (TAG_HOL + 40)
#endif

#ifndef TAG_TYPE_HOL_Option_utype
#define TAG_TYPE_HOL_Option_utype (TAG_HOL + 41)
#endif

#ifndef TAG_TYPE_HOL_Real_utype
#define TAG_TYPE_HOL_Real_utype (TAG_HOL + 42)
#endif

#ifndef TAG_TYPE_HOL_Set_utype
#define TAG_TYPE_HOL_Set_utype (TAG_HOL + 43)
#endif

#ifndef TAG_TYPE_HOL_quote_utype
#define TAG_TYPE_HOL_quote_utype (TAG_HOL + 44)
#endif

#ifndef TAG_TYPE_HOL_field
#define TAG_TYPE_HOL_field (TAG_HOL + 45)
#endif

#ifndef TAG_TYPE_HOL_record
#define TAG_TYPE_HOL_record (TAG_HOL + 46)
#endif

#ifndef TAG_TYPE_HOL_vartype
#define TAG_TYPE_HOL_vartype (TAG_HOL + 47)
#endif

#ifndef TAG_TYPE_HOL_type
#define TAG_TYPE_HOL_type (TAG_HOL + 48)
#endif

#ifndef TAG_TYPE_HOL_sum
#define TAG_TYPE_HOL_sum (TAG_HOL + 49)
#endif

#ifndef TAG_TYPE_HOL_Prod_utype
#define TAG_TYPE_HOL_Prod_utype (TAG_HOL + 50)
#endif

#ifndef TAG_TYPE_HOL_Map_utype
#define TAG_TYPE_HOL_Map_utype (TAG_HOL + 51)
#endif

#ifndef TAG_TYPE_HOL_Fun_utype
#define TAG_TYPE_HOL_Fun_utype (TAG_HOL + 52)
#endif

#ifndef TAG_TYPE_HOL_const_udef
#define TAG_TYPE_HOL_const_udef (TAG_HOL + 53)
#endif

#ifndef TAG_TYPE_HOL_datatype_udef
#define TAG_TYPE_HOL_datatype_udef (TAG_HOL + 54)
#endif

#ifndef TAG_TYPE_HOL_func_udef
#define TAG_TYPE_HOL_func_udef (TAG_HOL + 55)
#endif

#ifndef TAG_TYPE_HOL_pred_udef
#define TAG_TYPE_HOL_pred_udef (TAG_HOL + 56)
#endif

#ifndef TAG_TYPE_HOL_select_udef
#define TAG_TYPE_HOL_select_udef (TAG_HOL + 57)
#endif

#ifndef TAG_TYPE_HOL_po_udef
#define TAG_TYPE_HOL_po_udef (TAG_HOL + 58)
#endif

#ifndef TAG_TYPE_HOL_type_uabbrev_udef
#define TAG_TYPE_HOL_type_uabbrev_udef (TAG_HOL + 59)
#endif

#ifndef TAG_TYPE_HOL_spec
#define TAG_TYPE_HOL_spec (TAG_HOL + 60)
#endif

#ifndef DECL_type_cL
#define DECL_type_cL 1

class type_cL : public SEQ<Char> {
public:

  type_cL() : SEQ<Char>() {}

  type_cL(const SEQ<Char> &c) : SEQ<Char>(c) {}

  type_cL(const Generic &c) : SEQ<Char>(c) {}

  const char * GetTypeName() const { return "type_cL"; }
} ;
#endif

#ifndef DECL_type_dL
#define DECL_type_dL 1

class type_dL : public SEQ<Record> {
public:

  type_dL() : SEQ<Record>() {}

  type_dL(const SEQ<Record> &c) : SEQ<Record>(c) {}

  type_dL(const Generic &c) : SEQ<Record>(c) {}

  const char * GetTypeName() const { return "type_dL"; }
} ;
#endif

#ifndef DECL_type_dd2P
#define DECL_type_dd2P 1

class type_dd2P : public Tuple {
public:

  type_dd2P() : Tuple(2) {}
  void Init(TYPE_HOL_term p2, TYPE_HOL_term p3);

  type_dd2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_dd2P"; }
  TYPE_HOL_term get_1() const;
  void set_1(const TYPE_HOL_term &p);
  TYPE_HOL_term get_2() const;
  void set_2(const TYPE_HOL_term &p);
} ;
#endif

#ifndef DECL_type_dd2PL
#define DECL_type_dd2PL 1

class type_dd2PL : public SEQ<type_dd2P> {
public:

  type_dd2PL() : SEQ<type_dd2P>() {}

  type_dd2PL(const SEQ<type_dd2P> &c) : SEQ<type_dd2P>(c) {}

  type_dd2PL(const Generic &c) : SEQ<type_dd2P>(c) {}

  const char * GetTypeName() const { return "type_dd2PL"; }
} ;
#endif

#ifndef DECL_type_9HOL_fieldCL
#define DECL_type_9HOL_fieldCL 1

class type_9HOL_fieldCL : public SEQ<TYPE_HOL_field> {
public:

  type_9HOL_fieldCL() : SEQ<TYPE_HOL_field>() {}

  type_9HOL_fieldCL(const SEQ<TYPE_HOL_field> &c) : SEQ<TYPE_HOL_field>(c) {}

  type_9HOL_fieldCL(const Generic &c) : SEQ<TYPE_HOL_field>(c) {}

  const char * GetTypeName() const { return "type_9HOL_fieldCL"; }
} ;
#endif

#ifndef DECL_type_dLL
#define DECL_type_dLL 1

class type_dLL : public SEQ<type_dL> {
public:

  type_dLL() : SEQ<type_dL>() {}

  type_dLL(const SEQ<type_dL> &c) : SEQ<type_dL>(c) {}

  type_dLL(const Generic &c) : SEQ<type_dL>(c) {}

  const char * GetTypeName() const { return "type_dLL"; }
} ;
#endif

#ifndef DECL_type_11HOL_po_udefCL
#define DECL_type_11HOL_po_udefCL 1

class type_11HOL_po_udefCL : public SEQ<TYPE_HOL_po_udef> {
public:

  type_11HOL_po_udefCL() : SEQ<TYPE_HOL_po_udef>() {}

  type_11HOL_po_udefCL(const SEQ<TYPE_HOL_po_udef> &c) : SEQ<TYPE_HOL_po_udef>(c) {}

  type_11HOL_po_udefCL(const Generic &c) : SEQ<TYPE_HOL_po_udef>(c) {}

  const char * GetTypeName() const { return "type_11HOL_po_udefCL"; }
} ;
#endif


#endif

