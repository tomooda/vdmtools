//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Fri 15-Oct-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _TRL_uTAR_uEXPR_anonym_h
#define _TRL_uTAR_uEXPR_anonym_h

#include "TRL_uTAR_uEXPR_userdef.h"
#include "metaiv.h"
extern const Quote quote_AND;
extern const Quote quote_COMPOSE;
extern const Quote quote_EQ;
extern const Quote quote_EQUIV;
extern const Quote quote_IMPLY;
extern const Quote quote_INSET;
extern const Quote quote_INTDIV;
extern const Quote quote_MAPDOMRESTBY;
extern const Quote quote_MAPDOMRESTTO;
extern const Quote quote_MAPMERGE;
extern const Quote quote_MAPRNGRESTBY;
extern const Quote quote_MAPRNGRESTTO;
extern const Quote quote_NE;
extern const Quote quote_NOTINSET;
extern const Quote quote_NUMDIV;
extern const Quote quote_NUMEXP;
extern const Quote quote_NUMGE;
extern const Quote quote_NUMGT;
extern const Quote quote_NUMLE;
extern const Quote quote_NUMLT;
extern const Quote quote_NUMMINUS;
extern const Quote quote_NUMMOD;
extern const Quote quote_NUMMULT;
extern const Quote quote_NUMPLUS;
extern const Quote quote_NUMREM;
extern const Quote quote_OR;
extern const Quote quote_PROPERSUBSET;
extern const Quote quote_SEQCONC;
extern const Quote quote_SETINTERSECT;
extern const Quote quote_SETMINUS;
extern const Quote quote_SETUNION;
extern const Quote quote_SUBSET;
extern const Quote quote_FLOOR;
extern const Quote quote_MAPDISTRMERGE;
extern const Quote quote_MAPDOM;
extern const Quote quote_MAPRNG;
extern const Quote quote_NOT;
extern const Quote quote_NUMABS;
extern const Quote quote_SEQDISTRCONC;
extern const Quote quote_SEQELEMS;
extern const Quote quote_SEQHEAD;
extern const Quote quote_SEQINDICES;
extern const Quote quote_SEQLEN;
extern const Quote quote_SEQTAIL;
extern const Quote quote_SETCARD;
extern const Quote quote_SETDISTRINTERSECT;
extern const Quote quote_SETDISTRUNION;
extern const Quote quote_SETPOWER;
extern const Quote quote_ALL;
extern const Quote quote_EXISTS;
class TYPE_TRL_uTAR_uEXPR_ALTN;
class TYPE_TRL_uTAR_uEXPR_EXPR;
class TYPE_TRL_uTAR_uEXPR_ELSEIFEXPR;
class type_cL;
class type_cLS;
class type_19TRL_uTAR_uEXPR_ALTNCL;
class type_FF2P;
class type_FF2PL;
class type_18TRL_uTAR_uPAT_BINDCL;
class type_18TRL_uTAR_uPAT_BINDCLL;
class type_19TRL_uTAR_uEXPR_EXPRCL;
class type_19TRL_uTAR_uEXPR_ALTNCLL;
class type_F19TRL_uTAR_uEXPR_EXPRC2P;
class type_F19TRL_uTAR_uEXPR_EXPRC2PL;
class type_19TRL_uTAR_uTYPE_TYPECL;
class type_cLL;
class type_25TRL_uTAR_uEXPR_ELSEIFEXPRCL;
class type_FL;
#define TYPE_TRL_uTAR_uEXPR_var_uname type_cL
#define TYPE_TRL_uTAR_uEXPR_string type_cL
#define TYPE_TRL_uTAR_uEXPR_op_uname type_cL
#define TYPE_TRL_uTAR_uEXPR_UndefinedExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_UnaryExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_TypeJudgementExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_TupleSelectExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_TupleConstructorExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_TokenConstructorExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_TextLit TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_SubSequenceExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_SetRangeExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_SetEnumerationExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_SetComprehensionExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_SeqModifyMapOverrideExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_SeqModifyExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_SeqEnumerationExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_SeqComprehensionExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_RecordModifierExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_RecordModification TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_RecordConstructorExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_RealLit TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_QuoteLit TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_QuantExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_PrefixExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_PreConditionApplyExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_OldName TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_NumLit TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_NilLit TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_NameType type_cL
#define TYPE_TRL_uTAR_uEXPR_NameName type_cL
#define TYPE_TRL_uTAR_uEXPR_NameExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_Maplet TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_MapOverrideExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_MapInverseExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_MapEnumerationExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_MapComprehensionExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_Literal TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_LetExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_LetBeSTExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_LambdaExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_IsExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_IotaExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_IfExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_Ids type_cL
#define TYPE_TRL_uTAR_uEXPR_FieldSelectExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_FctTypeInstExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_Expr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_ExistsUniqueExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_ElseifExpr TYPE_TRL_uTAR_uEXPR_ELSEIFEXPR
#define TYPE_TRL_uTAR_uEXPR_DefExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_CharLit TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_CasesExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_CaseAltn type_19TRL_uTAR_uEXPR_ALTNCL
#define TYPE_TRL_uTAR_uEXPR_BracketedExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_BoolLit TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_BinaryExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_ApplyExpr TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uEXPR_AllOrExistsExpr TYPE_TRL_uTAR_uEXPR_EXPR
#ifndef TAG_type_cL
#define TAG_type_cL (TAG_TRL_uTAR_uEXPR + 1)
#endif

#ifndef TAG_type_cLS
#define TAG_type_cLS (TAG_TRL_uTAR_uEXPR + 2)
#endif

#ifndef TAG_type_19TRL_uTAR_uEXPR_ALTNCL
#define TAG_type_19TRL_uTAR_uEXPR_ALTNCL (TAG_TRL_uTAR_uEXPR + 3)
#endif

#ifndef TAG_type_FF2P
#define TAG_type_FF2P (TAG_TRL_uTAR_uEXPR + 4)
#endif

#ifndef TAG_type_FF2PL
#define TAG_type_FF2PL (TAG_TRL_uTAR_uEXPR + 5)
#endif

#ifndef TAG_type_18TRL_uTAR_uPAT_BINDCL
#define TAG_type_18TRL_uTAR_uPAT_BINDCL (TAG_TRL_uTAR_uEXPR + 6)
#endif

#ifndef TAG_type_18TRL_uTAR_uPAT_BINDCLL
#define TAG_type_18TRL_uTAR_uPAT_BINDCLL (TAG_TRL_uTAR_uEXPR + 7)
#endif

#ifndef TAG_type_19TRL_uTAR_uEXPR_EXPRCL
#define TAG_type_19TRL_uTAR_uEXPR_EXPRCL (TAG_TRL_uTAR_uEXPR + 8)
#endif

#ifndef TAG_type_19TRL_uTAR_uEXPR_ALTNCLL
#define TAG_type_19TRL_uTAR_uEXPR_ALTNCLL (TAG_TRL_uTAR_uEXPR + 9)
#endif

#ifndef TAG_type_F19TRL_uTAR_uEXPR_EXPRC2P
#define TAG_type_F19TRL_uTAR_uEXPR_EXPRC2P (TAG_TRL_uTAR_uEXPR + 10)
#endif

#ifndef TAG_type_F19TRL_uTAR_uEXPR_EXPRC2PL
#define TAG_type_F19TRL_uTAR_uEXPR_EXPRC2PL (TAG_TRL_uTAR_uEXPR + 11)
#endif

#ifndef TAG_type_19TRL_uTAR_uTYPE_TYPECL
#define TAG_type_19TRL_uTAR_uTYPE_TYPECL (TAG_TRL_uTAR_uEXPR + 12)
#endif

#ifndef TAG_type_cLL
#define TAG_type_cLL (TAG_TRL_uTAR_uEXPR + 13)
#endif

#ifndef TAG_type_25TRL_uTAR_uEXPR_ELSEIFEXPRCL
#define TAG_type_25TRL_uTAR_uEXPR_ELSEIFEXPRCL (TAG_TRL_uTAR_uEXPR + 14)
#endif

#ifndef TAG_type_FL
#define TAG_type_FL (TAG_TRL_uTAR_uEXPR + 15)
#endif

#ifndef TAG_quote_AND
#define TAG_quote_AND (TAG_TRL_uTAR_uEXPR + 16)
#endif

#ifndef TAG_quote_COMPOSE
#define TAG_quote_COMPOSE (TAG_TRL_uTAR_uEXPR + 17)
#endif

#ifndef TAG_quote_EQ
#define TAG_quote_EQ (TAG_TRL_uTAR_uEXPR + 18)
#endif

#ifndef TAG_quote_EQUIV
#define TAG_quote_EQUIV (TAG_TRL_uTAR_uEXPR + 19)
#endif

#ifndef TAG_quote_IMPLY
#define TAG_quote_IMPLY (TAG_TRL_uTAR_uEXPR + 20)
#endif

#ifndef TAG_quote_INSET
#define TAG_quote_INSET (TAG_TRL_uTAR_uEXPR + 21)
#endif

#ifndef TAG_quote_INTDIV
#define TAG_quote_INTDIV (TAG_TRL_uTAR_uEXPR + 22)
#endif

#ifndef TAG_quote_MAPDOMRESTBY
#define TAG_quote_MAPDOMRESTBY (TAG_TRL_uTAR_uEXPR + 23)
#endif

#ifndef TAG_quote_MAPDOMRESTTO
#define TAG_quote_MAPDOMRESTTO (TAG_TRL_uTAR_uEXPR + 24)
#endif

#ifndef TAG_quote_MAPMERGE
#define TAG_quote_MAPMERGE (TAG_TRL_uTAR_uEXPR + 25)
#endif

#ifndef TAG_quote_MAPRNGRESTBY
#define TAG_quote_MAPRNGRESTBY (TAG_TRL_uTAR_uEXPR + 26)
#endif

#ifndef TAG_quote_MAPRNGRESTTO
#define TAG_quote_MAPRNGRESTTO (TAG_TRL_uTAR_uEXPR + 27)
#endif

#ifndef TAG_quote_NE
#define TAG_quote_NE (TAG_TRL_uTAR_uEXPR + 28)
#endif

#ifndef TAG_quote_NOTINSET
#define TAG_quote_NOTINSET (TAG_TRL_uTAR_uEXPR + 29)
#endif

#ifndef TAG_quote_NUMDIV
#define TAG_quote_NUMDIV (TAG_TRL_uTAR_uEXPR + 30)
#endif

#ifndef TAG_quote_NUMEXP
#define TAG_quote_NUMEXP (TAG_TRL_uTAR_uEXPR + 31)
#endif

#ifndef TAG_quote_NUMGE
#define TAG_quote_NUMGE (TAG_TRL_uTAR_uEXPR + 32)
#endif

#ifndef TAG_quote_NUMGT
#define TAG_quote_NUMGT (TAG_TRL_uTAR_uEXPR + 33)
#endif

#ifndef TAG_quote_NUMLE
#define TAG_quote_NUMLE (TAG_TRL_uTAR_uEXPR + 34)
#endif

#ifndef TAG_quote_NUMLT
#define TAG_quote_NUMLT (TAG_TRL_uTAR_uEXPR + 35)
#endif

#ifndef TAG_quote_NUMMINUS
#define TAG_quote_NUMMINUS (TAG_TRL_uTAR_uEXPR + 36)
#endif

#ifndef TAG_quote_NUMMOD
#define TAG_quote_NUMMOD (TAG_TRL_uTAR_uEXPR + 37)
#endif

#ifndef TAG_quote_NUMMULT
#define TAG_quote_NUMMULT (TAG_TRL_uTAR_uEXPR + 38)
#endif

#ifndef TAG_quote_NUMPLUS
#define TAG_quote_NUMPLUS (TAG_TRL_uTAR_uEXPR + 39)
#endif

#ifndef TAG_quote_NUMREM
#define TAG_quote_NUMREM (TAG_TRL_uTAR_uEXPR + 40)
#endif

#ifndef TAG_quote_OR
#define TAG_quote_OR (TAG_TRL_uTAR_uEXPR + 41)
#endif

#ifndef TAG_quote_PROPERSUBSET
#define TAG_quote_PROPERSUBSET (TAG_TRL_uTAR_uEXPR + 42)
#endif

#ifndef TAG_quote_SEQCONC
#define TAG_quote_SEQCONC (TAG_TRL_uTAR_uEXPR + 43)
#endif

#ifndef TAG_quote_SETINTERSECT
#define TAG_quote_SETINTERSECT (TAG_TRL_uTAR_uEXPR + 44)
#endif

#ifndef TAG_quote_SETMINUS
#define TAG_quote_SETMINUS (TAG_TRL_uTAR_uEXPR + 45)
#endif

#ifndef TAG_quote_SETUNION
#define TAG_quote_SETUNION (TAG_TRL_uTAR_uEXPR + 46)
#endif

#ifndef TAG_quote_SUBSET
#define TAG_quote_SUBSET (TAG_TRL_uTAR_uEXPR + 47)
#endif

#ifndef TAG_quote_FLOOR
#define TAG_quote_FLOOR (TAG_TRL_uTAR_uEXPR + 48)
#endif

#ifndef TAG_quote_MAPDISTRMERGE
#define TAG_quote_MAPDISTRMERGE (TAG_TRL_uTAR_uEXPR + 49)
#endif

#ifndef TAG_quote_MAPDOM
#define TAG_quote_MAPDOM (TAG_TRL_uTAR_uEXPR + 50)
#endif

#ifndef TAG_quote_MAPRNG
#define TAG_quote_MAPRNG (TAG_TRL_uTAR_uEXPR + 51)
#endif

#ifndef TAG_quote_NOT
#define TAG_quote_NOT (TAG_TRL_uTAR_uEXPR + 52)
#endif

#ifndef TAG_quote_NUMABS
#define TAG_quote_NUMABS (TAG_TRL_uTAR_uEXPR + 53)
#endif

#ifndef TAG_quote_SEQDISTRCONC
#define TAG_quote_SEQDISTRCONC (TAG_TRL_uTAR_uEXPR + 54)
#endif

#ifndef TAG_quote_SEQELEMS
#define TAG_quote_SEQELEMS (TAG_TRL_uTAR_uEXPR + 55)
#endif

#ifndef TAG_quote_SEQHEAD
#define TAG_quote_SEQHEAD (TAG_TRL_uTAR_uEXPR + 56)
#endif

#ifndef TAG_quote_SEQINDICES
#define TAG_quote_SEQINDICES (TAG_TRL_uTAR_uEXPR + 57)
#endif

#ifndef TAG_quote_SEQLEN
#define TAG_quote_SEQLEN (TAG_TRL_uTAR_uEXPR + 58)
#endif

#ifndef TAG_quote_SEQTAIL
#define TAG_quote_SEQTAIL (TAG_TRL_uTAR_uEXPR + 59)
#endif

#ifndef TAG_quote_SETCARD
#define TAG_quote_SETCARD (TAG_TRL_uTAR_uEXPR + 60)
#endif

#ifndef TAG_quote_SETDISTRINTERSECT
#define TAG_quote_SETDISTRINTERSECT (TAG_TRL_uTAR_uEXPR + 61)
#endif

#ifndef TAG_quote_SETDISTRUNION
#define TAG_quote_SETDISTRUNION (TAG_TRL_uTAR_uEXPR + 62)
#endif

#ifndef TAG_quote_SETPOWER
#define TAG_quote_SETPOWER (TAG_TRL_uTAR_uEXPR + 63)
#endif

#ifndef TAG_quote_ALL
#define TAG_quote_ALL (TAG_TRL_uTAR_uEXPR + 64)
#endif

#ifndef TAG_quote_EXISTS
#define TAG_quote_EXISTS (TAG_TRL_uTAR_uEXPR + 65)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "CI_uAUX_anonym.h"
#include "HOL_anonym.h"
#include "REP_anonym.h"
#include "REP2TYPE_anonym.h"
#include "SPEC_uAST_anonym.h"
#include "TRANS_anonym.h"
#include "TRL_uTAR_uDEF_anonym.h"
#include "TRL_uTAR_uPAT_anonym.h"
#include "TRL_uTAR_uTYPE_anonym.h"
#include "TRL_uTRA_uTYPE_anonym.h"
#ifndef TAG_TYPE_TRL_uTAR_uEXPR_ALTN
#define TAG_TYPE_TRL_uTAR_uEXPR_ALTN (TAG_TRL_uTAR_uEXPR + 66)
#endif

#ifndef TAG_TYPE_TRL_uTAR_uEXPR_EXPR
#define TAG_TYPE_TRL_uTAR_uEXPR_EXPR (TAG_TRL_uTAR_uEXPR + 67)
#endif

#ifndef TAG_TYPE_TRL_uTAR_uEXPR_ELSEIFEXPR
#define TAG_TYPE_TRL_uTAR_uEXPR_ELSEIFEXPR (TAG_TRL_uTAR_uEXPR + 68)
#endif

#ifndef DECL_type_cL
#define DECL_type_cL 1

class type_cL : public SEQ<Char> {
public:

  type_cL() : SEQ<Char>() {}

  type_cL(const SEQ<Char> &c) : SEQ<Char>(c) {}

  type_cL(const Generic &c) : SEQ<Char>(c) {}

  const char * GetTypeName() const { return "type_cL"; }
} ;
#endif

#ifndef DECL_type_cLS
#define DECL_type_cLS 1

class type_cLS : public SET<type_cL> {
public:

  type_cLS() : SET<type_cL>() {}

  type_cLS(const SET<type_cL> &c) : SET<type_cL>(c) {}

  type_cLS(const Generic &c) : SET<type_cL>(c) {}

  const char * GetTypeName() const { return "type_cLS"; }
} ;
#endif

#ifndef DECL_type_19TRL_uTAR_uEXPR_ALTNCL
#define DECL_type_19TRL_uTAR_uEXPR_ALTNCL 1

class type_19TRL_uTAR_uEXPR_ALTNCL : public SEQ<TYPE_TRL_uTAR_uEXPR_ALTN> {
public:

  type_19TRL_uTAR_uEXPR_ALTNCL() : SEQ<TYPE_TRL_uTAR_uEXPR_ALTN>() {}

  type_19TRL_uTAR_uEXPR_ALTNCL(const SEQ<TYPE_TRL_uTAR_uEXPR_ALTN> &c) : SEQ<TYPE_TRL_uTAR_uEXPR_ALTN>(c) {}

  type_19TRL_uTAR_uEXPR_ALTNCL(const Generic &c) : SEQ<TYPE_TRL_uTAR_uEXPR_ALTN>(c) {}

  const char * GetTypeName() const { return "type_19TRL_uTAR_uEXPR_ALTNCL"; }
} ;
#endif

#ifndef DECL_type_FF2P
#define DECL_type_FF2P 1

class type_FF2P : public Tuple {
public:

  type_FF2P() : Tuple(2) {}
  void Init(TYPE_HOL_term p2, TYPE_HOL_term p3);

  type_FF2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_FF2P"; }
  TYPE_HOL_term get_1() const;
  void set_1(const TYPE_HOL_term &p);
  TYPE_HOL_term get_2() const;
  void set_2(const TYPE_HOL_term &p);
} ;
#endif

#ifndef DECL_type_FF2PL
#define DECL_type_FF2PL 1

class type_FF2PL : public SEQ<type_FF2P> {
public:

  type_FF2PL() : SEQ<type_FF2P>() {}

  type_FF2PL(const SEQ<type_FF2P> &c) : SEQ<type_FF2P>(c) {}

  type_FF2PL(const Generic &c) : SEQ<type_FF2P>(c) {}

  const char * GetTypeName() const { return "type_FF2PL"; }
} ;
#endif

#ifndef DECL_type_18TRL_uTAR_uPAT_BINDCL
#define DECL_type_18TRL_uTAR_uPAT_BINDCL 1

class type_18TRL_uTAR_uPAT_BINDCL : public SEQ<TYPE_TRL_uTAR_uPAT_BIND> {
public:

  type_18TRL_uTAR_uPAT_BINDCL() : SEQ<TYPE_TRL_uTAR_uPAT_BIND>() {}

  type_18TRL_uTAR_uPAT_BINDCL(const SEQ<TYPE_TRL_uTAR_uPAT_BIND> &c) : SEQ<TYPE_TRL_uTAR_uPAT_BIND>(c) {}

  type_18TRL_uTAR_uPAT_BINDCL(const Generic &c) : SEQ<TYPE_TRL_uTAR_uPAT_BIND>(c) {}

  const char * GetTypeName() const { return "type_18TRL_uTAR_uPAT_BINDCL"; }
} ;
#endif

#ifndef DECL_type_18TRL_uTAR_uPAT_BINDCLL
#define DECL_type_18TRL_uTAR_uPAT_BINDCLL 1

class type_18TRL_uTAR_uPAT_BINDCLL : public SEQ<type_18TRL_uTAR_uPAT_BINDCL> {
public:

  type_18TRL_uTAR_uPAT_BINDCLL() : SEQ<type_18TRL_uTAR_uPAT_BINDCL>() {}

  type_18TRL_uTAR_uPAT_BINDCLL(const SEQ<type_18TRL_uTAR_uPAT_BINDCL> &c) : SEQ<type_18TRL_uTAR_uPAT_BINDCL>(c) {}

  type_18TRL_uTAR_uPAT_BINDCLL(const Generic &c) : SEQ<type_18TRL_uTAR_uPAT_BINDCL>(c) {}

  const char * GetTypeName() const { return "type_18TRL_uTAR_uPAT_BINDCLL"; }
} ;
#endif

#ifndef DECL_type_19TRL_uTAR_uEXPR_EXPRCL
#define DECL_type_19TRL_uTAR_uEXPR_EXPRCL 1

class type_19TRL_uTAR_uEXPR_EXPRCL : public SEQ<TYPE_TRL_uTAR_uEXPR_EXPR> {
public:

  type_19TRL_uTAR_uEXPR_EXPRCL() : SEQ<TYPE_TRL_uTAR_uEXPR_EXPR>() {}

  type_19TRL_uTAR_uEXPR_EXPRCL(const SEQ<TYPE_TRL_uTAR_uEXPR_EXPR> &c) : SEQ<TYPE_TRL_uTAR_uEXPR_EXPR>(c) {}

  type_19TRL_uTAR_uEXPR_EXPRCL(const Generic &c) : SEQ<TYPE_TRL_uTAR_uEXPR_EXPR>(c) {}

  const char * GetTypeName() const { return "type_19TRL_uTAR_uEXPR_EXPRCL"; }
} ;
#endif

#ifndef DECL_type_19TRL_uTAR_uEXPR_ALTNCLL
#define DECL_type_19TRL_uTAR_uEXPR_ALTNCLL 1

class type_19TRL_uTAR_uEXPR_ALTNCLL : public SEQ<type_19TRL_uTAR_uEXPR_ALTNCL> {
public:

  type_19TRL_uTAR_uEXPR_ALTNCLL() : SEQ<type_19TRL_uTAR_uEXPR_ALTNCL>() {}

  type_19TRL_uTAR_uEXPR_ALTNCLL(const SEQ<type_19TRL_uTAR_uEXPR_ALTNCL> &c) : SEQ<type_19TRL_uTAR_uEXPR_ALTNCL>(c) {}

  type_19TRL_uTAR_uEXPR_ALTNCLL(const Generic &c) : SEQ<type_19TRL_uTAR_uEXPR_ALTNCL>(c) {}

  const char * GetTypeName() const { return "type_19TRL_uTAR_uEXPR_ALTNCLL"; }
} ;
#endif

#ifndef DECL_type_F19TRL_uTAR_uEXPR_EXPRC2P
#define DECL_type_F19TRL_uTAR_uEXPR_EXPRC2P 1

class type_F19TRL_uTAR_uEXPR_EXPRC2P : public Tuple {
public:

  type_F19TRL_uTAR_uEXPR_EXPRC2P() : Tuple(2) {}
  void Init(TYPE_TRL_uTAR_uPAT_PatternBind p2, TYPE_TRL_uTAR_uEXPR_Expr p3);

  type_F19TRL_uTAR_uEXPR_EXPRC2P(const Generic &c) : Tuple(c) {}

  const char * GetTypeName() const { return "type_F19TRL_uTAR_uEXPR_EXPRC2P"; }
  TYPE_TRL_uTAR_uPAT_PatternBind get_1() const;
  void set_1(const TYPE_TRL_uTAR_uPAT_PatternBind &p);
  TYPE_TRL_uTAR_uEXPR_Expr get_2() const;
  void set_2(const TYPE_TRL_uTAR_uEXPR_Expr &p);
} ;
#endif

#ifndef DECL_type_F19TRL_uTAR_uEXPR_EXPRC2PL
#define DECL_type_F19TRL_uTAR_uEXPR_EXPRC2PL 1

class type_F19TRL_uTAR_uEXPR_EXPRC2PL : public SEQ<type_F19TRL_uTAR_uEXPR_EXPRC2P> {
public:

  type_F19TRL_uTAR_uEXPR_EXPRC2PL() : SEQ<type_F19TRL_uTAR_uEXPR_EXPRC2P>() {}

  type_F19TRL_uTAR_uEXPR_EXPRC2PL(const SEQ<type_F19TRL_uTAR_uEXPR_EXPRC2P> &c) : SEQ<type_F19TRL_uTAR_uEXPR_EXPRC2P>(c) {}

  type_F19TRL_uTAR_uEXPR_EXPRC2PL(const Generic &c) : SEQ<type_F19TRL_uTAR_uEXPR_EXPRC2P>(c) {}

  const char * GetTypeName() const { return "type_F19TRL_uTAR_uEXPR_EXPRC2PL"; }
} ;
#endif

#ifndef DECL_type_19TRL_uTAR_uTYPE_TYPECL
#define DECL_type_19TRL_uTAR_uTYPE_TYPECL 1

class type_19TRL_uTAR_uTYPE_TYPECL : public SEQ<TYPE_TRL_uTAR_uTYPE_TYPE> {
public:

  type_19TRL_uTAR_uTYPE_TYPECL() : SEQ<TYPE_TRL_uTAR_uTYPE_TYPE>() {}

  type_19TRL_uTAR_uTYPE_TYPECL(const SEQ<TYPE_TRL_uTAR_uTYPE_TYPE> &c) : SEQ<TYPE_TRL_uTAR_uTYPE_TYPE>(c) {}

  type_19TRL_uTAR_uTYPE_TYPECL(const Generic &c) : SEQ<TYPE_TRL_uTAR_uTYPE_TYPE>(c) {}

  const char * GetTypeName() const { return "type_19TRL_uTAR_uTYPE_TYPECL"; }
} ;
#endif

#ifndef DECL_type_cLL
#define DECL_type_cLL 1

class type_cLL : public SEQ<type_cL> {
public:

  type_cLL() : SEQ<type_cL>() {}

  type_cLL(const SEQ<type_cL> &c) : SEQ<type_cL>(c) {}

  type_cLL(const Generic &c) : SEQ<type_cL>(c) {}

  const char * GetTypeName() const { return "type_cLL"; }
} ;
#endif

#ifndef DECL_type_25TRL_uTAR_uEXPR_ELSEIFEXPRCL
#define DECL_type_25TRL_uTAR_uEXPR_ELSEIFEXPRCL 1

class type_25TRL_uTAR_uEXPR_ELSEIFEXPRCL : public SEQ<TYPE_TRL_uTAR_uEXPR_ELSEIFEXPR> {
public:

  type_25TRL_uTAR_uEXPR_ELSEIFEXPRCL() : SEQ<TYPE_TRL_uTAR_uEXPR_ELSEIFEXPR>() {}

  type_25TRL_uTAR_uEXPR_ELSEIFEXPRCL(const SEQ<TYPE_TRL_uTAR_uEXPR_ELSEIFEXPR> &c) : SEQ<TYPE_TRL_uTAR_uEXPR_ELSEIFEXPR>(c) {}

  type_25TRL_uTAR_uEXPR_ELSEIFEXPRCL(const Generic &c) : SEQ<TYPE_TRL_uTAR_uEXPR_ELSEIFEXPR>(c) {}

  const char * GetTypeName() const { return "type_25TRL_uTAR_uEXPR_ELSEIFEXPRCL"; }
} ;
#endif

#ifndef DECL_type_FL
#define DECL_type_FL 1

class type_FL : public SEQ<Generic> {
public:

  type_FL() : SEQ<Generic>() {}

  type_FL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_FL(const Generic &c) : SEQ<Generic>(c) {}

  const char * GetTypeName() const { return "type_FL"; }
} ;
#endif


#endif

