//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Thu 25-Nov-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _TRL_uTAR_uPAT_anonym_h
#define _TRL_uTAR_uPAT_anonym_h

#include "TRL_uTAR_uPAT_userdef.h"
#include "metaiv.h"
class TYPE_TRL_uTAR_uPAT_BIND;
class type_19TRL_uTAR_uEXPR_EXPRCL;
class type_18TRL_uTAR_uPAT_BINDCL;
class type_18TRL_uTAR_uPAT_BINDCLL;
class type_cL;
#define TYPE_TRL_uTAR_uPAT_TypeBind TYPE_TRL_uTAR_uPAT_BIND
#define TYPE_TRL_uTAR_uPAT_TuplePattern TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_SetUnionPattern TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_SetPattern TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_SetEnumPattern TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_SetBind TYPE_TRL_uTAR_uPAT_BIND
#define TYPE_TRL_uTAR_uPAT_SeqPattern TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_SeqEnumPattern TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_SeqConcPattern TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_RecordPattern TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_PatternName TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_PatternBind Record
#define TYPE_TRL_uTAR_uPAT_Pattern TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_PATTERN TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_MultTypeBind type_18TRL_uTAR_uPAT_BINDCL
#define TYPE_TRL_uTAR_uPAT_MultSetBind type_18TRL_uTAR_uPAT_BINDCL
#define TYPE_TRL_uTAR_uPAT_MultBind type_18TRL_uTAR_uPAT_BINDCL
#define TYPE_TRL_uTAR_uPAT_MatchVal TYPE_TRL_uTAR_uEXPR_EXPR
#define TYPE_TRL_uTAR_uPAT_BindList type_18TRL_uTAR_uPAT_BINDCLL
#define TYPE_TRL_uTAR_uPAT_Bind TYPE_TRL_uTAR_uPAT_BIND
#ifndef TAG_type_19TRL_uTAR_uEXPR_EXPRCL
#define TAG_type_19TRL_uTAR_uEXPR_EXPRCL (TAG_TRL_uTAR_uPAT + 1)
#endif

#ifndef TAG_type_18TRL_uTAR_uPAT_BINDCL
#define TAG_type_18TRL_uTAR_uPAT_BINDCL (TAG_TRL_uTAR_uPAT + 2)
#endif

#ifndef TAG_type_18TRL_uTAR_uPAT_BINDCLL
#define TAG_type_18TRL_uTAR_uPAT_BINDCLL (TAG_TRL_uTAR_uPAT + 3)
#endif

#ifndef TAG_type_cL
#define TAG_type_cL (TAG_TRL_uTAR_uPAT + 4)
#endif


#include "AS_anonym.h"
#include "CI_anonym.h"
#include "CI_uAUX_anonym.h"
#include "DER_uINV_anonym.h"
#include "HOL_anonym.h"
#include "REP_anonym.h"
#include "REP2TYPE_anonym.h"
#include "TRANS_anonym.h"
#include "TRL_uTAR_uEXPR_anonym.h"
#include "TRL_uTAR_uTYPE_anonym.h"
#include "TRL_uTRA_uTYPE_anonym.h"
#ifndef TAG_TYPE_TRL_uTAR_uPAT_BIND
#define TAG_TYPE_TRL_uTAR_uPAT_BIND (TAG_TRL_uTAR_uPAT + 5)
#endif

#ifndef DECL_type_19TRL_uTAR_uEXPR_EXPRCL
#define DECL_type_19TRL_uTAR_uEXPR_EXPRCL 1

class type_19TRL_uTAR_uEXPR_EXPRCL : public SEQ<TYPE_TRL_uTAR_uEXPR_EXPR> {
public:

  type_19TRL_uTAR_uEXPR_EXPRCL() : SEQ<TYPE_TRL_uTAR_uEXPR_EXPR>() {}

  type_19TRL_uTAR_uEXPR_EXPRCL(const SEQ<TYPE_TRL_uTAR_uEXPR_EXPR> &c) : SEQ<TYPE_TRL_uTAR_uEXPR_EXPR>(c) {}

  type_19TRL_uTAR_uEXPR_EXPRCL(const Generic &c) : SEQ<TYPE_TRL_uTAR_uEXPR_EXPR>(c) {}

  const char * GetTypeName() const { return "type_19TRL_uTAR_uEXPR_EXPRCL"; }
} ;
#endif

#ifndef DECL_type_18TRL_uTAR_uPAT_BINDCL
#define DECL_type_18TRL_uTAR_uPAT_BINDCL 1

class type_18TRL_uTAR_uPAT_BINDCL : public SEQ<TYPE_TRL_uTAR_uPAT_BIND> {
public:

  type_18TRL_uTAR_uPAT_BINDCL() : SEQ<TYPE_TRL_uTAR_uPAT_BIND>() {}

  type_18TRL_uTAR_uPAT_BINDCL(const SEQ<TYPE_TRL_uTAR_uPAT_BIND> &c) : SEQ<TYPE_TRL_uTAR_uPAT_BIND>(c) {}

  type_18TRL_uTAR_uPAT_BINDCL(const Generic &c) : SEQ<TYPE_TRL_uTAR_uPAT_BIND>(c) {}

  const char * GetTypeName() const { return "type_18TRL_uTAR_uPAT_BINDCL"; }
} ;
#endif

#ifndef DECL_type_18TRL_uTAR_uPAT_BINDCLL
#define DECL_type_18TRL_uTAR_uPAT_BINDCLL 1

class type_18TRL_uTAR_uPAT_BINDCLL : public SEQ<type_18TRL_uTAR_uPAT_BINDCL> {
public:

  type_18TRL_uTAR_uPAT_BINDCLL() : SEQ<type_18TRL_uTAR_uPAT_BINDCL>() {}

  type_18TRL_uTAR_uPAT_BINDCLL(const SEQ<type_18TRL_uTAR_uPAT_BINDCL> &c) : SEQ<type_18TRL_uTAR_uPAT_BINDCL>(c) {}

  type_18TRL_uTAR_uPAT_BINDCLL(const Generic &c) : SEQ<type_18TRL_uTAR_uPAT_BINDCL>(c) {}

  const char * GetTypeName() const { return "type_18TRL_uTAR_uPAT_BINDCLL"; }
} ;
#endif

#ifndef DECL_type_cL
#define DECL_type_cL 1

class type_cL : public SEQ<Char> {
public:

  type_cL() : SEQ<Char>() {}

  type_cL(const SEQ<Char> &c) : SEQ<Char>(c) {}

  type_cL(const Generic &c) : SEQ<Char>(c) {}

  const char * GetTypeName() const { return "type_cL"; }
} ;
#endif


#endif

