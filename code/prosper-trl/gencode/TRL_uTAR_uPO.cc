//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Wed 13-Oct-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Mon 22-Mar-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//



#include "TRL_uTAR_uPO.h"

void init_TRL_uTAR_uPO_VDMLib() {
  VDMGetDefaultRecInfoMap().NewTag(TOKEN, 1);
  VDMGetDefaultRecInfoMap().SetSymTag(TOKEN, "token");
}
#ifdef DEF_TRL_uTAR_uPO_USERIMPL

#include "TRL_uTAR_uPO_userimpl.cc"

#endif


void init_TRL_uTAR_uPO() { init_TRL_uTAR_uPO_VDMLib(); }
#ifndef DEF_TRL_uTAR_uPO_Nat2str

type_cL vdm_TRL_uTAR_uPO_Nat2str(const Int &vdm_TRL_uTAR_uPO_n) {
  Sequence varRes_3;
  {
    Int vdm_TRL_uTAR_uPO_d = (Int) (vdm_TRL_uTAR_uPO_n / (Int) 10);
    Int vdm_TRL_uTAR_uPO_r = vdm_TRL_uTAR_uPO_n - (Int) 10 * vdm_TRL_uTAR_uPO_d;
    Sequence vdm_TRL_uTAR_uPO_r_ustr;
    bool succ_14 = true;
    {
      succ_14 = true;
      if (vdm_TRL_uTAR_uPO_r != (Int) 0) 
        succ_14 = false;
      if (succ_14) 
        vdm_TRL_uTAR_uPO_r_ustr = Sequence("0");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_TRL_uTAR_uPO_r != (Int) 1) 
        succ_14 = false;
      if (succ_14) 
        vdm_TRL_uTAR_uPO_r_ustr = Sequence("1");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_TRL_uTAR_uPO_r != (Int) 2) 
        succ_14 = false;
      if (succ_14) 
        vdm_TRL_uTAR_uPO_r_ustr = Sequence("2");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_TRL_uTAR_uPO_r != (Int) 3) 
        succ_14 = false;
      if (succ_14) 
        vdm_TRL_uTAR_uPO_r_ustr = Sequence("3");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_TRL_uTAR_uPO_r != (Int) 4) 
        succ_14 = false;
      if (succ_14) 
        vdm_TRL_uTAR_uPO_r_ustr = Sequence("4");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_TRL_uTAR_uPO_r != (Int) 5) 
        succ_14 = false;
      if (succ_14) 
        vdm_TRL_uTAR_uPO_r_ustr = Sequence("5");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_TRL_uTAR_uPO_r != (Int) 6) 
        succ_14 = false;
      if (succ_14) 
        vdm_TRL_uTAR_uPO_r_ustr = Sequence("6");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_TRL_uTAR_uPO_r != (Int) 7) 
        succ_14 = false;
      if (succ_14) 
        vdm_TRL_uTAR_uPO_r_ustr = Sequence("7");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_TRL_uTAR_uPO_r != (Int) 8) 
        succ_14 = false;
      if (succ_14) 
        vdm_TRL_uTAR_uPO_r_ustr = Sequence("8");
    }
    if (!succ_14) {
      succ_14 = true;
      if (vdm_TRL_uTAR_uPO_r != (Int) 9) 
        succ_14 = false;
      if (succ_14) 
        vdm_TRL_uTAR_uPO_r_ustr = Sequence("9");
    }
    if (!succ_14) 
      RunTime("No \'others\' branch in CasesExpr");
    Sequence vdm_TRL_uTAR_uPO_d_ustr;
    if (((Bool) (vdm_TRL_uTAR_uPO_d == (Int) 0)).GetValue()) 
      vdm_TRL_uTAR_uPO_d_ustr = Sequence("");
    else 
      vdm_TRL_uTAR_uPO_d_ustr = vdm_TRL_uTAR_uPO_Nat2str((Generic) vdm_TRL_uTAR_uPO_d);
    varRes_3.ImpConc(vdm_TRL_uTAR_uPO_d_ustr).ImpConc(vdm_TRL_uTAR_uPO_r_ustr);
  }
  return (Generic) varRes_3;
}
#endif

#ifndef DEF_TRL_uTAR_uPO_tar_uProofObligation

TYPE_TRL_uTAR_uPO_ProofObligation vdm_TRL_uTAR_uPO_tar_uProofObligation(const Int &var_1_1, const TYPE_TRL_uTAR_uEXPR_Expr &var_2_2, const TYPE_POGTP_Classification &var_3_3, const type_7AS_NameCL &var_4_4, const TYPE_POGTP_LocContext &var_5_5, const TYPE_CI_ContextId &var_6_6) {
  Int vdm_TRL_uTAR_uPO_no;
  Record vdm_TRL_uTAR_uPO_po(vdm_TRL_uTAR_uEXPR_EXPR, length_TRL_uTAR_uEXPR_EXPR);
  bool succ_7 = true;
  vdm_TRL_uTAR_uPO_no = var_1_1;
  vdm_TRL_uTAR_uPO_po = var_2_2;
  if (succ_7) {}
  if (succ_7) {}
  if (succ_7) {}
  if (succ_7) {}
  if (!succ_7) 
    RunTime("Pattern Match in Function Apply in function : tar_uProofObligation failed");
  Record varRes_8(vdm_HOL_po_udef, length_HOL_po_udef);
  varRes_8 = Record(vdm_HOL_po_udef, length_HOL_po_udef);
  Sequence tmpVar_9;
  tmpVar_9.ImpConc(Sequence("PO")).ImpConc(vdm_TRL_uTAR_uPO_Nat2str((Generic) vdm_TRL_uTAR_uPO_no));
  varRes_8.SetField(1, tmpVar_9);
  Record tmpVar_13;
  if (vdm_TRL_uTAR_uPO_po.Is(vdm_TRL_uTAR_uEXPR_EXPR)) 
    tmpVar_13 = vdm_TRL_uTAR_uPO_po.GetField(pos_TRL_uTAR_uEXPR_EXPR_tm);
  else 
    RunTime("Unknown record field selector");
  varRes_8.SetField(2, tmpVar_13);
  return (Generic) varRes_8;
}
#endif

