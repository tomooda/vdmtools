/***
*  * WHAT
*  *    This file implements the automation interface towards Rational Rose98
*  *    The file is automatically generated by ClassWizard (MSDEV 5.0) from 
*  *    a type library.
*  *
*  * FILE
*  *    $Source: /home/vdmtools/cvsroot/toolbox/code/uml/code/rationalrose.cc,v $
*  * VERSION
*  *    $Revision: 1.9 $
*  * DATE
*  *    $Date: 2006/05/02 00:19:16 $
*  * FORMAT
*  *    $State: Exp $
*  * PROJECT
*  *    VDM-SL Toolbox.
*  * AUTHOR
*  *    $Author: vdmtools $
*  * COPYRIGHT
*  *    (C) Kyushu University
***/

#include "stdafx.h"
#include "rationalrose.h"
#include "afxpriv2.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
//static wchar_t THIS_FILE[] = __FILE__;
static char THIS_FILE[] = __FILE__;
#endif

#if _MFC_VER >= 0x0800
struct _AFX_DOUBLE { BYTE doubleBits[sizeof(double)]; };
struct _AFX_FLOAT  { BYTE floatBits[sizeof(float)]; };
#endif // _MFC_VER >= 0x0800

void AFX_CDECL CTBOleDispatchDriver::SetProperty(DISPID dwDispID, VARTYPE vtProp, ...)
{
  va_list argList;    // really only one arg, but...
  va_start(argList, vtProp);

  BYTE rgbParams[2];
  if (vtProp & VT_BYREF)
  {
    vtProp &= ~VT_BYREF;
    vtProp |= VT_MFCBYREF;
  }

#if !defined(_UNICODE) && !defined(OLE2ANSI)
    if (vtProp == VT_BSTR)
      vtProp = VT_BSTRA;
#endif

  rgbParams[0] = (BYTE)vtProp;
  rgbParams[1] = 0;
  WORD wFlags = (WORD)(vtProp == VT_DISPATCH ?
    DISPATCH_PROPERTYPUTREF : DISPATCH_PROPERTYPUT);
  InvokeHelperV(dwDispID, wFlags, VT_EMPTY, NULL, rgbParams, argList);

  va_end(argList);
}

void CTBOleDispatchDriver::GetProperty(DISPID dwDispID, VARTYPE vtProp, void* pvProp)
{
  InvokeHelper(dwDispID,DISPATCH_PROPERTYGET, vtProp, pvProp, NULL);
}

CTBOleDispatchDriver::~CTBOleDispatchDriver()
{
  ReleaseStream();
}

void CTBOleDispatchDriver::ReleaseStream()
{
  if (pStream != NULL) {
    LARGE_INTEGER l;
    l.QuadPart = 0;
    pStream->Seek(l, STREAM_SEEK_SET, NULL);
    CoReleaseMarshalData(pStream);
    pStream->Release();
    pStream = NULL;
  }
}

BOOL CTBOleDispatchDriver::CreateDispatch(REFCLSID clsid, COleException* pError)
{
  if(COleDispatchDriver::CreateDispatch(clsid, pError)) {
    pStream = NULL;
    HRESULT hr =
      ::CoMarshalInterThreadInterfaceInStream(
   IID_IDispatch,
   (LPUNKNOWN)m_lpDispatch,
   &pStream); 

    return SUCCEEDED(hr);
  } else {
    return FALSE;
  }
}

void CTBOleDispatchDriver::AttachDispatch(LPDISPATCH lpDispatch, BOOL bAutoRelease)
{
  // ASSERT: lpDispatch<>NULL

  ReleaseStream();
  COleDispatchDriver::AttachDispatch(lpDispatch, bAutoRelease);

  pStream = NULL;
  HRESULT hr =
    ::CoMarshalInterThreadInterfaceInStream(
   IID_IDispatch,
   (LPUNKNOWN)m_lpDispatch,
   &pStream); 

}

HRESULT AFX_CDECL CTBOleDispatchDriver::InvokeHelper(DISPID dwDispID, WORD wFlags,
                                                     VARTYPE vtRet, void* pvRet, const BYTE* pbParamInfo, ...)
{
  va_list argList;
  va_start(argList, pbParamInfo);
  HRESULT hr = InvokeHelperV(dwDispID, wFlags, vtRet, pvRet, pbParamInfo, argList);
  va_end(argList);
  return hr;
}

HRESULT CTBOleDispatchDriver::InvokeHelperV(DISPID dwDispID, WORD wFlags, VARTYPE vtRet, 
                                            void* pvRet, const BYTE* pbParamInfo, va_list argList)
{
//    USES_CONVERSION;

//    _ASSERTE(p);

    DISPPARAMS dispparams;
    memset(&dispparams, 0, sizeof dispparams);

    // determine number of arguments
    if (pbParamInfo != NULL) {
      dispparams.cArgs = 0;
      while(pbParamInfo[dispparams.cArgs] != 0) {
        dispparams.cArgs++;
      }
    }

    DISPID dispidNamed = DISPID_PROPERTYPUT;
    if (wFlags & (DISPATCH_PROPERTYPUT|DISPATCH_PROPERTYPUTREF))
    {
      _ASSERTE(dispparams.cArgs > 0);
      dispparams.cNamedArgs = 1;
      dispparams.rgdispidNamedArgs = &dispidNamed;
    }

    if (dispparams.cArgs != 0)
    {
      // allocate memory for all VARIANT parameters
      VARIANT* pArg = new VARIANT[dispparams.cArgs];
      _ASSERTE(pArg != NULL);   // should have thrown exception
      dispparams.rgvarg = pArg;
      memset(pArg, 0, sizeof(VARIANT) * dispparams.cArgs);

      // get ready to walk vararg list
      const BYTE* pb = pbParamInfo;
      pArg += dispparams.cArgs - 1;   // params go in opposite order

      while (*pb != 0)
      {
        _ASSERTE(pArg >= dispparams.rgvarg);

        pArg->vt = *pb; // set the variant type
        switch (pArg->vt)
        {
          case VT_UI1:
            break;
          case VT_I2:
            break;
          case VT_I4:
            pArg->lVal = va_arg(argList, long);
            break;
          case VT_R4:
            // Note: All float arguments to vararg functions are passed
            //  as doubles instead.  Thats why they are passed as VT_R8
            //  instead of VT_R4.
            pArg->vt = VT_R8;
            *(double*)&pArg->dblVal = va_arg(argList, double);
            break;
          case VT_R8:
            *(double*)&pArg->dblVal = va_arg(argList, double);
            break;
          case VT_DATE:
            *(double*)&pArg->date = va_arg(argList, double);
            break;
          case VT_CY:
            pArg->cyVal = *va_arg(argList, CY*);
            break;
          case VT_BSTR: {
            LPCOLESTR lpsz = va_arg(argList, LPOLESTR);
            pArg->bstrVal = ::SysAllocString(lpsz);
            if (lpsz != NULL && pArg->bstrVal == NULL)
              return E_OUTOFMEMORY;
            break;
          }
/*
  #if !defined(_UNICODE) && !defined(OLE2ANSI)
          case VT_BSTRA: {
            LPCSTR lpsz = va_arg(argList, LPSTR);
            pArg->bstrVal = ::SysAllocString(T2COLE(lpsz));
            if (lpsz != NULL && pArg->bstrVal == NULL)
              AfxThrowMemoryException();
              pArg->vt = VT_BSTR;
            break;
          }
  #endif
*/
          case VT_DISPATCH:
            pArg->pdispVal = va_arg(argList, LPDISPATCH);
            break;
          case VT_ERROR:
            pArg->scode = va_arg(argList, SCODE);
            break;
          case VT_BOOL:
            V_BOOL(pArg) = (VARIANT_BOOL)(va_arg(argList, BOOL) ? -1 : 0);
            break;
          case VT_VARIANT:
            *pArg = *va_arg(argList, VARIANT*);
            break;
          case VT_UNKNOWN:
            pArg->punkVal = va_arg(argList, LPUNKNOWN);
            break;

           case VT_I2|VT_BYREF:
            pArg->piVal = va_arg(argList, short*);
            break;
          case VT_UI1|VT_BYREF:
            pArg->pbVal = va_arg(argList, BYTE*);
            break;
          case VT_I4|VT_BYREF:
            pArg->plVal = va_arg(argList, long*);
            break;
          case VT_R4|VT_BYREF:
            pArg->pfltVal = va_arg(argList, float*);
            break;
          case VT_R8|VT_BYREF:
            pArg->pdblVal = va_arg(argList, double*);
            break;
          case VT_DATE|VT_BYREF:
            pArg->pdate = va_arg(argList, DATE*);
            break;
          case VT_CY|VT_BYREF:
            pArg->pcyVal = va_arg(argList, CY*);
            break;
          case VT_BSTR|VT_BYREF:
            pArg->pbstrVal = va_arg(argList, BSTR*);
            break;
          case VT_DISPATCH|VT_BYREF:
            pArg->ppdispVal = va_arg(argList, LPDISPATCH*);
            break;
          case VT_ERROR|VT_BYREF:
            pArg->pscode = va_arg(argList, SCODE*);
            break;
          case VT_BOOL|VT_BYREF: {
            // coerce BOOL into VARIANT_BOOL
            BOOL* pboolVal = va_arg(argList, BOOL*);
            pArg->pboolVal = (VARIANT_BOOL*)pboolVal;
            break;
          }
          case VT_VARIANT|VT_BYREF:
            pArg->pvarVal = va_arg(argList, VARIANT*);
            break;
          case VT_UNKNOWN|VT_BYREF:
            pArg->ppunkVal = va_arg(argList, LPUNKNOWN*);
            break;

          default: {
            if(pArg->vt&VT_ARRAY && pArg->vt&VT_BYREF) {
              pArg->pparray = va_arg(argList, SAFEARRAY**);
            } else {
              _ASSERTE(false);  // unknown type!
            }
            break;
          }
        }

        --pArg; // get ready to fill next argument
        ++pb;
      }
    }

    // initialize return value
    VARIANT* pvarResult = NULL;
    VARIANT vaResult;
    VariantInit(&vaResult);
    if (vtRet != VT_EMPTY)
      pvarResult = &vaResult;

    // initialize EXCEPINFO struct
    EXCEPINFO excepInfo;
    memset(&excepInfo, 0, sizeof excepInfo);

    UINT nArgErr = (UINT)-1;  // initialize to invalid arg

    // make the call

    SCODE sc;
    IDispatch* pS = GetDispatch();
    if(pS) {

      sc = pS->Invoke(dwDispID, IID_NULL, LOCALE_USER_DEFAULT, wFlags, &dispparams, pvarResult, &excepInfo, &nArgErr);

      pS->Release();

      // cleanup any arguments that need cleanup
      if (dispparams.cArgs != 0)
      {
        VARIANT* pArg = dispparams.rgvarg + dispparams.cArgs - 1;
        const BYTE* pb = pbParamInfo;
        while (*pb != 0)
        {
          switch ((VARTYPE)*pb)
          {
/*
    #if !defined(_UNICODE) && !defined(OLE2ANSI)
            case VT_BSTRA:
    #endif
*/
            case VT_BSTR:
              VariantClear(pArg);
              break;
           }
           --pArg;
           ++pb;
        }
      }
    } else {
      sc = E_FAIL;
    }

    delete[] dispparams.rgvarg;

  // throw exception on failure
  if (FAILED(sc))
  {
    VariantClear(&vaResult);
    if (sc != DISP_E_EXCEPTION)
    {
      // non-exception error code
      AfxThrowOleException(sc);
    }

    // make sure excepInfo is filled in
    if (excepInfo.pfnDeferredFillIn != NULL)
      excepInfo.pfnDeferredFillIn(&excepInfo);

    // allocate new exception, and fill it
    COleDispatchException* pException =
      new COleDispatchException(NULL, 0, excepInfo.wCode);
    ASSERT(pException->m_wCode == excepInfo.wCode);
    if (excepInfo.bstrSource != NULL)
    {
      pException->m_strSource = excepInfo.bstrSource;
      SysFreeString(excepInfo.bstrSource);
    }
    if (excepInfo.bstrDescription != NULL)
    {
      pException->m_strDescription = excepInfo.bstrDescription;
      SysFreeString(excepInfo.bstrDescription);
    }
    if (excepInfo.bstrHelpFile != NULL)
    {
      pException->m_strHelpFile = excepInfo.bstrHelpFile;
      SysFreeString(excepInfo.bstrHelpFile);
    }
    pException->m_dwHelpContext = excepInfo.dwHelpContext;
    pException->m_scError = excepInfo.scode;

    // then throw the exception
    THROW(pException);
    ASSERT(FALSE);  // not reached
  }

  if (vtRet != VT_EMPTY)
  {
    // convert return value
    if (vtRet != VT_VARIANT)
    {
      SCODE sc = VariantChangeType(&vaResult, &vaResult, 0, vtRet);
      if (FAILED(sc))
      {
        TRACE0("Warning: automation return value coercion failed.\n");
        VariantClear(&vaResult);
        AfxThrowOleException(sc);
      }
      ASSERT(vtRet == vaResult.vt);
    }

    // copy return value into return spot!
    switch (vtRet)
    {
    case VT_UI1:
      *(BYTE*)pvRet = vaResult.bVal;
      break;
    case VT_I2:
      *(short*)pvRet = vaResult.iVal;
      break;
    case VT_I4:
      *(long*)pvRet = vaResult.lVal;
      break;
    case VT_R4:
      *(_AFX_FLOAT*)pvRet = *(_AFX_FLOAT*)&vaResult.fltVal;
      break;
    case VT_R8:
      *(_AFX_DOUBLE*)pvRet = *(_AFX_DOUBLE*)&vaResult.dblVal;
      break;
    case VT_DATE:
      *(_AFX_DOUBLE*)pvRet = *(_AFX_DOUBLE*)&vaResult.date;
      break;
    case VT_CY:
      *(CY*)pvRet = vaResult.cyVal;
      break;
    case VT_BSTR:
      AfxBSTR2CString((CString*)pvRet, vaResult.bstrVal);
      SysFreeString(vaResult.bstrVal);
      break;
    case VT_DISPATCH:
      *(LPDISPATCH*)pvRet = vaResult.pdispVal;
      break;
    case VT_ERROR:
      *(SCODE*)pvRet = vaResult.scode;
      break;
    case VT_BOOL:
      *(BOOL*)pvRet = (V_BOOL(&vaResult) != 0);
      break;
    case VT_VARIANT:
      *(VARIANT*)pvRet = vaResult;
      break;
    case VT_UNKNOWN:
      *(LPUNKNOWN*)pvRet = vaResult.punkVal;
      break;

    default:
      ASSERT(FALSE);  // invalid return type specified
    }
  }

  return sc;
}

IDispatch* CTBOleDispatchDriver::GetDispatch()
{
  IDispatch* pS = NULL;

  if (pStream != NULL)
  {
    LARGE_INTEGER l;
    l.QuadPart = 0;
    pStream->Seek(l, STREAM_SEEK_SET, NULL);
    HRESULT hRes = CoUnmarshalInterface(pStream, IID_IDispatch, (void**)&pS);
  }

  return pS;
}

// Machine generated IDispatch wrapper class(es) created with ClassWizard

/////////////////////////////////////////////////////////////////////////////
// IRoseProcessorCollection properties

short IRoseProcessorCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseProcessorCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseProcessorCollection operations

LPDISPATCH IRoseProcessorCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseProcessorCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseProcessorCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseProcessorCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseProcessorCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseProcessorCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseProcessorCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseProcessorCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseProcessorCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseProcessorCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseProcessorCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseCategoryCollection properties

short IRoseCategoryCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseCategoryCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseCategoryCollection operations

LPDISPATCH IRoseCategoryCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseCategoryCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseCategoryCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseCategoryCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseCategoryCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseCategoryCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseCategoryCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseCategoryCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseCategoryCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseCategoryCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseCategoryCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseItem properties

CString IRoseItem::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseItem::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseItem::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseItem::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseItem::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseItem::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseItem::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItem::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseItem::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItem::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseItem::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItem::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseItem::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseItem::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseItem operations

CString IRoseItem::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseItem::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseItem::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseItem::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseItem::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseItem::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseItem::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseItem::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseItem::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseItem::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseItem::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseItem::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseItem::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseItem::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseItem::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseItem::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseItem::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseItem::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseItem::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseItem::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseItem::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseItem::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseItem::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseItem::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseAddIn properties

LPDISPATCH IRoseAddIn::GetEventHandler()
{
  LPDISPATCH result;
  GetProperty(0x30f0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAddIn::SetEventHandler(LPDISPATCH propVal)
{
  SetProperty(0x30f0, VT_DISPATCH, propVal);
}

CString IRoseAddIn::GetVersion()
{
  CString result;
  GetProperty(0x30f2, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAddIn::SetVersion(LPCTSTR propVal)
{
  SetProperty(0x30f2, VT_BSTR, propVal);
}

CString IRoseAddIn::GetCompanyName()
{
  CString result;
  GetProperty(0x30f3, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAddIn::SetCompanyName(LPCTSTR propVal)
{
  SetProperty(0x30f3, VT_BSTR, propVal);
}

CString IRoseAddIn::GetHelpFilePath()
{
  CString result;
  GetProperty(0x30f4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAddIn::SetHelpFilePath(LPCTSTR propVal)
{
  SetProperty(0x30f4, VT_BSTR, propVal);
}

CString IRoseAddIn::GetMenuFilePath()
{
  CString result;
  GetProperty(0x30f5, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAddIn::SetMenuFilePath(LPCTSTR propVal)
{
  SetProperty(0x30f5, VT_BSTR, propVal);
}

CString IRoseAddIn::GetPropertyFilePath()
{
  CString result;
  GetProperty(0x30f6, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAddIn::SetPropertyFilePath(LPCTSTR propVal)
{
  SetProperty(0x30f6, VT_BSTR, propVal);
}

CString IRoseAddIn::GetInstallDirectory()
{
  CString result;
  GetProperty(0x30f7, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAddIn::SetInstallDirectory(LPCTSTR propVal)
{
  SetProperty(0x30f7, VT_BSTR, propVal);
}

CString IRoseAddIn::GetRootRegistryPath()
{
  CString result;
  GetProperty(0x30f8, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAddIn::SetRootRegistryPath(LPCTSTR propVal)
{
  SetProperty(0x30f8, VT_BSTR, propVal);
}

LPDISPATCH IRoseAddIn::GetFundamentalTypes()
{
  LPDISPATCH result;
  GetProperty(0x30f9, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAddIn::SetFundamentalTypes(LPDISPATCH propVal)
{
  SetProperty(0x30f9, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseAddIn::GetToolNames()
{
  LPDISPATCH result;
  GetProperty(0x30fa, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAddIn::SetToolNames(LPDISPATCH propVal)
{
  SetProperty(0x30fa, VT_DISPATCH, propVal);
}

CString IRoseAddIn::GetServerName()
{
  CString result;
  GetProperty(0x30fb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAddIn::SetServerName(LPCTSTR propVal)
{
  SetProperty(0x30fb, VT_BSTR, propVal);
}

CString IRoseAddIn::GetName()
{
  CString result;
  GetProperty(0x30fc, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAddIn::SetName(LPCTSTR propVal)
{
  SetProperty(0x30fc, VT_BSTR, propVal);
}

CString IRoseAddIn::GetCopyright()
{
  CString result;
  GetProperty(0x3165, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAddIn::SetCopyright(LPCTSTR propVal)
{
  SetProperty(0x3165, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseAddIn operations

BOOL IRoseAddIn::IsLanguageAddIn()
{
  BOOL result;
  InvokeHelper(0x30fd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

void IRoseAddIn::Deactivate()
{
  InvokeHelper(0x30fe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseAddIn::Activate()
{
  InvokeHelper(0x30ff, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL IRoseAddIn::IsActive()
{
  BOOL result;
  InvokeHelper(0x3109, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

void IRoseAddIn::ExecuteScript(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x3133, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

CString IRoseAddIn::ReadSetting(LPCTSTR Section, LPCTSTR Entry, LPCTSTR Default)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x3134, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    Section, Entry, Default);
  return result;
}

BOOL IRoseAddIn::WriteSetting(LPCTSTR Section, LPCTSTR Entry, LPCTSTR Value)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x3135, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Section, Entry, Value);
  return result;
}

CString IRoseAddIn::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseAddIn::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseUseCaseCollection properties

short IRoseUseCaseCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseUseCaseCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseUseCaseCollection operations

LPDISPATCH IRoseUseCaseCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseUseCaseCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseUseCaseCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseUseCaseCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseUseCaseCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseUseCaseCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseUseCaseCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseUseCaseCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseUseCaseCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseUseCaseCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseUseCaseCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseRelation properties

CString IRoseRelation::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRelation::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseRelation::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRelation::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseRelation::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRelation::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseRelation::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRelation::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseRelation::GetSupplierName()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRelation::SetSupplierName(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

LPDISPATCH IRoseRelation::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRelation::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseRelation::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRelation::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseRelation::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRelation::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseRelation operations

CString IRoseRelation::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseRelation::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseRelation::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseRelation::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseRelation::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseRelation::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseRelation::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseRelation::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRelation::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseRelation::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseRelation::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseRelation::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseRelation::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseRelation::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRelation::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseRelation::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseRelation::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseRelation::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRelation::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseRelation::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseRelation::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseRelation::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseRelation::HasClient()
{
  BOOL result;
  InvokeHelper(0x313e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseRelation::HasSupplier()
{
  BOOL result;
  InvokeHelper(0x313f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRelation::GetClient()
{
  LPDISPATCH result;
  InvokeHelper(0x3140, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRelation::GetSupplier()
{
  LPDISPATCH result;
  InvokeHelper(0x3141, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseRelation::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseRelation::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseApplication properties

BOOL IRoseApplication::GetVisible()
{
  BOOL result;
  GetProperty(0xca, VT_BOOL, (void*)&result);
  return result;
}

void IRoseApplication::SetVisible(BOOL propVal)
{
  SetProperty(0xca, VT_BOOL, propVal);
}

short IRoseApplication::GetTop()
{
  short result;
  GetProperty(0xcd, VT_I2, (void*)&result);
  return result;
}

void IRoseApplication::SetTop(short propVal)
{
  SetProperty(0xcd, VT_I2, propVal);
}

short IRoseApplication::GetLeft()
{
  short result;
  GetProperty(0xce, VT_I2, (void*)&result);
  return result;
}

void IRoseApplication::SetLeft(short propVal)
{
  SetProperty(0xce, VT_I2, propVal);
}

short IRoseApplication::GetHeight()
{
  short result;
  GetProperty(0xcf, VT_I2, (void*)&result);
  return result;
}

void IRoseApplication::SetHeight(short propVal)
{
  SetProperty(0xcf, VT_I2, propVal);
}

short IRoseApplication::GetWidth()
{
  short result;
  GetProperty(0xd0, VT_I2, (void*)&result);
  return result;
}

void IRoseApplication::SetWidth(short propVal)
{
  SetProperty(0xd0, VT_I2, propVal);
}

LPDISPATCH IRoseApplication::GetCurrentModel()
{
  LPDISPATCH result;
  GetProperty(0xd1, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseApplication::SetCurrentModel(LPDISPATCH propVal)
{
  SetProperty(0xd1, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseApplication::GetPathMap()
{
  LPDISPATCH result;
  GetProperty(0xe0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseApplication::SetPathMap(LPDISPATCH propVal)
{
  SetProperty(0xe0, VT_DISPATCH, propVal);
}

CString IRoseApplication::GetVersion()
{
  CString result;
  GetProperty(0xe7, VT_BSTR, (void*)&result);
  return result;
}

void IRoseApplication::SetVersion(LPCTSTR propVal)
{
  SetProperty(0xe7, VT_BSTR, propVal);
}

CString IRoseApplication::GetProductName()
{
  CString result;
  GetProperty(0xe8, VT_BSTR, (void*)&result);
  return result;
}

void IRoseApplication::SetProductName(LPCTSTR propVal)
{
  SetProperty(0xe8, VT_BSTR, propVal);
}

CString IRoseApplication::GetApplicationPath()
{
  CString result;
  GetProperty(0xe9, VT_BSTR, (void*)&result);
  return result;
}

void IRoseApplication::SetApplicationPath(LPCTSTR propVal)
{
  SetProperty(0xe9, VT_BSTR, propVal);
}

LPDISPATCH IRoseApplication::GetAddInManager()
{
  LPDISPATCH result;
  GetProperty(0x3100, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseApplication::SetAddInManager(LPDISPATCH propVal)
{
  SetProperty(0x3100, VT_DISPATCH, propVal);
}

CString IRoseApplication::GetCommandLine()
{
  CString result;
  GetProperty(0x312a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseApplication::SetCommandLine(LPCTSTR propVal)
{
  SetProperty(0x312a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseApplication operations

LPDISPATCH IRoseApplication::OpenModel(LPCTSTR theModel)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theModel);
  return result;
}

LPDISPATCH IRoseApplication::NewModel()
{
  LPDISPATCH result;
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

void IRoseApplication::Exit()
{
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseApplication::WriteErrorLog(LPCTSTR theMsg)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theMsg);
}

void IRoseApplication::Save(BOOL bSaveUnits)
{
  static BYTE parms[] =
    VTS_BOOL;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     bSaveUnits);
}

void IRoseApplication::SaveAs(LPCTSTR theFile, BOOL bSaveUnits)
{
  static BYTE parms[] =
    VTS_BSTR VTS_BOOL;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theFile, bSaveUnits);
}

void IRoseApplication::CompileScriptFile(LPCTSTR FileName, LPCTSTR BinaryName, BOOL bDebug)
{
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BOOL;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName, BinaryName, bDebug);
}

LPDISPATCH IRoseApplication::OpenModelAsTemplate(LPCTSTR szFileName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szFileName);
  return result;
}

void IRoseApplication::OpenScript(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xe1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

void IRoseApplication::NewScript()
{
  InvokeHelper(0xe2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseApplication::GetLicensedApplication(LPCTSTR theKey)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xeb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theKey);
  return result;
}

void IRoseApplication::ExecuteScript(LPCTSTR pFileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xec, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     pFileName);
}

BOOL IRoseApplication::OpenURL(LPCTSTR theURL)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x312b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theURL);
  return result;
}

BOOL IRoseApplication::OpenExternalDocument(LPCTSTR FileName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x312c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    FileName);
  return result;
}

CString IRoseApplication::GetProfileString(LPCTSTR Section, LPCTSTR Entry, LPCTSTR Default)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x312d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    Section, Entry, Default);
  return result;
}

BOOL IRoseApplication::WriteProfileString(LPCTSTR Section, LPCTSTR Entry, LPCTSTR Value)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x312e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Section, Entry, Value);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseMessageCollection properties

short IRoseMessageCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseMessageCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseMessageCollection operations

LPDISPATCH IRoseMessageCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseMessageCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseMessageCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseMessageCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseMessageCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseMessageCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseMessageCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseMessageCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseMessageCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseMessageCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseMessageCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseClassDiagramCollection properties

short IRoseClassDiagramCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseClassDiagramCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseClassDiagramCollection operations

LPDISPATCH IRoseClassDiagramCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseClassDiagramCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseClassDiagramCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseClassDiagramCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseClassDiagramCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseClassDiagramCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseClassDiagramCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseClassDiagramCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseClassDiagramCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseClassDiagramCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseClassDiagramCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseScenarioDiagram properties

CString IRoseScenarioDiagram::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseScenarioDiagram::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

LPDISPATCH IRoseScenarioDiagram::GetItemViews()
{
  LPDISPATCH result;
  GetProperty(0xca, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseScenarioDiagram::SetItemViews(LPDISPATCH propVal)
{
  SetProperty(0xca, VT_DISPATCH, propVal);
}

BOOL IRoseScenarioDiagram::GetVisible()
{
  BOOL result;
  GetProperty(0xcb, VT_BOOL, (void*)&result);
  return result;
}

void IRoseScenarioDiagram::SetVisible(BOOL propVal)
{
  SetProperty(0xcb, VT_BOOL, propVal);
}

LPDISPATCH IRoseScenarioDiagram::GetItems()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseScenarioDiagram::SetItems(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseScenarioDiagram::GetInstanceViews()
{
  LPDISPATCH result;
  GetProperty(0x1a7, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseScenarioDiagram::SetInstanceViews(LPDISPATCH propVal)
{
  SetProperty(0x1a7, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseScenarioDiagram::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseScenarioDiagram::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseScenarioDiagram::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseScenarioDiagram::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseScenarioDiagram::GetDocumentation()
{
  CString result;
  GetProperty(0x3170, VT_BSTR, (void*)&result);
  return result;
}

void IRoseScenarioDiagram::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0x3170, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseScenarioDiagram operations

CString IRoseScenarioDiagram::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseScenarioDiagram::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseScenarioDiagram::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseScenarioDiagram::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseScenarioDiagram::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseScenarioDiagram::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseScenarioDiagram::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseScenarioDiagram::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseScenarioDiagram::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseScenarioDiagram::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseScenarioDiagram::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseScenarioDiagram::Layout()
{
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseScenarioDiagram::Invalidate()
{
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseScenarioDiagram::Update()
{
  InvokeHelper(0xce, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseScenarioDiagram::GetViewFrom(LPDISPATCH theItem)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theItem);
  return result;
}

BOOL IRoseScenarioDiagram::IsActive()
{
  BOOL result;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseScenarioDiagram::Exists(LPDISPATCH theItem)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theItem);
  return result;
}

void IRoseScenarioDiagram::Activate()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseScenarioDiagram::Render(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

LPDISPATCH IRoseScenarioDiagram::AddNoteView(LPCTSTR szNoteText, short nType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szNoteText, nType);
  return result;
}

BOOL IRoseScenarioDiagram::RemoveNoteView(LPDISPATCH pIDispNoteView)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xdb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispNoteView);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::GetNoteViews()
{
  LPDISPATCH result;
  InvokeHelper(0xdc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

void IRoseScenarioDiagram::RenderEnhanced(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xdd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

void IRoseScenarioDiagram::RenderToClipboard()
{
  InvokeHelper(0xde, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseScenarioDiagram::RenderEnhancedToClipboard()
{
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseScenarioDiagram::GetObjects()
{
  LPDISPATCH result;
  InvokeHelper(0x19b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::GetSelectedObjects()
{
  LPDISPATCH result;
  InvokeHelper(0x19c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::GetMessages()
{
  LPDISPATCH result;
  InvokeHelper(0x19d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::GetSelectedMessages()
{
  LPDISPATCH result;
  InvokeHelper(0x19e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::CreateMessage(LPCTSTR theName, LPDISPATCH theSender, LPDISPATCH theReceiver, short theSequence)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_DISPATCH VTS_DISPATCH VTS_I2;
  InvokeHelper(0x1a0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theName, theSender, theReceiver, theSequence);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::GetSelectedLinks()
{
  LPDISPATCH result;
  InvokeHelper(0x1a1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

short IRoseScenarioDiagram::GetDiagramType()
{
  short result;
  InvokeHelper(0x1a2, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::AddInstanceView(LPDISPATCH theInstance, BOOL AsClassInstance)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH VTS_BOOL;
  InvokeHelper(0x1a3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theInstance, AsClassInstance);
  return result;
}

BOOL IRoseScenarioDiagram::RemoveInstanceView(LPDISPATCH theView)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theView);
  return result;
}

BOOL IRoseScenarioDiagram::DeleteInstance(LPDISPATCH theInstance)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theInstance);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::AddInstance(LPCTSTR theName, LPCTSTR theClassName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1a6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theName, theClassName);
  return result;
}

LPDISPATCH IRoseScenarioDiagram::GetSelectedItems()
{
  LPDISPATCH result;
  InvokeHelper(0x30ed, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseScenarioDiagram::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseScenarioDiagram::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseScenarioDiagram::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseRealizeRelation properties

CString IRoseRealizeRelation::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRealizeRelation::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseRealizeRelation::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRealizeRelation::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseRealizeRelation::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRealizeRelation::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseRealizeRelation::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRealizeRelation::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseRealizeRelation::GetSupplierName()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRealizeRelation::SetSupplierName(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

LPDISPATCH IRoseRealizeRelation::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRealizeRelation::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseRealizeRelation::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRealizeRelation::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseRealizeRelation::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRealizeRelation::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseRealizeRelation operations

CString IRoseRealizeRelation::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseRealizeRelation::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseRealizeRelation::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseRealizeRelation::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseRealizeRelation::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseRealizeRelation::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseRealizeRelation::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseRealizeRelation::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRealizeRelation::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseRealizeRelation::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseRealizeRelation::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseRealizeRelation::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseRealizeRelation::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseRealizeRelation::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRealizeRelation::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseRealizeRelation::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseRealizeRelation::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseRealizeRelation::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRealizeRelation::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseRealizeRelation::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseRealizeRelation::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseRealizeRelation::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRealizeRelation::GetContextClass()
{
  LPDISPATCH result;
  InvokeHelper(0x313a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRealizeRelation::GetContextComponent()
{
  LPDISPATCH result;
  InvokeHelper(0x313b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRealizeRelation::GetSupplierClass()
{
  LPDISPATCH result;
  InvokeHelper(0x313c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRealizeRelation::GetSupplierComponent()
{
  LPDISPATCH result;
  InvokeHelper(0x313d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseRealizeRelation::HasClient()
{
  BOOL result;
  InvokeHelper(0x313e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseRealizeRelation::HasSupplier()
{
  BOOL result;
  InvokeHelper(0x313f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRealizeRelation::GetClient()
{
  LPDISPATCH result;
  InvokeHelper(0x3140, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRealizeRelation::GetSupplier()
{
  LPDISPATCH result;
  InvokeHelper(0x3141, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseRealizeRelation::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseRealizeRelation::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseHasRelationship properties

CString IRoseHasRelationship::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseHasRelationship::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseHasRelationship::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseHasRelationship::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseHasRelationship::GetSupplierName()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetSupplierName(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

CString IRoseHasRelationship::GetClientCardinality()
{
  CString result;
  GetProperty(0x331, VT_BSTR, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetClientCardinality(LPCTSTR propVal)
{
  SetProperty(0x331, VT_BSTR, propVal);
}

CString IRoseHasRelationship::GetSupplierCardinality()
{
  CString result;
  GetProperty(0x332, VT_BSTR, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetSupplierCardinality(LPCTSTR propVal)
{
  SetProperty(0x332, VT_BSTR, propVal);
}

BOOL IRoseHasRelationship::GetStatic()
{
  BOOL result;
  GetProperty(0x333, VT_BOOL, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetStatic(BOOL propVal)
{
  SetProperty(0x333, VT_BOOL, propVal);
}

LPDISPATCH IRoseHasRelationship::GetExportControl()
{
  LPDISPATCH result;
  GetProperty(0x334, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetExportControl(LPDISPATCH propVal)
{
  SetProperty(0x334, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseHasRelationship::GetContainment()
{
  LPDISPATCH result;
  GetProperty(0x335, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetContainment(LPDISPATCH propVal)
{
  SetProperty(0x335, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseHasRelationship::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseHasRelationship::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseHasRelationship::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseHasRelationship::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseHasRelationship operations

CString IRoseHasRelationship::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseHasRelationship::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseHasRelationship::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseHasRelationship::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseHasRelationship::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseHasRelationship::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseHasRelationship::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseHasRelationship::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseHasRelationship::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseHasRelationship::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseHasRelationship::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseHasRelationship::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseHasRelationship::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseHasRelationship::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseHasRelationship::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseHasRelationship::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseHasRelationship::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseHasRelationship::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseHasRelationship::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseHasRelationship::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseHasRelationship::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseHasRelationship::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseHasRelationship::GetContextClass()
{
  LPDISPATCH result;
  InvokeHelper(0x3138, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseHasRelationship::GetSupplierClass()
{
  LPDISPATCH result;
  InvokeHelper(0x3139, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseHasRelationship::HasClient()
{
  BOOL result;
  InvokeHelper(0x313e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseHasRelationship::HasSupplier()
{
  BOOL result;
  InvokeHelper(0x313f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseHasRelationship::GetClient()
{
  LPDISPATCH result;
  InvokeHelper(0x3140, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseHasRelationship::GetSupplier()
{
  LPDISPATCH result;
  InvokeHelper(0x3141, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseHasRelationship::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseHasRelationship::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseClassView properties

CString IRoseClassView::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassView::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

short IRoseClassView::GetYPosition()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseClassView::SetYPosition(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

short IRoseClassView::GetXPosition()
{
  short result;
  GetProperty(0xcb, VT_I2, (void*)&result);
  return result;
}

void IRoseClassView::SetXPosition(short propVal)
{
  SetProperty(0xcb, VT_I2, propVal);
}

short IRoseClassView::GetHeight()
{
  short result;
  GetProperty(0xcc, VT_I2, (void*)&result);
  return result;
}

void IRoseClassView::SetHeight(short propVal)
{
  SetProperty(0xcc, VT_I2, propVal);
}

short IRoseClassView::GetWidth()
{
  short result;
  GetProperty(0xcd, VT_I2, (void*)&result);
  return result;
}

void IRoseClassView::SetWidth(short propVal)
{
  SetProperty(0xcd, VT_I2, propVal);
}

LPDISPATCH IRoseClassView::GetFillColor()
{
  LPDISPATCH result;
  GetProperty(0xce, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassView::SetFillColor(LPDISPATCH propVal)
{
  SetProperty(0xce, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassView::GetLineColor()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassView::SetLineColor(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassView::GetSubViews()
{
  LPDISPATCH result;
  GetProperty(0xdb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassView::SetSubViews(LPDISPATCH propVal)
{
  SetProperty(0xdb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassView::GetParentView()
{
  LPDISPATCH result;
  GetProperty(0xdc, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassView::SetParentView(LPDISPATCH propVal)
{
  SetProperty(0xdc, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassView::GetItem()
{
  LPDISPATCH result;
  GetProperty(0xdd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassView::SetItem(LPDISPATCH propVal)
{
  SetProperty(0xdd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassView::GetParentDiagram()
{
  LPDISPATCH result;
  GetProperty(0xe0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassView::SetParentDiagram(LPDISPATCH propVal)
{
  SetProperty(0xe0, VT_DISPATCH, propVal);
}

BOOL IRoseClassView::GetAutomaticResize()
{
  BOOL result;
  GetProperty(0x199, VT_BOOL, (void*)&result);
  return result;
}

void IRoseClassView::SetAutomaticResize(BOOL propVal)
{
  SetProperty(0x199, VT_BOOL, propVal);
}

BOOL IRoseClassView::GetShowOperationSignature()
{
  BOOL result;
  GetProperty(0x19a, VT_BOOL, (void*)&result);
  return result;
}

void IRoseClassView::SetShowOperationSignature(BOOL propVal)
{
  SetProperty(0x19a, VT_BOOL, propVal);
}

BOOL IRoseClassView::GetShowAllAttributes()
{
  BOOL result;
  GetProperty(0x19b, VT_BOOL, (void*)&result);
  return result;
}

void IRoseClassView::SetShowAllAttributes(BOOL propVal)
{
  SetProperty(0x19b, VT_BOOL, propVal);
}

BOOL IRoseClassView::GetShowAllOperations()
{
  BOOL result;
  GetProperty(0x19c, VT_BOOL, (void*)&result);
  return result;
}

void IRoseClassView::SetShowAllOperations(BOOL propVal)
{
  SetProperty(0x19c, VT_BOOL, propVal);
}

BOOL IRoseClassView::GetSuppressAttributes()
{
  BOOL result;
  GetProperty(0x19d, VT_BOOL, (void*)&result);
  return result;
}

void IRoseClassView::SetSuppressAttributes(BOOL propVal)
{
  SetProperty(0x19d, VT_BOOL, propVal);
}

BOOL IRoseClassView::GetSuppressOperations()
{
  BOOL result;
  GetProperty(0x19e, VT_BOOL, (void*)&result);
  return result;
}

void IRoseClassView::SetSuppressOperations(BOOL propVal)
{
  SetProperty(0x19e, VT_BOOL, propVal);
}

LPDISPATCH IRoseClassView::GetFont()
{
  LPDISPATCH result;
  GetProperty(0x30cd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassView::SetFont(LPDISPATCH propVal)
{
  SetProperty(0x30cd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassView::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassView::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassView::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassView::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseClassView operations

CString IRoseClassView::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseClassView::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseClassView::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseClassView::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseClassView::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseClassView::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassView::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassView::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassView::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseClassView::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseClassView::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassView::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseClassView::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseClassView::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassView::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseClassView::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassView::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseClassView::Invalidate()
{
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL IRoseClassView::SupportsFillColor()
{
  BOOL result;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassView::SupportsLineColor()
{
  BOOL result;
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassView::IsSelected()
{
  BOOL result;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

void IRoseClassView::SetSelected(BOOL bSelect)
{
  static BYTE parms[] =
    VTS_BOOL;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     bSelect);
}

BOOL IRoseClassView::PointInView(short x, short y)
{
  BOOL result;
  static BYTE parms[] =
    VTS_I2 VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    x, y);
  return result;
}

short IRoseClassView::GetDefaultWidth()
{
  short result;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseClassView::GetDefaultHeight()
{
  short result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseClassView::GetMinWidth()
{
  short result;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseClassView::GetMinHeight()
{
  short result;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassView::HasItem()
{
  BOOL result;
  InvokeHelper(0xde, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassView::HasParentView()
{
  BOOL result;
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseClassView::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseClassView::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassView::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseView_FillColor properties

short IRoseView_FillColor::GetRed()
{
  short result;
  GetProperty(0x30cd, VT_I2, (void*)&result);
  return result;
}

void IRoseView_FillColor::SetRed(short propVal)
{
  SetProperty(0x30cd, VT_I2, propVal);
}

BOOL IRoseView_FillColor::GetTransparent()
{
  BOOL result;
  GetProperty(0x30ce, VT_BOOL, (void*)&result);
  return result;
}

void IRoseView_FillColor::SetTransparent(BOOL propVal)
{
  SetProperty(0x30ce, VT_BOOL, propVal);
}

short IRoseView_FillColor::GetBlue()
{
  short result;
  GetProperty(0x30cf, VT_I2, (void*)&result);
  return result;
}

void IRoseView_FillColor::SetBlue(short propVal)
{
  SetProperty(0x30cf, VT_I2, propVal);
}

short IRoseView_FillColor::GetGreen()
{
  short result;
  GetProperty(0x30d0, VT_I2, (void*)&result);
  return result;
}

void IRoseView_FillColor::SetGreen(short propVal)
{
  SetProperty(0x30d0, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseView_FillColor operations

CString IRoseView_FillColor::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseView_FillColor::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseActionCollection properties

short IRoseActionCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseActionCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseActionCollection operations

LPDISPATCH IRoseActionCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseActionCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseActionCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseActionCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseActionCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseActionCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseActionCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseActionCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseActionCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseActionCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseActionCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseProcess properties

CString IRoseProcess::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProcess::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseProcess::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProcess::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseProcess::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProcess::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseProcess::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseProcess::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseProcess::GetMyProcessor()
{
  LPDISPATCH result;
  GetProperty(0x19c, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseProcess::SetMyProcessor(LPDISPATCH propVal)
{
  SetProperty(0x19c, VT_DISPATCH, propVal);
}

CString IRoseProcess::GetPriority()
{
  CString result;
  GetProperty(0x19d, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProcess::SetPriority(LPCTSTR propVal)
{
  SetProperty(0x19d, VT_BSTR, propVal);
}

LPDISPATCH IRoseProcess::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseProcess::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseProcess::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseProcess::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseProcess::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProcess::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseProcess operations

CString IRoseProcess::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseProcess::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseProcess::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseProcess::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseProcess::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseProcess::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseProcess::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseProcess::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseProcess::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseProcess::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseProcess::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseProcess::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseProcess::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseProcess::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseProcess::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseProcess::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseProcess::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseProcess::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseProcess::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseProcess::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseProcess::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseProcess::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseProcess::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseProcess::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseAddInCollection properties

short IRoseAddInCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseAddInCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseAddInCollection operations

LPDISPATCH IRoseAddInCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseAddInCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseAddInCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseAddInCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseAddInCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseAddInCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseAddInCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseAddInCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseAddInCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseAddInCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseAddInCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseControllableUnitCollection properties

short IRoseControllableUnitCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseControllableUnitCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseControllableUnitCollection operations

LPDISPATCH IRoseControllableUnitCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseControllableUnitCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseControllableUnitCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseControllableUnitCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseControllableUnitCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseControllableUnitCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseControllableUnitCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseControllableUnitCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseControllableUnitCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseControllableUnitCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseControllableUnitCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseModuleCollection properties

short IRoseModuleCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseModuleCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseModuleCollection operations

LPDISPATCH IRoseModuleCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseModuleCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseModuleCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseModuleCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseModuleCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseModuleCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseModuleCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseModuleCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseModuleCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseModuleCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseModuleCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseLinkCollection properties

short IRoseLinkCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseLinkCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseLinkCollection operations

LPDISPATCH IRoseLinkCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseLinkCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseLinkCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseLinkCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseLinkCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseLinkCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseLinkCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseLinkCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseLinkCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseLinkCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseLinkCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseAction properties

CString IRoseAction::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAction::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseAction::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAction::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseAction::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAction::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseAction::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAction::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseAction::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAction::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseAction::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAction::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseAction::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAction::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

CString IRoseAction::GetArguments()
{
  CString result;
  GetProperty(0x314c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAction::SetArguments(LPCTSTR propVal)
{
  SetProperty(0x314c, VT_BSTR, propVal);
}

CString IRoseAction::GetTarget()
{
  CString result;
  GetProperty(0x314d, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAction::SetTarget(LPCTSTR propVal)
{
  SetProperty(0x314d, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseAction operations

CString IRoseAction::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseAction::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseAction::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseAction::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseAction::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseAction::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseAction::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseAction::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseAction::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseAction::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseAction::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseAction::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseAction::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseAction::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseAction::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseAction::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseAction::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseAction::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseAction::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseAction::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseAction::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseAction::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseAction::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseAction::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseParameterCollection properties

short IRoseParameterCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseParameterCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseParameterCollection operations

LPDISPATCH IRoseParameterCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseParameterCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseParameterCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseParameterCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseParameterCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseParameterCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseParameterCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseParameterCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseParameterCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseParameterCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseParameterCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseAttributeCollection properties

short IRoseAttributeCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseAttributeCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseAttributeCollection operations

LPDISPATCH IRoseAttributeCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseAttributeCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseAttributeCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseAttributeCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseAttributeCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseAttributeCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseAttributeCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseAttributeCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseAttributeCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseAttributeCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseAttributeCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseDevice properties

CString IRoseDevice::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDevice::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseDevice::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDevice::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseDevice::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDevice::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseDevice::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDevice::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseDevice::GetCharacteristics()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDevice::SetCharacteristics(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

LPDISPATCH IRoseDevice::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDevice::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseDevice::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDevice::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseDevice::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDevice::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseDevice operations

CString IRoseDevice::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseDevice::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseDevice::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseDevice::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseDevice::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseDevice::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseDevice::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseDevice::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDevice::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseDevice::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseDevice::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseDevice::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseDevice::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseDevice::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDevice::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseDevice::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseDevice::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseDevice::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDevice::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseDevice::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseDevice::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDevice::GetConnectedProcessors()
{
  LPDISPATCH result;
  InvokeHelper(0x19d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDevice::GetConnectedDevices()
{
  LPDISPATCH result;
  InvokeHelper(0x19e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseDevice::AddProcessorConnection(LPDISPATCH theProcessor)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x19f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theProcessor);
  return result;
}

BOOL IRoseDevice::RemoveProcessorConnection(LPDISPATCH theProcessor)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theProcessor);
  return result;
}

BOOL IRoseDevice::AddDeviceConnection(LPDISPATCH theDevice)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theDevice);
  return result;
}

BOOL IRoseDevice::RemoveDeviceConnection(LPDISPATCH theDevice)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theDevice);
  return result;
}

CString IRoseDevice::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseDevice::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseDevice::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseClassDependency properties

CString IRoseClassDependency::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassDependency::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseClassDependency::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassDependency::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseClassDependency::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassDependency::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseClassDependency::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassDependency::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseClassDependency::GetSupplierName()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassDependency::SetSupplierName(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

CString IRoseClassDependency::GetClientCardinality()
{
  CString result;
  GetProperty(0x331, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassDependency::SetClientCardinality(LPCTSTR propVal)
{
  SetProperty(0x331, VT_BSTR, propVal);
}

CString IRoseClassDependency::GetSupplierCardinality()
{
  CString result;
  GetProperty(0x332, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassDependency::SetSupplierCardinality(LPCTSTR propVal)
{
  SetProperty(0x332, VT_BSTR, propVal);
}

BOOL IRoseClassDependency::GetInvolvesFriendship()
{
  BOOL result;
  GetProperty(0x333, VT_BOOL, (void*)&result);
  return result;
}

void IRoseClassDependency::SetInvolvesFriendship(BOOL propVal)
{
  SetProperty(0x333, VT_BOOL, propVal);
}

LPDISPATCH IRoseClassDependency::GetExportControl()
{
  LPDISPATCH result;
  GetProperty(0x334, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassDependency::SetExportControl(LPDISPATCH propVal)
{
  SetProperty(0x334, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassDependency::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassDependency::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassDependency::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassDependency::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseClassDependency::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassDependency::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseClassDependency operations

CString IRoseClassDependency::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseClassDependency::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseClassDependency::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseClassDependency::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseClassDependency::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseClassDependency::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassDependency::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassDependency::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDependency::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseClassDependency::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseClassDependency::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassDependency::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseClassDependency::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseClassDependency::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDependency::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseClassDependency::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassDependency::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseClassDependency::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDependency::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseClassDependency::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseClassDependency::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseClassDependency::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDependency::GetContextClass()
{
  LPDISPATCH result;
  InvokeHelper(0x3138, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDependency::GetSupplierClass()
{
  LPDISPATCH result;
  InvokeHelper(0x3139, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassDependency::HasClient()
{
  BOOL result;
  InvokeHelper(0x313e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassDependency::HasSupplier()
{
  BOOL result;
  InvokeHelper(0x313f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDependency::GetClient()
{
  LPDISPATCH result;
  InvokeHelper(0x3140, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDependency::GetSupplier()
{
  LPDISPATCH result;
  InvokeHelper(0x3141, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseClassDependency::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassDependency::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseRole properties

CString IRoseRole::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRole::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseRole::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRole::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseRole::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRole::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseRole::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRole::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseRole::GetSupplierName()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRole::SetSupplierName(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

BOOL IRoseRole::GetAggregate()
{
  BOOL result;
  GetProperty(0x266, VT_BOOL, (void*)&result);
  return result;
}

void IRoseRole::SetAggregate(BOOL propVal)
{
  SetProperty(0x266, VT_BOOL, propVal);
}

BOOL IRoseRole::GetStatic()
{
  BOOL result;
  GetProperty(0x267, VT_BOOL, (void*)&result);
  return result;
}

void IRoseRole::SetStatic(BOOL propVal)
{
  SetProperty(0x267, VT_BOOL, propVal);
}

BOOL IRoseRole::GetNavigable()
{
  BOOL result;
  GetProperty(0x268, VT_BOOL, (void*)&result);
  return result;
}

void IRoseRole::SetNavigable(BOOL propVal)
{
  SetProperty(0x268, VT_BOOL, propVal);
}

CString IRoseRole::GetCardinality()
{
  CString result;
  GetProperty(0x269, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRole::SetCardinality(LPCTSTR propVal)
{
  SetProperty(0x269, VT_BSTR, propVal);
}

LPDISPATCH IRoseRole::GetExportControl()
{
  LPDISPATCH result;
  GetProperty(0x26a, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRole::SetExportControl(LPDISPATCH propVal)
{
  SetProperty(0x26a, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseRole::GetContainment()
{
  LPDISPATCH result;
  GetProperty(0x26b, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRole::SetContainment(LPDISPATCH propVal)
{
  SetProperty(0x26b, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseRole::GetAssociation()
{
  LPDISPATCH result;
  GetProperty(0x26c, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRole::SetAssociation(LPDISPATCH propVal)
{
  SetProperty(0x26c, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseRole::GetClass()
{
  LPDISPATCH result;
  GetProperty(0x26d, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRole::SetClass(LPDISPATCH propVal)
{
  SetProperty(0x26d, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseRole::GetKeys()
{
  LPDISPATCH result;
  GetProperty(0x26e, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRole::SetKeys(LPDISPATCH propVal)
{
  SetProperty(0x26e, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseRole::GetAssociateItem()
{
  LPDISPATCH result;
  GetProperty(0x272, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRole::SetAssociateItem(LPDISPATCH propVal)
{
  SetProperty(0x272, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseRole::GetUseCase()
{
  LPDISPATCH result;
  GetProperty(0x273, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRole::SetUseCase(LPDISPATCH propVal)
{
  SetProperty(0x273, VT_DISPATCH, propVal);
}

CString IRoseRole::GetConstraints()
{
  CString result;
  GetProperty(0x275, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRole::SetConstraints(LPCTSTR propVal)
{
  SetProperty(0x275, VT_BSTR, propVal);
}

LPDISPATCH IRoseRole::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRole::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseRole::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRole::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseRole::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRole::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

BOOL IRoseRole::GetFriend()
{
  BOOL result;
  GetProperty(0x316a, VT_BOOL, (void*)&result);
  return result;
}

void IRoseRole::SetFriend(BOOL propVal)
{
  SetProperty(0x316a, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseRole operations

CString IRoseRole::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseRole::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseRole::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseRole::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseRole::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseRole::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseRole::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseRole::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRole::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseRole::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseRole::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseRole::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseRole::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseRole::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRole::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseRole::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseRole::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseRole::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRole::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseRole::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseRole::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRole::AddKey(LPCTSTR theName, LPCTSTR theType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x26f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theName, theType);
  return result;
}

BOOL IRoseRole::DeleteKey(LPDISPATCH theAttr)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x270, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theAttr);
  return result;
}

CString IRoseRole::GetClassName()
{
  CString result;
  InvokeHelper(0x271, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseRole::IsAssociateClass()
{
  BOOL result;
  InvokeHelper(0x274, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseRole::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseRole::HasClient()
{
  BOOL result;
  InvokeHelper(0x313e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseRole::HasSupplier()
{
  BOOL result;
  InvokeHelper(0x313f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRole::GetClient()
{
  LPDISPATCH result;
  InvokeHelper(0x3140, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseRole::GetSupplier()
{
  LPDISPATCH result;
  InvokeHelper(0x3141, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseRole::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseRole::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseClass properties

CString IRoseClass::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClass::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseClass::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClass::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseClass::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClass::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseClass::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

BOOL IRoseClass::GetAbstract()
{
  BOOL result;
  GetProperty(0x19c, VT_BOOL, (void*)&result);
  return result;
}

void IRoseClass::SetAbstract(BOOL propVal)
{
  SetProperty(0x19c, VT_BOOL, propVal);
}

CString IRoseClass::GetCardinality()
{
  CString result;
  GetProperty(0x19d, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClass::SetCardinality(LPCTSTR propVal)
{
  SetProperty(0x19d, VT_BSTR, propVal);
}

BOOL IRoseClass::GetPersistence()
{
  BOOL result;
  GetProperty(0x19e, VT_BOOL, (void*)&result);
  return result;
}

void IRoseClass::SetPersistence(BOOL propVal)
{
  SetProperty(0x19e, VT_BOOL, propVal);
}

LPDISPATCH IRoseClass::GetParentCategory()
{
  LPDISPATCH result;
  GetProperty(0x19f, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetParentCategory(LPDISPATCH propVal)
{
  SetProperty(0x19f, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClass::GetAttributes()
{
  LPDISPATCH result;
  GetProperty(0x1a0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetAttributes(LPDISPATCH propVal)
{
  SetProperty(0x1a0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClass::GetOperations()
{
  LPDISPATCH result;
  GetProperty(0x1a1, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetOperations(LPDISPATCH propVal)
{
  SetProperty(0x1a1, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClass::GetExportControl()
{
  LPDISPATCH result;
  GetProperty(0x1a2, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetExportControl(LPDISPATCH propVal)
{
  SetProperty(0x1a2, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClass::GetClassKind()
{
  LPDISPATCH result;
  GetProperty(0x1a3, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetClassKind(LPDISPATCH propVal)
{
  SetProperty(0x1a3, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClass::GetConcurrency()
{
  LPDISPATCH result;
  GetProperty(0x1a4, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetConcurrency(LPDISPATCH propVal)
{
  SetProperty(0x1a4, VT_DISPATCH, propVal);
}

BOOL IRoseClass::GetFundamentalType()
{
  BOOL result;
  GetProperty(0x1a5, VT_BOOL, (void*)&result);
  return result;
}

void IRoseClass::SetFundamentalType(BOOL propVal)
{
  SetProperty(0x1a5, VT_BOOL, propVal);
}

CString IRoseClass::GetSpace()
{
  CString result;
  GetProperty(0x1c1, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClass::SetSpace(LPCTSTR propVal)
{
  SetProperty(0x1c1, VT_BSTR, propVal);
}

LPDISPATCH IRoseClass::GetStateMachine()
{
  LPDISPATCH result;
  GetProperty(0x1cf, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetStateMachine(LPDISPATCH propVal)
{
  SetProperty(0x1cf, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClass::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClass::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseClass::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClass::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

LPDISPATCH IRoseClass::GetParentClass()
{
  LPDISPATCH result;
  GetProperty(0x3160, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetParentClass(LPDISPATCH propVal)
{
  SetProperty(0x3160, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClass::GetParameters()
{
  LPDISPATCH result;
  GetProperty(0x317a, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClass::SetParameters(LPDISPATCH propVal)
{
  SetProperty(0x317a, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseClass operations

CString IRoseClass::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseClass::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseClass::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseClass::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseClass::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseClass::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClass::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClass::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseClass::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseClass::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClass::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseClass::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseClass::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseClass::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseClass::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseClass::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseClass::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseClass::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetHasRelations()
{
  LPDISPATCH result;
  InvokeHelper(0x1a6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetInheritRelations()
{
  LPDISPATCH result;
  InvokeHelper(0x1a7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetSuperclasses()
{
  LPDISPATCH result;
  InvokeHelper(0x1a8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetAssociations()
{
  LPDISPATCH result;
  InvokeHelper(0x1a9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::AddOperation(LPCTSTR theName, LPCTSTR retType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1ab, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theName, retType);
  return result;
}

LPDISPATCH IRoseClass::AddAttribute(LPCTSTR theName, LPCTSTR theType, LPCTSTR initVal)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1ac, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theName, theType, initVal);
  return result;
}

LPDISPATCH IRoseClass::AddAssociation(LPCTSTR theSupplierRoleName, LPCTSTR theSupplierRoleType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1ad, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theSupplierRoleName, theSupplierRoleType);
  return result;
}

LPDISPATCH IRoseClass::AddHas(LPCTSTR theSupplierName, LPCTSTR theSupplierType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1ae, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theSupplierName, theSupplierType);
  return result;
}

BOOL IRoseClass::DeleteHas(LPDISPATCH theHas)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1b0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theHas);
  return result;
}

BOOL IRoseClass::DeleteAssociation(LPDISPATCH theAss)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1b1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theAss);
  return result;
}

BOOL IRoseClass::DeleteOperation(LPDISPATCH theOper)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1b2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theOper);
  return result;
}

BOOL IRoseClass::DeleteAttribute(LPDISPATCH theAttr)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1b3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theAttr);
  return result;
}

LPDISPATCH IRoseClass::AddInheritRel(LPCTSTR theRelationName, LPCTSTR theParentClassName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1b5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theRelationName, theParentClassName);
  return result;
}

BOOL IRoseClass::DeleteInheritRel(LPDISPATCH theInheritRel)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1b6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theInheritRel);
  return result;
}

BOOL IRoseClass::IsALinkClass()
{
  BOOL result;
  InvokeHelper(0x1b7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetLinkAssociation()
{
  LPDISPATCH result;
  InvokeHelper(0x1b8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetRoles()
{
  LPDISPATCH result;
  InvokeHelper(0x1bc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetAssociateRoles()
{
  LPDISPATCH result;
  InvokeHelper(0x1bd, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetNestedClasses()
{
  LPDISPATCH result;
  InvokeHelper(0x1be, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::AddNestedClass(LPCTSTR theName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x1bf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theName);
  return result;
}

BOOL IRoseClass::DeleteNestedClass(LPDISPATCH theClass)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1c0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClass);
  return result;
}

LPDISPATCH IRoseClass::GetAssignedModules()
{
  LPDISPATCH result;
  InvokeHelper(0x30cb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

void IRoseClass::AddAssignedModule(LPDISPATCH theModule)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x30ea, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theModule);
}

void IRoseClass::RemoveAssignedModule(LPDISPATCH theModule)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x30ee, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theModule);
}

CString IRoseClass::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

void IRoseClass::CreateStateMachine()
{
  InvokeHelper(0x3136, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseClass::DeleteStateMachine()
{
  InvokeHelper(0x3137, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseClass::AddRealizeRel(LPCTSTR theRelationName, LPCTSTR theInterfaceName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x3142, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theRelationName, theInterfaceName);
  return result;
}

BOOL IRoseClass::DeleteRealizeRel(LPDISPATCH theRealizeRel)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x3143, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theRealizeRel);
  return result;
}

LPDISPATCH IRoseClass::GetRealizeRelations()
{
  LPDISPATCH result;
  InvokeHelper(0x3144, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseClass::GetAssignedLanguage()
{
  CString result;
  InvokeHelper(0x3162, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseClass::IsNestedClass()
{
  BOOL result;
  InvokeHelper(0x3163, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetSubclasses()
{
  LPDISPATCH result;
  InvokeHelper(0x3164, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::GetClassDependencies()
{
  LPDISPATCH result;
  InvokeHelper(0x3176, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClass::AddClassDependency(LPCTSTR theSupplerName, LPCTSTR theSupplierType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x3177, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theSupplerName, theSupplierType);
  return result;
}

BOOL IRoseClass::DeleteClassDependency(LPDISPATCH theClassDependency)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x3178, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassDependency);
  return result;
}

LPDISPATCH IRoseClass::AddParameter(LPCTSTR theName, LPCTSTR theType, LPCTSTR theDef, short position)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_I2;
  InvokeHelper(0x317b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theName, theType, theDef, position);
  return result;
}

CString IRoseClass::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseClass::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseElement properties

CString IRoseElement::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseElement::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

LPDISPATCH IRoseElement::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseElement::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseElement::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseElement::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseElement operations

CString IRoseElement::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseElement::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseElement::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseElement::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseElement::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseElement::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseElement::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseElement::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseElement::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseElement::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseElement::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseElement::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseElement::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseElement::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseElement::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseElement::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseElement::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

CString IRoseElement::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseElement::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseElement::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseControllableUnit properties

CString IRoseControllableUnit::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseControllableUnit::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseControllableUnit::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseControllableUnit::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseControllableUnit::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseControllableUnit::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseControllableUnit::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseControllableUnit::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseControllableUnit::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseControllableUnit::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseControllableUnit::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseControllableUnit::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseControllableUnit::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseControllableUnit::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseControllableUnit operations

CString IRoseControllableUnit::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseControllableUnit::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseControllableUnit::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseControllableUnit::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseControllableUnit::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseControllableUnit::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseControllableUnit::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseControllableUnit::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseControllableUnit::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseControllableUnit::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseControllableUnit::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseControllableUnit::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseControllableUnit::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseControllableUnit::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseControllableUnit::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseControllableUnit::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseControllableUnit::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseControllableUnit::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseControllableUnit::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseControllableUnit::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::IsControlled()
{
  BOOL result;
  InvokeHelper(0x3091, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::Control(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x3092, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Path);
  return result;
}

BOOL IRoseControllableUnit::IsLoaded()
{
  BOOL result;
  InvokeHelper(0x3093, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::Load()
{
  BOOL result;
  InvokeHelper(0x3094, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::IsModifiable()
{
  BOOL result;
  InvokeHelper(0x3096, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::Unload()
{
  BOOL result;
  InvokeHelper(0x3097, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::Modifiable(BOOL Modifiable)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BOOL;
  InvokeHelper(0x3098, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Modifiable);
  return result;
}

CString IRoseControllableUnit::GetFileName()
{
  CString result;
  InvokeHelper(0x3099, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::Save()
{
  BOOL result;
  InvokeHelper(0x309a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::SaveAs(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x309b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Path);
  return result;
}

CString IRoseControllableUnit::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::IsModified()
{
  BOOL result;
  InvokeHelper(0x316e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::Uncontrol()
{
  BOOL result;
  InvokeHelper(0x316f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseControllableUnit::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseControllableUnit::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseModel properties

CString IRoseModel::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModel::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseModel::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModel::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseModel::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModel::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseModel::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModel::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModel::GetRootCategory()
{
  LPDISPATCH result;
  GetProperty(0x1a1, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModel::SetRootCategory(LPDISPATCH propVal)
{
  SetProperty(0x1a1, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModel::GetRootSubsystem()
{
  LPDISPATCH result;
  GetProperty(0x1a2, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModel::SetRootSubsystem(LPDISPATCH propVal)
{
  SetProperty(0x1a2, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModel::GetDeploymentDiagram()
{
  LPDISPATCH result;
  GetProperty(0x1a4, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModel::SetDeploymentDiagram(LPDISPATCH propVal)
{
  SetProperty(0x1a4, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModel::GetUseCases()
{
  LPDISPATCH result;
  GetProperty(0x1a5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModel::SetUseCases(LPDISPATCH propVal)
{
  SetProperty(0x1a5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModel::GetRootUseCaseCategory()
{
  LPDISPATCH result;
  GetProperty(0x1a6, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModel::SetRootUseCaseCategory(LPDISPATCH propVal)
{
  SetProperty(0x1a6, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModel::GetDefaultProperties()
{
  LPDISPATCH result;
  GetProperty(0x30b7, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModel::SetDefaultProperties(LPDISPATCH propVal)
{
  SetProperty(0x30b7, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModel::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModel::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModel::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModel::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseModel::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModel::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseModel operations

CString IRoseModel::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseModel::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseModel::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseModel::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseModel::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseModel::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModel::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModel::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseModel::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseModel::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModel::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseModel::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseModel::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseModel::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseModel::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseModel::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseModel::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetAllAssociations()
{
  LPDISPATCH result;
  InvokeHelper(0x19c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::AddProcessor(LPCTSTR pName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x1a8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    pName);
  return result;
}

BOOL IRoseModel::DeleteProcessor(LPDISPATCH pProcessor)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pProcessor);
  return result;
}

LPDISPATCH IRoseModel::AddDevice(LPCTSTR pName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x1aa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    pName);
  return result;
}

BOOL IRoseModel::DeleteDevice(LPDISPATCH pDevice)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1ab, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pDevice);
  return result;
}

LPDISPATCH IRoseModel::GetSelectedClasses()
{
  LPDISPATCH result;
  InvokeHelper(0x1ac, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetSelectedCategories()
{
  LPDISPATCH result;
  InvokeHelper(0x1ad, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetSelectedModules()
{
  LPDISPATCH result;
  InvokeHelper(0x1ae, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetSelectedSubsystems()
{
  LPDISPATCH result;
  InvokeHelper(0x1af, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetAllClasses()
{
  LPDISPATCH result;
  InvokeHelper(0x1b0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetAllCategories()
{
  LPDISPATCH result;
  InvokeHelper(0x1b1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetAllModules()
{
  LPDISPATCH result;
  InvokeHelper(0x1b2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetAllSubsystems()
{
  LPDISPATCH result;
  InvokeHelper(0x1b3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetAllProcessors()
{
  LPDISPATCH result;
  InvokeHelper(0x1b4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetAllDevices()
{
  LPDISPATCH result;
  InvokeHelper(0x1b5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetSelectedUseCases()
{
  LPDISPATCH result;
  InvokeHelper(0x1b6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModel::GetAllUseCases()
{
  LPDISPATCH result;
  InvokeHelper(0x1b7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::IsRootPackage()
{
  BOOL result;
  InvokeHelper(0x26d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::IsControlled()
{
  BOOL result;
  InvokeHelper(0x3091, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::Control(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x3092, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Path);
  return result;
}

BOOL IRoseModel::IsLoaded()
{
  BOOL result;
  InvokeHelper(0x3093, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::Load()
{
  BOOL result;
  InvokeHelper(0x3094, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::IsModifiable()
{
  BOOL result;
  InvokeHelper(0x3096, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::Unload()
{
  BOOL result;
  InvokeHelper(0x3097, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::Modifiable(BOOL Modifiable)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BOOL;
  InvokeHelper(0x3098, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Modifiable);
  return result;
}

CString IRoseModel::GetFileName()
{
  CString result;
  InvokeHelper(0x3099, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::Save()
{
  BOOL result;
  InvokeHelper(0x309a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::SaveAs(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x309b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Path);
  return result;
}

LPDISPATCH IRoseModel::FindItems(LPCTSTR ItemName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x30b8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ItemName);
  return result;
}

LPDISPATCH IRoseModel::FindItemWithID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x30b9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}

LPDISPATCH IRoseModel::FindClasses(LPCTSTR ClassName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x30ba, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ClassName);
  return result;
}

LPDISPATCH IRoseModel::FindClassWithID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x30bb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}

LPDISPATCH IRoseModel::FindCategories(LPCTSTR CategoryName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x30bc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    CategoryName);
  return result;
}

LPDISPATCH IRoseModel::FindCategoryWithID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x30bd, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}

LPDISPATCH IRoseModel::GetActiveDiagram()
{
  LPDISPATCH result;
  InvokeHelper(0x30ef, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseModel::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::IsModified()
{
  BOOL result;
  InvokeHelper(0x316e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::Uncontrol()
{
  BOOL result;
  InvokeHelper(0x316f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseModel::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseModel::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseTransition properties

CString IRoseTransition::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseTransition::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseTransition::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseTransition::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseTransition::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseTransition::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseTransition::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseTransition::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseTransition::GetSupplierName()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseTransition::SetSupplierName(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

LPDISPATCH IRoseTransition::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseTransition::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseTransition::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseTransition::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseTransition::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseTransition::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseTransition operations

CString IRoseTransition::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseTransition::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseTransition::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseTransition::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseTransition::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseTransition::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseTransition::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseTransition::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseTransition::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseTransition::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseTransition::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseTransition::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseTransition::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseTransition::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseTransition::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseTransition::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseTransition::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseTransition::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseTransition::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseTransition::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseTransition::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseTransition::RedirectTo(LPDISPATCH newTarget)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x282, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    newTarget);
  return result;
}

CString IRoseTransition::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseTransition::HasClient()
{
  BOOL result;
  InvokeHelper(0x313e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseTransition::HasSupplier()
{
  BOOL result;
  InvokeHelper(0x313f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseTransition::GetClient()
{
  LPDISPATCH result;
  InvokeHelper(0x3140, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseTransition::GetSupplier()
{
  LPDISPATCH result;
  InvokeHelper(0x3141, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseTransition::GetTriggerAction()
{
  LPDISPATCH result;
  InvokeHelper(0x3155, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseTransition::GetSendAction()
{
  LPDISPATCH result;
  InvokeHelper(0x3156, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseTransition::GetTargetState()
{
  LPDISPATCH result;
  InvokeHelper(0x3157, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseTransition::GetSourceState()
{
  LPDISPATCH result;
  InvokeHelper(0x3158, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseTransition::GetTriggerEvent()
{
  LPDISPATCH result;
  InvokeHelper(0x3159, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseTransition::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseTransition::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystemCollection properties

short IRoseSubsystemCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseSubsystemCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystemCollection operations

LPDISPATCH IRoseSubsystemCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseSubsystemCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseSubsystemCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseSubsystemCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseSubsystemCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseSubsystemCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseSubsystemCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseSubsystemCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseSubsystemCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseSubsystemCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseSubsystemCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseProcessor properties

CString IRoseProcessor::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProcessor::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseProcessor::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProcessor::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseProcessor::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProcessor::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseProcessor::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseProcessor::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseProcessor::GetProcesses()
{
  LPDISPATCH result;
  GetProperty(0x19c, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseProcessor::SetProcesses(LPDISPATCH propVal)
{
  SetProperty(0x19c, VT_DISPATCH, propVal);
}

CString IRoseProcessor::GetCharacteristics()
{
  CString result;
  GetProperty(0x19d, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProcessor::SetCharacteristics(LPCTSTR propVal)
{
  SetProperty(0x19d, VT_BSTR, propVal);
}

LPDISPATCH IRoseProcessor::GetScheduling()
{
  LPDISPATCH result;
  GetProperty(0x19e, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseProcessor::SetScheduling(LPDISPATCH propVal)
{
  SetProperty(0x19e, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseProcessor::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseProcessor::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseProcessor::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseProcessor::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseProcessor::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProcessor::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseProcessor operations

CString IRoseProcessor::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseProcessor::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseProcessor::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseProcessor::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseProcessor::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseProcessor::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseProcessor::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseProcessor::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseProcessor::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseProcessor::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseProcessor::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseProcessor::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseProcessor::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseProcessor::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseProcessor::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseProcessor::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseProcessor::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseProcessor::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseProcessor::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseProcessor::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseProcessor::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseProcessor::GetConnectedDevices()
{
  LPDISPATCH result;
  InvokeHelper(0x19f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseProcessor::GetConnectedProcessors()
{
  LPDISPATCH result;
  InvokeHelper(0x1a0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseProcessor::AddProcess(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x1a1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

BOOL IRoseProcessor::DeleteProcess(LPDISPATCH theProcess)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theProcess);
  return result;
}

BOOL IRoseProcessor::AddProcessorConnection(LPDISPATCH Processor)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Processor);
  return result;
}

BOOL IRoseProcessor::RemoveProcessorConnection(LPDISPATCH theProcessor)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theProcessor);
  return result;
}

BOOL IRoseProcessor::AddDeviceConnection(LPDISPATCH theDevice)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theDevice);
  return result;
}

BOOL IRoseProcessor::RemoveDeviceConnection(LPDISPATCH theDevice)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theDevice);
  return result;
}

CString IRoseProcessor::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseProcessor::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseProcessor::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseCategoryDependencyCollection properties

/////////////////////////////////////////////////////////////////////////////
// IRoseCategoryDependencyCollection operations


/////////////////////////////////////////////////////////////////////////////
// IRoseProperty properties

CString IRoseProperty::GetName()
{
  CString result;
  GetProperty(0xca, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProperty::SetName(LPCTSTR propVal)
{
  SetProperty(0xca, VT_BSTR, propVal);
}

CString IRoseProperty::GetValue()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProperty::SetValue(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseProperty::GetToolName()
{
  CString result;
  GetProperty(0xcd, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProperty::SetToolName(LPCTSTR propVal)
{
  SetProperty(0xcd, VT_BSTR, propVal);
}

CString IRoseProperty::GetType()
{
  CString result;
  GetProperty(0xce, VT_BSTR, (void*)&result);
  return result;
}

void IRoseProperty::SetType(LPCTSTR propVal)
{
  SetProperty(0xce, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseProperty operations


/////////////////////////////////////////////////////////////////////////////
// IRoseStateDiagram properties

CString IRoseStateDiagram::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseStateDiagram::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

LPDISPATCH IRoseStateDiagram::GetItemViews()
{
  LPDISPATCH result;
  GetProperty(0xca, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateDiagram::SetItemViews(LPDISPATCH propVal)
{
  SetProperty(0xca, VT_DISPATCH, propVal);
}

BOOL IRoseStateDiagram::GetVisible()
{
  BOOL result;
  GetProperty(0xcb, VT_BOOL, (void*)&result);
  return result;
}

void IRoseStateDiagram::SetVisible(BOOL propVal)
{
  SetProperty(0xcb, VT_BOOL, propVal);
}

LPDISPATCH IRoseStateDiagram::GetItems()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateDiagram::SetItems(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateDiagram::GetParent()
{
  LPDISPATCH result;
  GetProperty(0x1bd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateDiagram::SetParent(LPDISPATCH propVal)
{
  SetProperty(0x1bd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateDiagram::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateDiagram::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateDiagram::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateDiagram::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseStateDiagram::GetDocumentation()
{
  CString result;
  GetProperty(0x3170, VT_BSTR, (void*)&result);
  return result;
}

void IRoseStateDiagram::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0x3170, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseStateDiagram operations

CString IRoseStateDiagram::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseStateDiagram::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseStateDiagram::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseStateDiagram::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseStateDiagram::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseStateDiagram::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseStateDiagram::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseStateDiagram::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateDiagram::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseStateDiagram::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseStateDiagram::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseStateDiagram::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseStateDiagram::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseStateDiagram::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateDiagram::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseStateDiagram::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseStateDiagram::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseStateDiagram::Layout()
{
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseStateDiagram::Invalidate()
{
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseStateDiagram::Update()
{
  InvokeHelper(0xce, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseStateDiagram::GetViewFrom(LPDISPATCH theItem)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theItem);
  return result;
}

BOOL IRoseStateDiagram::IsActive()
{
  BOOL result;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseStateDiagram::Exists(LPDISPATCH theItem)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theItem);
  return result;
}

void IRoseStateDiagram::Activate()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseStateDiagram::Render(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

LPDISPATCH IRoseStateDiagram::AddNoteView(LPCTSTR szNoteText, short nType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szNoteText, nType);
  return result;
}

BOOL IRoseStateDiagram::RemoveNoteView(LPDISPATCH pIDispNoteView)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xdb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispNoteView);
  return result;
}

LPDISPATCH IRoseStateDiagram::GetNoteViews()
{
  LPDISPATCH result;
  InvokeHelper(0xdc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

void IRoseStateDiagram::RenderEnhanced(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xdd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

void IRoseStateDiagram::RenderToClipboard()
{
  InvokeHelper(0xde, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseStateDiagram::RenderEnhancedToClipboard()
{
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseStateDiagram::AddStateView(LPDISPATCH aState)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    aState);
  return result;
}

BOOL IRoseStateDiagram::RemoveStateView(LPDISPATCH View)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    View);
  return result;
}

LPDISPATCH IRoseStateDiagram::GetSelectedStateViews()
{
  LPDISPATCH result;
  InvokeHelper(0x1a7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateDiagram::GetStateViews()
{
  LPDISPATCH result;
  InvokeHelper(0x1a8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateDiagram::GetSelectedTransitions()
{
  LPDISPATCH result;
  InvokeHelper(0x1a9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateDiagram::GetStateView(LPDISPATCH State)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1aa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    State);
  return result;
}

LPDISPATCH IRoseStateDiagram::GetSelectedStates()
{
  LPDISPATCH result;
  InvokeHelper(0x1ab, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateDiagram::GetSelectedItems()
{
  LPDISPATCH result;
  InvokeHelper(0x30ed, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseStateDiagram::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseStateDiagram::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseStateDiagram::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseEvent properties

CString IRoseEvent::GetArguments()
{
  CString result;
  GetProperty(0xd7, VT_BSTR, (void*)&result);
  return result;
}

void IRoseEvent::SetArguments(LPCTSTR propVal)
{
  SetProperty(0xd7, VT_BSTR, propVal);
}

CString IRoseEvent::GetName()
{
  CString result;
  GetProperty(0xd8, VT_BSTR, (void*)&result);
  return result;
}

void IRoseEvent::SetName(LPCTSTR propVal)
{
  SetProperty(0xd8, VT_BSTR, propVal);
}

LPDISPATCH IRoseEvent::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseEvent::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseEvent::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseEvent::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseEvent::GetGuardCondition()
{
  CString result;
  GetProperty(0x314e, VT_BSTR, (void*)&result);
  return result;
}

void IRoseEvent::SetGuardCondition(LPCTSTR propVal)
{
  SetProperty(0x314e, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseEvent operations

CString IRoseEvent::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseEvent::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseEvent::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseEvent::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseEvent::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseEvent::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseEvent::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseEvent::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseEvent::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseEvent::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseEvent::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseEvent::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseEvent::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseEvent::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseEvent::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseEvent::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseEvent::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

CString IRoseEvent::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseEvent::GetAction()
{
  LPDISPATCH result;
  InvokeHelper(0x315a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseEvent::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseEvent::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseRichType properties

short IRoseRichType::GetValue()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseRichType::SetValue(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

CString IRoseRichType::GetName()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseRichType::SetName(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

LPDISPATCH IRoseRichType::GetTypes()
{
  LPDISPATCH result;
  GetProperty(0xcc, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseRichType::SetTypes(LPDISPATCH propVal)
{
  SetProperty(0xcc, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseRichType operations

CString IRoseRichType::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseRichType::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseScenarioDiagramCollection properties

short IRoseScenarioDiagramCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseScenarioDiagramCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseScenarioDiagramCollection operations

LPDISPATCH IRoseScenarioDiagramCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseScenarioDiagramCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseScenarioDiagramCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseScenarioDiagramCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseScenarioDiagramCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseScenarioDiagramCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseScenarioDiagramCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseScenarioDiagramCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseScenarioDiagramCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseScenarioDiagramCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseScenarioDiagramCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseParameter properties

CString IRoseParameter::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseParameter::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseParameter::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseParameter::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseParameter::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseParameter::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseParameter::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseParameter::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

BOOL IRoseParameter::GetConst()
{
  BOOL result;
  GetProperty(0x19c, VT_BOOL, (void*)&result);
  return result;
}

void IRoseParameter::SetConst(BOOL propVal)
{
  SetProperty(0x19c, VT_BOOL, propVal);
}

CString IRoseParameter::GetType()
{
  CString result;
  GetProperty(0x19d, VT_BSTR, (void*)&result);
  return result;
}

void IRoseParameter::SetType(LPCTSTR propVal)
{
  SetProperty(0x19d, VT_BSTR, propVal);
}

CString IRoseParameter::GetInitValue()
{
  CString result;
  GetProperty(0x19e, VT_BSTR, (void*)&result);
  return result;
}

void IRoseParameter::SetInitValue(LPCTSTR propVal)
{
  SetProperty(0x19e, VT_BSTR, propVal);
}

LPDISPATCH IRoseParameter::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseParameter::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseParameter::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseParameter::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseParameter::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseParameter::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseParameter operations

CString IRoseParameter::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseParameter::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseParameter::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseParameter::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseParameter::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseParameter::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseParameter::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseParameter::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseParameter::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseParameter::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseParameter::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseParameter::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseParameter::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseParameter::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseParameter::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseParameter::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseParameter::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseParameter::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseParameter::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseParameter::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseParameter::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseParameter::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseParameter::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseParameter::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseOperation properties

CString IRoseOperation::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseOperation::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseOperation::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseOperation::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseOperation::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseOperation::GetReturnType()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetReturnType(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

LPDISPATCH IRoseOperation::GetParameters()
{
  LPDISPATCH result;
  GetProperty(0x19d, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseOperation::SetParameters(LPDISPATCH propVal)
{
  SetProperty(0x19d, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseOperation::GetExportControl()
{
  LPDISPATCH result;
  GetProperty(0x19e, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseOperation::SetExportControl(LPDISPATCH propVal)
{
  SetProperty(0x19e, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseOperation::GetConcurrency()
{
  LPDISPATCH result;
  GetProperty(0x19f, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseOperation::SetConcurrency(LPDISPATCH propVal)
{
  SetProperty(0x19f, VT_DISPATCH, propVal);
}

CString IRoseOperation::GetPreconditions()
{
  CString result;
  GetProperty(0x1a2, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetPreconditions(LPCTSTR propVal)
{
  SetProperty(0x1a2, VT_BSTR, propVal);
}

CString IRoseOperation::GetSemantics()
{
  CString result;
  GetProperty(0x1a3, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetSemantics(LPCTSTR propVal)
{
  SetProperty(0x1a3, VT_BSTR, propVal);
}

CString IRoseOperation::GetPostconditions()
{
  CString result;
  GetProperty(0x1a4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetPostconditions(LPCTSTR propVal)
{
  SetProperty(0x1a4, VT_BSTR, propVal);
}

CString IRoseOperation::GetProtocol()
{
  CString result;
  GetProperty(0x1a5, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetProtocol(LPCTSTR propVal)
{
  SetProperty(0x1a5, VT_BSTR, propVal);
}

CString IRoseOperation::GetQualification()
{
  CString result;
  GetProperty(0x1a6, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetQualification(LPCTSTR propVal)
{
  SetProperty(0x1a6, VT_BSTR, propVal);
}

CString IRoseOperation::GetExceptions()
{
  CString result;
  GetProperty(0x1a7, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetExceptions(LPCTSTR propVal)
{
  SetProperty(0x1a7, VT_BSTR, propVal);
}

CString IRoseOperation::GetSize()
{
  CString result;
  GetProperty(0x1a8, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetSize(LPCTSTR propVal)
{
  SetProperty(0x1a8, VT_BSTR, propVal);
}

CString IRoseOperation::GetTime()
{
  CString result;
  GetProperty(0x1a9, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetTime(LPCTSTR propVal)
{
  SetProperty(0x1a9, VT_BSTR, propVal);
}

BOOL IRoseOperation::GetVirtual()
{
  BOOL result;
  GetProperty(0x1ab, VT_BOOL, (void*)&result);
  return result;
}

void IRoseOperation::SetVirtual(BOOL propVal)
{
  SetProperty(0x1ab, VT_BOOL, propVal);
}

LPDISPATCH IRoseOperation::GetParentClass()
{
  LPDISPATCH result;
  GetProperty(0x1bc, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseOperation::SetParentClass(LPDISPATCH propVal)
{
  SetProperty(0x1bc, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseOperation::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseOperation::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseOperation::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseOperation::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseOperation::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseOperation::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseOperation operations

CString IRoseOperation::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseOperation::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseOperation::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseOperation::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseOperation::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseOperation::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseOperation::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseOperation::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseOperation::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseOperation::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseOperation::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseOperation::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseOperation::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseOperation::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseOperation::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseOperation::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseOperation::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseOperation::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseOperation::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseOperation::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseOperation::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseOperation::AddParameter(LPCTSTR theName, LPCTSTR theType, LPCTSTR theDef, short position)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_I2;
  InvokeHelper(0x1a0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theName, theType, theDef, position);
  return result;
}

void IRoseOperation::RemoveAllParameters()
{
  InvokeHelper(0x1a1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL IRoseOperation::DeleteParameter(LPDISPATCH theParameter)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1aa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theParameter);
  return result;
}

CString IRoseOperation::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseOperation::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseOperation::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseView_LineColor properties

short IRoseView_LineColor::GetBlue()
{
  short result;
  GetProperty(0x30d6, VT_I2, (void*)&result);
  return result;
}

void IRoseView_LineColor::SetBlue(short propVal)
{
  SetProperty(0x30d6, VT_I2, propVal);
}

short IRoseView_LineColor::GetGreen()
{
  short result;
  GetProperty(0x30d7, VT_I2, (void*)&result);
  return result;
}

void IRoseView_LineColor::SetGreen(short propVal)
{
  SetProperty(0x30d7, VT_I2, propVal);
}

short IRoseView_LineColor::GetRed()
{
  short result;
  GetProperty(0x30d8, VT_I2, (void*)&result);
  return result;
}

void IRoseView_LineColor::SetRed(short propVal)
{
  SetProperty(0x30d8, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseView_LineColor operations

CString IRoseView_LineColor::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseView_LineColor::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseAddInManager properties

LPDISPATCH IRoseAddInManager::GetAddIns()
{
  LPDISPATCH result;
  GetProperty(0x30f1, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAddInManager::SetAddIns(LPDISPATCH propVal)
{
  SetProperty(0x30f1, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseAddInManager operations

CString IRoseAddInManager::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseAddInManager::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseStateDiagramCollection properties

short IRoseStateDiagramCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseStateDiagramCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseStateDiagramCollection operations

LPDISPATCH IRoseStateDiagramCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseStateDiagramCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseStateDiagramCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseStateDiagramCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseStateDiagramCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseStateDiagramCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseStateDiagramCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseStateDiagramCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseStateDiagramCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseStateDiagramCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseStateDiagramCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseItemViewCollection properties

short IRoseItemViewCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseItemViewCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseItemViewCollection operations

LPDISPATCH IRoseItemViewCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseItemViewCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseItemViewCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseItemViewCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseItemViewCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseItemViewCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseItemViewCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseItemViewCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseItemViewCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseItemViewCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseItemViewCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRosePropertyCollection properties

short IRosePropertyCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRosePropertyCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRosePropertyCollection operations

LPDISPATCH IRosePropertyCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRosePropertyCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRosePropertyCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRosePropertyCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRosePropertyCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRosePropertyCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRosePropertyCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRosePropertyCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRosePropertyCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRosePropertyCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRosePropertyCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseOperationCollection properties

short IRoseOperationCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseOperationCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseOperationCollection operations

LPDISPATCH IRoseOperationCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseOperationCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseOperationCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseOperationCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseOperationCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseOperationCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseOperationCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseOperationCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseOperationCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseOperationCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseOperationCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseDeviceCollection properties

short IRoseDeviceCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseDeviceCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseDeviceCollection operations

LPDISPATCH IRoseDeviceCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseDeviceCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseDeviceCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseDeviceCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseDeviceCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseDeviceCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseDeviceCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseDeviceCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseDeviceCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseDeviceCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseDeviceCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseObject properties

/////////////////////////////////////////////////////////////////////////////
// IRoseObject operations

CString IRoseObject::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseObject::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseModuleVisibilityRelationship properties

CString IRoseModuleVisibilityRelationship::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseModuleVisibilityRelationship::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseModuleVisibilityRelationship::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseModuleVisibilityRelationship::GetSupplierName()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetSupplierName(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetContextModule()
{
  LPDISPATCH result;
  GetProperty(0x266, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetContextModule(LPDISPATCH propVal)
{
  SetProperty(0x266, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetSupplierModule()
{
  LPDISPATCH result;
  GetProperty(0x267, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetSupplierModule(LPDISPATCH propVal)
{
  SetProperty(0x267, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetContextSubsystem()
{
  LPDISPATCH result;
  GetProperty(0x269, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetContextSubsystem(LPDISPATCH propVal)
{
  SetProperty(0x269, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetSupplierSubsystem()
{
  LPDISPATCH result;
  GetProperty(0x26a, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetSupplierSubsystem(LPDISPATCH propVal)
{
  SetProperty(0x26a, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseModuleVisibilityRelationship::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetContextClass()
{
  LPDISPATCH result;
  GetProperty(0x3148, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetContextClass(LPDISPATCH propVal)
{
  SetProperty(0x3148, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetSupplierClass()
{
  LPDISPATCH result;
  GetProperty(0x3149, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationship::SetSupplierClass(LPDISPATCH propVal)
{
  SetProperty(0x3149, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseModuleVisibilityRelationship operations

CString IRoseModuleVisibilityRelationship::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseModuleVisibilityRelationship::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseModuleVisibilityRelationship::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseModuleVisibilityRelationship::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseModuleVisibilityRelationship::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseModuleVisibilityRelationship::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModuleVisibilityRelationship::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseModuleVisibilityRelationship::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseModuleVisibilityRelationship::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModuleVisibilityRelationship::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseModuleVisibilityRelationship::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseModuleVisibilityRelationship::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseModuleVisibilityRelationship::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModuleVisibilityRelationship::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseModuleVisibilityRelationship::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseModuleVisibilityRelationship::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseModuleVisibilityRelationship::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseModuleVisibilityRelationship::HasClient()
{
  BOOL result;
  InvokeHelper(0x313e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseModuleVisibilityRelationship::HasSupplier()
{
  BOOL result;
  InvokeHelper(0x313f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetClient()
{
  LPDISPATCH result;
  InvokeHelper(0x3140, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModuleVisibilityRelationship::GetSupplier()
{
  LPDISPATCH result;
  InvokeHelper(0x3141, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseModuleVisibilityRelationship::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseModuleVisibilityRelationship::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseComponentViewCollection properties

short IRoseComponentViewCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseComponentViewCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseComponentViewCollection operations

LPDISPATCH IRoseComponentViewCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseComponentViewCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseComponentViewCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseComponentViewCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseComponentViewCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseComponentViewCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseComponentViewCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseComponentViewCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseComponentViewCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseComponentViewCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseComponentViewCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseHasRelationshipCollection properties

short IRoseHasRelationshipCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseHasRelationshipCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseHasRelationshipCollection operations

LPDISPATCH IRoseHasRelationshipCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseHasRelationshipCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseHasRelationshipCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseHasRelationshipCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseHasRelationshipCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseHasRelationshipCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseHasRelationshipCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseHasRelationshipCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseHasRelationshipCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseHasRelationshipCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseHasRelationshipCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseClassViewCollection properties

short IRoseClassViewCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseClassViewCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseClassViewCollection operations

LPDISPATCH IRoseClassViewCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseClassViewCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseClassViewCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseClassViewCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseClassViewCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseClassViewCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseClassViewCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseClassViewCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseClassViewCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseClassViewCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseClassViewCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseDeploymentDiagram properties

CString IRoseDeploymentDiagram::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDeploymentDiagram::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

LPDISPATCH IRoseDeploymentDiagram::GetItemViews()
{
  LPDISPATCH result;
  GetProperty(0xca, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDeploymentDiagram::SetItemViews(LPDISPATCH propVal)
{
  SetProperty(0xca, VT_DISPATCH, propVal);
}

BOOL IRoseDeploymentDiagram::GetVisible()
{
  BOOL result;
  GetProperty(0xcb, VT_BOOL, (void*)&result);
  return result;
}

void IRoseDeploymentDiagram::SetVisible(BOOL propVal)
{
  SetProperty(0xcb, VT_BOOL, propVal);
}

LPDISPATCH IRoseDeploymentDiagram::GetItems()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDeploymentDiagram::SetItems(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseDeploymentDiagram::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDeploymentDiagram::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseDeploymentDiagram::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDeploymentDiagram::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseDeploymentDiagram::GetDocumentation()
{
  CString result;
  GetProperty(0x3170, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDeploymentDiagram::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0x3170, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseDeploymentDiagram operations

CString IRoseDeploymentDiagram::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseDeploymentDiagram::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseDeploymentDiagram::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseDeploymentDiagram::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseDeploymentDiagram::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseDeploymentDiagram::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseDeploymentDiagram::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseDeploymentDiagram::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDeploymentDiagram::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseDeploymentDiagram::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseDeploymentDiagram::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseDeploymentDiagram::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseDeploymentDiagram::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseDeploymentDiagram::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDeploymentDiagram::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseDeploymentDiagram::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseDeploymentDiagram::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseDeploymentDiagram::Layout()
{
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseDeploymentDiagram::Invalidate()
{
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseDeploymentDiagram::Update()
{
  InvokeHelper(0xce, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseDeploymentDiagram::GetViewFrom(LPDISPATCH theItem)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theItem);
  return result;
}

BOOL IRoseDeploymentDiagram::IsActive()
{
  BOOL result;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseDeploymentDiagram::Exists(LPDISPATCH theItem)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theItem);
  return result;
}

void IRoseDeploymentDiagram::Activate()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseDeploymentDiagram::Render(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

LPDISPATCH IRoseDeploymentDiagram::AddNoteView(LPCTSTR szNoteText, short nType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szNoteText, nType);
  return result;
}

BOOL IRoseDeploymentDiagram::RemoveNoteView(LPDISPATCH pIDispNoteView)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xdb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispNoteView);
  return result;
}

LPDISPATCH IRoseDeploymentDiagram::GetNoteViews()
{
  LPDISPATCH result;
  InvokeHelper(0xdc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

void IRoseDeploymentDiagram::RenderEnhanced(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xdd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

void IRoseDeploymentDiagram::RenderToClipboard()
{
  InvokeHelper(0xde, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseDeploymentDiagram::RenderEnhancedToClipboard()
{
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseDeploymentDiagram::GetProcessors()
{
  LPDISPATCH result;
  InvokeHelper(0x19b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDeploymentDiagram::GetDevices()
{
  LPDISPATCH result;
  InvokeHelper(0x19c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDeploymentDiagram::AddProcessor(LPDISPATCH theProcessor, short x, short y)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH VTS_I2 VTS_I2;
  InvokeHelper(0x19d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theProcessor, x, y);
  return result;
}

LPDISPATCH IRoseDeploymentDiagram::AddDevice(LPDISPATCH theDevice, short x, short y)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH VTS_I2 VTS_I2;
  InvokeHelper(0x19e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theDevice, x, y);
  return result;
}

BOOL IRoseDeploymentDiagram::RemoveProcessor(LPDISPATCH theProcessor)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x19f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theProcessor);
  return result;
}

BOOL IRoseDeploymentDiagram::RemoveDevice(LPDISPATCH theDevice)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theDevice);
  return result;
}

LPDISPATCH IRoseDeploymentDiagram::GetSelectedItems()
{
  LPDISPATCH result;
  InvokeHelper(0x30ed, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseDeploymentDiagram::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseDeploymentDiagram::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseDeploymentDiagram::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseInstanceView properties

CString IRoseInstanceView::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseInstanceView::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

short IRoseInstanceView::GetYPosition()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseInstanceView::SetYPosition(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

short IRoseInstanceView::GetXPosition()
{
  short result;
  GetProperty(0xcb, VT_I2, (void*)&result);
  return result;
}

void IRoseInstanceView::SetXPosition(short propVal)
{
  SetProperty(0xcb, VT_I2, propVal);
}

short IRoseInstanceView::GetHeight()
{
  short result;
  GetProperty(0xcc, VT_I2, (void*)&result);
  return result;
}

void IRoseInstanceView::SetHeight(short propVal)
{
  SetProperty(0xcc, VT_I2, propVal);
}

short IRoseInstanceView::GetWidth()
{
  short result;
  GetProperty(0xcd, VT_I2, (void*)&result);
  return result;
}

void IRoseInstanceView::SetWidth(short propVal)
{
  SetProperty(0xcd, VT_I2, propVal);
}

LPDISPATCH IRoseInstanceView::GetFillColor()
{
  LPDISPATCH result;
  GetProperty(0xce, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInstanceView::SetFillColor(LPDISPATCH propVal)
{
  SetProperty(0xce, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseInstanceView::GetLineColor()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInstanceView::SetLineColor(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseInstanceView::GetSubViews()
{
  LPDISPATCH result;
  GetProperty(0xdb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInstanceView::SetSubViews(LPDISPATCH propVal)
{
  SetProperty(0xdb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseInstanceView::GetParentView()
{
  LPDISPATCH result;
  GetProperty(0xdc, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInstanceView::SetParentView(LPDISPATCH propVal)
{
  SetProperty(0xdc, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseInstanceView::GetItem()
{
  LPDISPATCH result;
  GetProperty(0xdd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInstanceView::SetItem(LPDISPATCH propVal)
{
  SetProperty(0xdd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseInstanceView::GetParentDiagram()
{
  LPDISPATCH result;
  GetProperty(0xe0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInstanceView::SetParentDiagram(LPDISPATCH propVal)
{
  SetProperty(0xe0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseInstanceView::GetFont()
{
  LPDISPATCH result;
  GetProperty(0x30cd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInstanceView::SetFont(LPDISPATCH propVal)
{
  SetProperty(0x30cd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseInstanceView::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInstanceView::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseInstanceView::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInstanceView::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseInstanceView operations

CString IRoseInstanceView::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseInstanceView::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseInstanceView::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseInstanceView::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseInstanceView::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseInstanceView::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseInstanceView::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseInstanceView::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseInstanceView::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseInstanceView::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseInstanceView::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseInstanceView::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseInstanceView::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseInstanceView::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseInstanceView::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseInstanceView::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseInstanceView::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseInstanceView::Invalidate()
{
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL IRoseInstanceView::SupportsFillColor()
{
  BOOL result;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseInstanceView::SupportsLineColor()
{
  BOOL result;
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseInstanceView::IsSelected()
{
  BOOL result;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

void IRoseInstanceView::SetSelected(BOOL bSelect)
{
  static BYTE parms[] =
    VTS_BOOL;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     bSelect);
}

BOOL IRoseInstanceView::PointInView(short x, short y)
{
  BOOL result;
  static BYTE parms[] =
    VTS_I2 VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    x, y);
  return result;
}

short IRoseInstanceView::GetDefaultWidth()
{
  short result;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseInstanceView::GetDefaultHeight()
{
  short result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseInstanceView::GetMinWidth()
{
  short result;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseInstanceView::GetMinHeight()
{
  short result;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

BOOL IRoseInstanceView::HasItem()
{
  BOOL result;
  InvokeHelper(0xde, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseInstanceView::HasParentView()
{
  BOOL result;
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseInstanceView::GetInstance()
{
  LPDISPATCH result;
  InvokeHelper(0x199, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseInstanceView::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseInstanceView::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseInstanceView::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseLink properties

CString IRoseLink::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseLink::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseLink::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseLink::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseLink::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseLink::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseLink::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseLink::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseLink::GetLinkRole1()
{
  LPDISPATCH result;
  GetProperty(0x19c, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseLink::SetLinkRole1(LPDISPATCH propVal)
{
  SetProperty(0x19c, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseLink::GetLinkRole2()
{
  LPDISPATCH result;
  GetProperty(0x19d, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseLink::SetLinkRole2(LPDISPATCH propVal)
{
  SetProperty(0x19d, VT_DISPATCH, propVal);
}

BOOL IRoseLink::GetLinkRole1Shared()
{
  BOOL result;
  GetProperty(0x19e, VT_BOOL, (void*)&result);
  return result;
}

void IRoseLink::SetLinkRole1Shared(BOOL propVal)
{
  SetProperty(0x19e, VT_BOOL, propVal);
}

LPDISPATCH IRoseLink::GetLinkRole2Visibility()
{
  LPDISPATCH result;
  GetProperty(0x19f, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseLink::SetLinkRole2Visibility(LPDISPATCH propVal)
{
  SetProperty(0x19f, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseLink::GetLinkRole1Visibility()
{
  LPDISPATCH result;
  GetProperty(0x1a1, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseLink::SetLinkRole1Visibility(LPDISPATCH propVal)
{
  SetProperty(0x1a1, VT_DISPATCH, propVal);
}

BOOL IRoseLink::GetLinkRole2Shared()
{
  BOOL result;
  GetProperty(0x1a2, VT_BOOL, (void*)&result);
  return result;
}

void IRoseLink::SetLinkRole2Shared(BOOL propVal)
{
  SetProperty(0x1a2, VT_BOOL, propVal);
}

LPDISPATCH IRoseLink::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseLink::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseLink::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseLink::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseLink::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseLink::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseLink operations

CString IRoseLink::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseLink::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseLink::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseLink::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseLink::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseLink::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseLink::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseLink::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseLink::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseLink::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseLink::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseLink::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseLink::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseLink::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseLink::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseLink::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseLink::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseLink::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseLink::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseLink::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseLink::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseLink::GetMessages()
{
  LPDISPATCH result;
  InvokeHelper(0x1a0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseLink::DeleteMessage(LPDISPATCH TheMessage)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    TheMessage);
  return result;
}

BOOL IRoseLink::AssignAssociation(LPDISPATCH TheAssoc)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    TheAssoc);
  return result;
}

BOOL IRoseLink::UnassignAssociation()
{
  BOOL result;
  InvokeHelper(0x1a5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseLink::AddMessageTo(LPCTSTR Name, LPDISPATCH ToInstance, short SequenceNumber)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_DISPATCH VTS_I2;
  InvokeHelper(0x1a6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name, ToInstance, SequenceNumber);
  return result;
}

CString IRoseLink::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseLink::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseLink::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseObjectInstance properties

CString IRoseObjectInstance::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseObjectInstance::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseObjectInstance::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseObjectInstance::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseObjectInstance::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseObjectInstance::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseObjectInstance::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseObjectInstance::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseObjectInstance::GetClassName()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseObjectInstance::SetClassName(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

BOOL IRoseObjectInstance::GetMultipleInstances()
{
  BOOL result;
  GetProperty(0x19d, VT_BOOL, (void*)&result);
  return result;
}

void IRoseObjectInstance::SetMultipleInstances(BOOL propVal)
{
  SetProperty(0x19d, VT_BOOL, propVal);
}

LPDISPATCH IRoseObjectInstance::GetLinks()
{
  LPDISPATCH result;
  GetProperty(0x1a0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseObjectInstance::SetLinks(LPDISPATCH propVal)
{
  SetProperty(0x1a0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseObjectInstance::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseObjectInstance::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseObjectInstance::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseObjectInstance::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseObjectInstance::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseObjectInstance::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

short IRoseObjectInstance::GetPersistence()
{
  short result;
  GetProperty(0x316b, VT_I2, (void*)&result);
  return result;
}

void IRoseObjectInstance::SetPersistence(short propVal)
{
  SetProperty(0x316b, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseObjectInstance operations

CString IRoseObjectInstance::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseObjectInstance::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseObjectInstance::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseObjectInstance::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseObjectInstance::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseObjectInstance::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseObjectInstance::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseObjectInstance::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseObjectInstance::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseObjectInstance::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseObjectInstance::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseObjectInstance::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseObjectInstance::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseObjectInstance::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseObjectInstance::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseObjectInstance::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseObjectInstance::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseObjectInstance::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseObjectInstance::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseObjectInstance::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseObjectInstance::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseObjectInstance::IsClass()
{
  BOOL result;
  InvokeHelper(0x19e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseObjectInstance::GetClass()
{
  LPDISPATCH result;
  InvokeHelper(0x19f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseObjectInstance::AddLink(LPCTSTR Name, LPDISPATCH ToInstance)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_DISPATCH;
  InvokeHelper(0x1a1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name, ToInstance);
  return result;
}

BOOL IRoseObjectInstance::DeleteLink(LPDISPATCH aLink)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    aLink);
  return result;
}

CString IRoseObjectInstance::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseObjectInstance::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseCategoryDependency properties

CString IRoseCategoryDependency::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseCategoryDependency::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseCategoryDependency::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseCategoryDependency::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseCategoryDependency::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseCategoryDependency::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseCategoryDependency::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategoryDependency::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseCategoryDependency::GetSupplierName()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseCategoryDependency::SetSupplierName(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

LPDISPATCH IRoseCategoryDependency::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategoryDependency::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseCategoryDependency::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategoryDependency::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseCategoryDependency::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseCategoryDependency::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseCategoryDependency operations

CString IRoseCategoryDependency::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseCategoryDependency::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseCategoryDependency::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseCategoryDependency::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseCategoryDependency::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseCategoryDependency::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseCategoryDependency::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseCategoryDependency::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategoryDependency::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseCategoryDependency::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseCategoryDependency::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseCategoryDependency::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseCategoryDependency::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseCategoryDependency::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategoryDependency::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseCategoryDependency::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategoryDependency::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseCategoryDependency::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategoryDependency::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseCategoryDependency::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseCategoryDependency::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseCategoryDependency::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategoryDependency::HasClient()
{
  BOOL result;
  InvokeHelper(0x313e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategoryDependency::HasSupplier()
{
  BOOL result;
  InvokeHelper(0x313f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategoryDependency::GetClient()
{
  LPDISPATCH result;
  InvokeHelper(0x3140, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategoryDependency::GetSupplier()
{
  LPDISPATCH result;
  InvokeHelper(0x3141, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategoryDependency::GetContextCategory()
{
  LPDISPATCH result;
  InvokeHelper(0x3171, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategoryDependency::GetSupplierCategory()
{
  LPDISPATCH result;
  InvokeHelper(0x3172, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseCategoryDependency::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategoryDependency::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseInheritRelation properties

CString IRoseInheritRelation::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseInheritRelation::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseInheritRelation::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseInheritRelation::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseInheritRelation::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseInheritRelation::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseInheritRelation::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInheritRelation::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseInheritRelation::GetSupplierName()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseInheritRelation::SetSupplierName(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

BOOL IRoseInheritRelation::GetVirtual()
{
  BOOL result;
  GetProperty(0x331, VT_BOOL, (void*)&result);
  return result;
}

void IRoseInheritRelation::SetVirtual(BOOL propVal)
{
  SetProperty(0x331, VT_BOOL, propVal);
}

BOOL IRoseInheritRelation::GetFriendshipRequired()
{
  BOOL result;
  GetProperty(0x332, VT_BOOL, (void*)&result);
  return result;
}

void IRoseInheritRelation::SetFriendshipRequired(BOOL propVal)
{
  SetProperty(0x332, VT_BOOL, propVal);
}

LPDISPATCH IRoseInheritRelation::GetExportControl()
{
  LPDISPATCH result;
  GetProperty(0x333, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInheritRelation::SetExportControl(LPDISPATCH propVal)
{
  SetProperty(0x333, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseInheritRelation::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInheritRelation::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseInheritRelation::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseInheritRelation::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseInheritRelation::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseInheritRelation::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseInheritRelation operations

CString IRoseInheritRelation::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseInheritRelation::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseInheritRelation::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseInheritRelation::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseInheritRelation::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseInheritRelation::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseInheritRelation::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseInheritRelation::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseInheritRelation::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseInheritRelation::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseInheritRelation::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseInheritRelation::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseInheritRelation::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseInheritRelation::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseInheritRelation::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseInheritRelation::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseInheritRelation::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseInheritRelation::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseInheritRelation::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseInheritRelation::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseInheritRelation::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseInheritRelation::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseInheritRelation::GetContextClass()
{
  LPDISPATCH result;
  InvokeHelper(0x3138, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseInheritRelation::GetSupplierClass()
{
  LPDISPATCH result;
  InvokeHelper(0x3139, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseInheritRelation::HasClient()
{
  BOOL result;
  InvokeHelper(0x313e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseInheritRelation::HasSupplier()
{
  BOOL result;
  InvokeHelper(0x313f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseInheritRelation::GetClient()
{
  LPDISPATCH result;
  InvokeHelper(0x3140, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseInheritRelation::GetSupplier()
{
  LPDISPATCH result;
  InvokeHelper(0x3141, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseInheritRelation::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseInheritRelation::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseView_Font properties

short IRoseView_Font::GetSize()
{
  short result;
  GetProperty(0x30d1, VT_I2, (void*)&result);
  return result;
}

void IRoseView_Font::SetSize(short propVal)
{
  SetProperty(0x30d1, VT_I2, propVal);
}

CString IRoseView_Font::GetFaceName()
{
  CString result;
  GetProperty(0x30d2, VT_BSTR, (void*)&result);
  return result;
}

void IRoseView_Font::SetFaceName(LPCTSTR propVal)
{
  SetProperty(0x30d2, VT_BSTR, propVal);
}

short IRoseView_Font::GetBlue()
{
  short result;
  GetProperty(0x30d3, VT_I2, (void*)&result);
  return result;
}

void IRoseView_Font::SetBlue(short propVal)
{
  SetProperty(0x30d3, VT_I2, propVal);
}

short IRoseView_Font::GetGreen()
{
  short result;
  GetProperty(0x30d4, VT_I2, (void*)&result);
  return result;
}

void IRoseView_Font::SetGreen(short propVal)
{
  SetProperty(0x30d4, VT_I2, propVal);
}

short IRoseView_Font::GetRed()
{
  short result;
  GetProperty(0x30d5, VT_I2, (void*)&result);
  return result;
}

void IRoseView_Font::SetRed(short propVal)
{
  SetProperty(0x30d5, VT_I2, propVal);
}

BOOL IRoseView_Font::GetBold()
{
  BOOL result;
  GetProperty(0x30e9, VT_BOOL, (void*)&result);
  return result;
}

void IRoseView_Font::SetBold(BOOL propVal)
{
  SetProperty(0x30e9, VT_BOOL, propVal);
}

BOOL IRoseView_Font::GetItalic()
{
  BOOL result;
  GetProperty(0x3117, VT_BOOL, (void*)&result);
  return result;
}

void IRoseView_Font::SetItalic(BOOL propVal)
{
  SetProperty(0x3117, VT_BOOL, propVal);
}

BOOL IRoseView_Font::GetUnderline()
{
  BOOL result;
  GetProperty(0x3118, VT_BOOL, (void*)&result);
  return result;
}

void IRoseView_Font::SetUnderline(BOOL propVal)
{
  SetProperty(0x3118, VT_BOOL, propVal);
}

BOOL IRoseView_Font::GetStrikeThrough()
{
  BOOL result;
  GetProperty(0x3119, VT_BOOL, (void*)&result);
  return result;
}

void IRoseView_Font::SetStrikeThrough(BOOL propVal)
{
  SetProperty(0x3119, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseView_Font operations

CString IRoseView_Font::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseView_Font::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseStateMachine properties

CString IRoseStateMachine::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseStateMachine::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

LPDISPATCH IRoseStateMachine::GetDiagram()
{
  LPDISPATCH result;
  GetProperty(0xca, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateMachine::SetDiagram(LPDISPATCH propVal)
{
  SetProperty(0xca, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateMachine::GetParentClass()
{
  LPDISPATCH result;
  GetProperty(0xd7, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateMachine::SetParentClass(LPDISPATCH propVal)
{
  SetProperty(0xd7, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateMachine::GetStates()
{
  LPDISPATCH result;
  GetProperty(0xde, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateMachine::SetStates(LPDISPATCH propVal)
{
  SetProperty(0xde, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateMachine::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateMachine::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateMachine::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateMachine::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseStateMachine operations

CString IRoseStateMachine::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseStateMachine::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseStateMachine::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseStateMachine::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseStateMachine::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseStateMachine::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseStateMachine::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseStateMachine::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateMachine::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseStateMachine::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseStateMachine::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseStateMachine::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseStateMachine::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseStateMachine::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateMachine::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseStateMachine::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseStateMachine::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseStateMachine::AddState(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

BOOL IRoseStateMachine::DeleteState(LPDISPATCH State)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    State);
  return result;
}

BOOL IRoseStateMachine::RelocateState(LPDISPATCH State)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xdb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    State);
  return result;
}

LPDISPATCH IRoseStateMachine::GetAllStates()
{
  LPDISPATCH result;
  InvokeHelper(0xdc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateMachine::GetAllTransitions()
{
  LPDISPATCH result;
  InvokeHelper(0xdd, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseStateMachine::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateMachine::GetTransitions()
{
  LPDISPATCH result;
  InvokeHelper(0x3179, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseStateMachine::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseStateMachine::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseModule properties

CString IRoseModule::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModule::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseModule::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModule::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseModule::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModule::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseModule::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModule::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseModule::GetPath()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModule::SetPath(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

LPDISPATCH IRoseModule::GetParentSubsystem()
{
  LPDISPATCH result;
  GetProperty(0x19d, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModule::SetParentSubsystem(LPDISPATCH propVal)
{
  SetProperty(0x19d, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModule::GetType()
{
  LPDISPATCH result;
  GetProperty(0x19e, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModule::SetType(LPDISPATCH propVal)
{
  SetProperty(0x19e, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModule::GetPart()
{
  LPDISPATCH result;
  GetProperty(0x19f, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModule::SetPart(LPDISPATCH propVal)
{
  SetProperty(0x19f, VT_DISPATCH, propVal);
}

CString IRoseModule::GetDeclarations()
{
  CString result;
  GetProperty(0x1a0, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModule::SetDeclarations(LPCTSTR propVal)
{
  SetProperty(0x1a0, VT_BSTR, propVal);
}

LPDISPATCH IRoseModule::GetOtherPart()
{
  LPDISPATCH result;
  GetProperty(0x1a1, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModule::SetOtherPart(LPDISPATCH propVal)
{
  SetProperty(0x1a1, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModule::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModule::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModule::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModule::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseModule::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModule::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

CString IRoseModule::GetAssignedLanguage()
{
  CString result;
  GetProperty(0x3116, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModule::SetAssignedLanguage(LPCTSTR propVal)
{
  SetProperty(0x3116, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseModule operations

CString IRoseModule::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseModule::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseModule::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseModule::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseModule::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseModule::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModule::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModule::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModule::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseModule::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseModule::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModule::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseModule::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseModule::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModule::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseModule::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseModule::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseModule::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModule::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseModule::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseModule::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModule::GetAssignedClasses()
{
  LPDISPATCH result;
  InvokeHelper(0x1a2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModule::AddVisibilityRelationship(LPDISPATCH theModule)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theModule);
  return result;
}

BOOL IRoseModule::DeleteVisibilityRelationship(LPDISPATCH theVisibilityRelationship)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theVisibilityRelationship);
  return result;
}

LPDISPATCH IRoseModule::GetDependencies()
{
  LPDISPATCH result;
  InvokeHelper(0x1a5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModule::GetAllDependencies()
{
  LPDISPATCH result;
  InvokeHelper(0x1a6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModule::GetSubsystemDependencies(LPDISPATCH theSubsystem)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theSubsystem);
  return result;
}

LPDISPATCH IRoseModule::AddSubsystemVisibilityRelation(LPDISPATCH theSubsystem)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1ac, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theSubsystem);
  return result;
}

CString IRoseModule::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModule::AddRealizeRel(LPCTSTR theRelationName, LPCTSTR theInterfaceName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x3145, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theRelationName, theInterfaceName);
  return result;
}

BOOL IRoseModule::DeleteRealizeRel(LPDISPATCH theRealizeRel)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x3146, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theRealizeRel);
  return result;
}

LPDISPATCH IRoseModule::GetRealizeRelations()
{
  LPDISPATCH result;
  InvokeHelper(0x3147, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseModule::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseModule::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseUseCase properties

CString IRoseUseCase::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseUseCase::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseUseCase::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseUseCase::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseUseCase::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseUseCase::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseUseCase::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseUseCase::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

BOOL IRoseUseCase::GetAbstract()
{
  BOOL result;
  GetProperty(0x19c, VT_BOOL, (void*)&result);
  return result;
}

void IRoseUseCase::SetAbstract(BOOL propVal)
{
  SetProperty(0x19c, VT_BOOL, propVal);
}

LPDISPATCH IRoseUseCase::GetParentCategory()
{
  LPDISPATCH result;
  GetProperty(0x19d, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseUseCase::SetParentCategory(LPDISPATCH propVal)
{
  SetProperty(0x19d, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseUseCase::GetClassDiagrams()
{
  LPDISPATCH result;
  GetProperty(0x19e, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseUseCase::SetClassDiagrams(LPDISPATCH propVal)
{
  SetProperty(0x19e, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseUseCase::GetScenarioDiagrams()
{
  LPDISPATCH result;
  GetProperty(0x19f, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseUseCase::SetScenarioDiagrams(LPDISPATCH propVal)
{
  SetProperty(0x19f, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseUseCase::GetStateMachine()
{
  LPDISPATCH result;
  GetProperty(0x1a4, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseUseCase::SetStateMachine(LPDISPATCH propVal)
{
  SetProperty(0x1a4, VT_DISPATCH, propVal);
}

CString IRoseUseCase::GetRank()
{
  CString result;
  GetProperty(0x1ab, VT_BSTR, (void*)&result);
  return result;
}

void IRoseUseCase::SetRank(LPCTSTR propVal)
{
  SetProperty(0x1ab, VT_BSTR, propVal);
}

LPDISPATCH IRoseUseCase::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseUseCase::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseUseCase::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseUseCase::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseUseCase::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseUseCase::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseUseCase operations

CString IRoseUseCase::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseUseCase::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseUseCase::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseUseCase::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseUseCase::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseUseCase::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseUseCase::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseUseCase::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseUseCase::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseUseCase::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseUseCase::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseUseCase::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseUseCase::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseUseCase::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseUseCase::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseUseCase::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseUseCase::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseUseCase::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseUseCase::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseUseCase::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseUseCase::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseUseCase::AddClassDiagram(LPCTSTR szName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x1a0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName);
  return result;
}

BOOL IRoseUseCase::DeleteClassDiagram(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseUseCase::DeleteScenarioDiagram(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

LPDISPATCH IRoseUseCase::AddScenarioDiagram(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0x1a3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

LPDISPATCH IRoseUseCase::AddInheritRel(LPCTSTR szName, LPCTSTR szParentName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1a5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, szParentName);
  return result;
}

BOOL IRoseUseCase::DeleteInheritRel(LPDISPATCH pIDispatchRelation)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatchRelation);
  return result;
}

LPDISPATCH IRoseUseCase::GetAssociations()
{
  LPDISPATCH result;
  InvokeHelper(0x1aa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseUseCase::AddAssociation(LPCTSTR szSupplierRoleName, LPCTSTR szSupplierRoleType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1ae, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szSupplierRoleName, szSupplierRoleType);
  return result;
}

BOOL IRoseUseCase::DeleteAssociation(LPDISPATCH pDispatchAssociation)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1af, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pDispatchAssociation);
  return result;
}

LPDISPATCH IRoseUseCase::GetSuperUseCases()
{
  LPDISPATCH result;
  InvokeHelper(0x1b0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseUseCase::GetInheritRelations()
{
  LPDISPATCH result;
  InvokeHelper(0x1b1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseUseCase::GetRoles()
{
  LPDISPATCH result;
  InvokeHelper(0x1b2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseUseCase::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseUseCase::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseUseCase::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseItemCollection properties

short IRoseItemCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseItemCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseItemCollection operations

LPDISPATCH IRoseItemCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseItemCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseItemCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseItemCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseItemCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseItemCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseItemCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseItemCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseItemCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseItemCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseItemCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseNoteViewCollection properties

short IRoseNoteViewCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseNoteViewCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseNoteViewCollection operations

LPDISPATCH IRoseNoteViewCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseNoteViewCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseNoteViewCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseNoteViewCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseNoteViewCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseNoteViewCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseNoteViewCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseNoteViewCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseNoteViewCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseNoteViewCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseNoteViewCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseInheritRelationCollection properties

short IRoseInheritRelationCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseInheritRelationCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseInheritRelationCollection operations

LPDISPATCH IRoseInheritRelationCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseInheritRelationCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseInheritRelationCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseInheritRelationCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseInheritRelationCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseInheritRelationCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseInheritRelationCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseInheritRelationCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseInheritRelationCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseInheritRelationCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseInheritRelationCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseDeploymentDiagramCollection properties

short IRoseDeploymentDiagramCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseDeploymentDiagramCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseDeploymentDiagramCollection operations

LPDISPATCH IRoseDeploymentDiagramCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseDeploymentDiagramCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseDeploymentDiagramCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseDeploymentDiagramCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseDeploymentDiagramCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseDeploymentDiagramCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseDeploymentDiagramCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseDeploymentDiagramCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseDeploymentDiagramCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseDeploymentDiagramCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseDeploymentDiagramCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseStringCollection properties

short IRoseStringCollection::GetCount()
{
  short result;
  GetProperty(0x32, VT_I2, (void*)&result);
  return result;
}

void IRoseStringCollection::SetCount(short propVal)
{
  SetProperty(0x32, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseStringCollection operations

CString IRoseStringCollection::GetAt(short id)
{
  CString result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0x33, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    id);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseStateViewCollection properties

short IRoseStateViewCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseStateViewCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseStateViewCollection operations

LPDISPATCH IRoseStateViewCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseStateViewCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseStateViewCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseStateViewCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseStateViewCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseStateViewCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseStateViewCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseStateViewCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseStateViewCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseStateViewCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseStateViewCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseProcessCollection properties

short IRoseProcessCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseProcessCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseProcessCollection operations

LPDISPATCH IRoseProcessCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseProcessCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseProcessCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseProcessCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseProcessCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseProcessCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseProcessCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseProcessCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseProcessCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseProcessCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseProcessCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseAssociationCollection properties

short IRoseAssociationCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseAssociationCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseAssociationCollection operations

LPDISPATCH IRoseAssociationCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseAssociationCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseAssociationCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseAssociationCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseAssociationCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseAssociationCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseAssociationCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseAssociationCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseAssociationCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseAssociationCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseAssociationCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseModuleDiagramCollection properties

short IRoseModuleDiagramCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseModuleDiagramCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseModuleDiagramCollection operations

LPDISPATCH IRoseModuleDiagramCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseModuleDiagramCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseModuleDiagramCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseModuleDiagramCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseModuleDiagramCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseModuleDiagramCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseModuleDiagramCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseModuleDiagramCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseModuleDiagramCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseModuleDiagramCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseModuleDiagramCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseDiagram properties

CString IRoseDiagram::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDiagram::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

LPDISPATCH IRoseDiagram::GetItemViews()
{
  LPDISPATCH result;
  GetProperty(0xca, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDiagram::SetItemViews(LPDISPATCH propVal)
{
  SetProperty(0xca, VT_DISPATCH, propVal);
}

BOOL IRoseDiagram::GetVisible()
{
  BOOL result;
  GetProperty(0xcb, VT_BOOL, (void*)&result);
  return result;
}

void IRoseDiagram::SetVisible(BOOL propVal)
{
  SetProperty(0xcb, VT_BOOL, propVal);
}

LPDISPATCH IRoseDiagram::GetItems()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDiagram::SetItems(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseDiagram::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDiagram::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseDiagram::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDiagram::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseDiagram::GetDocumentation()
{
  CString result;
  GetProperty(0x3170, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDiagram::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0x3170, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseDiagram operations

CString IRoseDiagram::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseDiagram::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseDiagram::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseDiagram::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseDiagram::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseDiagram::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseDiagram::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseDiagram::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDiagram::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseDiagram::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseDiagram::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseDiagram::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseDiagram::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseDiagram::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDiagram::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseDiagram::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseDiagram::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseDiagram::Layout()
{
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseDiagram::Invalidate()
{
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseDiagram::Update()
{
  InvokeHelper(0xce, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseDiagram::GetViewFrom(LPDISPATCH theItem)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theItem);
  return result;
}

BOOL IRoseDiagram::IsActive()
{
  BOOL result;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseDiagram::Exists(LPDISPATCH theItem)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theItem);
  return result;
}

void IRoseDiagram::Activate()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseDiagram::Render(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

LPDISPATCH IRoseDiagram::AddNoteView(LPCTSTR szNoteText, short nType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szNoteText, nType);
  return result;
}

BOOL IRoseDiagram::RemoveNoteView(LPDISPATCH pIDispNoteView)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xdb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispNoteView);
  return result;
}

LPDISPATCH IRoseDiagram::GetNoteViews()
{
  LPDISPATCH result;
  InvokeHelper(0xdc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

void IRoseDiagram::RenderEnhanced(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xdd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

void IRoseDiagram::RenderToClipboard()
{
  InvokeHelper(0xde, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseDiagram::RenderEnhancedToClipboard()
{
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseDiagram::GetSelectedItems()
{
  LPDISPATCH result;
  InvokeHelper(0x30ed, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseDiagram::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseDiagram::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseDiagram::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseRichTypeValuesCollection properties

short IRoseRichTypeValuesCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseRichTypeValuesCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseRichTypeValuesCollection operations

CString IRoseRichTypeValuesCollection::GetAt(short id)
{
  CString result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    id);
  return result;
}

CString IRoseRichTypeValuesCollection::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseRichTypeValuesCollection::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystemView properties

CString IRoseSubsystemView::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

short IRoseSubsystemView::GetYPosition()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetYPosition(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

short IRoseSubsystemView::GetXPosition()
{
  short result;
  GetProperty(0xcb, VT_I2, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetXPosition(short propVal)
{
  SetProperty(0xcb, VT_I2, propVal);
}

short IRoseSubsystemView::GetHeight()
{
  short result;
  GetProperty(0xcc, VT_I2, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetHeight(short propVal)
{
  SetProperty(0xcc, VT_I2, propVal);
}

short IRoseSubsystemView::GetWidth()
{
  short result;
  GetProperty(0xcd, VT_I2, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetWidth(short propVal)
{
  SetProperty(0xcd, VT_I2, propVal);
}

LPDISPATCH IRoseSubsystemView::GetFillColor()
{
  LPDISPATCH result;
  GetProperty(0xce, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetFillColor(LPDISPATCH propVal)
{
  SetProperty(0xce, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystemView::GetLineColor()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetLineColor(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystemView::GetSubViews()
{
  LPDISPATCH result;
  GetProperty(0xdb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetSubViews(LPDISPATCH propVal)
{
  SetProperty(0xdb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystemView::GetParentView()
{
  LPDISPATCH result;
  GetProperty(0xdc, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetParentView(LPDISPATCH propVal)
{
  SetProperty(0xdc, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystemView::GetItem()
{
  LPDISPATCH result;
  GetProperty(0xdd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetItem(LPDISPATCH propVal)
{
  SetProperty(0xdd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystemView::GetParentDiagram()
{
  LPDISPATCH result;
  GetProperty(0xe0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetParentDiagram(LPDISPATCH propVal)
{
  SetProperty(0xe0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystemView::GetFont()
{
  LPDISPATCH result;
  GetProperty(0x30cd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetFont(LPDISPATCH propVal)
{
  SetProperty(0x30cd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystemView::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystemView::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystemView::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystemView operations

CString IRoseSubsystemView::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseSubsystemView::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseSubsystemView::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseSubsystemView::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseSubsystemView::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseSubsystemView::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseSubsystemView::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseSubsystemView::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystemView::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseSubsystemView::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseSubsystemView::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseSubsystemView::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseSubsystemView::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseSubsystemView::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystemView::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseSubsystemView::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystemView::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseSubsystemView::Invalidate()
{
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL IRoseSubsystemView::SupportsFillColor()
{
  BOOL result;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystemView::SupportsLineColor()
{
  BOOL result;
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystemView::IsSelected()
{
  BOOL result;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

void IRoseSubsystemView::SetSelected(BOOL bSelect)
{
  static BYTE parms[] =
    VTS_BOOL;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     bSelect);
}

BOOL IRoseSubsystemView::PointInView(short x, short y)
{
  BOOL result;
  static BYTE parms[] =
    VTS_I2 VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    x, y);
  return result;
}

short IRoseSubsystemView::GetDefaultWidth()
{
  short result;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseSubsystemView::GetDefaultHeight()
{
  short result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseSubsystemView::GetMinWidth()
{
  short result;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseSubsystemView::GetMinHeight()
{
  short result;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystemView::HasItem()
{
  BOOL result;
  InvokeHelper(0xde, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystemView::HasParentView()
{
  BOOL result;
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseSubsystemView::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystemView::GetSubsystem()
{
  LPDISPATCH result;
  InvokeHelper(0x3130, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseSubsystemView::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystemView::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseComponentView properties

CString IRoseComponentView::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseComponentView::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

short IRoseComponentView::GetYPosition()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseComponentView::SetYPosition(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

short IRoseComponentView::GetXPosition()
{
  short result;
  GetProperty(0xcb, VT_I2, (void*)&result);
  return result;
}

void IRoseComponentView::SetXPosition(short propVal)
{
  SetProperty(0xcb, VT_I2, propVal);
}

short IRoseComponentView::GetHeight()
{
  short result;
  GetProperty(0xcc, VT_I2, (void*)&result);
  return result;
}

void IRoseComponentView::SetHeight(short propVal)
{
  SetProperty(0xcc, VT_I2, propVal);
}

short IRoseComponentView::GetWidth()
{
  short result;
  GetProperty(0xcd, VT_I2, (void*)&result);
  return result;
}

void IRoseComponentView::SetWidth(short propVal)
{
  SetProperty(0xcd, VT_I2, propVal);
}

LPDISPATCH IRoseComponentView::GetFillColor()
{
  LPDISPATCH result;
  GetProperty(0xce, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseComponentView::SetFillColor(LPDISPATCH propVal)
{
  SetProperty(0xce, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseComponentView::GetLineColor()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseComponentView::SetLineColor(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseComponentView::GetSubViews()
{
  LPDISPATCH result;
  GetProperty(0xdb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseComponentView::SetSubViews(LPDISPATCH propVal)
{
  SetProperty(0xdb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseComponentView::GetParentView()
{
  LPDISPATCH result;
  GetProperty(0xdc, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseComponentView::SetParentView(LPDISPATCH propVal)
{
  SetProperty(0xdc, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseComponentView::GetItem()
{
  LPDISPATCH result;
  GetProperty(0xdd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseComponentView::SetItem(LPDISPATCH propVal)
{
  SetProperty(0xdd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseComponentView::GetParentDiagram()
{
  LPDISPATCH result;
  GetProperty(0xe0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseComponentView::SetParentDiagram(LPDISPATCH propVal)
{
  SetProperty(0xe0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseComponentView::GetFont()
{
  LPDISPATCH result;
  GetProperty(0x30cd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseComponentView::SetFont(LPDISPATCH propVal)
{
  SetProperty(0x30cd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseComponentView::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseComponentView::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseComponentView::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseComponentView::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseComponentView operations

CString IRoseComponentView::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseComponentView::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseComponentView::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseComponentView::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseComponentView::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseComponentView::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseComponentView::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseComponentView::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseComponentView::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseComponentView::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseComponentView::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseComponentView::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseComponentView::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseComponentView::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseComponentView::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseComponentView::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseComponentView::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseComponentView::Invalidate()
{
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL IRoseComponentView::SupportsFillColor()
{
  BOOL result;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseComponentView::SupportsLineColor()
{
  BOOL result;
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseComponentView::IsSelected()
{
  BOOL result;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

void IRoseComponentView::SetSelected(BOOL bSelect)
{
  static BYTE parms[] =
    VTS_BOOL;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     bSelect);
}

BOOL IRoseComponentView::PointInView(short x, short y)
{
  BOOL result;
  static BYTE parms[] =
    VTS_I2 VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    x, y);
  return result;
}

short IRoseComponentView::GetDefaultWidth()
{
  short result;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseComponentView::GetDefaultHeight()
{
  short result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseComponentView::GetMinWidth()
{
  short result;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseComponentView::GetMinHeight()
{
  short result;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

BOOL IRoseComponentView::HasItem()
{
  BOOL result;
  InvokeHelper(0xde, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseComponentView::HasParentView()
{
  BOOL result;
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseComponentView::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseComponentView::GetComponent()
{
  LPDISPATCH result;
  InvokeHelper(0x3129, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseComponentView::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseComponentView::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseAttribute properties

CString IRoseAttribute::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAttribute::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseAttribute::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAttribute::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseAttribute::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAttribute::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseAttribute::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAttribute::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseAttribute::GetInitValue()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAttribute::SetInitValue(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

CString IRoseAttribute::GetType()
{
  CString result;
  GetProperty(0x19d, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAttribute::SetType(LPCTSTR propVal)
{
  SetProperty(0x19d, VT_BSTR, propVal);
}

BOOL IRoseAttribute::GetStatic()
{
  BOOL result;
  GetProperty(0x19e, VT_BOOL, (void*)&result);
  return result;
}

void IRoseAttribute::SetStatic(BOOL propVal)
{
  SetProperty(0x19e, VT_BOOL, propVal);
}

LPDISPATCH IRoseAttribute::GetExportControl()
{
  LPDISPATCH result;
  GetProperty(0x19f, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAttribute::SetExportControl(LPDISPATCH propVal)
{
  SetProperty(0x19f, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseAttribute::GetContainment()
{
  LPDISPATCH result;
  GetProperty(0x1a0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAttribute::SetContainment(LPDISPATCH propVal)
{
  SetProperty(0x1a0, VT_DISPATCH, propVal);
}

BOOL IRoseAttribute::GetDerived()
{
  BOOL result;
  GetProperty(0x1a1, VT_BOOL, (void*)&result);
  return result;
}

void IRoseAttribute::SetDerived(BOOL propVal)
{
  SetProperty(0x1a1, VT_BOOL, propVal);
}

LPDISPATCH IRoseAttribute::GetParentClass()
{
  LPDISPATCH result;
  GetProperty(0x1b2, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAttribute::SetParentClass(LPDISPATCH propVal)
{
  SetProperty(0x1b2, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseAttribute::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAttribute::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseAttribute::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAttribute::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseAttribute::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAttribute::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseAttribute operations

CString IRoseAttribute::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseAttribute::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseAttribute::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseAttribute::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseAttribute::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseAttribute::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseAttribute::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseAttribute::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseAttribute::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseAttribute::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseAttribute::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseAttribute::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseAttribute::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseAttribute::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseAttribute::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseAttribute::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseAttribute::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseAttribute::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseAttribute::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseAttribute::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseAttribute::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseAttribute::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseAttribute::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseAttribute::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseClassDiagram properties

CString IRoseClassDiagram::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassDiagram::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

LPDISPATCH IRoseClassDiagram::GetItemViews()
{
  LPDISPATCH result;
  GetProperty(0xca, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassDiagram::SetItemViews(LPDISPATCH propVal)
{
  SetProperty(0xca, VT_DISPATCH, propVal);
}

BOOL IRoseClassDiagram::GetVisible()
{
  BOOL result;
  GetProperty(0xcb, VT_BOOL, (void*)&result);
  return result;
}

void IRoseClassDiagram::SetVisible(BOOL propVal)
{
  SetProperty(0xcb, VT_BOOL, propVal);
}

LPDISPATCH IRoseClassDiagram::GetItems()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassDiagram::SetItems(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassDiagram::GetParentCategory()
{
  LPDISPATCH result;
  GetProperty(0x19b, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassDiagram::SetParentCategory(LPDISPATCH propVal)
{
  SetProperty(0x19b, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassDiagram::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassDiagram::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassDiagram::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassDiagram::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseClassDiagram::GetDocumentation()
{
  CString result;
  GetProperty(0x3170, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassDiagram::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0x3170, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseClassDiagram operations

CString IRoseClassDiagram::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseClassDiagram::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseClassDiagram::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseClassDiagram::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseClassDiagram::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseClassDiagram::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassDiagram::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseClassDiagram::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseClassDiagram::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassDiagram::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseClassDiagram::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseClassDiagram::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassDiagram::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseClassDiagram::Layout()
{
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseClassDiagram::Invalidate()
{
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseClassDiagram::Update()
{
  InvokeHelper(0xce, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseClassDiagram::GetViewFrom(LPDISPATCH theItem)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theItem);
  return result;
}

BOOL IRoseClassDiagram::IsActive()
{
  BOOL result;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassDiagram::Exists(LPDISPATCH theItem)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theItem);
  return result;
}

void IRoseClassDiagram::Activate()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseClassDiagram::Render(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

LPDISPATCH IRoseClassDiagram::AddNoteView(LPCTSTR szNoteText, short nType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szNoteText, nType);
  return result;
}

BOOL IRoseClassDiagram::RemoveNoteView(LPDISPATCH pIDispNoteView)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xdb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispNoteView);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetNoteViews()
{
  LPDISPATCH result;
  InvokeHelper(0xdc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

void IRoseClassDiagram::RenderEnhanced(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xdd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

void IRoseClassDiagram::RenderToClipboard()
{
  InvokeHelper(0xde, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseClassDiagram::RenderEnhancedToClipboard()
{
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL IRoseClassDiagram::AddClass(LPDISPATCH theClass)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x19c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClass);
  return result;
}

BOOL IRoseClassDiagram::AddCategory(LPDISPATCH theCat)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x19d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theCat);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetSelectedCategories()
{
  LPDISPATCH result;
  InvokeHelper(0x19e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetSelectedClasses()
{
  LPDISPATCH result;
  InvokeHelper(0x19f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetClasses()
{
  LPDISPATCH result;
  InvokeHelper(0x1a0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetCategories()
{
  LPDISPATCH result;
  InvokeHelper(0x1a1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassDiagram::AddAssociation(LPDISPATCH theAssociation)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theAssociation);
  return result;
}

BOOL IRoseClassDiagram::RemoveClass(LPDISPATCH theClass)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClass);
  return result;
}

BOOL IRoseClassDiagram::RemoveCategory(LPDISPATCH theCategory)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theCategory);
  return result;
}

BOOL IRoseClassDiagram::RemoveAssociation(LPDISPATCH theAssociation)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theAssociation);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetAssociations()
{
  LPDISPATCH result;
  InvokeHelper(0x1a6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassDiagram::AddUseCase(LPDISPATCH theUseCase)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theUseCase);
  return result;
}

BOOL IRoseClassDiagram::RemoveUseCase(LPDISPATCH theUseCase)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theUseCase);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetUseCases()
{
  LPDISPATCH result;
  InvokeHelper(0x1a9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassDiagram::IsUseCaseDiagram()
{
  BOOL result;
  InvokeHelper(0x1aa, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetClassView(LPDISPATCH theClass)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1ab, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theClass);
  return result;
}

LPDISPATCH IRoseClassDiagram::GetSelectedItems()
{
  LPDISPATCH result;
  InvokeHelper(0x30ed, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseClassDiagram::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseClassDiagram::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassDiagram::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseNoteView properties

CString IRoseNoteView::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseNoteView::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

short IRoseNoteView::GetYPosition()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseNoteView::SetYPosition(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

short IRoseNoteView::GetXPosition()
{
  short result;
  GetProperty(0xcb, VT_I2, (void*)&result);
  return result;
}

void IRoseNoteView::SetXPosition(short propVal)
{
  SetProperty(0xcb, VT_I2, propVal);
}

short IRoseNoteView::GetHeight()
{
  short result;
  GetProperty(0xcc, VT_I2, (void*)&result);
  return result;
}

void IRoseNoteView::SetHeight(short propVal)
{
  SetProperty(0xcc, VT_I2, propVal);
}

short IRoseNoteView::GetWidth()
{
  short result;
  GetProperty(0xcd, VT_I2, (void*)&result);
  return result;
}

void IRoseNoteView::SetWidth(short propVal)
{
  SetProperty(0xcd, VT_I2, propVal);
}

LPDISPATCH IRoseNoteView::GetFillColor()
{
  LPDISPATCH result;
  GetProperty(0xce, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseNoteView::SetFillColor(LPDISPATCH propVal)
{
  SetProperty(0xce, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseNoteView::GetLineColor()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseNoteView::SetLineColor(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseNoteView::GetSubViews()
{
  LPDISPATCH result;
  GetProperty(0xdb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseNoteView::SetSubViews(LPDISPATCH propVal)
{
  SetProperty(0xdb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseNoteView::GetParentView()
{
  LPDISPATCH result;
  GetProperty(0xdc, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseNoteView::SetParentView(LPDISPATCH propVal)
{
  SetProperty(0xdc, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseNoteView::GetItem()
{
  LPDISPATCH result;
  GetProperty(0xdd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseNoteView::SetItem(LPDISPATCH propVal)
{
  SetProperty(0xdd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseNoteView::GetParentDiagram()
{
  LPDISPATCH result;
  GetProperty(0xe0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseNoteView::SetParentDiagram(LPDISPATCH propVal)
{
  SetProperty(0xe0, VT_DISPATCH, propVal);
}

CString IRoseNoteView::GetText()
{
  CString result;
  GetProperty(0x1a7, VT_BSTR, (void*)&result);
  return result;
}

void IRoseNoteView::SetText(LPCTSTR propVal)
{
  SetProperty(0x1a7, VT_BSTR, propVal);
}

LPDISPATCH IRoseNoteView::GetFont()
{
  LPDISPATCH result;
  GetProperty(0x30cd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseNoteView::SetFont(LPDISPATCH propVal)
{
  SetProperty(0x30cd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseNoteView::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseNoteView::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseNoteView::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseNoteView::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseNoteView operations

CString IRoseNoteView::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseNoteView::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseNoteView::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseNoteView::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseNoteView::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseNoteView::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseNoteView::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseNoteView::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseNoteView::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseNoteView::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseNoteView::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseNoteView::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseNoteView::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseNoteView::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseNoteView::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseNoteView::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseNoteView::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseNoteView::Invalidate()
{
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL IRoseNoteView::SupportsFillColor()
{
  BOOL result;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseNoteView::SupportsLineColor()
{
  BOOL result;
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseNoteView::IsSelected()
{
  BOOL result;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

void IRoseNoteView::SetSelected(BOOL bSelect)
{
  static BYTE parms[] =
    VTS_BOOL;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     bSelect);
}

BOOL IRoseNoteView::PointInView(short x, short y)
{
  BOOL result;
  static BYTE parms[] =
    VTS_I2 VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    x, y);
  return result;
}

short IRoseNoteView::GetDefaultWidth()
{
  short result;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseNoteView::GetDefaultHeight()
{
  short result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseNoteView::GetMinWidth()
{
  short result;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseNoteView::GetMinHeight()
{
  short result;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

BOOL IRoseNoteView::HasItem()
{
  BOOL result;
  InvokeHelper(0xde, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseNoteView::HasParentView()
{
  BOOL result;
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

short IRoseNoteView::GetNoteViewType()
{
  short result;
  InvokeHelper(0x1a8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

CString IRoseNoteView::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseNoteView::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseNoteView::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRosePackage properties

CString IRosePackage::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRosePackage::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRosePackage::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRosePackage::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRosePackage::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRosePackage::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRosePackage::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRosePackage::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRosePackage::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRosePackage::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRosePackage::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRosePackage::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRosePackage::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRosePackage::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRosePackage operations

CString IRosePackage::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRosePackage::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRosePackage::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRosePackage::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRosePackage::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRosePackage::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRosePackage::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRosePackage::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRosePackage::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRosePackage::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRosePackage::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRosePackage::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRosePackage::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRosePackage::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRosePackage::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRosePackage::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRosePackage::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRosePackage::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRosePackage::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRosePackage::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::IsRootPackage()
{
  BOOL result;
  InvokeHelper(0x26d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::IsControlled()
{
  BOOL result;
  InvokeHelper(0x3091, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::Control(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x3092, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Path);
  return result;
}

BOOL IRosePackage::IsLoaded()
{
  BOOL result;
  InvokeHelper(0x3093, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::Load()
{
  BOOL result;
  InvokeHelper(0x3094, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::IsModifiable()
{
  BOOL result;
  InvokeHelper(0x3096, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::Unload()
{
  BOOL result;
  InvokeHelper(0x3097, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::Modifiable(BOOL Modifiable)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BOOL;
  InvokeHelper(0x3098, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Modifiable);
  return result;
}

CString IRosePackage::GetFileName()
{
  CString result;
  InvokeHelper(0x3099, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::Save()
{
  BOOL result;
  InvokeHelper(0x309a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::SaveAs(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x309b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Path);
  return result;
}

CString IRosePackage::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::IsModified()
{
  BOOL result;
  InvokeHelper(0x316e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::Uncontrol()
{
  BOOL result;
  InvokeHelper(0x316f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRosePackage::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRosePackage::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRosePathMap properties

/////////////////////////////////////////////////////////////////////////////
// IRosePathMap operations

BOOL IRosePathMap::DeleteEntry(LPCTSTR Symbol)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x32, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Symbol);
  return result;
}

CString IRosePathMap::GetActualPath(LPCTSTR VirtualPath)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x33, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    VirtualPath);
  return result;
}

CString IRosePathMap::GetVirtualPath(LPCTSTR ActualPath)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x34, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ActualPath);
  return result;
}

BOOL IRosePathMap::HasEntry(LPCTSTR Symbol)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Symbol);
  return result;
}

BOOL IRosePathMap::AddEntry(LPCTSTR Symbol, LPCTSTR Path, LPCTSTR Comment)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    Symbol, Path, Comment);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseModuleVisibilityRelationshipCollection properties

short IRoseModuleVisibilityRelationshipCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseModuleVisibilityRelationshipCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseModuleVisibilityRelationshipCollection operations

LPDISPATCH IRoseModuleVisibilityRelationshipCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseModuleVisibilityRelationshipCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseModuleVisibilityRelationshipCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseModuleVisibilityRelationshipCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseModuleVisibilityRelationshipCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseModuleVisibilityRelationshipCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseModuleVisibilityRelationshipCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseModuleVisibilityRelationshipCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseModuleVisibilityRelationshipCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseModuleVisibilityRelationshipCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseModuleVisibilityRelationshipCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseClassCollection properties

short IRoseClassCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseClassCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseClassCollection operations

LPDISPATCH IRoseClassCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseClassCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseClassCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseClassCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseClassCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseClassCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseClassCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseClassCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseClassCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseClassCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseClassCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseMessage properties

CString IRoseMessage::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseMessage::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseMessage::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseMessage::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseMessage::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseMessage::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseMessage::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseMessage::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseMessage::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseMessage::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseMessage::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseMessage::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseMessage::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseMessage::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

short IRoseMessage::GetSynchronization()
{
  short result;
  GetProperty(0x316c, VT_I2, (void*)&result);
  return result;
}

void IRoseMessage::SetSynchronization(short propVal)
{
  SetProperty(0x316c, VT_I2, propVal);
}

short IRoseMessage::GetFrequency()
{
  short result;
  GetProperty(0x316d, VT_I2, (void*)&result);
  return result;
}

void IRoseMessage::SetFrequency(short propVal)
{
  SetProperty(0x316d, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseMessage operations

CString IRoseMessage::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseMessage::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseMessage::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseMessage::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseMessage::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseMessage::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseMessage::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseMessage::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseMessage::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseMessage::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseMessage::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseMessage::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseMessage::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseMessage::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseMessage::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseMessage::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseMessage::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseMessage::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseMessage::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseMessage::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseMessage::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseMessage::GetSenderObject()
{
  LPDISPATCH result;
  InvokeHelper(0x19c, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseMessage::GetReceiverObject()
{
  LPDISPATCH result;
  InvokeHelper(0x19d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseMessage::IsMessageToSelf()
{
  BOOL result;
  InvokeHelper(0x19e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseMessage::IsOperation()
{
  BOOL result;
  InvokeHelper(0x19f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseMessage::GetOperation()
{
  LPDISPATCH result;
  InvokeHelper(0x1a0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseMessage::GetLink()
{
  LPDISPATCH result;
  InvokeHelper(0x1a1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseMessage::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseMessage::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseMessage::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseClassDependencyCollection properties

/////////////////////////////////////////////////////////////////////////////
// IRoseClassDependencyCollection operations


/////////////////////////////////////////////////////////////////////////////
// IRoseAssociation properties

CString IRoseAssociation::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAssociation::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseAssociation::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAssociation::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseAssociation::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAssociation::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseAssociation::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAssociation::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseAssociation::GetRoles()
{
  LPDISPATCH result;
  GetProperty(0x19c, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAssociation::SetRoles(LPDISPATCH propVal)
{
  SetProperty(0x19c, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseAssociation::GetRole1()
{
  LPDISPATCH result;
  GetProperty(0x19d, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAssociation::SetRole1(LPDISPATCH propVal)
{
  SetProperty(0x19d, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseAssociation::GetRole2()
{
  LPDISPATCH result;
  GetProperty(0x19e, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAssociation::SetRole2(LPDISPATCH propVal)
{
  SetProperty(0x19e, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseAssociation::GetLinkClass()
{
  LPDISPATCH result;
  GetProperty(0x19f, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAssociation::SetLinkClass(LPDISPATCH propVal)
{
  SetProperty(0x19f, VT_DISPATCH, propVal);
}

BOOL IRoseAssociation::GetDerived()
{
  BOOL result;
  GetProperty(0x1a3, VT_BOOL, (void*)&result);
  return result;
}

void IRoseAssociation::SetDerived(BOOL propVal)
{
  SetProperty(0x1a3, VT_BOOL, propVal);
}

LPDISPATCH IRoseAssociation::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAssociation::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseAssociation::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseAssociation::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseAssociation::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseAssociation::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseAssociation operations

CString IRoseAssociation::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseAssociation::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseAssociation::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseAssociation::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseAssociation::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseAssociation::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseAssociation::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseAssociation::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseAssociation::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseAssociation::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseAssociation::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseAssociation::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseAssociation::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseAssociation::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseAssociation::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseAssociation::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseAssociation::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseAssociation::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseAssociation::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szName, iType);
  return result;
}

BOOL IRoseAssociation::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispatch);
  return result;
}

BOOL IRoseAssociation::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseAssociation::GetCorrespondingRole(LPDISPATCH Class)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Class);
  return result;
}

LPDISPATCH IRoseAssociation::GetOtherRole(LPDISPATCH Class)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Class);
  return result;
}

void IRoseAssociation::SetLinkClassName(LPCTSTR theClassName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x1a2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theClassName);
}

CString IRoseAssociation::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseAssociation::NameIsDirectional()
{
  BOOL result;
  InvokeHelper(0x3166, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseAssociation::GetRoleForNameDirection()
{
  LPDISPATCH result;
  InvokeHelper(0x3167, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

void IRoseAssociation::SetRoleForNameDirection(LPDISPATCH theRole)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x3168, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theRole);
}

void IRoseAssociation::ClearRoleForNameDirection()
{
  InvokeHelper(0x3169, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString IRoseAssociation::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseAssociation::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseEventCollection properties

short IRoseEventCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseEventCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseEventCollection operations

LPDISPATCH IRoseEventCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseEventCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseEventCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseEventCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseEventCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseEventCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseEventCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseEventCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseEventCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseEventCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseEventCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseStateCollection properties

short IRoseStateCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseStateCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseStateCollection operations

LPDISPATCH IRoseStateCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseStateCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseStateCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseStateCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseStateCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseStateCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseStateCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseStateCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseStateCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseStateCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseStateCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseStateView properties

CString IRoseStateView::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseStateView::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

short IRoseStateView::GetYPosition()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseStateView::SetYPosition(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

short IRoseStateView::GetXPosition()
{
  short result;
  GetProperty(0xcb, VT_I2, (void*)&result);
  return result;
}

void IRoseStateView::SetXPosition(short propVal)
{
  SetProperty(0xcb, VT_I2, propVal);
}

short IRoseStateView::GetHeight()
{
  short result;
  GetProperty(0xcc, VT_I2, (void*)&result);
  return result;
}

void IRoseStateView::SetHeight(short propVal)
{
  SetProperty(0xcc, VT_I2, propVal);
}

short IRoseStateView::GetWidth()
{
  short result;
  GetProperty(0xcd, VT_I2, (void*)&result);
  return result;
}

void IRoseStateView::SetWidth(short propVal)
{
  SetProperty(0xcd, VT_I2, propVal);
}

LPDISPATCH IRoseStateView::GetFillColor()
{
  LPDISPATCH result;
  GetProperty(0xce, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateView::SetFillColor(LPDISPATCH propVal)
{
  SetProperty(0xce, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateView::GetLineColor()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateView::SetLineColor(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateView::GetSubViews()
{
  LPDISPATCH result;
  GetProperty(0xdb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateView::SetSubViews(LPDISPATCH propVal)
{
  SetProperty(0xdb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateView::GetParentView()
{
  LPDISPATCH result;
  GetProperty(0xdc, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateView::SetParentView(LPDISPATCH propVal)
{
  SetProperty(0xdc, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateView::GetItem()
{
  LPDISPATCH result;
  GetProperty(0xdd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateView::SetItem(LPDISPATCH propVal)
{
  SetProperty(0xdd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateView::GetParentDiagram()
{
  LPDISPATCH result;
  GetProperty(0xe0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateView::SetParentDiagram(LPDISPATCH propVal)
{
  SetProperty(0xe0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateView::GetFont()
{
  LPDISPATCH result;
  GetProperty(0x30cd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateView::SetFont(LPDISPATCH propVal)
{
  SetProperty(0x30cd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateView::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateView::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseStateView::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseStateView::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseStateView operations

CString IRoseStateView::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseStateView::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseStateView::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseStateView::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseStateView::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseStateView::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseStateView::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseStateView::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateView::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseStateView::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseStateView::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseStateView::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseStateView::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseStateView::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateView::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseStateView::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseStateView::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseStateView::Invalidate()
{
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL IRoseStateView::SupportsFillColor()
{
  BOOL result;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseStateView::SupportsLineColor()
{
  BOOL result;
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseStateView::IsSelected()
{
  BOOL result;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

void IRoseStateView::SetSelected(BOOL bSelect)
{
  static BYTE parms[] =
    VTS_BOOL;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     bSelect);
}

BOOL IRoseStateView::PointInView(short x, short y)
{
  BOOL result;
  static BYTE parms[] =
    VTS_I2 VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    x, y);
  return result;
}

short IRoseStateView::GetDefaultWidth()
{
  short result;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseStateView::GetDefaultHeight()
{
  short result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseStateView::GetMinWidth()
{
  short result;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseStateView::GetMinHeight()
{
  short result;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

BOOL IRoseStateView::HasItem()
{
  BOOL result;
  InvokeHelper(0xde, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseStateView::HasParentView()
{
  BOOL result;
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseStateView::GetState()
{
  LPDISPATCH result;
  InvokeHelper(0x19f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseStateView::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseStateView::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseStateView::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystemViewCollection properties

short IRoseSubsystemViewCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseSubsystemViewCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystemViewCollection operations

LPDISPATCH IRoseSubsystemViewCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Index);
  return result;
}

BOOL IRoseSubsystemViewCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pObject);
  return result;
}

short IRoseSubsystemViewCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    Name);
  return result;
}

short IRoseSubsystemViewCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] =
    VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    iCurID, Name);
  return result;
}

short IRoseSubsystemViewCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
    theObject);
  return result;
}

void IRoseSubsystemViewCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseSubsystemViewCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theCollection);
}

void IRoseSubsystemViewCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theObject);
}

void IRoseSubsystemViewCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseSubsystemViewCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    Name);
  return result;
}

LPDISPATCH IRoseSubsystemViewCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseModuleDiagram properties

CString IRoseModuleDiagram::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModuleDiagram::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

LPDISPATCH IRoseModuleDiagram::GetItemViews()
{
  LPDISPATCH result;
  GetProperty(0xca, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleDiagram::SetItemViews(LPDISPATCH propVal)
{
  SetProperty(0xca, VT_DISPATCH, propVal);
}

BOOL IRoseModuleDiagram::GetVisible()
{
  BOOL result;
  GetProperty(0xcb, VT_BOOL, (void*)&result);
  return result;
}

void IRoseModuleDiagram::SetVisible(BOOL propVal)
{
  SetProperty(0xcb, VT_BOOL, propVal);
}

LPDISPATCH IRoseModuleDiagram::GetItems()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleDiagram::SetItems(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModuleDiagram::GetParentSubsystem()
{
  LPDISPATCH result;
  GetProperty(0x19b, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleDiagram::SetParentSubsystem(LPDISPATCH propVal)
{
  SetProperty(0x19b, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModuleDiagram::GetComponentViews()
{
  LPDISPATCH result;
  GetProperty(0x1a6, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleDiagram::SetComponentViews(LPDISPATCH propVal)
{
  SetProperty(0x1a6, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModuleDiagram::GetSubsystemViews()
{
  LPDISPATCH result;
  GetProperty(0x1a7, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleDiagram::SetSubsystemViews(LPDISPATCH propVal)
{
  SetProperty(0x1a7, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModuleDiagram::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleDiagram::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseModuleDiagram::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseModuleDiagram::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseModuleDiagram::GetDocumentation()
{
  CString result;
  GetProperty(0x3170, VT_BSTR, (void*)&result);
  return result;
}

void IRoseModuleDiagram::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0x3170, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseModuleDiagram operations

CString IRoseModuleDiagram::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseModuleDiagram::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseModuleDiagram::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseModuleDiagram::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseModuleDiagram::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseModuleDiagram::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModuleDiagram::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModuleDiagram::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModuleDiagram::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseModuleDiagram::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseModuleDiagram::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseModuleDiagram::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseModuleDiagram::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseModuleDiagram::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModuleDiagram::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    ToolName);
  return result;
}

LPDISPATCH IRoseModuleDiagram::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseModuleDiagram::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

void IRoseModuleDiagram::Layout()
{
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseModuleDiagram::Invalidate()
{
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseModuleDiagram::Update()
{
  InvokeHelper(0xce, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseModuleDiagram::GetViewFrom(LPDISPATCH theItem)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theItem);
  return result;
}

BOOL IRoseModuleDiagram::IsActive()
{
  BOOL result;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseModuleDiagram::Exists(LPDISPATCH theItem)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theItem);
  return result;
}

void IRoseModuleDiagram::Activate()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseModuleDiagram::Render(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

LPDISPATCH IRoseModuleDiagram::AddNoteView(LPCTSTR szNoteText, short nType)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_I2;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    szNoteText, nType);
  return result;
}

BOOL IRoseModuleDiagram::RemoveNoteView(LPDISPATCH pIDispNoteView)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0xdb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    pIDispNoteView);
  return result;
}

LPDISPATCH IRoseModuleDiagram::GetNoteViews()
{
  LPDISPATCH result;
  InvokeHelper(0xdc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

void IRoseModuleDiagram::RenderEnhanced(LPCTSTR FileName)
{
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0xdd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     FileName);
}

void IRoseModuleDiagram::RenderToClipboard()
{
  InvokeHelper(0xde, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IRoseModuleDiagram::RenderEnhancedToClipboard()
{
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseModuleDiagram::GetModules()
{
  LPDISPATCH result;
  InvokeHelper(0x1a2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModuleDiagram::GetSubsystems()
{
  LPDISPATCH result;
  InvokeHelper(0x1a3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModuleDiagram::GetSelectedModules()
{
  LPDISPATCH result;
  InvokeHelper(0x1a4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModuleDiagram::GetSelectedSubsystems()
{
  LPDISPATCH result;
  InvokeHelper(0x1a5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseModuleDiagram::AddComponentView(LPDISPATCH aModule)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    aModule);
  return result;
}

BOOL IRoseModuleDiagram::RemoveComponentView(LPDISPATCH aComponentView)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    aComponentView);
  return result;
}

LPDISPATCH IRoseModuleDiagram::AddSubsystemView(LPDISPATCH aSubsystem)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1aa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    aSubsystem);
  return result;
}

BOOL IRoseModuleDiagram::RemoveSubsystemView(LPDISPATCH aSubsystemView)
{
  BOOL result;
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1ab, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    aSubsystemView);
  return result;
}

LPDISPATCH IRoseModuleDiagram::GetSelectedItems()
{
  LPDISPATCH result;
  InvokeHelper(0x30ed, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseModuleDiagram::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseModuleDiagram::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseModuleDiagram::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystem properties

CString IRoseSubsystem::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseSubsystem::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseSubsystem::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseSubsystem::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseSubsystem::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseSubsystem::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseSubsystem::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystem::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystem::GetModules()
{
  LPDISPATCH result;
  GetProperty(0x19c, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystem::SetModules(LPDISPATCH propVal)
{
  SetProperty(0x19c, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystem::GetSubsystems()
{
  LPDISPATCH result;
  GetProperty(0x19d, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystem::SetSubsystems(LPDISPATCH propVal)
{
  SetProperty(0x19d, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystem::GetParentSubsystem()
{
  LPDISPATCH result;
  GetProperty(0x19e, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystem::SetParentSubsystem(LPDISPATCH propVal)
{
  SetProperty(0x19e, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystem::GetModuleDiagrams()
{
  LPDISPATCH result;
  GetProperty(0x19f, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystem::SetModuleDiagrams(LPDISPATCH propVal)
{
  SetProperty(0x19f, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystem::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystem::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseSubsystem::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseSubsystem::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseSubsystem::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseSubsystem::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystem operations

CString IRoseSubsystem::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseSubsystem::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    ToolName);
  return result;
}

BOOL IRoseSubsystem::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseSubsystem::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseSubsystem::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

CString IRoseSubsystem::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseSubsystem::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseSubsystem::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystem::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName);
  return result;
}

BOOL IRoseSubsystem::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseSubsystem::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseSubsystem::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
    theToolName, thePropName);
  return result;
}

BOOL IRoseSubsystem::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseSubsystem::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystem::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ToolName);
  return result;
}

LPDISPATCH IRoseSubsystem::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolName, SetName);
  return result;
}

LPDISPATCH IRoseSubsystem::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystem::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, szName, iType);
  return result;
}

BOOL IRoseSubsystem::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pIDispatch);
  return result;
}

BOOL IRoseSubsystem::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystem::AddModule(LPCTSTR theName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x1a0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theName);
  return result;
}

LPDISPATCH IRoseSubsystem::AddModuleDiagram(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x1a2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name);
  return result;
}

LPDISPATCH IRoseSubsystem::AddSubsystem(LPCTSTR theName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x1a3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theName);
  return result;
}

void IRoseSubsystem::RelocateModule(LPDISPATCH theModule)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theModule);
}

void IRoseSubsystem::RelocateSubsystem(LPDISPATCH theSubsystem)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theSubsystem);
}

void IRoseSubsystem::RelocateModuleDiagram(LPDISPATCH theModDiagram)
{
  static BYTE parms[] =
    VTS_DISPATCH;
  InvokeHelper(0x1a6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
     theModDiagram);
}

LPDISPATCH IRoseSubsystem::GetAllModules()
{
  LPDISPATCH result;
  InvokeHelper(0x1a7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystem::GetAllSubsystems()
{
  LPDISPATCH result;
  InvokeHelper(0x1a8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystem::GetAssignedCategories()
{
  LPDISPATCH result;
  InvokeHelper(0x1a9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystem::GetAssignedClasses()
{
  LPDISPATCH result;
  InvokeHelper(0x1aa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystem::GetVisibleSubsystems()
{
  LPDISPATCH result;
  InvokeHelper(0x1ab, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystem::GetSubsystemDependencies(LPDISPATCH theSubsystem)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1ac, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theSubsystem);
  return result;
}

BOOL IRoseSubsystem::TopLevel()
{
  BOOL result;
  InvokeHelper(0x1ad, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseSubsystem::AddVisibilityRelationship(LPDISPATCH theModule)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1ae, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theModule);
  return result;
}

BOOL IRoseSubsystem::DeleteVisibilityRelationship(LPDISPATCH theVisibilityRelationship)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1b1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theVisibilityRelationship);
  return result;
}

LPDISPATCH IRoseSubsystem::AddSubsystemVisibilityRelation(LPDISPATCH theSubsystem)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1b2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theSubsystem);
  return result;
}

BOOL IRoseSubsystem::DeleteModule(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1c1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pIDispatch);
  return result;
}

BOOL IRoseSubsystem::DeleteSubSystem(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1c2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pIDispatch);
  return result;
}

BOOL IRoseSubsystem::IsRootPackage()
{
  BOOL result;
  InvokeHelper(0x26d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::IsControlled()
{
  BOOL result;
  InvokeHelper(0x3091, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::Control(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x3092, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Path);
  return result;
}

BOOL IRoseSubsystem::IsLoaded()
{
  BOOL result;
  InvokeHelper(0x3093, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::Load()
{
  BOOL result;
  InvokeHelper(0x3094, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::IsModifiable()
{
  BOOL result;
  InvokeHelper(0x3096, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::Unload()
{
  BOOL result;
  InvokeHelper(0x3097, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::Modifiable(BOOL Modifiable)
{
  BOOL result;
  static BYTE parms[] = VTS_BOOL;
  InvokeHelper(0x3098, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Modifiable);
  return result;
}

CString IRoseSubsystem::GetFileName()
{
  CString result;
  InvokeHelper(0x3099, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::Save()
{
  BOOL result;
  InvokeHelper(0x309a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::SaveAs(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x309b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Path);
  return result;
}

CString IRoseSubsystem::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::IsModified()
{
  BOOL result;
  InvokeHelper(0x316e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::Uncontrol()
{
  BOOL result;
  InvokeHelper(0x316f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseSubsystem::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseSubsystem::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseExternalDocumentCollection properties

short IRoseExternalDocumentCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseExternalDocumentCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseExternalDocumentCollection operations

LPDISPATCH IRoseExternalDocumentCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
  return result;
}

BOOL IRoseExternalDocumentCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pObject);
  return result;
}

short IRoseExternalDocumentCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms, Name);
  return result;
}

short IRoseExternalDocumentCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms, iCurID, Name);
  return result;
}

short IRoseExternalDocumentCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms, theObject);
  return result;
}

void IRoseExternalDocumentCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseExternalDocumentCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theCollection);
}

void IRoseExternalDocumentCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseExternalDocumentCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseExternalDocumentCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name);
  return result;
}

LPDISPATCH IRoseExternalDocumentCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseInstanceViewCollection properties

short IRoseInstanceViewCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseInstanceViewCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseInstanceViewCollection operations

LPDISPATCH IRoseInstanceViewCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
  return result;
}

BOOL IRoseInstanceViewCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pObject);
  return result;
}

short IRoseInstanceViewCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms, Name);
  return result;
}

short IRoseInstanceViewCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms, iCurID, Name);
  return result;
}

short IRoseInstanceViewCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms, theObject);
  return result;
}

void IRoseInstanceViewCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseInstanceViewCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theCollection);
}

void IRoseInstanceViewCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseInstanceViewCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseInstanceViewCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name);
  return result;
}

LPDISPATCH IRoseInstanceViewCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseItemView properties

CString IRoseItemView::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseItemView::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

short IRoseItemView::GetYPosition()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseItemView::SetYPosition(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

short IRoseItemView::GetXPosition()
{
  short result;
  GetProperty(0xcb, VT_I2, (void*)&result);
  return result;
}

void IRoseItemView::SetXPosition(short propVal)
{
  SetProperty(0xcb, VT_I2, propVal);
}

short IRoseItemView::GetHeight()
{
  short result;
  GetProperty(0xcc, VT_I2, (void*)&result);
  return result;
}

void IRoseItemView::SetHeight(short propVal)
{
  SetProperty(0xcc, VT_I2, propVal);
}

short IRoseItemView::GetWidth()
{
  short result;
  GetProperty(0xcd, VT_I2, (void*)&result);
  return result;
}

void IRoseItemView::SetWidth(short propVal)
{
  SetProperty(0xcd, VT_I2, propVal);
}

LPDISPATCH IRoseItemView::GetFillColor()
{
  LPDISPATCH result;
  GetProperty(0xce, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItemView::SetFillColor(LPDISPATCH propVal)
{
  SetProperty(0xce, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseItemView::GetLineColor()
{
  LPDISPATCH result;
  GetProperty(0xd0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItemView::SetLineColor(LPDISPATCH propVal)
{
  SetProperty(0xd0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseItemView::GetSubViews()
{
  LPDISPATCH result;
  GetProperty(0xdb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItemView::SetSubViews(LPDISPATCH propVal)
{
  SetProperty(0xdb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseItemView::GetParentView()
{
  LPDISPATCH result;
  GetProperty(0xdc, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItemView::SetParentView(LPDISPATCH propVal)
{
  SetProperty(0xdc, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseItemView::GetItem()
{
  LPDISPATCH result;
  GetProperty(0xdd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItemView::SetItem(LPDISPATCH propVal)
{
  SetProperty(0xdd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseItemView::GetParentDiagram()
{
  LPDISPATCH result;
  GetProperty(0xe0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItemView::SetParentDiagram(LPDISPATCH propVal)
{
  SetProperty(0xe0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseItemView::GetFont()
{
  LPDISPATCH result;
  GetProperty(0x30cd, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItemView::SetFont(LPDISPATCH propVal)
{
  SetProperty(0x30cd, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseItemView::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItemView::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseItemView::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseItemView::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseItemView operations

CString IRoseItemView::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseItemView::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ToolName);
  return result;
}

BOOL IRoseItemView::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseItemView::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

CString IRoseItemView::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, theToolName, thePropName);
  return result;
}

CString IRoseItemView::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseItemView::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseItemView::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseItemView::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName);
  return result;
}

BOOL IRoseItemView::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

BOOL IRoseItemView::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseItemView::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName, thePropName);
  return result;
}

BOOL IRoseItemView::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseItemView::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseItemView::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ToolName);
  return result;
}

LPDISPATCH IRoseItemView::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseItemView::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolName, SetName);
  return result;
}

void IRoseItemView::Invalidate()
{
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL IRoseItemView::SupportsFillColor()
{
  BOOL result;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseItemView::SupportsLineColor()
{
  BOOL result;
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseItemView::IsSelected()
{
  BOOL result;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

void IRoseItemView::SetSelected(BOOL bSelect)
{
  static BYTE parms[] = VTS_BOOL;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bSelect);
}

BOOL IRoseItemView::PointInView(short x, short y)
{
  BOOL result;
  static BYTE parms[] = VTS_I2 VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, x, y);
  return result;
}

short IRoseItemView::GetDefaultWidth()
{
  short result;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseItemView::GetDefaultHeight()
{
  short result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseItemView::GetMinWidth()
{
  short result;
  InvokeHelper(0xd9, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

short IRoseItemView::GetMinHeight()
{
  short result;
  InvokeHelper(0xda, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
  return result;
}

BOOL IRoseItemView::HasItem()
{
  BOOL result;
  InvokeHelper(0xde, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseItemView::HasParentView()
{
  BOOL result;
  InvokeHelper(0xdf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseItemView::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseItemView::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseItemView::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseTransitionCollection properties

short IRoseTransitionCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseTransitionCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseTransitionCollection operations

LPDISPATCH IRoseTransitionCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
  return result;
}

BOOL IRoseTransitionCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pObject);
  return result;
}

short IRoseTransitionCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms, Name);
  return result;
}

short IRoseTransitionCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms, iCurID, Name);
  return result;
}

short IRoseTransitionCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms, theObject);
  return result;
}

void IRoseTransitionCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseTransitionCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theCollection);
}

void IRoseTransitionCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseTransitionCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseTransitionCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name);
  return result;
}

LPDISPATCH IRoseTransitionCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseState properties

CString IRoseState::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseState::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseState::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseState::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseState::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseState::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseState::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseState::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseState::GetParentState()
{
  LPDISPATCH result;
  GetProperty(0x19c, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseState::SetParentState(LPDISPATCH propVal)
{
  SetProperty(0x19c, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseState::GetParentStateMachine()
{
  LPDISPATCH result;
  GetProperty(0x19d, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseState::SetParentStateMachine(LPDISPATCH propVal)
{
  SetProperty(0x19d, VT_DISPATCH, propVal);
}

BOOL IRoseState::GetHistory()
{
  BOOL result;
  GetProperty(0x1a5, VT_BOOL, (void*)&result);
  return result;
}

void IRoseState::SetHistory(BOOL propVal)
{
  SetProperty(0x1a5, VT_BOOL, propVal);
}

LPDISPATCH IRoseState::GetTransitions()
{
  LPDISPATCH result;
  GetProperty(0x1a6, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseState::SetTransitions(LPDISPATCH propVal)
{
  SetProperty(0x1a6, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseState::GetStateKind()
{
  LPDISPATCH result;
  GetProperty(0x1a7, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseState::SetStateKind(LPDISPATCH propVal)
{
  SetProperty(0x1a7, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseState::GetSubStates()
{
  LPDISPATCH result;
  GetProperty(0x1bc, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseState::SetSubStates(LPDISPATCH propVal)
{
  SetProperty(0x1bc, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseState::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseState::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseState::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseState::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseState::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseState::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseState operations

CString IRoseState::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseState::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ToolName);
  return result;
}

BOOL IRoseState::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseState::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

CString IRoseState::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, theToolName, thePropName);
  return result;
}

CString IRoseState::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseState::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseState::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseState::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName);
  return result;
}

BOOL IRoseState::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

BOOL IRoseState::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseState::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName, thePropName);
  return result;
}

BOOL IRoseState::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseState::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseState::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ToolName);
  return result;
}

LPDISPATCH IRoseState::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseState::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolName, SetName);
  return result;
}

LPDISPATCH IRoseState::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseState::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, szName, iType);
  return result;
}

BOOL IRoseState::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pIDispatch);
  return result;
}

BOOL IRoseState::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseState::GetAllSubStates()
{
  LPDISPATCH result;
  InvokeHelper(0x1a9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseState::AddTransition(LPCTSTR OnEvent, LPDISPATCH Target)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_DISPATCH;
  InvokeHelper(0x1aa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, OnEvent, Target);
  return result;
}

BOOL IRoseState::DeleteTransition(LPDISPATCH Transition)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1ab, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Transition);
  return result;
}

LPDISPATCH IRoseState::AddState(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x1ac, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name);
  return result;
}

BOOL IRoseState::DeleteState(LPDISPATCH State)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1ad, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, State);
  return result;
}

BOOL IRoseState::RelocateState(LPDISPATCH State)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1ae, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, State);
  return result;
}

BOOL IRoseState::DeleteAction(LPDISPATCH theAction)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1be, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theAction);
  return result;
}

CString IRoseState::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseState::GetUserDefinedEvents()
{
  LPDISPATCH result;
  InvokeHelper(0x314f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseState::GetEntryActions()
{
  LPDISPATCH result;
  InvokeHelper(0x3151, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseState::GetExitActions()
{
  LPDISPATCH result;
  InvokeHelper(0x3152, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseState::GetDoActions()
{
  LPDISPATCH result;
  InvokeHelper(0x3153, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseState::AddUserDefinedEvent(LPCTSTR EventName, LPCTSTR ActionName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x315b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, EventName, ActionName);
  return result;
}

BOOL IRoseState::DeleteUserDefinedEvent(LPDISPATCH theEvent)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x315c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theEvent);
  return result;
}

LPDISPATCH IRoseState::AddEntryAction(LPCTSTR ActionName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x315d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ActionName);
  return result;
}

LPDISPATCH IRoseState::AddExitAction(LPCTSTR ActionName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x315e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ActionName);
  return result;
}

LPDISPATCH IRoseState::AddDoAction(LPCTSTR ActionName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x315f, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ActionName);
  return result;
}

CString IRoseState::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseState::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseObjectInstanceCollection properties

short IRoseObjectInstanceCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseObjectInstanceCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseObjectInstanceCollection operations

LPDISPATCH IRoseObjectInstanceCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
  return result;
}

BOOL IRoseObjectInstanceCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pObject);
  return result;
}

short IRoseObjectInstanceCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms, Name);
  return result;
}

short IRoseObjectInstanceCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms, iCurID, Name);
  return result;
}

short IRoseObjectInstanceCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms, theObject);
  return result;
}

void IRoseObjectInstanceCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseObjectInstanceCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theCollection);
}

void IRoseObjectInstanceCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseObjectInstanceCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseObjectInstanceCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name);
  return result;
}

LPDISPATCH IRoseObjectInstanceCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseRoleCollection properties

short IRoseRoleCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseRoleCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseRoleCollection operations

LPDISPATCH IRoseRoleCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
  return result;
}

BOOL IRoseRoleCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pObject);
  return result;
}

short IRoseRoleCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms, Name);
  return result;
}

short IRoseRoleCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms, iCurID, Name);
  return result;
}

short IRoseRoleCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms, theObject);
  return result;
}

void IRoseRoleCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseRoleCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theCollection);
}

void IRoseRoleCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseRoleCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseRoleCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name);
  return result;
}

LPDISPATCH IRoseRoleCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseClassRelation properties

CString IRoseClassRelation::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassRelation::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseClassRelation::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassRelation::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseClassRelation::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassRelation::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseClassRelation::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassRelation::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

CString IRoseClassRelation::GetSupplierName()
{
  CString result;
  GetProperty(0x19c, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassRelation::SetSupplierName(LPCTSTR propVal)
{
  SetProperty(0x19c, VT_BSTR, propVal);
}

LPDISPATCH IRoseClassRelation::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassRelation::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseClassRelation::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseClassRelation::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseClassRelation::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseClassRelation::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseClassRelation operations

CString IRoseClassRelation::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseClassRelation::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ToolName);
  return result;
}

BOOL IRoseClassRelation::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseClassRelation::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

CString IRoseClassRelation::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, theToolName, thePropName);
  return result;
}

CString IRoseClassRelation::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassRelation::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassRelation::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassRelation::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName);
  return result;
}

BOOL IRoseClassRelation::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

BOOL IRoseClassRelation::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseClassRelation::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName, thePropName);
  return result;
}

BOOL IRoseClassRelation::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseClassRelation::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassRelation::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ToolName);
  return result;
}

LPDISPATCH IRoseClassRelation::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassRelation::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] =
    VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
    ToolName, SetName);
  return result;
}

LPDISPATCH IRoseClassRelation::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassRelation::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, szName, iType);
  return result;
}

BOOL IRoseClassRelation::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pIDispatch);
  return result;
}

BOOL IRoseClassRelation::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseClassRelation::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassRelation::GetContextClass()
{
  LPDISPATCH result;
  InvokeHelper(0x3138, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassRelation::GetSupplierClass()
{
  LPDISPATCH result;
  InvokeHelper(0x3139, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassRelation::HasClient()
{
  BOOL result;
  InvokeHelper(0x313e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassRelation::HasSupplier()
{
  BOOL result;
  InvokeHelper(0x313f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassRelation::GetClient()
{
  LPDISPATCH result;
  InvokeHelper(0x3140, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseClassRelation::GetSupplier()
{
  LPDISPATCH result;
  InvokeHelper(0x3141, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

CString IRoseClassRelation::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseClassRelation::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseCategory properties

CString IRoseCategory::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseCategory::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseCategory::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseCategory::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseCategory::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseCategory::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseCategory::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategory::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

BOOL IRoseCategory::GetGlobal()
{
  BOOL result;
  GetProperty(0x19c, VT_BOOL, (void*)&result);
  return result;
}

void IRoseCategory::SetGlobal(BOOL propVal)
{
  SetProperty(0x19c, VT_BOOL, propVal);
}

LPDISPATCH IRoseCategory::GetClasses()
{
  LPDISPATCH result;
  GetProperty(0x19d, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategory::SetClasses(LPDISPATCH propVal)
{
  SetProperty(0x19d, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseCategory::GetCategories()
{
  LPDISPATCH result;
  GetProperty(0x19e, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategory::SetCategories(LPDISPATCH propVal)
{
  SetProperty(0x19e, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseCategory::GetParentCategory()
{
  LPDISPATCH result;
  GetProperty(0x19f, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategory::SetParentCategory(LPDISPATCH propVal)
{
  SetProperty(0x19f, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseCategory::GetClassDiagrams()
{
  LPDISPATCH result;
  GetProperty(0x1a0, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategory::SetClassDiagrams(LPDISPATCH propVal)
{
  SetProperty(0x1a0, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseCategory::GetAssociations()
{
  LPDISPATCH result;
  GetProperty(0x1a1, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategory::SetAssociations(LPDISPATCH propVal)
{
  SetProperty(0x1a1, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseCategory::GetScenarioDiagrams()
{
  LPDISPATCH result;
  GetProperty(0x1a2, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategory::SetScenarioDiagrams(LPDISPATCH propVal)
{
  SetProperty(0x1a2, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseCategory::GetUseCases()
{
  LPDISPATCH result;
  GetProperty(0x1be, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategory::SetUseCases(LPDISPATCH propVal)
{
  SetProperty(0x1be, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseCategory::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategory::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseCategory::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseCategory::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseCategory::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseCategory::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseCategory operations

CString IRoseCategory::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseCategory::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ToolName);
  return result;
}

BOOL IRoseCategory::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseCategory::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

CString IRoseCategory::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, theToolName, thePropName);
  return result;
}

CString IRoseCategory::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseCategory::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseCategory::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategory::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName);
  return result;
}

BOOL IRoseCategory::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

BOOL IRoseCategory::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseCategory::FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7e, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName, thePropName);
  return result;
}

BOOL IRoseCategory::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseCategory::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategory::GetDefaultSetNames(LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x81, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ToolName);
  return result;
}

LPDISPATCH IRoseCategory::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolName, SetName);
  return result;
}

LPDISPATCH IRoseCategory::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategory::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, szName, iType);
  return result;
}

BOOL IRoseCategory::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pIDispatch);
  return result;
}

BOOL IRoseCategory::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategory::GetAllClasses()
{
  LPDISPATCH result;
  InvokeHelper(0x1a3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategory::GetAllCategories()
{
  LPDISPATCH result;
  InvokeHelper(0x1a4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategory::AddClass(LPCTSTR theName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x1a5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theName);
  return result;
}

LPDISPATCH IRoseCategory::AddClassDiagram(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x1a6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name);
  return result;
}

LPDISPATCH IRoseCategory::AddCategory(LPCTSTR theName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x1a7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theName);
  return result;
}

void IRoseCategory::RelocateClass(LPDISPATCH theClass)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1a8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theClass);
}

void IRoseCategory::RelocateCategory(LPDISPATCH theCategory)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1a9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theCategory);
}

void IRoseCategory::RelocateClassDiagram(LPDISPATCH theClsDiagram)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1aa, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theClsDiagram);
}

BOOL IRoseCategory::DeleteCategory(LPDISPATCH theCategory)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1ab, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theCategory);
  return result;
}

BOOL IRoseCategory::DeleteClass(LPDISPATCH theClass)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1ac, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theClass);
  return result;
}

BOOL IRoseCategory::DeleteClassDiagram(LPDISPATCH theClassDiagram)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1ad, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theClassDiagram);
  return result;
}

LPDISPATCH IRoseCategory::AddScenarioDiagram(LPCTSTR Name, short Type)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_I2;
  InvokeHelper(0x1ae, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name, Type);
  return result;
}

BOOL IRoseCategory::DeleteScenarioDiagram(LPDISPATCH theScenarioDiagram)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1af, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theScenarioDiagram);
  return result;
}

void IRoseCategory::RelocateScenarioDiagram(LPDISPATCH theScenarioDiagram)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1b0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theScenarioDiagram);
}

LPDISPATCH IRoseCategory::GetAssignedSubsystem()
{
  LPDISPATCH result;
  InvokeHelper(0x1b1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

void IRoseCategory::SetAssignedSubsystem(LPDISPATCH newValue)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1b2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, newValue);
}

BOOL IRoseCategory::HasAssignedSubsystem()
{
  BOOL result;
  InvokeHelper(0x1b3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::DeleteUseCase(LPDISPATCH theUseCase)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x1b4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theUseCase);
  return result;
}

BOOL IRoseCategory::TopLevel()
{
  BOOL result;
  InvokeHelper(0x1b5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategory::GetAllUseCases()
{
  LPDISPATCH result;
  InvokeHelper(0x1bf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategory::AddUseCase(LPCTSTR szName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x1c0, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, szName);
  return result;
}

BOOL IRoseCategory::IsRootPackage()
{
  BOOL result;
  InvokeHelper(0x26d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::IsControlled()
{
  BOOL result;
  InvokeHelper(0x3091, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::Control(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x3092, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Path);
  return result;
}

BOOL IRoseCategory::IsLoaded()
{
  BOOL result;
  InvokeHelper(0x3093, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::Load()
{
  BOOL result;
  InvokeHelper(0x3094, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::IsModifiable()
{
  BOOL result;
  InvokeHelper(0x3096, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::Unload()
{
  BOOL result;
  InvokeHelper(0x3097, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::Modifiable(BOOL Modifiable)
{
  BOOL result;
  static BYTE parms[] = VTS_BOOL;
  InvokeHelper(0x3098, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Modifiable);
  return result;
}

CString IRoseCategory::GetFileName()
{
  CString result;
  InvokeHelper(0x3099, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::Save()
{
  BOOL result;
  InvokeHelper(0x309a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::SaveAs(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x309b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Path);
  return result;
}

CString IRoseCategory::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::IsModified()
{
  BOOL result;
  InvokeHelper(0x316e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::Uncontrol()
{
  BOOL result;
  InvokeHelper(0x316f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseCategory::AddCategoryDependency(LPCTSTR theName, LPCTSTR theSupplierCategoryName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x3173, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theName, theSupplierCategoryName);
  return result;
}

LPDISPATCH IRoseCategory::GetCategoryDependencies()
{
  LPDISPATCH result;
  InvokeHelper(0x3174, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::DeleteCategoryDependency(LPDISPATCH theDependency)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0x3175, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theDependency);
  return result;
}

CString IRoseCategory::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseCategory::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseDefaultModelProperties properties

CString IRoseDefaultModelProperties::GetName()
{
  CString result;
  GetProperty(0x64, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDefaultModelProperties::SetName(LPCTSTR propVal)
{
  SetProperty(0x64, VT_BSTR, propVal);
}

CString IRoseDefaultModelProperties::GetDocumentation()
{
  CString result;
  GetProperty(0xcb, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDefaultModelProperties::SetDocumentation(LPCTSTR propVal)
{
  SetProperty(0xcb, VT_BSTR, propVal);
}

CString IRoseDefaultModelProperties::GetStereotype()
{
  CString result;
  GetProperty(0xd4, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDefaultModelProperties::SetStereotype(LPCTSTR propVal)
{
  SetProperty(0xd4, VT_BSTR, propVal);
}

LPDISPATCH IRoseDefaultModelProperties::GetExternalDocuments()
{
  LPDISPATCH result;
  GetProperty(0xd5, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDefaultModelProperties::SetExternalDocuments(LPDISPATCH propVal)
{
  SetProperty(0xd5, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseDefaultModelProperties::GetApplication()
{
  LPDISPATCH result;
  GetProperty(0x30eb, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDefaultModelProperties::SetApplication(LPDISPATCH propVal)
{
  SetProperty(0x30eb, VT_DISPATCH, propVal);
}

LPDISPATCH IRoseDefaultModelProperties::GetModel()
{
  LPDISPATCH result;
  GetProperty(0x30ec, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseDefaultModelProperties::SetModel(LPDISPATCH propVal)
{
  SetProperty(0x30ec, VT_DISPATCH, propVal);
}

CString IRoseDefaultModelProperties::GetLocalizedStereotype()
{
  CString result;
  GetProperty(0x310a, VT_BSTR, (void*)&result);
  return result;
}

void IRoseDefaultModelProperties::SetLocalizedStereotype(LPCTSTR propVal)
{
  SetProperty(0x310a, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseDefaultModelProperties operations

CString IRoseDefaultModelProperties::GetUniqueID()
{
  CString result;
  InvokeHelper(0x66, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

CString IRoseDefaultModelProperties::GetCurrentPropertySetName(LPCTSTR ToolName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x6d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, ToolName);
  return result;
}

BOOL IRoseDefaultModelProperties::OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName, theValue);
  return result;
}

BOOL IRoseDefaultModelProperties::InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

CString IRoseDefaultModelProperties::GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x77, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, theToolName, thePropName);
  return result;
}

CString IRoseDefaultModelProperties::GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName)
{
  CString result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x78, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseDefaultModelProperties::FindProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x79, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName, thePropName);
  return result;
}

LPDISPATCH IRoseDefaultModelProperties::GetAllProperties()
{
  LPDISPATCH result;
  InvokeHelper(0x7a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDefaultModelProperties::GetToolProperties(LPCTSTR theToolName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x7b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, theToolName);
  return result;
}

BOOL IRoseDefaultModelProperties::IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

BOOL IRoseDefaultModelProperties::IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName);
  return result;
}

BOOL IRoseDefaultModelProperties::CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName, thePropName, theValue, theType);
  return result;
}

CString IRoseDefaultModelProperties::GetPropertyClassName()
{
  CString result;
  InvokeHelper(0x80, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDefaultModelProperties::GetToolNames()
{
  LPDISPATCH result;
  InvokeHelper(0x82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x83, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ToolName, SetName);
  return result;
}

LPDISPATCH IRoseDefaultModelProperties::GetRoseItem()
{
  LPDISPATCH result;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
  return result;
}

LPDISPATCH IRoseDefaultModelProperties::AddExternalDocument(LPCTSTR szName, short iType)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_I2;
  InvokeHelper(0xd6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, szName, iType);
  return result;
}

BOOL IRoseDefaultModelProperties::DeleteExternalDocument(LPDISPATCH pIDispatch)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pIDispatch);
  return result;
}

BOOL IRoseDefaultModelProperties::OpenSpecification()
{
  BOOL result;
  InvokeHelper(0xd8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::AddDefaultProperty(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR SetName, LPCTSTR PropName, LPCTSTR PropType, LPCTSTR Value)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1b8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ClassName, ToolName, SetName, PropName, PropType, Value);
  return result;
}

BOOL IRoseDefaultModelProperties::CloneDefaultPropertySet(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR ExistingSetName, LPCTSTR NewSetName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1b9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ClassName, ToolName, ExistingSetName, NewSetName);
  return result;
}

BOOL IRoseDefaultModelProperties::CreateDefaultPropertySet(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR NewSetName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1ba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ClassName, ToolName, NewSetName);
  return result;
}

BOOL IRoseDefaultModelProperties::DeleteDefaultPropertySet(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR SetName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1bb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ClassName, ToolName, SetName);
  return result;
}

LPDISPATCH IRoseDefaultModelProperties::GetDefaultPropertySet(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR SetName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1bc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ClassName, ToolName, SetName);
  return result;
}

LPDISPATCH IRoseDefaultModelProperties::FindDefaultProperty(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR SetName, LPCTSTR PropName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1bd, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ClassName, ToolName, SetName, PropName);
  return result;
}

LPDISPATCH IRoseDefaultModelProperties::GetDefaultSetNames(LPCTSTR ClassName, LPCTSTR ToolName)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1bf, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, ClassName, ToolName);
  return result;
}

BOOL IRoseDefaultModelProperties::DeleteDefaultProperty(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR SetName, LPCTSTR PropName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR;
  InvokeHelper(0x1c1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ClassName, ToolName, SetName, PropName);
  return result;
}

BOOL IRoseDefaultModelProperties::IsControlled()
{
  BOOL result;
  InvokeHelper(0x3091, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::Control(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x3092, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Path);
  return result;
}

BOOL IRoseDefaultModelProperties::IsLoaded()
{
  BOOL result;
  InvokeHelper(0x3093, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::Load()
{
  BOOL result;
  InvokeHelper(0x3094, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::IsModifiable()
{
  BOOL result;
  InvokeHelper(0x3096, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::Unload()
{
  BOOL result;
  InvokeHelper(0x3097, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::Modifiable(BOOL Modifiable)
{
  BOOL result;
  static BYTE parms[] = VTS_BOOL;
  InvokeHelper(0x3098, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Modifiable);
  return result;
}

CString IRoseDefaultModelProperties::GetFileName()
{
  CString result;
  InvokeHelper(0x3099, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::Save()
{
  BOOL result;
  InvokeHelper(0x309a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::SaveAs(LPCTSTR Path)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x309b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Path);
  return result;
}

CString IRoseDefaultModelProperties::GetQualifiedName()
{
  CString result;
  InvokeHelper(0x310b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::IsToolVisible(LPCTSTR theToolName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x3131, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theToolName);
  return result;
}

void IRoseDefaultModelProperties::SetToolVisibility(LPCTSTR theToolName, BOOL Visibility)
{
  static BYTE parms[] = VTS_BSTR VTS_BOOL;
  InvokeHelper(0x3132, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theToolName, Visibility);
}

BOOL IRoseDefaultModelProperties::IsModified()
{
  BOOL result;
  InvokeHelper(0x316e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::Uncontrol()
{
  BOOL result;
  InvokeHelper(0x316f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

CString IRoseDefaultModelProperties::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseDefaultModelProperties::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theClassName);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseRealizeRelationCollection properties

/////////////////////////////////////////////////////////////////////////////
// IRoseRealizeRelationCollection operations


/////////////////////////////////////////////////////////////////////////////
// IRosePackageCollection properties

short IRosePackageCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRosePackageCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRosePackageCollection operations

LPDISPATCH IRosePackageCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
  return result;
}

BOOL IRosePackageCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pObject);
  return result;
}

short IRosePackageCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms, Name);
  return result;
}

short IRosePackageCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms, iCurID, Name);
  return result;
}

short IRosePackageCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms, theObject);
  return result;
}

void IRosePackageCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRosePackageCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theCollection);
}

void IRosePackageCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRosePackageCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRosePackageCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name);
  return result;
}

LPDISPATCH IRosePackageCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, UniqueID);
  return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoseExternalDocument properties

CString IRoseExternalDocument::GetPath()
{
  CString result;
  GetProperty(0x1, VT_BSTR, (void*)&result);
  return result;
}

void IRoseExternalDocument::SetPath(LPCTSTR propVal)
{
  SetProperty(0x1, VT_BSTR, propVal);
}

CString IRoseExternalDocument::GetUrl()
{
  CString result;
  GetProperty(0x2, VT_BSTR, (void*)&result);
  return result;
}

void IRoseExternalDocument::SetUrl(LPCTSTR propVal)
{
  SetProperty(0x2, VT_BSTR, propVal);
}

LPDISPATCH IRoseExternalDocument::GetParentCategory()
{
  LPDISPATCH result;
  GetProperty(0x3, VT_DISPATCH, (void*)&result);
  return result;
}

void IRoseExternalDocument::SetParentCategory(LPDISPATCH propVal)
{
  SetProperty(0x3, VT_DISPATCH, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseExternalDocument operations

BOOL IRoseExternalDocument::IsURL()
{
  BOOL result;
  InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
  return result;
}

BOOL IRoseExternalDocument::Open(LPCTSTR szAppPath)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, szAppPath);
  return result;
}

CString IRoseExternalDocument::IdentifyClass()
{
  CString result;
  InvokeHelper(0x317c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
  return result;
}

BOOL IRoseExternalDocument::IsClass(LPCTSTR theClassName)
{
  BOOL result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0x317d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, theClassName);
  return result;
}


//
//
// The following was snatched fom an old version of the Rose Type Lib.
//
//


/////////////////////////////////////////////////////////////////////////////
// IRoseCollection properties

short IRoseCollection::GetCount()
{
  short result;
  GetProperty(0xca, VT_I2, (void*)&result);
  return result;
}

void IRoseCollection::SetCount(short propVal)
{
  SetProperty(0xca, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// IRoseCollection operations

LPDISPATCH IRoseCollection::GetAt(short Index)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_I2;
  InvokeHelper(0xcb, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Index);
  return result;
}

BOOL IRoseCollection::Exists(LPDISPATCH pObject)
{
  BOOL result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, pObject);
  return result;
}

short IRoseCollection::FindFirst(LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xcd, DISPATCH_METHOD, VT_I2, (void*)&result, parms, Name);
  return result;
}

short IRoseCollection::FindNext(short iCurID, LPCTSTR Name)
{
  short result;
  static BYTE parms[] = VTS_I2 VTS_BSTR;
  InvokeHelper(0xce, DISPATCH_METHOD, VT_I2, (void*)&result, parms, iCurID, Name);
  return result;
}

short IRoseCollection::IndexOf(LPDISPATCH theObject)
{
  short result;
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xcf, DISPATCH_METHOD, VT_I2, (void*)&result, parms, theObject);
  return result;
}

void IRoseCollection::Add(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd0, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseCollection::AddCollection(LPDISPATCH theCollection)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theCollection);
}

void IRoseCollection::Remove(LPDISPATCH theObject)
{
  static BYTE parms[] = VTS_DISPATCH;
  InvokeHelper(0xd2, DISPATCH_METHOD, VT_EMPTY, NULL, parms, theObject);
}

void IRoseCollection::RemoveAll()
{
  InvokeHelper(0xd3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IRoseCollection::GetFirst(LPCTSTR Name)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, Name);
  return result;
}

LPDISPATCH IRoseCollection::GetWithUniqueID(LPCTSTR UniqueID)
{
  LPDISPATCH result;
  static BYTE parms[] = VTS_BSTR;
  InvokeHelper(0xd5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms, UniqueID);
  return result;
}

