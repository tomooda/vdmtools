/***
*  * WHAT
*  *    This file describes the automation interface towards Rational Rose98
*  *    The file is automatically generated by ClassWizard (MSDEV 5.0) from 
*  *    a type library.
*  *
*  *
*  * FILE
*  *    $Source: /home/vdmtools/cvsroot/toolbox/code/uml/code/rationalrose.h,v $
*  * VERSION
*  *    $Revision: 1.5 $
*  * DATE
*  *    $Date: 2001/11/15 06:44:19 $
*  * FORMAT
*  *    $State: Exp $
*  * PROJECT
*  *    VDM-SL Toolbox.
*  * AUTHOR
*  *    $Author: mikhail $
*  * COPYRIGHT
*  *    (C) Kyushu University
***/


#ifndef _rationalrose_h
#define _rationalrose_h

#include "rose_redefines.h"

class CTBOleDispatchDriver: public COleDispatchDriver
{
  IStream* pStream;
public:
  CTBOleDispatchDriver() {pStream=NULL;}
  CTBOleDispatchDriver(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {pStream=NULL;}
  CTBOleDispatchDriver(const CTBOleDispatchDriver& dispatchSrc) : COleDispatchDriver(dispatchSrc) {pStream=NULL;}

  virtual ~CTBOleDispatchDriver();

  BOOL CreateDispatch(REFCLSID clsid, COleException* pError = NULL);
  void AttachDispatch(LPDISPATCH lpDispatch, BOOL bAutoRelease = TRUE);
  HRESULT AFX_CDECL InvokeHelper(DISPID dwDispID, WORD wFlags,
                              VARTYPE vtRet, void* pvRet, const BYTE* pbParamInfo, ...);

  HRESULT InvokeHelperV(DISPID dwDispID, WORD wFlags, VARTYPE vtRet, 
                     void* pvRet, const BYTE* pbParamInfo, va_list argList);

  void AFX_CDECL SetProperty(DISPID dwDispID, VARTYPE vtProp, ...);
  void GetProperty(DISPID dwDispID, VARTYPE vtProp, void* pvProp);

  IDispatch* GetDispatch();

protected:
  void ReleaseStream();
};

// Machine generated IDispatch wrapper class(es) created with ClassWizard
/////////////////////////////////////////////////////////////////////////////
// IRoseProcessorCollection wrapper class

class IRoseProcessorCollection : public COleDispatchDriver
{
public:
	IRoseProcessorCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseProcessorCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseProcessorCollection(const IRoseProcessorCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseCategoryCollection wrapper class

class IRoseCategoryCollection : public COleDispatchDriver
{
public:
	IRoseCategoryCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseCategoryCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseCategoryCollection(const IRoseCategoryCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseItem wrapper class

class IRoseItem : public COleDispatchDriver
{
public:
	IRoseItem() {}		// Calls COleDispatchDriver default constructor
	IRoseItem(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseItem(const IRoseItem& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseAddIn wrapper class

class IRoseAddIn : public COleDispatchDriver
{
public:
	IRoseAddIn() {}		// Calls COleDispatchDriver default constructor
	IRoseAddIn(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseAddIn(const IRoseAddIn& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	LPDISPATCH GetEventHandler();
	void SetEventHandler(LPDISPATCH);
	CString GetVersion();
	void SetVersion(LPCTSTR);
	CString GetCompanyName();
	void SetCompanyName(LPCTSTR);
	CString GetHelpFilePath();
	void SetHelpFilePath(LPCTSTR);
	CString GetMenuFilePath();
	void SetMenuFilePath(LPCTSTR);
	CString GetPropertyFilePath();
	void SetPropertyFilePath(LPCTSTR);
	CString GetInstallDirectory();
	void SetInstallDirectory(LPCTSTR);
	CString GetRootRegistryPath();
	void SetRootRegistryPath(LPCTSTR);
	LPDISPATCH GetFundamentalTypes();
	void SetFundamentalTypes(LPDISPATCH);
	LPDISPATCH GetToolNames();
	void SetToolNames(LPDISPATCH);
	CString GetServerName();
	void SetServerName(LPCTSTR);
	CString GetName();
	void SetName(LPCTSTR);
	CString GetCopyright();
	void SetCopyright(LPCTSTR);

// Operations
public:
	BOOL IsLanguageAddIn();
	void Deactivate();
	void Activate();
	BOOL IsActive();
	void ExecuteScript(LPCTSTR FileName);
	CString ReadSetting(LPCTSTR Section, LPCTSTR Entry, LPCTSTR Default);
	BOOL WriteSetting(LPCTSTR Section, LPCTSTR Entry, LPCTSTR Value);
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseUseCaseCollection wrapper class

class IRoseUseCaseCollection : public COleDispatchDriver
{
public:
	IRoseUseCaseCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseUseCaseCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseUseCaseCollection(const IRoseUseCaseCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseRelation wrapper class

class IRoseRelation : public COleDispatchDriver
{
public:
	IRoseRelation() {}		// Calls COleDispatchDriver default constructor
	IRoseRelation(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseRelation(const IRoseRelation& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetSupplierName();
	void SetSupplierName(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	BOOL HasClient();
	BOOL HasSupplier();
	LPDISPATCH GetClient();
	LPDISPATCH GetSupplier();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseApplication wrapper class

class IRoseApplication : public CTBOleDispatchDriver
{
public:
	IRoseApplication() {}		// Calls COleDispatchDriver default constructor
	IRoseApplication(LPDISPATCH pDispatch) : CTBOleDispatchDriver(pDispatch) {}
	IRoseApplication(const IRoseApplication& dispatchSrc) : CTBOleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	BOOL GetVisible();
	void SetVisible(BOOL);
	short GetTop();
	void SetTop(short);
	short GetLeft();
	void SetLeft(short);
	short GetHeight();
	void SetHeight(short);
	short GetWidth();
	void SetWidth(short);
	LPDISPATCH GetCurrentModel();
	void SetCurrentModel(LPDISPATCH);
	LPDISPATCH GetPathMap();
	void SetPathMap(LPDISPATCH);
	CString GetVersion();
	void SetVersion(LPCTSTR);
	CString GetProductName();
	void SetProductName(LPCTSTR);
	CString GetApplicationPath();
	void SetApplicationPath(LPCTSTR);
	LPDISPATCH GetAddInManager();
	void SetAddInManager(LPDISPATCH);
	CString GetCommandLine();
	void SetCommandLine(LPCTSTR);

// Operations
public:
	LPDISPATCH OpenModel(LPCTSTR theModel);
	LPDISPATCH NewModel();
	void Exit();
	void WriteErrorLog(LPCTSTR theMsg);
	void Save(BOOL bSaveUnits);
	void SaveAs(LPCTSTR theFile, BOOL bSaveUnits);
	void CompileScriptFile(LPCTSTR FileName, LPCTSTR BinaryName, BOOL bDebug);
	LPDISPATCH OpenModelAsTemplate(LPCTSTR szFileName);
	void OpenScript(LPCTSTR FileName);
	void NewScript();
	LPDISPATCH GetLicensedApplication(LPCTSTR theKey);
	void ExecuteScript(LPCTSTR pFileName);
	BOOL OpenURL(LPCTSTR theURL);
	BOOL OpenExternalDocument(LPCTSTR FileName);
	CString GetProfileString(LPCTSTR Section, LPCTSTR Entry, LPCTSTR Default);
	BOOL WriteProfileString(LPCTSTR Section, LPCTSTR Entry, LPCTSTR Value);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseMessageCollection wrapper class

class IRoseMessageCollection : public COleDispatchDriver
{
public:
	IRoseMessageCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseMessageCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseMessageCollection(const IRoseMessageCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseClassDiagramCollection wrapper class

class IRoseClassDiagramCollection : public COleDispatchDriver
{
public:
	IRoseClassDiagramCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseClassDiagramCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseClassDiagramCollection(const IRoseClassDiagramCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseScenarioDiagram wrapper class

class IRoseScenarioDiagram : public COleDispatchDriver
{
public:
	IRoseScenarioDiagram() {}		// Calls COleDispatchDriver default constructor
	IRoseScenarioDiagram(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseScenarioDiagram(const IRoseScenarioDiagram& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	LPDISPATCH GetItemViews();
	void SetItemViews(LPDISPATCH);
	BOOL GetVisible();
	void SetVisible(BOOL);
	LPDISPATCH GetItems();
	void SetItems(LPDISPATCH);
	LPDISPATCH GetInstanceViews();
	void SetInstanceViews(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Layout();
	void Invalidate();
	void Update();
	LPDISPATCH GetViewFrom(LPDISPATCH theItem);
	BOOL IsActive();
	BOOL Exists(LPDISPATCH theItem);
	void Activate();
	void Render(LPCTSTR FileName);
	LPDISPATCH AddNoteView(LPCTSTR szNoteText, short nType);
	BOOL RemoveNoteView(LPDISPATCH pIDispNoteView);
	LPDISPATCH GetNoteViews();
	void RenderEnhanced(LPCTSTR FileName);
	void RenderToClipboard();
	void RenderEnhancedToClipboard();
	LPDISPATCH GetObjects();
	LPDISPATCH GetSelectedObjects();
	LPDISPATCH GetMessages();
	LPDISPATCH GetSelectedMessages();
	LPDISPATCH CreateMessage(LPCTSTR theName, LPDISPATCH theSender, LPDISPATCH theReceiver, short theSequence);
	LPDISPATCH GetSelectedLinks();
	short GetDiagramType();
	LPDISPATCH AddInstanceView(LPDISPATCH theInstance, BOOL AsClassInstance);
	BOOL RemoveInstanceView(LPDISPATCH theView);
	BOOL DeleteInstance(LPDISPATCH theInstance);
	LPDISPATCH AddInstance(LPCTSTR theName, LPCTSTR theClassName);
	LPDISPATCH GetSelectedItems();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseRealizeRelation wrapper class

class IRoseRealizeRelation : public COleDispatchDriver
{
public:
	IRoseRealizeRelation() {}		// Calls COleDispatchDriver default constructor
	IRoseRealizeRelation(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseRealizeRelation(const IRoseRealizeRelation& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetSupplierName();
	void SetSupplierName(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	LPDISPATCH GetContextClass();
	LPDISPATCH GetContextComponent();
	LPDISPATCH GetSupplierClass();
	LPDISPATCH GetSupplierComponent();
	BOOL HasClient();
	BOOL HasSupplier();
	LPDISPATCH GetClient();
	LPDISPATCH GetSupplier();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseHasRelationship wrapper class

class IRoseHasRelationship : public COleDispatchDriver
{
public:
	IRoseHasRelationship() {}		// Calls COleDispatchDriver default constructor
	IRoseHasRelationship(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseHasRelationship(const IRoseHasRelationship& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetSupplierName();
	void SetSupplierName(LPCTSTR);
	CString GetClientCardinality();
	void SetClientCardinality(LPCTSTR);
	CString GetSupplierCardinality();
	void SetSupplierCardinality(LPCTSTR);
	BOOL GetStatic();
	void SetStatic(BOOL);
	LPDISPATCH GetExportControl();
	void SetExportControl(LPDISPATCH);
	LPDISPATCH GetContainment();
	void SetContainment(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	LPDISPATCH GetContextClass();
	LPDISPATCH GetSupplierClass();
	BOOL HasClient();
	BOOL HasSupplier();
	LPDISPATCH GetClient();
	LPDISPATCH GetSupplier();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseClassView wrapper class

class IRoseClassView : public COleDispatchDriver
{
public:
	IRoseClassView() {}		// Calls COleDispatchDriver default constructor
	IRoseClassView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseClassView(const IRoseClassView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	short GetYPosition();
	void SetYPosition(short);
	short GetXPosition();
	void SetXPosition(short);
	short GetHeight();
	void SetHeight(short);
	short GetWidth();
	void SetWidth(short);
	LPDISPATCH GetFillColor();
	void SetFillColor(LPDISPATCH);
	LPDISPATCH GetLineColor();
	void SetLineColor(LPDISPATCH);
	LPDISPATCH GetSubViews();
	void SetSubViews(LPDISPATCH);
	LPDISPATCH GetParentView();
	void SetParentView(LPDISPATCH);
	LPDISPATCH GetItem();
	void SetItem(LPDISPATCH);
	LPDISPATCH GetParentDiagram();
	void SetParentDiagram(LPDISPATCH);
	BOOL GetAutomaticResize();
	void SetAutomaticResize(BOOL);
	BOOL GetShowOperationSignature();
	void SetShowOperationSignature(BOOL);
	BOOL GetShowAllAttributes();
	void SetShowAllAttributes(BOOL);
	BOOL GetShowAllOperations();
	void SetShowAllOperations(BOOL);
	BOOL GetSuppressAttributes();
	void SetSuppressAttributes(BOOL);
	BOOL GetSuppressOperations();
	void SetSuppressOperations(BOOL);
	LPDISPATCH GetFont();
	void SetFont(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Invalidate();
	BOOL SupportsFillColor();
	BOOL SupportsLineColor();
	BOOL IsSelected();
	void SetSelected(BOOL bSelect);
	BOOL PointInView(short x, short y);
	short GetDefaultWidth();
	short GetDefaultHeight();
	short GetMinWidth();
	short GetMinHeight();
	BOOL HasItem();
	BOOL HasParentView();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseView_FillColor wrapper class

class IRoseView_FillColor : public COleDispatchDriver
{
public:
	IRoseView_FillColor() {}		// Calls COleDispatchDriver default constructor
	IRoseView_FillColor(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseView_FillColor(const IRoseView_FillColor& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetRed();
	void SetRed(short);
	BOOL GetTransparent();
	void SetTransparent(BOOL);
	short GetBlue();
	void SetBlue(short);
	short GetGreen();
	void SetGreen(short);

// Operations
public:
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseActionCollection wrapper class

class IRoseActionCollection : public COleDispatchDriver
{
public:
	IRoseActionCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseActionCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseActionCollection(const IRoseActionCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseProcess wrapper class

class IRoseProcess : public COleDispatchDriver
{
public:
	IRoseProcess() {}		// Calls COleDispatchDriver default constructor
	IRoseProcess(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseProcess(const IRoseProcess& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetMyProcessor();
	void SetMyProcessor(LPDISPATCH);
	CString GetPriority();
	void SetPriority(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseAddInCollection wrapper class

class IRoseAddInCollection : public COleDispatchDriver
{
public:
	IRoseAddInCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseAddInCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseAddInCollection(const IRoseAddInCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseControllableUnitCollection wrapper class

class IRoseControllableUnitCollection : public COleDispatchDriver
{
public:
	IRoseControllableUnitCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseControllableUnitCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseControllableUnitCollection(const IRoseControllableUnitCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseModuleCollection wrapper class

class IRoseModuleCollection : public COleDispatchDriver
{
public:
	IRoseModuleCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseModuleCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseModuleCollection(const IRoseModuleCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseLinkCollection wrapper class

class IRoseLinkCollection : public COleDispatchDriver
{
public:
	IRoseLinkCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseLinkCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseLinkCollection(const IRoseLinkCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseAction wrapper class

class IRoseAction : public COleDispatchDriver
{
public:
	IRoseAction() {}		// Calls COleDispatchDriver default constructor
	IRoseAction(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseAction(const IRoseAction& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);
	CString GetArguments();
	void SetArguments(LPCTSTR);
	CString GetTarget();
	void SetTarget(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseParameterCollection wrapper class

class IRoseParameterCollection : public COleDispatchDriver
{
public:
	IRoseParameterCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseParameterCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseParameterCollection(const IRoseParameterCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseAttributeCollection wrapper class

class IRoseAttributeCollection : public COleDispatchDriver
{
public:
	IRoseAttributeCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseAttributeCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseAttributeCollection(const IRoseAttributeCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseDevice wrapper class

class IRoseDevice : public COleDispatchDriver
{
public:
	IRoseDevice() {}		// Calls COleDispatchDriver default constructor
	IRoseDevice(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseDevice(const IRoseDevice& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetCharacteristics();
	void SetCharacteristics(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH GetConnectedProcessors();
	LPDISPATCH GetConnectedDevices();
	BOOL AddProcessorConnection(LPDISPATCH theProcessor);
	BOOL RemoveProcessorConnection(LPDISPATCH theProcessor);
	BOOL AddDeviceConnection(LPDISPATCH theDevice);
	BOOL RemoveDeviceConnection(LPDISPATCH theDevice);
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseClassDependency wrapper class

class IRoseClassDependency : public COleDispatchDriver
{
public:
	IRoseClassDependency() {}		// Calls COleDispatchDriver default constructor
	IRoseClassDependency(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseClassDependency(const IRoseClassDependency& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetSupplierName();
	void SetSupplierName(LPCTSTR);
	CString GetClientCardinality();
	void SetClientCardinality(LPCTSTR);
	CString GetSupplierCardinality();
	void SetSupplierCardinality(LPCTSTR);
	BOOL GetInvolvesFriendship();
	void SetInvolvesFriendship(BOOL);
	LPDISPATCH GetExportControl();
	void SetExportControl(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	LPDISPATCH GetContextClass();
	LPDISPATCH GetSupplierClass();
	BOOL HasClient();
	BOOL HasSupplier();
	LPDISPATCH GetClient();
	LPDISPATCH GetSupplier();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseRole wrapper class

class IRoseRole : public COleDispatchDriver
{
public:
	IRoseRole() {}		// Calls COleDispatchDriver default constructor
	IRoseRole(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseRole(const IRoseRole& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetSupplierName();
	void SetSupplierName(LPCTSTR);
	BOOL GetAggregate();
	void SetAggregate(BOOL);
	BOOL GetStatic();
	void SetStatic(BOOL);
	BOOL GetNavigable();
	void SetNavigable(BOOL);
	CString GetCardinality();
	void SetCardinality(LPCTSTR);
	LPDISPATCH GetExportControl();
	void SetExportControl(LPDISPATCH);
	LPDISPATCH GetContainment();
	void SetContainment(LPDISPATCH);
	LPDISPATCH GetAssociation();
	void SetAssociation(LPDISPATCH);
	LPDISPATCH GetClass();
	void SetClass(LPDISPATCH);
	LPDISPATCH GetKeys();
	void SetKeys(LPDISPATCH);
	LPDISPATCH GetAssociateItem();
	void SetAssociateItem(LPDISPATCH);
	LPDISPATCH GetUseCase();
	void SetUseCase(LPDISPATCH);
	CString GetConstraints();
	void SetConstraints(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);
	BOOL GetFriend();
	void SetFriend(BOOL);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH AddKey(LPCTSTR theName, LPCTSTR theType);
	BOOL DeleteKey(LPDISPATCH theAttr);
	CString GetClassName();
	BOOL IsAssociateClass();
	CString GetQualifiedName();
	BOOL HasClient();
	BOOL HasSupplier();
	LPDISPATCH GetClient();
	LPDISPATCH GetSupplier();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseClass wrapper class

class IRoseClass : public COleDispatchDriver
{
public:
	IRoseClass() {}		// Calls COleDispatchDriver default constructor
	IRoseClass(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseClass(const IRoseClass& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	BOOL GetAbstract();
	void SetAbstract(BOOL);
	CString GetCardinality();
	void SetCardinality(LPCTSTR);
	BOOL GetPersistence();
	void SetPersistence(BOOL);
	LPDISPATCH GetParentCategory();
	void SetParentCategory(LPDISPATCH);
	LPDISPATCH GetAttributes();
	void SetAttributes(LPDISPATCH);
	LPDISPATCH GetOperations();
	void SetOperations(LPDISPATCH);
	LPDISPATCH GetExportControl();
	void SetExportControl(LPDISPATCH);
	LPDISPATCH GetClassKind();
	void SetClassKind(LPDISPATCH);
	LPDISPATCH GetConcurrency();
	void SetConcurrency(LPDISPATCH);
	BOOL GetFundamentalType();
	void SetFundamentalType(BOOL);
	CString GetSpace();
	void SetSpace(LPCTSTR);
	LPDISPATCH GetStateMachine();
	void SetStateMachine(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);
	LPDISPATCH GetParentClass();
	void SetParentClass(LPDISPATCH);
	LPDISPATCH GetParameters();
	void SetParameters(LPDISPATCH);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH GetHasRelations();
	LPDISPATCH GetInheritRelations();
	LPDISPATCH GetSuperclasses();
	LPDISPATCH GetAssociations();
	LPDISPATCH AddOperation(LPCTSTR theName, LPCTSTR retType);
	LPDISPATCH AddAttribute(LPCTSTR theName, LPCTSTR theType, LPCTSTR initVal);
	LPDISPATCH AddAssociation(LPCTSTR theSupplierRoleName, LPCTSTR theSupplierRoleType);
	LPDISPATCH AddHas(LPCTSTR theSupplierName, LPCTSTR theSupplierType);
	BOOL DeleteHas(LPDISPATCH theHas);
	BOOL DeleteAssociation(LPDISPATCH theAss);
	BOOL DeleteOperation(LPDISPATCH theOper);
	BOOL DeleteAttribute(LPDISPATCH theAttr);
	LPDISPATCH AddInheritRel(LPCTSTR theRelationName, LPCTSTR theParentClassName);
	BOOL DeleteInheritRel(LPDISPATCH theInheritRel);
	BOOL IsALinkClass();
	LPDISPATCH GetLinkAssociation();
	LPDISPATCH GetRoles();
	LPDISPATCH GetAssociateRoles();
	LPDISPATCH GetNestedClasses();
	LPDISPATCH AddNestedClass(LPCTSTR theName);
	BOOL DeleteNestedClass(LPDISPATCH theClass);
	LPDISPATCH GetAssignedModules();
	void AddAssignedModule(LPDISPATCH theModule);
	void RemoveAssignedModule(LPDISPATCH theModule);
	CString GetQualifiedName();
	void CreateStateMachine();
	void DeleteStateMachine();
	LPDISPATCH AddRealizeRel(LPCTSTR theRelationName, LPCTSTR theInterfaceName);
	BOOL DeleteRealizeRel(LPDISPATCH theRealizeRel);
	LPDISPATCH GetRealizeRelations();
	CString GetAssignedLanguage();
	BOOL IsNestedClass();
	LPDISPATCH GetSubclasses();
	LPDISPATCH GetClassDependencies();
	LPDISPATCH AddClassDependency(LPCTSTR theSupplerName, LPCTSTR theSupplierType);
	BOOL DeleteClassDependency(LPDISPATCH theClassDependency);
	LPDISPATCH AddParameter(LPCTSTR theName, LPCTSTR theType, LPCTSTR theDef, short position);
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseElement wrapper class

class IRoseElement : public COleDispatchDriver
{
public:
	IRoseElement() {}		// Calls COleDispatchDriver default constructor
	IRoseElement(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseElement(const IRoseElement& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseControllableUnit wrapper class

class IRoseControllableUnit : public COleDispatchDriver
{
public:
	IRoseControllableUnit() {}		// Calls COleDispatchDriver default constructor
	IRoseControllableUnit(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseControllableUnit(const IRoseControllableUnit& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	BOOL IsControlled();
	BOOL Control(LPCTSTR Path);
	BOOL IsLoaded();
	BOOL Load();
	BOOL IsModifiable();
	BOOL Unload();
	BOOL Modifiable(BOOL Modifiable);
	CString GetFileName();
	BOOL Save();
	BOOL SaveAs(LPCTSTR Path);
	CString GetQualifiedName();
	BOOL IsModified();
	BOOL Uncontrol();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseModel wrapper class

class IRoseModel : public COleDispatchDriver
{
public:
	IRoseModel() {}		// Calls COleDispatchDriver default constructor
	IRoseModel(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseModel(const IRoseModel& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetRootCategory();
	void SetRootCategory(LPDISPATCH);
	LPDISPATCH GetRootSubsystem();
	void SetRootSubsystem(LPDISPATCH);
	LPDISPATCH GetDeploymentDiagram();
	void SetDeploymentDiagram(LPDISPATCH);
	LPDISPATCH GetUseCases();
	void SetUseCases(LPDISPATCH);
	LPDISPATCH GetRootUseCaseCategory();
	void SetRootUseCaseCategory(LPDISPATCH);
	LPDISPATCH GetDefaultProperties();
	void SetDefaultProperties(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH GetAllAssociations();
	LPDISPATCH AddProcessor(LPCTSTR pName);
	BOOL DeleteProcessor(LPDISPATCH pProcessor);
	LPDISPATCH AddDevice(LPCTSTR pName);
	BOOL DeleteDevice(LPDISPATCH pDevice);
	LPDISPATCH GetSelectedClasses();
	LPDISPATCH GetSelectedCategories();
	LPDISPATCH GetSelectedModules();
	LPDISPATCH GetSelectedSubsystems();
	LPDISPATCH GetAllClasses();
	LPDISPATCH GetAllCategories();
	LPDISPATCH GetAllModules();
	LPDISPATCH GetAllSubsystems();
	LPDISPATCH GetAllProcessors();
	LPDISPATCH GetAllDevices();
	LPDISPATCH GetSelectedUseCases();
	LPDISPATCH GetAllUseCases();
	BOOL IsRootPackage();
	BOOL IsControlled();
	BOOL Control(LPCTSTR Path);
	BOOL IsLoaded();
	BOOL Load();
	BOOL IsModifiable();
	BOOL Unload();
	BOOL Modifiable(BOOL Modifiable);
	CString GetFileName();
	BOOL Save();
	BOOL SaveAs(LPCTSTR Path);
	LPDISPATCH FindItems(LPCTSTR ItemName);
	LPDISPATCH FindItemWithID(LPCTSTR UniqueID);
	LPDISPATCH FindClasses(LPCTSTR ClassName);
	LPDISPATCH FindClassWithID(LPCTSTR UniqueID);
	LPDISPATCH FindCategories(LPCTSTR CategoryName);
	LPDISPATCH FindCategoryWithID(LPCTSTR UniqueID);
	LPDISPATCH GetActiveDiagram();
	CString GetQualifiedName();
	BOOL IsModified();
	BOOL Uncontrol();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseTransition wrapper class

class IRoseTransition : public COleDispatchDriver
{
public:
	IRoseTransition() {}		// Calls COleDispatchDriver default constructor
	IRoseTransition(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseTransition(const IRoseTransition& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetSupplierName();
	void SetSupplierName(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	BOOL RedirectTo(LPDISPATCH newTarget);
	CString GetQualifiedName();
	BOOL HasClient();
	BOOL HasSupplier();
	LPDISPATCH GetClient();
	LPDISPATCH GetSupplier();
	LPDISPATCH GetTriggerAction();
	LPDISPATCH GetSendAction();
	LPDISPATCH GetTargetState();
	LPDISPATCH GetSourceState();
	LPDISPATCH GetTriggerEvent();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystemCollection wrapper class

class IRoseSubsystemCollection : public COleDispatchDriver
{
public:
	IRoseSubsystemCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseSubsystemCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseSubsystemCollection(const IRoseSubsystemCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseProcessor wrapper class

class IRoseProcessor : public COleDispatchDriver
{
public:
	IRoseProcessor() {}		// Calls COleDispatchDriver default constructor
	IRoseProcessor(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseProcessor(const IRoseProcessor& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetProcesses();
	void SetProcesses(LPDISPATCH);
	CString GetCharacteristics();
	void SetCharacteristics(LPCTSTR);
	LPDISPATCH GetScheduling();
	void SetScheduling(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH GetConnectedDevices();
	LPDISPATCH GetConnectedProcessors();
	LPDISPATCH AddProcess(LPCTSTR Name);
	BOOL DeleteProcess(LPDISPATCH theProcess);
	BOOL AddProcessorConnection(LPDISPATCH Processor);
	BOOL RemoveProcessorConnection(LPDISPATCH theProcessor);
	BOOL AddDeviceConnection(LPDISPATCH theDevice);
	BOOL RemoveDeviceConnection(LPDISPATCH theDevice);
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseCategoryDependencyCollection wrapper class

class IRoseCategoryDependencyCollection : public COleDispatchDriver
{
public:
	IRoseCategoryDependencyCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseCategoryDependencyCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseCategoryDependencyCollection(const IRoseCategoryDependencyCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IRoseProperty wrapper class

class IRoseProperty : public COleDispatchDriver
{
public:
	IRoseProperty() {}		// Calls COleDispatchDriver default constructor
	IRoseProperty(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseProperty(const IRoseProperty& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetValue();
	void SetValue(LPCTSTR);
	CString GetToolName();
	void SetToolName(LPCTSTR);
	CString GetType();
	void SetType(LPCTSTR);

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IRoseStateDiagram wrapper class

class IRoseStateDiagram : public COleDispatchDriver
{
public:
	IRoseStateDiagram() {}		// Calls COleDispatchDriver default constructor
	IRoseStateDiagram(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseStateDiagram(const IRoseStateDiagram& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	LPDISPATCH GetItemViews();
	void SetItemViews(LPDISPATCH);
	BOOL GetVisible();
	void SetVisible(BOOL);
	LPDISPATCH GetItems();
	void SetItems(LPDISPATCH);
	LPDISPATCH GetParent();
	void SetParent(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Layout();
	void Invalidate();
	void Update();
	LPDISPATCH GetViewFrom(LPDISPATCH theItem);
	BOOL IsActive();
	BOOL Exists(LPDISPATCH theItem);
	void Activate();
	void Render(LPCTSTR FileName);
	LPDISPATCH AddNoteView(LPCTSTR szNoteText, short nType);
	BOOL RemoveNoteView(LPDISPATCH pIDispNoteView);
	LPDISPATCH GetNoteViews();
	void RenderEnhanced(LPCTSTR FileName);
	void RenderToClipboard();
	void RenderEnhancedToClipboard();
	LPDISPATCH AddStateView(LPDISPATCH aState);
	BOOL RemoveStateView(LPDISPATCH View);
	LPDISPATCH GetSelectedStateViews();
	LPDISPATCH GetStateViews();
	LPDISPATCH GetSelectedTransitions();
	LPDISPATCH GetStateView(LPDISPATCH State);
	LPDISPATCH GetSelectedStates();
	LPDISPATCH GetSelectedItems();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseEvent wrapper class

class IRoseEvent : public COleDispatchDriver
{
public:
	IRoseEvent() {}		// Calls COleDispatchDriver default constructor
	IRoseEvent(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseEvent(const IRoseEvent& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetArguments();
	void SetArguments(LPCTSTR);
	CString GetName();
	void SetName(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetGuardCondition();
	void SetGuardCondition(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	CString GetQualifiedName();
	LPDISPATCH GetAction();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseRichType wrapper class

class IRoseRichType : public COleDispatchDriver
{
public:
	IRoseRichType() {}		// Calls COleDispatchDriver default constructor
	IRoseRichType(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseRichType(const IRoseRichType& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetValue();
	void SetValue(short);
	CString GetName();
	void SetName(LPCTSTR);
	LPDISPATCH GetTypes();
	void SetTypes(LPDISPATCH);

// Operations
public:
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseScenarioDiagramCollection wrapper class

class IRoseScenarioDiagramCollection : public COleDispatchDriver
{
public:
	IRoseScenarioDiagramCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseScenarioDiagramCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseScenarioDiagramCollection(const IRoseScenarioDiagramCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseParameter wrapper class

class IRoseParameter : public COleDispatchDriver
{
public:
	IRoseParameter() {}		// Calls COleDispatchDriver default constructor
	IRoseParameter(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseParameter(const IRoseParameter& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	BOOL GetConst();
	void SetConst(BOOL);
	CString GetType();
	void SetType(LPCTSTR);
	CString GetInitValue();
	void SetInitValue(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseOperation wrapper class

class IRoseOperation : public COleDispatchDriver
{
public:
	IRoseOperation() {}		// Calls COleDispatchDriver default constructor
	IRoseOperation(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseOperation(const IRoseOperation& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetReturnType();
	void SetReturnType(LPCTSTR);
	LPDISPATCH GetParameters();
	void SetParameters(LPDISPATCH);
	LPDISPATCH GetExportControl();
	void SetExportControl(LPDISPATCH);
	LPDISPATCH GetConcurrency();
	void SetConcurrency(LPDISPATCH);
	CString GetPreconditions();
	void SetPreconditions(LPCTSTR);
	CString GetSemantics();
	void SetSemantics(LPCTSTR);
	CString GetPostconditions();
	void SetPostconditions(LPCTSTR);
	CString GetProtocol();
	void SetProtocol(LPCTSTR);
	CString GetQualification();
	void SetQualification(LPCTSTR);
	CString GetExceptions();
	void SetExceptions(LPCTSTR);
	CString GetSize();
	void SetSize(LPCTSTR);
	CString GetTime();
	void SetTime(LPCTSTR);
	BOOL GetVirtual();
	void SetVirtual(BOOL);
	LPDISPATCH GetParentClass();
	void SetParentClass(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH AddParameter(LPCTSTR theName, LPCTSTR theType, LPCTSTR theDef, short position);
	void RemoveAllParameters();
	BOOL DeleteParameter(LPDISPATCH theParameter);
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseView_LineColor wrapper class

class IRoseView_LineColor : public COleDispatchDriver
{
public:
	IRoseView_LineColor() {}		// Calls COleDispatchDriver default constructor
	IRoseView_LineColor(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseView_LineColor(const IRoseView_LineColor& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetBlue();
	void SetBlue(short);
	short GetGreen();
	void SetGreen(short);
	short GetRed();
	void SetRed(short);

// Operations
public:
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseAddInManager wrapper class

class IRoseAddInManager : public COleDispatchDriver
{
public:
	IRoseAddInManager() {}		// Calls COleDispatchDriver default constructor
	IRoseAddInManager(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseAddInManager(const IRoseAddInManager& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	LPDISPATCH GetAddIns();
	void SetAddIns(LPDISPATCH);

// Operations
public:
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseStateDiagramCollection wrapper class

class IRoseStateDiagramCollection : public COleDispatchDriver
{
public:
	IRoseStateDiagramCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseStateDiagramCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseStateDiagramCollection(const IRoseStateDiagramCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseItemViewCollection wrapper class

class IRoseItemViewCollection : public COleDispatchDriver
{
public:
	IRoseItemViewCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseItemViewCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseItemViewCollection(const IRoseItemViewCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRosePropertyCollection wrapper class

class IRosePropertyCollection : public COleDispatchDriver
{
public:
	IRosePropertyCollection() {}		// Calls COleDispatchDriver default constructor
	IRosePropertyCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRosePropertyCollection(const IRosePropertyCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseOperationCollection wrapper class

class IRoseOperationCollection : public COleDispatchDriver
{
public:
	IRoseOperationCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseOperationCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseOperationCollection(const IRoseOperationCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseDeviceCollection wrapper class

class IRoseDeviceCollection : public COleDispatchDriver
{
public:
	IRoseDeviceCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseDeviceCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseDeviceCollection(const IRoseDeviceCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseObject wrapper class

class IRoseObject : public COleDispatchDriver
{
public:
	IRoseObject() {}		// Calls COleDispatchDriver default constructor
	IRoseObject(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseObject(const IRoseObject& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseModuleVisibilityRelationship wrapper class

class IRoseModuleVisibilityRelationship : public COleDispatchDriver
{
public:
	IRoseModuleVisibilityRelationship() {}		// Calls COleDispatchDriver default constructor
	IRoseModuleVisibilityRelationship(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseModuleVisibilityRelationship(const IRoseModuleVisibilityRelationship& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetSupplierName();
	void SetSupplierName(LPCTSTR);
	LPDISPATCH GetContextModule();
	void SetContextModule(LPDISPATCH);
	LPDISPATCH GetSupplierModule();
	void SetSupplierModule(LPDISPATCH);
	LPDISPATCH GetContextSubsystem();
	void SetContextSubsystem(LPDISPATCH);
	LPDISPATCH GetSupplierSubsystem();
	void SetSupplierSubsystem(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);
	LPDISPATCH GetContextClass();
	void SetContextClass(LPDISPATCH);
	LPDISPATCH GetSupplierClass();
	void SetSupplierClass(LPDISPATCH);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	BOOL HasClient();
	BOOL HasSupplier();
	LPDISPATCH GetClient();
	LPDISPATCH GetSupplier();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseComponentViewCollection wrapper class

class IRoseComponentViewCollection : public COleDispatchDriver
{
public:
	IRoseComponentViewCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseComponentViewCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseComponentViewCollection(const IRoseComponentViewCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseHasRelationshipCollection wrapper class

class IRoseHasRelationshipCollection : public COleDispatchDriver
{
public:
	IRoseHasRelationshipCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseHasRelationshipCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseHasRelationshipCollection(const IRoseHasRelationshipCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseClassViewCollection wrapper class

class IRoseClassViewCollection : public COleDispatchDriver
{
public:
	IRoseClassViewCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseClassViewCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseClassViewCollection(const IRoseClassViewCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseDeploymentDiagram wrapper class

class IRoseDeploymentDiagram : public COleDispatchDriver
{
public:
	IRoseDeploymentDiagram() {}		// Calls COleDispatchDriver default constructor
	IRoseDeploymentDiagram(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseDeploymentDiagram(const IRoseDeploymentDiagram& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	LPDISPATCH GetItemViews();
	void SetItemViews(LPDISPATCH);
	BOOL GetVisible();
	void SetVisible(BOOL);
	LPDISPATCH GetItems();
	void SetItems(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Layout();
	void Invalidate();
	void Update();
	LPDISPATCH GetViewFrom(LPDISPATCH theItem);
	BOOL IsActive();
	BOOL Exists(LPDISPATCH theItem);
	void Activate();
	void Render(LPCTSTR FileName);
	LPDISPATCH AddNoteView(LPCTSTR szNoteText, short nType);
	BOOL RemoveNoteView(LPDISPATCH pIDispNoteView);
	LPDISPATCH GetNoteViews();
	void RenderEnhanced(LPCTSTR FileName);
	void RenderToClipboard();
	void RenderEnhancedToClipboard();
	LPDISPATCH GetProcessors();
	LPDISPATCH GetDevices();
	LPDISPATCH AddProcessor(LPDISPATCH theProcessor, short x, short y);
	LPDISPATCH AddDevice(LPDISPATCH theDevice, short x, short y);
	BOOL RemoveProcessor(LPDISPATCH theProcessor);
	BOOL RemoveDevice(LPDISPATCH theDevice);
	LPDISPATCH GetSelectedItems();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseInstanceView wrapper class

class IRoseInstanceView : public COleDispatchDriver
{
public:
	IRoseInstanceView() {}		// Calls COleDispatchDriver default constructor
	IRoseInstanceView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseInstanceView(const IRoseInstanceView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	short GetYPosition();
	void SetYPosition(short);
	short GetXPosition();
	void SetXPosition(short);
	short GetHeight();
	void SetHeight(short);
	short GetWidth();
	void SetWidth(short);
	LPDISPATCH GetFillColor();
	void SetFillColor(LPDISPATCH);
	LPDISPATCH GetLineColor();
	void SetLineColor(LPDISPATCH);
	LPDISPATCH GetSubViews();
	void SetSubViews(LPDISPATCH);
	LPDISPATCH GetParentView();
	void SetParentView(LPDISPATCH);
	LPDISPATCH GetItem();
	void SetItem(LPDISPATCH);
	LPDISPATCH GetParentDiagram();
	void SetParentDiagram(LPDISPATCH);
	LPDISPATCH GetFont();
	void SetFont(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Invalidate();
	BOOL SupportsFillColor();
	BOOL SupportsLineColor();
	BOOL IsSelected();
	void SetSelected(BOOL bSelect);
	BOOL PointInView(short x, short y);
	short GetDefaultWidth();
	short GetDefaultHeight();
	short GetMinWidth();
	short GetMinHeight();
	BOOL HasItem();
	BOOL HasParentView();
	LPDISPATCH GetInstance();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseLink wrapper class

class IRoseLink : public COleDispatchDriver
{
public:
	IRoseLink() {}		// Calls COleDispatchDriver default constructor
	IRoseLink(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseLink(const IRoseLink& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetLinkRole1();
	void SetLinkRole1(LPDISPATCH);
	LPDISPATCH GetLinkRole2();
	void SetLinkRole2(LPDISPATCH);
	BOOL GetLinkRole1Shared();
	void SetLinkRole1Shared(BOOL);
	LPDISPATCH GetLinkRole2Visibility();
	void SetLinkRole2Visibility(LPDISPATCH);
	LPDISPATCH GetLinkRole1Visibility();
	void SetLinkRole1Visibility(LPDISPATCH);
	BOOL GetLinkRole2Shared();
	void SetLinkRole2Shared(BOOL);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH GetMessages();
	BOOL DeleteMessage(LPDISPATCH TheMessage);
	BOOL AssignAssociation(LPDISPATCH TheAssoc);
	BOOL UnassignAssociation();
	LPDISPATCH AddMessageTo(LPCTSTR Name, LPDISPATCH ToInstance, short SequenceNumber);
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseObjectInstance wrapper class

class IRoseObjectInstance : public COleDispatchDriver
{
public:
	IRoseObjectInstance() {}		// Calls COleDispatchDriver default constructor
	IRoseObjectInstance(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseObjectInstance(const IRoseObjectInstance& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetClassName();
	void SetClassName(LPCTSTR);
	BOOL GetMultipleInstances();
	void SetMultipleInstances(BOOL);
	LPDISPATCH GetLinks();
	void SetLinks(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);
	short GetPersistence();
	void SetPersistence(short);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	BOOL IsClass();
	LPDISPATCH GetClass();
	LPDISPATCH AddLink(LPCTSTR Name, LPDISPATCH ToInstance);
	BOOL DeleteLink(LPDISPATCH aLink);
	CString GetQualifiedName();
	CString IdentifyClass();
};
/////////////////////////////////////////////////////////////////////////////
// IRoseCategoryDependency wrapper class

class IRoseCategoryDependency : public COleDispatchDriver
{
public:
	IRoseCategoryDependency() {}		// Calls COleDispatchDriver default constructor
	IRoseCategoryDependency(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseCategoryDependency(const IRoseCategoryDependency& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetSupplierName();
	void SetSupplierName(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	BOOL HasClient();
	BOOL HasSupplier();
	LPDISPATCH GetClient();
	LPDISPATCH GetSupplier();
	LPDISPATCH GetContextCategory();
	LPDISPATCH GetSupplierCategory();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseInheritRelation wrapper class

class IRoseInheritRelation : public COleDispatchDriver
{
public:
	IRoseInheritRelation() {}		// Calls COleDispatchDriver default constructor
	IRoseInheritRelation(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseInheritRelation(const IRoseInheritRelation& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetSupplierName();
	void SetSupplierName(LPCTSTR);
	BOOL GetVirtual();
	void SetVirtual(BOOL);
	BOOL GetFriendshipRequired();
	void SetFriendshipRequired(BOOL);
	LPDISPATCH GetExportControl();
	void SetExportControl(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	LPDISPATCH GetContextClass();
	LPDISPATCH GetSupplierClass();
	BOOL HasClient();
	BOOL HasSupplier();
	LPDISPATCH GetClient();
	LPDISPATCH GetSupplier();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseView_Font wrapper class

class IRoseView_Font : public COleDispatchDriver
{
public:
	IRoseView_Font() {}		// Calls COleDispatchDriver default constructor
	IRoseView_Font(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseView_Font(const IRoseView_Font& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetSize();
	void SetSize(short);
	CString GetFaceName();
	void SetFaceName(LPCTSTR);
	short GetBlue();
	void SetBlue(short);
	short GetGreen();
	void SetGreen(short);
	short GetRed();
	void SetRed(short);
	BOOL GetBold();
	void SetBold(BOOL);
	BOOL GetItalic();
	void SetItalic(BOOL);
	BOOL GetUnderline();
	void SetUnderline(BOOL);
	BOOL GetStrikeThrough();
	void SetStrikeThrough(BOOL);

// Operations
public:
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseStateMachine wrapper class

class IRoseStateMachine : public COleDispatchDriver
{
public:
	IRoseStateMachine() {}		// Calls COleDispatchDriver default constructor
	IRoseStateMachine(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseStateMachine(const IRoseStateMachine& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	LPDISPATCH GetDiagram();
	void SetDiagram(LPDISPATCH);
	LPDISPATCH GetParentClass();
	void SetParentClass(LPDISPATCH);
	LPDISPATCH GetStates();
	void SetStates(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH AddState(LPCTSTR Name);
	BOOL DeleteState(LPDISPATCH State);
	BOOL RelocateState(LPDISPATCH State);
	LPDISPATCH GetAllStates();
	LPDISPATCH GetAllTransitions();
	CString GetQualifiedName();
	LPDISPATCH GetTransitions();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseModule wrapper class

class IRoseModule : public COleDispatchDriver
{
public:
	IRoseModule() {}		// Calls COleDispatchDriver default constructor
	IRoseModule(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseModule(const IRoseModule& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetPath();
	void SetPath(LPCTSTR);
	LPDISPATCH GetParentSubsystem();
	void SetParentSubsystem(LPDISPATCH);
	LPDISPATCH GetType();
	void SetType(LPDISPATCH);
	LPDISPATCH GetPart();
	void SetPart(LPDISPATCH);
	CString GetDeclarations();
	void SetDeclarations(LPCTSTR);
	LPDISPATCH GetOtherPart();
	void SetOtherPart(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);
	CString GetAssignedLanguage();
	void SetAssignedLanguage(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH GetAssignedClasses();
	LPDISPATCH AddVisibilityRelationship(LPDISPATCH theModule);
	BOOL DeleteVisibilityRelationship(LPDISPATCH theVisibilityRelationship);
	LPDISPATCH GetDependencies();
	LPDISPATCH GetAllDependencies();
	LPDISPATCH GetSubsystemDependencies(LPDISPATCH theSubsystem);
	LPDISPATCH AddSubsystemVisibilityRelation(LPDISPATCH theSubsystem);
	CString GetQualifiedName();
	LPDISPATCH AddRealizeRel(LPCTSTR theRelationName, LPCTSTR theInterfaceName);
	BOOL DeleteRealizeRel(LPDISPATCH theRealizeRel);
	LPDISPATCH GetRealizeRelations();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseUseCase wrapper class

class IRoseUseCase : public COleDispatchDriver
{
public:
	IRoseUseCase() {}		// Calls COleDispatchDriver default constructor
	IRoseUseCase(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseUseCase(const IRoseUseCase& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	BOOL GetAbstract();
	void SetAbstract(BOOL);
	LPDISPATCH GetParentCategory();
	void SetParentCategory(LPDISPATCH);
	LPDISPATCH GetClassDiagrams();
	void SetClassDiagrams(LPDISPATCH);
	LPDISPATCH GetScenarioDiagrams();
	void SetScenarioDiagrams(LPDISPATCH);
	LPDISPATCH GetStateMachine();
	void SetStateMachine(LPDISPATCH);
	CString GetRank();
	void SetRank(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH AddClassDiagram(LPCTSTR szName);
	BOOL DeleteClassDiagram(LPDISPATCH pIDispatch);
	BOOL DeleteScenarioDiagram(LPDISPATCH pIDispatch);
	LPDISPATCH AddScenarioDiagram(LPCTSTR szName, short iType);
	LPDISPATCH AddInheritRel(LPCTSTR szName, LPCTSTR szParentName);
	BOOL DeleteInheritRel(LPDISPATCH pIDispatchRelation);
	LPDISPATCH GetAssociations();
	LPDISPATCH AddAssociation(LPCTSTR szSupplierRoleName, LPCTSTR szSupplierRoleType);
	BOOL DeleteAssociation(LPDISPATCH pDispatchAssociation);
	LPDISPATCH GetSuperUseCases();
	LPDISPATCH GetInheritRelations();
	LPDISPATCH GetRoles();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseItemCollection wrapper class

class IRoseItemCollection : public COleDispatchDriver
{
public:
	IRoseItemCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseItemCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseItemCollection(const IRoseItemCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseNoteViewCollection wrapper class

class IRoseNoteViewCollection : public COleDispatchDriver
{
public:
	IRoseNoteViewCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseNoteViewCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseNoteViewCollection(const IRoseNoteViewCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseInheritRelationCollection wrapper class

class IRoseInheritRelationCollection : public COleDispatchDriver
{
public:
	IRoseInheritRelationCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseInheritRelationCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseInheritRelationCollection(const IRoseInheritRelationCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseDeploymentDiagramCollection wrapper class

class IRoseDeploymentDiagramCollection : public COleDispatchDriver
{
public:
	IRoseDeploymentDiagramCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseDeploymentDiagramCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseDeploymentDiagramCollection(const IRoseDeploymentDiagramCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseStringCollection wrapper class

class IRoseStringCollection : public COleDispatchDriver
{
public:
	IRoseStringCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseStringCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseStringCollection(const IRoseStringCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	CString GetAt(short id);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseStateViewCollection wrapper class

class IRoseStateViewCollection : public COleDispatchDriver
{
public:
	IRoseStateViewCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseStateViewCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseStateViewCollection(const IRoseStateViewCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseProcessCollection wrapper class

class IRoseProcessCollection : public COleDispatchDriver
{
public:
	IRoseProcessCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseProcessCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseProcessCollection(const IRoseProcessCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseAssociationCollection wrapper class

class IRoseAssociationCollection : public COleDispatchDriver
{
public:
	IRoseAssociationCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseAssociationCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseAssociationCollection(const IRoseAssociationCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseModuleDiagramCollection wrapper class

class IRoseModuleDiagramCollection : public COleDispatchDriver
{
public:
	IRoseModuleDiagramCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseModuleDiagramCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseModuleDiagramCollection(const IRoseModuleDiagramCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseDiagram wrapper class

class IRoseDiagram : public COleDispatchDriver
{
public:
	IRoseDiagram() {}		// Calls COleDispatchDriver default constructor
	IRoseDiagram(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseDiagram(const IRoseDiagram& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	LPDISPATCH GetItemViews();
	void SetItemViews(LPDISPATCH);
	BOOL GetVisible();
	void SetVisible(BOOL);
	LPDISPATCH GetItems();
	void SetItems(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Layout();
	void Invalidate();
	void Update();
	LPDISPATCH GetViewFrom(LPDISPATCH theItem);
	BOOL IsActive();
	BOOL Exists(LPDISPATCH theItem);
	void Activate();
	void Render(LPCTSTR FileName);
	LPDISPATCH AddNoteView(LPCTSTR szNoteText, short nType);
	BOOL RemoveNoteView(LPDISPATCH pIDispNoteView);
	LPDISPATCH GetNoteViews();
	void RenderEnhanced(LPCTSTR FileName);
	void RenderToClipboard();
	void RenderEnhancedToClipboard();
	LPDISPATCH GetSelectedItems();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseRichTypeValuesCollection wrapper class

class IRoseRichTypeValuesCollection : public COleDispatchDriver
{
public:
	IRoseRichTypeValuesCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseRichTypeValuesCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseRichTypeValuesCollection(const IRoseRichTypeValuesCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	CString GetAt(short id);
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystemView wrapper class

class IRoseSubsystemView : public COleDispatchDriver
{
public:
	IRoseSubsystemView() {}		// Calls COleDispatchDriver default constructor
	IRoseSubsystemView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseSubsystemView(const IRoseSubsystemView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	short GetYPosition();
	void SetYPosition(short);
	short GetXPosition();
	void SetXPosition(short);
	short GetHeight();
	void SetHeight(short);
	short GetWidth();
	void SetWidth(short);
	LPDISPATCH GetFillColor();
	void SetFillColor(LPDISPATCH);
	LPDISPATCH GetLineColor();
	void SetLineColor(LPDISPATCH);
	LPDISPATCH GetSubViews();
	void SetSubViews(LPDISPATCH);
	LPDISPATCH GetParentView();
	void SetParentView(LPDISPATCH);
	LPDISPATCH GetItem();
	void SetItem(LPDISPATCH);
	LPDISPATCH GetParentDiagram();
	void SetParentDiagram(LPDISPATCH);
	LPDISPATCH GetFont();
	void SetFont(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Invalidate();
	BOOL SupportsFillColor();
	BOOL SupportsLineColor();
	BOOL IsSelected();
	void SetSelected(BOOL bSelect);
	BOOL PointInView(short x, short y);
	short GetDefaultWidth();
	short GetDefaultHeight();
	short GetMinWidth();
	short GetMinHeight();
	BOOL HasItem();
	BOOL HasParentView();
	CString GetQualifiedName();
	LPDISPATCH GetSubsystem();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseComponentView wrapper class

class IRoseComponentView : public COleDispatchDriver
{
public:
	IRoseComponentView() {}		// Calls COleDispatchDriver default constructor
	IRoseComponentView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseComponentView(const IRoseComponentView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	short GetYPosition();
	void SetYPosition(short);
	short GetXPosition();
	void SetXPosition(short);
	short GetHeight();
	void SetHeight(short);
	short GetWidth();
	void SetWidth(short);
	LPDISPATCH GetFillColor();
	void SetFillColor(LPDISPATCH);
	LPDISPATCH GetLineColor();
	void SetLineColor(LPDISPATCH);
	LPDISPATCH GetSubViews();
	void SetSubViews(LPDISPATCH);
	LPDISPATCH GetParentView();
	void SetParentView(LPDISPATCH);
	LPDISPATCH GetItem();
	void SetItem(LPDISPATCH);
	LPDISPATCH GetParentDiagram();
	void SetParentDiagram(LPDISPATCH);
	LPDISPATCH GetFont();
	void SetFont(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Invalidate();
	BOOL SupportsFillColor();
	BOOL SupportsLineColor();
	BOOL IsSelected();
	void SetSelected(BOOL bSelect);
	BOOL PointInView(short x, short y);
	short GetDefaultWidth();
	short GetDefaultHeight();
	short GetMinWidth();
	short GetMinHeight();
	BOOL HasItem();
	BOOL HasParentView();
	CString GetQualifiedName();
	LPDISPATCH GetComponent();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseAttribute wrapper class

class IRoseAttribute : public COleDispatchDriver
{
public:
	IRoseAttribute() {}		// Calls COleDispatchDriver default constructor
	IRoseAttribute(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseAttribute(const IRoseAttribute& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetInitValue();
	void SetInitValue(LPCTSTR);
	CString GetType();
	void SetType(LPCTSTR);
	BOOL GetStatic();
	void SetStatic(BOOL);
	LPDISPATCH GetExportControl();
	void SetExportControl(LPDISPATCH);
	LPDISPATCH GetContainment();
	void SetContainment(LPDISPATCH);
	BOOL GetDerived();
	void SetDerived(BOOL);
	LPDISPATCH GetParentClass();
	void SetParentClass(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseClassDiagram wrapper class

class IRoseClassDiagram : public COleDispatchDriver
{
public:
	IRoseClassDiagram() {}		// Calls COleDispatchDriver default constructor
	IRoseClassDiagram(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseClassDiagram(const IRoseClassDiagram& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	LPDISPATCH GetItemViews();
	void SetItemViews(LPDISPATCH);
	BOOL GetVisible();
	void SetVisible(BOOL);
	LPDISPATCH GetItems();
	void SetItems(LPDISPATCH);
	LPDISPATCH GetParentCategory();
	void SetParentCategory(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Layout();
	void Invalidate();
	void Update();
	LPDISPATCH GetViewFrom(LPDISPATCH theItem);
	BOOL IsActive();
	BOOL Exists(LPDISPATCH theItem);
	void Activate();
	void Render(LPCTSTR FileName);
	LPDISPATCH AddNoteView(LPCTSTR szNoteText, short nType);
	BOOL RemoveNoteView(LPDISPATCH pIDispNoteView);
	LPDISPATCH GetNoteViews();
	void RenderEnhanced(LPCTSTR FileName);
	void RenderToClipboard();
	void RenderEnhancedToClipboard();
	BOOL AddClass(LPDISPATCH theClass);
	BOOL AddCategory(LPDISPATCH theCat);
	LPDISPATCH GetSelectedCategories();
	LPDISPATCH GetSelectedClasses();
	LPDISPATCH GetClasses();
	LPDISPATCH GetCategories();
	BOOL AddAssociation(LPDISPATCH theAssociation);
	BOOL RemoveClass(LPDISPATCH theClass);
	BOOL RemoveCategory(LPDISPATCH theCategory);
	BOOL RemoveAssociation(LPDISPATCH theAssociation);
	LPDISPATCH GetAssociations();
	BOOL AddUseCase(LPDISPATCH theUseCase);
	BOOL RemoveUseCase(LPDISPATCH theUseCase);
	LPDISPATCH GetUseCases();
	BOOL IsUseCaseDiagram();
	LPDISPATCH GetClassView(LPDISPATCH theClass);
	LPDISPATCH GetSelectedItems();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseNoteView wrapper class

class IRoseNoteView : public COleDispatchDriver
{
public:
	IRoseNoteView() {}		// Calls COleDispatchDriver default constructor
	IRoseNoteView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseNoteView(const IRoseNoteView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	short GetYPosition();
	void SetYPosition(short);
	short GetXPosition();
	void SetXPosition(short);
	short GetHeight();
	void SetHeight(short);
	short GetWidth();
	void SetWidth(short);
	LPDISPATCH GetFillColor();
	void SetFillColor(LPDISPATCH);
	LPDISPATCH GetLineColor();
	void SetLineColor(LPDISPATCH);
	LPDISPATCH GetSubViews();
	void SetSubViews(LPDISPATCH);
	LPDISPATCH GetParentView();
	void SetParentView(LPDISPATCH);
	LPDISPATCH GetItem();
	void SetItem(LPDISPATCH);
	LPDISPATCH GetParentDiagram();
	void SetParentDiagram(LPDISPATCH);
	CString GetText();
	void SetText(LPCTSTR);
	LPDISPATCH GetFont();
	void SetFont(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Invalidate();
	BOOL SupportsFillColor();
	BOOL SupportsLineColor();
	BOOL IsSelected();
	void SetSelected(BOOL bSelect);
	BOOL PointInView(short x, short y);
	short GetDefaultWidth();
	short GetDefaultHeight();
	short GetMinWidth();
	short GetMinHeight();
	BOOL HasItem();
	BOOL HasParentView();
	short GetNoteViewType();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRosePackage wrapper class

class IRosePackage : public COleDispatchDriver
{
public:
	IRosePackage() {}		// Calls COleDispatchDriver default constructor
	IRosePackage(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRosePackage(const IRosePackage& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	BOOL IsRootPackage();
	BOOL IsControlled();
	BOOL Control(LPCTSTR Path);
	BOOL IsLoaded();
	BOOL Load();
	BOOL IsModifiable();
	BOOL Unload();
	BOOL Modifiable(BOOL Modifiable);
	CString GetFileName();
	BOOL Save();
	BOOL SaveAs(LPCTSTR Path);
	CString GetQualifiedName();
	BOOL IsModified();
	BOOL Uncontrol();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRosePathMap wrapper class

class IRosePathMap : public COleDispatchDriver
{
public:
	IRosePathMap() {}		// Calls COleDispatchDriver default constructor
	IRosePathMap(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRosePathMap(const IRosePathMap& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	BOOL DeleteEntry(LPCTSTR Symbol);
	CString GetActualPath(LPCTSTR VirtualPath);
	CString GetVirtualPath(LPCTSTR ActualPath);
	BOOL HasEntry(LPCTSTR Symbol);
	BOOL AddEntry(LPCTSTR Symbol, LPCTSTR Path, LPCTSTR Comment);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseModuleVisibilityRelationshipCollection wrapper class

class IRoseModuleVisibilityRelationshipCollection : public COleDispatchDriver
{
public:
	IRoseModuleVisibilityRelationshipCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseModuleVisibilityRelationshipCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseModuleVisibilityRelationshipCollection(const IRoseModuleVisibilityRelationshipCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseClassCollection wrapper class

class IRoseClassCollection : public COleDispatchDriver
{
public:
	IRoseClassCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseClassCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseClassCollection(const IRoseClassCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseMessage wrapper class

class IRoseMessage : public COleDispatchDriver
{
public:
	IRoseMessage() {}		// Calls COleDispatchDriver default constructor
	IRoseMessage(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseMessage(const IRoseMessage& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);
	short GetSynchronization();
	void SetSynchronization(short);
	short GetFrequency();
	void SetFrequency(short);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH GetSenderObject();
	LPDISPATCH GetReceiverObject();
	BOOL IsMessageToSelf();
	BOOL IsOperation();
	LPDISPATCH GetOperation();
	LPDISPATCH GetLink();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseClassDependencyCollection wrapper class

class IRoseClassDependencyCollection : public COleDispatchDriver
{
public:
	IRoseClassDependencyCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseClassDependencyCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseClassDependencyCollection(const IRoseClassDependencyCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IRoseAssociation wrapper class

class IRoseAssociation : public COleDispatchDriver
{
public:
	IRoseAssociation() {}		// Calls COleDispatchDriver default constructor
	IRoseAssociation(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseAssociation(const IRoseAssociation& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetRoles();
	void SetRoles(LPDISPATCH);
	LPDISPATCH GetRole1();
	void SetRole1(LPDISPATCH);
	LPDISPATCH GetRole2();
	void SetRole2(LPDISPATCH);
	LPDISPATCH GetLinkClass();
	void SetLinkClass(LPDISPATCH);
	BOOL GetDerived();
	void SetDerived(BOOL);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH GetCorrespondingRole(LPDISPATCH Class);
	LPDISPATCH GetOtherRole(LPDISPATCH Class);
	void SetLinkClassName(LPCTSTR theClassName);
	CString GetQualifiedName();
	BOOL NameIsDirectional();
	LPDISPATCH GetRoleForNameDirection();
	void SetRoleForNameDirection(LPDISPATCH theRole);
	void ClearRoleForNameDirection();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseEventCollection wrapper class

class IRoseEventCollection : public COleDispatchDriver
{
public:
	IRoseEventCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseEventCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseEventCollection(const IRoseEventCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseStateCollection wrapper class

class IRoseStateCollection : public COleDispatchDriver
{
public:
	IRoseStateCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseStateCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseStateCollection(const IRoseStateCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseStateView wrapper class

class IRoseStateView : public COleDispatchDriver
{
public:
	IRoseStateView() {}		// Calls COleDispatchDriver default constructor
	IRoseStateView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseStateView(const IRoseStateView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	short GetYPosition();
	void SetYPosition(short);
	short GetXPosition();
	void SetXPosition(short);
	short GetHeight();
	void SetHeight(short);
	short GetWidth();
	void SetWidth(short);
	LPDISPATCH GetFillColor();
	void SetFillColor(LPDISPATCH);
	LPDISPATCH GetLineColor();
	void SetLineColor(LPDISPATCH);
	LPDISPATCH GetSubViews();
	void SetSubViews(LPDISPATCH);
	LPDISPATCH GetParentView();
	void SetParentView(LPDISPATCH);
	LPDISPATCH GetItem();
	void SetItem(LPDISPATCH);
	LPDISPATCH GetParentDiagram();
	void SetParentDiagram(LPDISPATCH);
	LPDISPATCH GetFont();
	void SetFont(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Invalidate();
	BOOL SupportsFillColor();
	BOOL SupportsLineColor();
	BOOL IsSelected();
	void SetSelected(BOOL bSelect);
	BOOL PointInView(short x, short y);
	short GetDefaultWidth();
	short GetDefaultHeight();
	short GetMinWidth();
	short GetMinHeight();
	BOOL HasItem();
	BOOL HasParentView();
	LPDISPATCH GetState();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystemViewCollection wrapper class

class IRoseSubsystemViewCollection : public COleDispatchDriver
{
public:
	IRoseSubsystemViewCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseSubsystemViewCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseSubsystemViewCollection(const IRoseSubsystemViewCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseModuleDiagram wrapper class

class IRoseModuleDiagram : public COleDispatchDriver
{
public:
	IRoseModuleDiagram() {}		// Calls COleDispatchDriver default constructor
	IRoseModuleDiagram(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseModuleDiagram(const IRoseModuleDiagram& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	LPDISPATCH GetItemViews();
	void SetItemViews(LPDISPATCH);
	BOOL GetVisible();
	void SetVisible(BOOL);
	LPDISPATCH GetItems();
	void SetItems(LPDISPATCH);
	LPDISPATCH GetParentSubsystem();
	void SetParentSubsystem(LPDISPATCH);
	LPDISPATCH GetComponentViews();
	void SetComponentViews(LPDISPATCH);
	LPDISPATCH GetSubsystemViews();
	void SetSubsystemViews(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Layout();
	void Invalidate();
	void Update();
	LPDISPATCH GetViewFrom(LPDISPATCH theItem);
	BOOL IsActive();
	BOOL Exists(LPDISPATCH theItem);
	void Activate();
	void Render(LPCTSTR FileName);
	LPDISPATCH AddNoteView(LPCTSTR szNoteText, short nType);
	BOOL RemoveNoteView(LPDISPATCH pIDispNoteView);
	LPDISPATCH GetNoteViews();
	void RenderEnhanced(LPCTSTR FileName);
	void RenderToClipboard();
	void RenderEnhancedToClipboard();
	LPDISPATCH GetModules();
	LPDISPATCH GetSubsystems();
	LPDISPATCH GetSelectedModules();
	LPDISPATCH GetSelectedSubsystems();
	LPDISPATCH AddComponentView(LPDISPATCH aModule);
	BOOL RemoveComponentView(LPDISPATCH aComponentView);
	LPDISPATCH AddSubsystemView(LPDISPATCH aSubsystem);
	BOOL RemoveSubsystemView(LPDISPATCH aSubsystemView);
	LPDISPATCH GetSelectedItems();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseSubsystem wrapper class

class IRoseSubsystem : public COleDispatchDriver
{
public:
	IRoseSubsystem() {}		// Calls COleDispatchDriver default constructor
	IRoseSubsystem(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseSubsystem(const IRoseSubsystem& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetModules();
	void SetModules(LPDISPATCH);
	LPDISPATCH GetSubsystems();
	void SetSubsystems(LPDISPATCH);
	LPDISPATCH GetParentSubsystem();
	void SetParentSubsystem(LPDISPATCH);
	LPDISPATCH GetModuleDiagrams();
	void SetModuleDiagrams(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH AddModule(LPCTSTR theName);
	LPDISPATCH AddModuleDiagram(LPCTSTR Name);
	LPDISPATCH AddSubsystem(LPCTSTR theName);
	void RelocateModule(LPDISPATCH theModule);
	void RelocateSubsystem(LPDISPATCH theSubsystem);
	void RelocateModuleDiagram(LPDISPATCH theModDiagram);
	LPDISPATCH GetAllModules();
	LPDISPATCH GetAllSubsystems();
	LPDISPATCH GetAssignedCategories();
	LPDISPATCH GetAssignedClasses();
	LPDISPATCH GetVisibleSubsystems();
	LPDISPATCH GetSubsystemDependencies(LPDISPATCH theSubsystem);
	BOOL TopLevel();
	LPDISPATCH AddVisibilityRelationship(LPDISPATCH theModule);
	BOOL DeleteVisibilityRelationship(LPDISPATCH theVisibilityRelationship);
	LPDISPATCH AddSubsystemVisibilityRelation(LPDISPATCH theSubsystem);
	BOOL DeleteModule(LPDISPATCH pIDispatch);
	BOOL DeleteSubSystem(LPDISPATCH pIDispatch);
	BOOL IsRootPackage();
	BOOL IsControlled();
	BOOL Control(LPCTSTR Path);
	BOOL IsLoaded();
	BOOL Load();
	BOOL IsModifiable();
	BOOL Unload();
	BOOL Modifiable(BOOL Modifiable);
	CString GetFileName();
	BOOL Save();
	BOOL SaveAs(LPCTSTR Path);
	CString GetQualifiedName();
	BOOL IsModified();
	BOOL Uncontrol();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseExternalDocumentCollection wrapper class

class IRoseExternalDocumentCollection : public COleDispatchDriver
{
public:
	IRoseExternalDocumentCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseExternalDocumentCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseExternalDocumentCollection(const IRoseExternalDocumentCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseInstanceViewCollection wrapper class

class IRoseInstanceViewCollection : public COleDispatchDriver
{
public:
	IRoseInstanceViewCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseInstanceViewCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseInstanceViewCollection(const IRoseInstanceViewCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseItemView wrapper class

class IRoseItemView : public COleDispatchDriver
{
public:
	IRoseItemView() {}		// Calls COleDispatchDriver default constructor
	IRoseItemView(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseItemView(const IRoseItemView& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	short GetYPosition();
	void SetYPosition(short);
	short GetXPosition();
	void SetXPosition(short);
	short GetHeight();
	void SetHeight(short);
	short GetWidth();
	void SetWidth(short);
	LPDISPATCH GetFillColor();
	void SetFillColor(LPDISPATCH);
	LPDISPATCH GetLineColor();
	void SetLineColor(LPDISPATCH);
	LPDISPATCH GetSubViews();
	void SetSubViews(LPDISPATCH);
	LPDISPATCH GetParentView();
	void SetParentView(LPDISPATCH);
	LPDISPATCH GetItem();
	void SetItem(LPDISPATCH);
	LPDISPATCH GetParentDiagram();
	void SetParentDiagram(LPDISPATCH);
	LPDISPATCH GetFont();
	void SetFont(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	void Invalidate();
	BOOL SupportsFillColor();
	BOOL SupportsLineColor();
	BOOL IsSelected();
	void SetSelected(BOOL bSelect);
	BOOL PointInView(short x, short y);
	short GetDefaultWidth();
	short GetDefaultHeight();
	short GetMinWidth();
	short GetMinHeight();
	BOOL HasItem();
	BOOL HasParentView();
	CString GetQualifiedName();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseTransitionCollection wrapper class

class IRoseTransitionCollection : public COleDispatchDriver
{
public:
	IRoseTransitionCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseTransitionCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseTransitionCollection(const IRoseTransitionCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseState wrapper class

class IRoseState : public COleDispatchDriver
{
public:
	IRoseState() {}		// Calls COleDispatchDriver default constructor
	IRoseState(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseState(const IRoseState& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetParentState();
	void SetParentState(LPDISPATCH);
	LPDISPATCH GetParentStateMachine();
	void SetParentStateMachine(LPDISPATCH);
	BOOL GetHistory();
	void SetHistory(BOOL);
	LPDISPATCH GetTransitions();
	void SetTransitions(LPDISPATCH);
	LPDISPATCH GetStateKind();
	void SetStateKind(LPDISPATCH);
	LPDISPATCH GetSubStates();
	void SetSubStates(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH GetAllSubStates();
	LPDISPATCH AddTransition(LPCTSTR OnEvent, LPDISPATCH Target);
	BOOL DeleteTransition(LPDISPATCH Transition);
	LPDISPATCH AddState(LPCTSTR Name);
	BOOL DeleteState(LPDISPATCH State);
	BOOL RelocateState(LPDISPATCH State);
	BOOL DeleteAction(LPDISPATCH theAction);
	CString GetQualifiedName();
	LPDISPATCH GetUserDefinedEvents();
	LPDISPATCH GetEntryActions();
	LPDISPATCH GetExitActions();
	LPDISPATCH GetDoActions();
	LPDISPATCH AddUserDefinedEvent(LPCTSTR EventName, LPCTSTR ActionName);
	BOOL DeleteUserDefinedEvent(LPDISPATCH theEvent);
	LPDISPATCH AddEntryAction(LPCTSTR ActionName);
	LPDISPATCH AddExitAction(LPCTSTR ActionName);
	LPDISPATCH AddDoAction(LPCTSTR ActionName);
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseObjectInstanceCollection wrapper class

class IRoseObjectInstanceCollection : public COleDispatchDriver
{
public:
	IRoseObjectInstanceCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseObjectInstanceCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseObjectInstanceCollection(const IRoseObjectInstanceCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseRoleCollection wrapper class

class IRoseRoleCollection : public COleDispatchDriver
{
public:
	IRoseRoleCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseRoleCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseRoleCollection(const IRoseRoleCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseClassRelation wrapper class

class IRoseClassRelation : public COleDispatchDriver
{
public:
	IRoseClassRelation() {}		// Calls COleDispatchDriver default constructor
	IRoseClassRelation(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseClassRelation(const IRoseClassRelation& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	CString GetSupplierName();
	void SetSupplierName(LPCTSTR);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	CString GetQualifiedName();
	LPDISPATCH GetContextClass();
	LPDISPATCH GetSupplierClass();
	BOOL HasClient();
	BOOL HasSupplier();
	LPDISPATCH GetClient();
	LPDISPATCH GetSupplier();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseCategory wrapper class

class IRoseCategory : public COleDispatchDriver
{
public:
	IRoseCategory() {}		// Calls COleDispatchDriver default constructor
	IRoseCategory(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseCategory(const IRoseCategory& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	BOOL GetGlobal();
	void SetGlobal(BOOL);
	LPDISPATCH GetClasses();
	void SetClasses(LPDISPATCH);
	LPDISPATCH GetCategories();
	void SetCategories(LPDISPATCH);
	LPDISPATCH GetParentCategory();
	void SetParentCategory(LPDISPATCH);
	LPDISPATCH GetClassDiagrams();
	void SetClassDiagrams(LPDISPATCH);
	LPDISPATCH GetAssociations();
	void SetAssociations(LPDISPATCH);
	LPDISPATCH GetScenarioDiagrams();
	void SetScenarioDiagrams(LPDISPATCH);
	LPDISPATCH GetUseCases();
	void SetUseCases(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetDefaultSetNames(LPCTSTR ToolName);
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	LPDISPATCH GetAllClasses();
	LPDISPATCH GetAllCategories();
	LPDISPATCH AddClass(LPCTSTR theName);
	LPDISPATCH AddClassDiagram(LPCTSTR Name);
	LPDISPATCH AddCategory(LPCTSTR theName);
	void RelocateClass(LPDISPATCH theClass);
	void RelocateCategory(LPDISPATCH theCategory);
	void RelocateClassDiagram(LPDISPATCH theClsDiagram);
	BOOL DeleteCategory(LPDISPATCH theCategory);
	BOOL DeleteClass(LPDISPATCH theClass);
	BOOL DeleteClassDiagram(LPDISPATCH theClassDiagram);
	LPDISPATCH AddScenarioDiagram(LPCTSTR Name, short Type);
	BOOL DeleteScenarioDiagram(LPDISPATCH theScenarioDiagram);
	void RelocateScenarioDiagram(LPDISPATCH theScenarioDiagram);
	LPDISPATCH GetAssignedSubsystem();
	void SetAssignedSubsystem(LPDISPATCH newValue);
	BOOL HasAssignedSubsystem();
	BOOL DeleteUseCase(LPDISPATCH theUseCase);
	BOOL TopLevel();
	LPDISPATCH GetAllUseCases();
	LPDISPATCH AddUseCase(LPCTSTR szName);
	BOOL IsRootPackage();
	BOOL IsControlled();
	BOOL Control(LPCTSTR Path);
	BOOL IsLoaded();
	BOOL Load();
	BOOL IsModifiable();
	BOOL Unload();
	BOOL Modifiable(BOOL Modifiable);
	CString GetFileName();
	BOOL Save();
	BOOL SaveAs(LPCTSTR Path);
	CString GetQualifiedName();
	BOOL IsModified();
	BOOL Uncontrol();
	LPDISPATCH AddCategoryDependency(LPCTSTR theName, LPCTSTR theSupplierCategoryName);
	LPDISPATCH GetCategoryDependencies();
	BOOL DeleteCategoryDependency(LPDISPATCH theDependency);
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseDefaultModelProperties wrapper class

class IRoseDefaultModelProperties : public COleDispatchDriver
{
public:
	IRoseDefaultModelProperties() {}		// Calls COleDispatchDriver default constructor
	IRoseDefaultModelProperties(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseDefaultModelProperties(const IRoseDefaultModelProperties& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDocumentation();
	void SetDocumentation(LPCTSTR);
	CString GetStereotype();
	void SetStereotype(LPCTSTR);
	LPDISPATCH GetExternalDocuments();
	void SetExternalDocuments(LPDISPATCH);
	LPDISPATCH GetApplication();
	void SetApplication(LPDISPATCH);
	LPDISPATCH GetModel();
	void SetModel(LPDISPATCH);
	CString GetLocalizedStereotype();
	void SetLocalizedStereotype(LPCTSTR);

// Operations
public:
	CString GetUniqueID();
	CString GetCurrentPropertySetName(LPCTSTR ToolName);
	BOOL OverrideProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue);
	BOOL InheritProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	CString GetDefaultPropertyValue(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH FindProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	LPDISPATCH GetAllProperties();
	LPDISPATCH GetToolProperties(LPCTSTR theToolName);
	BOOL IsOverriddenProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL IsDefaultProperty(LPCTSTR theToolName, LPCTSTR thePropName);
	BOOL CreateProperty(LPCTSTR theToolName, LPCTSTR thePropName, LPCTSTR theValue, LPCTSTR theType);
	CString GetPropertyClassName();
	LPDISPATCH GetToolNames();
	BOOL SetCurrentPropertySetName(LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetRoseItem();
	LPDISPATCH AddExternalDocument(LPCTSTR szName, short iType);
	BOOL DeleteExternalDocument(LPDISPATCH pIDispatch);
	BOOL OpenSpecification();
	BOOL AddDefaultProperty(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR SetName, LPCTSTR PropName, LPCTSTR PropType, LPCTSTR Value);
	BOOL CloneDefaultPropertySet(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR ExistingSetName, LPCTSTR NewSetName);
	BOOL CreateDefaultPropertySet(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR NewSetName);
	BOOL DeleteDefaultPropertySet(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH GetDefaultPropertySet(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR SetName);
	LPDISPATCH FindDefaultProperty(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR SetName, LPCTSTR PropName);
	LPDISPATCH GetDefaultSetNames(LPCTSTR ClassName, LPCTSTR ToolName);
	BOOL DeleteDefaultProperty(LPCTSTR ClassName, LPCTSTR ToolName, LPCTSTR SetName, LPCTSTR PropName);
	BOOL IsControlled();
	BOOL Control(LPCTSTR Path);
	BOOL IsLoaded();
	BOOL Load();
	BOOL IsModifiable();
	BOOL Unload();
	BOOL Modifiable(BOOL Modifiable);
	CString GetFileName();
	BOOL Save();
	BOOL SaveAs(LPCTSTR Path);
	CString GetQualifiedName();
	BOOL IsToolVisible(LPCTSTR theToolName);
	void SetToolVisibility(LPCTSTR theToolName, BOOL Visibility);
	BOOL IsModified();
	BOOL Uncontrol();
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseRealizeRelationCollection wrapper class

class IRoseRealizeRelationCollection : public COleDispatchDriver
{
public:
	IRoseRealizeRelationCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseRealizeRelationCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseRealizeRelationCollection(const IRoseRealizeRelationCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IRosePackageCollection wrapper class

class IRosePackageCollection : public COleDispatchDriver
{
public:
	IRosePackageCollection() {}		// Calls COleDispatchDriver default constructor
	IRosePackageCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRosePackageCollection(const IRosePackageCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};
/////////////////////////////////////////////////////////////////////////////
// IRoseExternalDocument wrapper class

class IRoseExternalDocument : public COleDispatchDriver
{
public:
	IRoseExternalDocument() {}		// Calls COleDispatchDriver default constructor
	IRoseExternalDocument(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseExternalDocument(const IRoseExternalDocument& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetPath();
	void SetPath(LPCTSTR);
	CString GetUrl();
	void SetUrl(LPCTSTR);
	LPDISPATCH GetParentCategory();
	void SetParentCategory(LPDISPATCH);

// Operations
public:
	BOOL IsURL();
	BOOL Open(LPCTSTR szAppPath);
	CString IdentifyClass();
	BOOL IsClass(LPCTSTR theClassName);
};




//
//
// The following was snatched fom an old version of the Rose Type Lib.
//
//

/////////////////////////////////////////////////////////////////////////////
// IRoseCollection wrapper class

class IRoseCollection : public COleDispatchDriver
{
public:
	IRoseCollection() {}		// Calls COleDispatchDriver default constructor
	IRoseCollection(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IRoseCollection(const IRoseCollection& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	LPDISPATCH GetAt(short Index);
	BOOL Exists(LPDISPATCH pObject);
	short FindFirst(LPCTSTR Name);
	short FindNext(short iCurID, LPCTSTR Name);
	short IndexOf(LPDISPATCH theObject);
	void Add(LPDISPATCH theObject);
	void AddCollection(LPDISPATCH theCollection);
	void Remove(LPDISPATCH theObject);
	void RemoveAll();
	LPDISPATCH GetFirst(LPCTSTR Name);
	LPDISPATCH GetWithUniqueID(LPCTSTR UniqueID);
};


#endif
