//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Tue 21-Dec-99 by the VDM-SLtoC++ Code Generator
// (v3.3 - Thu 06-May-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _TIMEMAP_anonym_h
#define _TIMEMAP_anonym_h

#include "TIMEMAP_userdef.h"
#include "metaiv.h"
class TYPE_TIMEMAP_Error;
class type_FS;
class type_FF2P;
class type_FF2PiM;
class type_FL;
class type_13TIMEMAP_ErrorCS;
#define TYPE_TIMEMAP_Timemap type_FF2PiM
#ifndef TAG_type_FS
#define TAG_type_FS (TAG_TIMEMAP + 1)
#endif

#ifndef TAG_type_FF2P
#define TAG_type_FF2P (TAG_TIMEMAP + 2)
#endif

#ifndef TAG_type_FF2PiM
#define TAG_type_FF2PiM (TAG_TIMEMAP + 3)
#endif

#ifndef TAG_type_FL
#define TAG_type_FL (TAG_TIMEMAP + 4)
#endif

#ifndef TAG_type_13TIMEMAP_ErrorCS
#define TAG_type_13TIMEMAP_ErrorCS (TAG_TIMEMAP + 5)
#endif


#include "REP_anonym.h"
#include "TIMEPARSER_anonym.h"
#ifndef TAG_TYPE_TIMEMAP_Error
#define TAG_TYPE_TIMEMAP_Error (TAG_TIMEMAP + 6)
#endif

#ifndef DECL_type_FS
#define DECL_type_FS 1

class type_FS : public SET<Generic> {
public:

  type_FS() : SET<Generic>() {}

  type_FS(const SET<Generic> &c) : SET<Generic>(c) {}

  type_FS(const Generic &c) : SET<Generic>(c) {}

  const wchar_t * GetTypeName() const { return L"type_FS"; }
} ;
#endif

#ifndef DECL_type_FF2P
#define DECL_type_FF2P 1

class type_FF2P : public Tuple {
public:

  type_FF2P() : Tuple(2) {}
  type_FF2P &Init(TYPE_TIMEPARSER_Instruction p2, Generic p3);

  type_FF2P(const Generic &c) : Tuple(c) {}

  const wchar_t * GetTypeName() const { return L"type_FF2P"; }
  TYPE_TIMEPARSER_Instruction get_1() const;
  void set_1(const TYPE_TIMEPARSER_Instruction &p);
  Generic get_2() const;
  void set_2(const Generic &p);
} ;
#endif

#ifndef DECL_type_FF2PiM
#define DECL_type_FF2PiM 1

class type_FF2PiM : public MAP<type_FF2P,Int> {
public:

  type_FF2PiM() : MAP<type_FF2P,Int>() {}

  type_FF2PiM(const MAP<type_FF2P,Int> &c) : MAP<type_FF2P,Int>(c) {}

  type_FF2PiM(const Generic &c) : MAP<type_FF2P,Int>(c) {}

  const wchar_t * GetTypeName() const { return L"type_FF2PiM"; }
} ;
#endif

#ifndef DECL_type_FL
#define DECL_type_FL 1

class type_FL : public SEQ<Generic> {
public:

  type_FL() : SEQ<Generic>() {}

  type_FL(const SEQ<Generic> &c) : SEQ<Generic>(c) {}

  type_FL(const Generic &c) : SEQ<Generic>(c) {}

  const wchar_t * GetTypeName() const { return L"type_FL"; }
} ;
#endif

#ifndef DECL_type_13TIMEMAP_ErrorCS
#define DECL_type_13TIMEMAP_ErrorCS 1

class type_13TIMEMAP_ErrorCS : public SET<TYPE_TIMEMAP_Error> {
public:

  type_13TIMEMAP_ErrorCS() : SET<TYPE_TIMEMAP_Error>() {}

  type_13TIMEMAP_ErrorCS(const SET<TYPE_TIMEMAP_Error> &c) : SET<TYPE_TIMEMAP_Error>(c) {}

  type_13TIMEMAP_ErrorCS(const Generic &c) : SET<TYPE_TIMEMAP_Error>(c) {}

  const wchar_t * GetTypeName() const { return L"type_13TIMEMAP_ErrorCS"; }
} ;
#endif


#endif

