//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Fri 10-Mar-00 by the VDM-SLtoC++ Code Generator
// (v3.3 - Thu 06-May-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _TIMEPARSER_h
#define _TIMEPARSER_h

#include <math.h>
#include "metaiv.h"
#include "cg.h"
#include "cg_aux.h"
#include "REP.h"
#include "TIMEPARSER_anonym.h"
enum  {
  vdm_TIMEPARSER_Abs = TAG_TYPE_TIMEPARSER_Abs,
  length_TIMEPARSER_Abs = 0,
  vdm_TIMEPARSER_AddEnv = TAG_TYPE_TIMEPARSER_AddEnv,
  length_TIMEPARSER_AddEnv = 0,
  vdm_TIMEPARSER_Addset = TAG_TYPE_TIMEPARSER_Addset,
  length_TIMEPARSER_Addset = 0,
  vdm_TIMEPARSER_AllorExists = TAG_TYPE_TIMEPARSER_AllorExists,
  length_TIMEPARSER_AllorExists = 0,
  vdm_TIMEPARSER_Always = TAG_TYPE_TIMEPARSER_Always,
  length_TIMEPARSER_Always = 0,
  vdm_TIMEPARSER_And = TAG_TYPE_TIMEPARSER_And,
  length_TIMEPARSER_And = 0,
  vdm_TIMEPARSER_Appendmap = TAG_TYPE_TIMEPARSER_Appendmap,
  length_TIMEPARSER_Appendmap = 0,
  vdm_TIMEPARSER_Appendseq = TAG_TYPE_TIMEPARSER_Appendseq,
  length_TIMEPARSER_Appendseq = 0,
  vdm_TIMEPARSER_Appendtup = TAG_TYPE_TIMEPARSER_Appendtup,
  length_TIMEPARSER_Appendtup = 0,
  vdm_TIMEPARSER_Apply = TAG_TYPE_TIMEPARSER_Apply,
  length_TIMEPARSER_Apply = 0,
  vdm_TIMEPARSER_AssemblyEntry = TAG_TYPE_TIMEPARSER_AssemblyEntry,
  length_TIMEPARSER_AssemblyEntry = 3,
  pos_TIMEPARSER_AssemblyEntry_instr = 1,
  pos_TIMEPARSER_AssemblyEntry_time = 2,
  pos_TIMEPARSER_AssemblyEntry_cid = 3,
  vdm_TIMEPARSER_Assembly_uAdd = TAG_TYPE_TIMEPARSER_Assembly_uAdd,
  length_TIMEPARSER_Assembly_uAdd = 0,
  vdm_TIMEPARSER_Assembly_uBranch = TAG_TYPE_TIMEPARSER_Assembly_uBranch,
  length_TIMEPARSER_Assembly_uBranch = 0,
  vdm_TIMEPARSER_Assembly_uCall = TAG_TYPE_TIMEPARSER_Assembly_uCall,
  length_TIMEPARSER_Assembly_uCall = 0,
  vdm_TIMEPARSER_Assembly_uCas = TAG_TYPE_TIMEPARSER_Assembly_uCas,
  length_TIMEPARSER_Assembly_uCas = 0,
  vdm_TIMEPARSER_Assembly_uCompare = TAG_TYPE_TIMEPARSER_Assembly_uCompare,
  length_TIMEPARSER_Assembly_uCompare = 0,
  vdm_TIMEPARSER_Assembly_uDiv = TAG_TYPE_TIMEPARSER_Assembly_uDiv,
  length_TIMEPARSER_Assembly_uDiv = 0,
  vdm_TIMEPARSER_Assembly_uFsqrt = TAG_TYPE_TIMEPARSER_Assembly_uFsqrt,
  length_TIMEPARSER_Assembly_uFsqrt = 0,
  vdm_TIMEPARSER_Assembly_uLogic = TAG_TYPE_TIMEPARSER_Assembly_uLogic,
  length_TIMEPARSER_Assembly_uLogic = 0,
  vdm_TIMEPARSER_Assembly_uMul = TAG_TYPE_TIMEPARSER_Assembly_uMul,
  length_TIMEPARSER_Assembly_uMul = 0,
  vdm_TIMEPARSER_Assembly_uNeg = TAG_TYPE_TIMEPARSER_Assembly_uNeg,
  length_TIMEPARSER_Assembly_uNeg = 0,
  vdm_TIMEPARSER_Assembly_uPop = TAG_TYPE_TIMEPARSER_Assembly_uPop,
  length_TIMEPARSER_Assembly_uPop = 0,
  vdm_TIMEPARSER_Assembly_uPush = TAG_TYPE_TIMEPARSER_Assembly_uPush,
  length_TIMEPARSER_Assembly_uPush = 0,
  vdm_TIMEPARSER_Assembly_uReturn = TAG_TYPE_TIMEPARSER_Assembly_uReturn,
  length_TIMEPARSER_Assembly_uReturn = 0,
  vdm_TIMEPARSER_Assembly_uSub = TAG_TYPE_TIMEPARSER_Assembly_uSub,
  length_TIMEPARSER_Assembly_uSub = 0,
  vdm_TIMEPARSER_BindList = TAG_TYPE_TIMEPARSER_BindList,
  length_TIMEPARSER_BindList = 0,
  vdm_TIMEPARSER_BlockStmt = TAG_TYPE_TIMEPARSER_BlockStmt,
  length_TIMEPARSER_BlockStmt = 0,
  vdm_TIMEPARSER_Br = TAG_TYPE_TIMEPARSER_Br,
  length_TIMEPARSER_Br = 0,
  vdm_TIMEPARSER_Call = TAG_TYPE_TIMEPARSER_Call,
  length_TIMEPARSER_Call = 0,
  vdm_TIMEPARSER_Cbr = TAG_TYPE_TIMEPARSER_Cbr,
  length_TIMEPARSER_Cbr = 0,
  vdm_TIMEPARSER_ContextInfo = TAG_TYPE_TIMEPARSER_ContextInfo,
  length_TIMEPARSER_ContextInfo = 1,
  pos_TIMEPARSER_ContextInfo_line = 1,
  vdm_TIMEPARSER_Div = TAG_TYPE_TIMEPARSER_Div,
  length_TIMEPARSER_Div = 0,
  vdm_TIMEPARSER_Equal = TAG_TYPE_TIMEPARSER_Equal,
  length_TIMEPARSER_Equal = 0,
  vdm_TIMEPARSER_Exit = TAG_TYPE_TIMEPARSER_Exit,
  length_TIMEPARSER_Exit = 0,
  vdm_TIMEPARSER_Fieldsel = TAG_TYPE_TIMEPARSER_Fieldsel,
  length_TIMEPARSER_Fieldsel = 0,
  vdm_TIMEPARSER_Floor = TAG_TYPE_TIMEPARSER_Floor,
  length_TIMEPARSER_Floor = 0,
  vdm_TIMEPARSER_GreaterThan = TAG_TYPE_TIMEPARSER_GreaterThan,
  length_TIMEPARSER_GreaterThan = 0,
  vdm_TIMEPARSER_GreaterThanOrEqual = TAG_TYPE_TIMEPARSER_GreaterThanOrEqual,
  length_TIMEPARSER_GreaterThanOrEqual = 0,
  vdm_TIMEPARSER_Guard = TAG_TYPE_TIMEPARSER_Guard,
  length_TIMEPARSER_Guard = 0,
  vdm_TIMEPARSER_History = TAG_TYPE_TIMEPARSER_History,
  length_TIMEPARSER_History = 0,
  vdm_TIMEPARSER_Intdiv = TAG_TYPE_TIMEPARSER_Intdiv,
  length_TIMEPARSER_Intdiv = 0,
  vdm_TIMEPARSER_Iota = TAG_TYPE_TIMEPARSER_Iota,
  length_TIMEPARSER_Iota = 0,
  vdm_TIMEPARSER_Isexpr = TAG_TYPE_TIMEPARSER_Isexpr,
  length_TIMEPARSER_Isexpr = 0,
  vdm_TIMEPARSER_Isofbaseclass = TAG_TYPE_TIMEPARSER_Isofbaseclass,
  length_TIMEPARSER_Isofbaseclass = 0,
  vdm_TIMEPARSER_Isofclass = TAG_TYPE_TIMEPARSER_Isofclass,
  length_TIMEPARSER_Isofclass = 0,
  vdm_TIMEPARSER_LambdaExpr = TAG_TYPE_TIMEPARSER_LambdaExpr,
  length_TIMEPARSER_LambdaExpr = 0,
  vdm_TIMEPARSER_LetBeST = TAG_TYPE_TIMEPARSER_LetBeST,
  length_TIMEPARSER_LetBeST = 0,
  vdm_TIMEPARSER_Lookup = TAG_TYPE_TIMEPARSER_Lookup,
  length_TIMEPARSER_Lookup = 0,
  vdm_TIMEPARSER_Loop = TAG_TYPE_TIMEPARSER_Loop,
  length_TIMEPARSER_Loop = 0,
  vdm_TIMEPARSER_MapInverse = TAG_TYPE_TIMEPARSER_MapInverse,
  length_TIMEPARSER_MapInverse = 0,
  vdm_TIMEPARSER_MatchPattern = TAG_TYPE_TIMEPARSER_MatchPattern,
  length_TIMEPARSER_MatchPattern = 0,
  vdm_TIMEPARSER_Minus = TAG_TYPE_TIMEPARSER_Minus,
  length_TIMEPARSER_Minus = 0,
  vdm_TIMEPARSER_Mod = TAG_TYPE_TIMEPARSER_Mod,
  length_TIMEPARSER_Mod = 0,
  vdm_TIMEPARSER_Mult = TAG_TYPE_TIMEPARSER_Mult,
  length_TIMEPARSER_Mult = 0,
  vdm_TIMEPARSER_Newobj = TAG_TYPE_TIMEPARSER_Newobj,
  length_TIMEPARSER_Newobj = 0,
  vdm_TIMEPARSER_NonDet = TAG_TYPE_TIMEPARSER_NonDet,
  length_TIMEPARSER_NonDet = 0,
  vdm_TIMEPARSER_Not = TAG_TYPE_TIMEPARSER_Not,
  length_TIMEPARSER_Not = 0,
  vdm_TIMEPARSER_Or = TAG_TYPE_TIMEPARSER_Or,
  length_TIMEPARSER_Or = 0,
  vdm_TIMEPARSER_Pattern = TAG_TYPE_TIMEPARSER_Pattern,
  length_TIMEPARSER_Pattern = 0,
  vdm_TIMEPARSER_Plus = TAG_TYPE_TIMEPARSER_Plus,
  length_TIMEPARSER_Plus = 0,
  vdm_TIMEPARSER_Polyinst = TAG_TYPE_TIMEPARSER_Polyinst,
  length_TIMEPARSER_Polyinst = 0,
  vdm_TIMEPARSER_RecTrap = TAG_TYPE_TIMEPARSER_RecTrap,
  length_TIMEPARSER_RecTrap = 0,
  vdm_TIMEPARSER_Reccons = TAG_TYPE_TIMEPARSER_Reccons,
  length_TIMEPARSER_Reccons = 0,
  vdm_TIMEPARSER_Recmod = TAG_TYPE_TIMEPARSER_Recmod,
  length_TIMEPARSER_Recmod = 0,
  vdm_TIMEPARSER_Rem = TAG_TYPE_TIMEPARSER_Rem,
  length_TIMEPARSER_Rem = 0,
  vdm_TIMEPARSER_Return = TAG_TYPE_TIMEPARSER_Return,
  length_TIMEPARSER_Return = 0,
  vdm_TIMEPARSER_Samebaseclass = TAG_TYPE_TIMEPARSER_Samebaseclass,
  length_TIMEPARSER_Samebaseclass = 0,
  vdm_TIMEPARSER_Sameclass = TAG_TYPE_TIMEPARSER_Sameclass,
  length_TIMEPARSER_Sameclass = 0,
  vdm_TIMEPARSER_Selfexpr = TAG_TYPE_TIMEPARSER_Selfexpr,
  length_TIMEPARSER_Selfexpr = 0,
  vdm_TIMEPARSER_Seqlen = TAG_TYPE_TIMEPARSER_Seqlen,
  length_TIMEPARSER_Seqlen = 0,
  vdm_TIMEPARSER_Seqmapover = TAG_TYPE_TIMEPARSER_Seqmapover,
  length_TIMEPARSER_Seqmapover = 0,
  vdm_TIMEPARSER_Setcard = TAG_TYPE_TIMEPARSER_Setcard,
  length_TIMEPARSER_Setcard = 0,
  vdm_TIMEPARSER_Setrng = TAG_TYPE_TIMEPARSER_Setrng,
  length_TIMEPARSER_Setrng = 0,
  vdm_TIMEPARSER_SimpleEntry = TAG_TYPE_TIMEPARSER_SimpleEntry,
  length_TIMEPARSER_SimpleEntry = 3,
  pos_TIMEPARSER_SimpleEntry_instr = 1,
  pos_TIMEPARSER_SimpleEntry_time = 2,
  pos_TIMEPARSER_SimpleEntry_cid = 3,
  vdm_TIMEPARSER_Start = TAG_TYPE_TIMEPARSER_Start,
  length_TIMEPARSER_Start = 0,
  vdm_TIMEPARSER_Subseq = TAG_TYPE_TIMEPARSER_Subseq,
  length_TIMEPARSER_Subseq = 0,
  vdm_TIMEPARSER_Threadid = TAG_TYPE_TIMEPARSER_Threadid,
  length_TIMEPARSER_Threadid = 0,
  vdm_TIMEPARSER_TimeBinaryExpr = TAG_TYPE_TIMEPARSER_TimeBinaryExpr,
  length_TIMEPARSER_TimeBinaryExpr = 3,
  pos_TIMEPARSER_TimeBinaryExpr_lexpr = 1,
  pos_TIMEPARSER_TimeBinaryExpr_op = 2,
  pos_TIMEPARSER_TimeBinaryExpr_rexpr = 3,
  vdm_TIMEPARSER_TimeBracketedExpr = TAG_TYPE_TIMEPARSER_TimeBracketedExpr,
  length_TIMEPARSER_TimeBracketedExpr = 1,
  pos_TIMEPARSER_TimeBracketedExpr_expr = 1,
  vdm_TIMEPARSER_TimeMultiply = TAG_TYPE_TIMEPARSER_TimeMultiply,
  length_TIMEPARSER_TimeMultiply = 0,
  vdm_TIMEPARSER_TimePlus = TAG_TYPE_TIMEPARSER_TimePlus,
  length_TIMEPARSER_TimePlus = 0,
  vdm_TIMEPARSER_Trap = TAG_TYPE_TIMEPARSER_Trap,
  length_TIMEPARSER_Trap = 0,
  vdm_TIMEPARSER_Tupsel = TAG_TYPE_TIMEPARSER_Tupsel,
  length_TIMEPARSER_Tupsel = 0,
  vdm_TIMEPARSER_TypedEntry = TAG_TYPE_TIMEPARSER_TypedEntry,
  length_TIMEPARSER_TypedEntry = 4,
  pos_TIMEPARSER_TypedEntry_instr = 1,
  pos_TIMEPARSER_TypedEntry_time = 2,
  pos_TIMEPARSER_TypedEntry_tp = 3,
  pos_TIMEPARSER_TypedEntry_cid = 4,
  vdm_TIMEPARSER_Update = TAG_TYPE_TIMEPARSER_Update,
  length_TIMEPARSER_Update = 0
};

class TYPE_TIMEPARSER_Abs : public Record {
public:

  TYPE_TIMEPARSER_Abs() : Record(TAG_TYPE_TIMEPARSER_Abs, 0) {}
  TYPE_TIMEPARSER_Abs &Init();

  TYPE_TIMEPARSER_Abs(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Abs"; }
} ;

class TYPE_TIMEPARSER_AddEnv : public Record {
public:

  TYPE_TIMEPARSER_AddEnv() : Record(TAG_TYPE_TIMEPARSER_AddEnv, 0) {}
  TYPE_TIMEPARSER_AddEnv &Init();

  TYPE_TIMEPARSER_AddEnv(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_AddEnv"; }
} ;

class TYPE_TIMEPARSER_Addset : public Record {
public:

  TYPE_TIMEPARSER_Addset() : Record(TAG_TYPE_TIMEPARSER_Addset, 0) {}
  TYPE_TIMEPARSER_Addset &Init();

  TYPE_TIMEPARSER_Addset(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Addset"; }
} ;

class TYPE_TIMEPARSER_AllorExists : public Record {
public:

  TYPE_TIMEPARSER_AllorExists() : Record(TAG_TYPE_TIMEPARSER_AllorExists, 0) {}
  TYPE_TIMEPARSER_AllorExists &Init();

  TYPE_TIMEPARSER_AllorExists(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_AllorExists"; }
} ;

class TYPE_TIMEPARSER_Always : public Record {
public:

  TYPE_TIMEPARSER_Always() : Record(TAG_TYPE_TIMEPARSER_Always, 0) {}
  TYPE_TIMEPARSER_Always &Init();

  TYPE_TIMEPARSER_Always(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Always"; }
} ;

class TYPE_TIMEPARSER_And : public Record {
public:

  TYPE_TIMEPARSER_And() : Record(TAG_TYPE_TIMEPARSER_And, 0) {}
  TYPE_TIMEPARSER_And &Init();

  TYPE_TIMEPARSER_And(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_And"; }
} ;

class TYPE_TIMEPARSER_Appendmap : public Record {
public:

  TYPE_TIMEPARSER_Appendmap() : Record(TAG_TYPE_TIMEPARSER_Appendmap, 0) {}
  TYPE_TIMEPARSER_Appendmap &Init();

  TYPE_TIMEPARSER_Appendmap(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Appendmap"; }
} ;

class TYPE_TIMEPARSER_Appendseq : public Record {
public:

  TYPE_TIMEPARSER_Appendseq() : Record(TAG_TYPE_TIMEPARSER_Appendseq, 0) {}
  TYPE_TIMEPARSER_Appendseq &Init();

  TYPE_TIMEPARSER_Appendseq(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Appendseq"; }
} ;

class TYPE_TIMEPARSER_Appendtup : public Record {
public:

  TYPE_TIMEPARSER_Appendtup() : Record(TAG_TYPE_TIMEPARSER_Appendtup, 0) {}
  TYPE_TIMEPARSER_Appendtup &Init();

  TYPE_TIMEPARSER_Appendtup(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Appendtup"; }
} ;

class TYPE_TIMEPARSER_Apply : public Record {
public:

  TYPE_TIMEPARSER_Apply() : Record(TAG_TYPE_TIMEPARSER_Apply, 0) {}
  TYPE_TIMEPARSER_Apply &Init();

  TYPE_TIMEPARSER_Apply(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Apply"; }
} ;

class TYPE_TIMEPARSER_AssemblyEntry : public Record {
public:

  TYPE_TIMEPARSER_AssemblyEntry() : Record(TAG_TYPE_TIMEPARSER_AssemblyEntry, 3) {}
  TYPE_TIMEPARSER_AssemblyEntry &Init(TYPE_TIMEPARSER_AssemblyInstruction p2, Int p3, TYPE_TIMEPARSER_ContextInfo p4);

  TYPE_TIMEPARSER_AssemblyEntry(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_AssemblyEntry"; }
  TYPE_TIMEPARSER_AssemblyInstruction get_instr() const;
  void set_instr(const TYPE_TIMEPARSER_AssemblyInstruction &p);
  Int get_time() const;
  void set_time(const Int &p);
  TYPE_TIMEPARSER_ContextInfo get_cid() const;
  void set_cid(const TYPE_TIMEPARSER_ContextInfo &p);
} ;

class TYPE_TIMEPARSER_Assembly_uAdd : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uAdd() : Record(TAG_TYPE_TIMEPARSER_Assembly_uAdd, 0) {}
  TYPE_TIMEPARSER_Assembly_uAdd &Init();

  TYPE_TIMEPARSER_Assembly_uAdd(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uAdd"; }
} ;

class TYPE_TIMEPARSER_Assembly_uBranch : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uBranch() : Record(TAG_TYPE_TIMEPARSER_Assembly_uBranch, 0) {}
  TYPE_TIMEPARSER_Assembly_uBranch &Init();

  TYPE_TIMEPARSER_Assembly_uBranch(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uBranch"; }
} ;

class TYPE_TIMEPARSER_Assembly_uCall : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uCall() : Record(TAG_TYPE_TIMEPARSER_Assembly_uCall, 0) {}
  TYPE_TIMEPARSER_Assembly_uCall &Init();

  TYPE_TIMEPARSER_Assembly_uCall(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uCall"; }
} ;

class TYPE_TIMEPARSER_Assembly_uCas : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uCas() : Record(TAG_TYPE_TIMEPARSER_Assembly_uCas, 0) {}
  TYPE_TIMEPARSER_Assembly_uCas &Init();

  TYPE_TIMEPARSER_Assembly_uCas(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uCas"; }
} ;

class TYPE_TIMEPARSER_Assembly_uCompare : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uCompare() : Record(TAG_TYPE_TIMEPARSER_Assembly_uCompare, 0) {}
  TYPE_TIMEPARSER_Assembly_uCompare &Init();

  TYPE_TIMEPARSER_Assembly_uCompare(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uCompare"; }
} ;

class TYPE_TIMEPARSER_Assembly_uDiv : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uDiv() : Record(TAG_TYPE_TIMEPARSER_Assembly_uDiv, 0) {}
  TYPE_TIMEPARSER_Assembly_uDiv &Init();

  TYPE_TIMEPARSER_Assembly_uDiv(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uDiv"; }
} ;

class TYPE_TIMEPARSER_Assembly_uFsqrt : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uFsqrt() : Record(TAG_TYPE_TIMEPARSER_Assembly_uFsqrt, 0) {}
  TYPE_TIMEPARSER_Assembly_uFsqrt &Init();

  TYPE_TIMEPARSER_Assembly_uFsqrt(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uFsqrt"; }
} ;

class TYPE_TIMEPARSER_Assembly_uLogic : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uLogic() : Record(TAG_TYPE_TIMEPARSER_Assembly_uLogic, 0) {}
  TYPE_TIMEPARSER_Assembly_uLogic &Init();

  TYPE_TIMEPARSER_Assembly_uLogic(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uLogic"; }
} ;

class TYPE_TIMEPARSER_Assembly_uMul : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uMul() : Record(TAG_TYPE_TIMEPARSER_Assembly_uMul, 0) {}
  TYPE_TIMEPARSER_Assembly_uMul &Init();

  TYPE_TIMEPARSER_Assembly_uMul(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uMul"; }
} ;

class TYPE_TIMEPARSER_Assembly_uNeg : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uNeg() : Record(TAG_TYPE_TIMEPARSER_Assembly_uNeg, 0) {}
  TYPE_TIMEPARSER_Assembly_uNeg &Init();

  TYPE_TIMEPARSER_Assembly_uNeg(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uNeg"; }
} ;

class TYPE_TIMEPARSER_Assembly_uPop : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uPop() : Record(TAG_TYPE_TIMEPARSER_Assembly_uPop, 0) {}
  TYPE_TIMEPARSER_Assembly_uPop &Init();

  TYPE_TIMEPARSER_Assembly_uPop(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uPop"; }
} ;

class TYPE_TIMEPARSER_Assembly_uPush : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uPush() : Record(TAG_TYPE_TIMEPARSER_Assembly_uPush, 0) {}
  TYPE_TIMEPARSER_Assembly_uPush &Init();

  TYPE_TIMEPARSER_Assembly_uPush(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uPush"; }
} ;

class TYPE_TIMEPARSER_Assembly_uReturn : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uReturn() : Record(TAG_TYPE_TIMEPARSER_Assembly_uReturn, 0) {}
  TYPE_TIMEPARSER_Assembly_uReturn &Init();

  TYPE_TIMEPARSER_Assembly_uReturn(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uReturn"; }
} ;

class TYPE_TIMEPARSER_Assembly_uSub : public Record {
public:

  TYPE_TIMEPARSER_Assembly_uSub() : Record(TAG_TYPE_TIMEPARSER_Assembly_uSub, 0) {}
  TYPE_TIMEPARSER_Assembly_uSub &Init();

  TYPE_TIMEPARSER_Assembly_uSub(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Assembly_uSub"; }
} ;

class TYPE_TIMEPARSER_BindList : public Record {
public:

  TYPE_TIMEPARSER_BindList() : Record(TAG_TYPE_TIMEPARSER_BindList, 0) {}
  TYPE_TIMEPARSER_BindList &Init();

  TYPE_TIMEPARSER_BindList(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_BindList"; }
} ;

class TYPE_TIMEPARSER_BlockStmt : public Record {
public:

  TYPE_TIMEPARSER_BlockStmt() : Record(TAG_TYPE_TIMEPARSER_BlockStmt, 0) {}
  TYPE_TIMEPARSER_BlockStmt &Init();

  TYPE_TIMEPARSER_BlockStmt(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_BlockStmt"; }
} ;

class TYPE_TIMEPARSER_Br : public Record {
public:

  TYPE_TIMEPARSER_Br() : Record(TAG_TYPE_TIMEPARSER_Br, 0) {}
  TYPE_TIMEPARSER_Br &Init();

  TYPE_TIMEPARSER_Br(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Br"; }
} ;

class TYPE_TIMEPARSER_Call : public Record {
public:

  TYPE_TIMEPARSER_Call() : Record(TAG_TYPE_TIMEPARSER_Call, 0) {}
  TYPE_TIMEPARSER_Call &Init();

  TYPE_TIMEPARSER_Call(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Call"; }
} ;

class TYPE_TIMEPARSER_Cbr : public Record {
public:

  TYPE_TIMEPARSER_Cbr() : Record(TAG_TYPE_TIMEPARSER_Cbr, 0) {}
  TYPE_TIMEPARSER_Cbr &Init();

  TYPE_TIMEPARSER_Cbr(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Cbr"; }
} ;

class TYPE_TIMEPARSER_ContextInfo : public Record {
public:

  TYPE_TIMEPARSER_ContextInfo() : Record(TAG_TYPE_TIMEPARSER_ContextInfo, 1) {}
  TYPE_TIMEPARSER_ContextInfo &Init(Int p2);

  TYPE_TIMEPARSER_ContextInfo(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_ContextInfo"; }
  Int get_line() const;
  void set_line(const Int &p);
} ;

class TYPE_TIMEPARSER_Div : public Record {
public:

  TYPE_TIMEPARSER_Div() : Record(TAG_TYPE_TIMEPARSER_Div, 0) {}
  TYPE_TIMEPARSER_Div &Init();

  TYPE_TIMEPARSER_Div(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Div"; }
} ;

class TYPE_TIMEPARSER_Equal : public Record {
public:

  TYPE_TIMEPARSER_Equal() : Record(TAG_TYPE_TIMEPARSER_Equal, 0) {}
  TYPE_TIMEPARSER_Equal &Init();

  TYPE_TIMEPARSER_Equal(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Equal"; }
} ;

class TYPE_TIMEPARSER_Exit : public Record {
public:

  TYPE_TIMEPARSER_Exit() : Record(TAG_TYPE_TIMEPARSER_Exit, 0) {}
  TYPE_TIMEPARSER_Exit &Init();

  TYPE_TIMEPARSER_Exit(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Exit"; }
} ;

class TYPE_TIMEPARSER_Fieldsel : public Record {
public:

  TYPE_TIMEPARSER_Fieldsel() : Record(TAG_TYPE_TIMEPARSER_Fieldsel, 0) {}
  TYPE_TIMEPARSER_Fieldsel &Init();

  TYPE_TIMEPARSER_Fieldsel(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Fieldsel"; }
} ;

class TYPE_TIMEPARSER_Floor : public Record {
public:

  TYPE_TIMEPARSER_Floor() : Record(TAG_TYPE_TIMEPARSER_Floor, 0) {}
  TYPE_TIMEPARSER_Floor &Init();

  TYPE_TIMEPARSER_Floor(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Floor"; }
} ;

class TYPE_TIMEPARSER_GreaterThan : public Record {
public:

  TYPE_TIMEPARSER_GreaterThan() : Record(TAG_TYPE_TIMEPARSER_GreaterThan, 0) {}
  TYPE_TIMEPARSER_GreaterThan &Init();

  TYPE_TIMEPARSER_GreaterThan(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_GreaterThan"; }
} ;

class TYPE_TIMEPARSER_GreaterThanOrEqual : public Record {
public:

  TYPE_TIMEPARSER_GreaterThanOrEqual() : Record(TAG_TYPE_TIMEPARSER_GreaterThanOrEqual, 0) {}
  TYPE_TIMEPARSER_GreaterThanOrEqual &Init();

  TYPE_TIMEPARSER_GreaterThanOrEqual(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_GreaterThanOrEqual"; }
} ;

class TYPE_TIMEPARSER_Guard : public Record {
public:

  TYPE_TIMEPARSER_Guard() : Record(TAG_TYPE_TIMEPARSER_Guard, 0) {}
  TYPE_TIMEPARSER_Guard &Init();

  TYPE_TIMEPARSER_Guard(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Guard"; }
} ;

class TYPE_TIMEPARSER_History : public Record {
public:

  TYPE_TIMEPARSER_History() : Record(TAG_TYPE_TIMEPARSER_History, 0) {}
  TYPE_TIMEPARSER_History &Init();

  TYPE_TIMEPARSER_History(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_History"; }
} ;

class TYPE_TIMEPARSER_Intdiv : public Record {
public:

  TYPE_TIMEPARSER_Intdiv() : Record(TAG_TYPE_TIMEPARSER_Intdiv, 0) {}
  TYPE_TIMEPARSER_Intdiv &Init();

  TYPE_TIMEPARSER_Intdiv(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Intdiv"; }
} ;

class TYPE_TIMEPARSER_Iota : public Record {
public:

  TYPE_TIMEPARSER_Iota() : Record(TAG_TYPE_TIMEPARSER_Iota, 0) {}
  TYPE_TIMEPARSER_Iota &Init();

  TYPE_TIMEPARSER_Iota(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Iota"; }
} ;

class TYPE_TIMEPARSER_Isexpr : public Record {
public:

  TYPE_TIMEPARSER_Isexpr() : Record(TAG_TYPE_TIMEPARSER_Isexpr, 0) {}
  TYPE_TIMEPARSER_Isexpr &Init();

  TYPE_TIMEPARSER_Isexpr(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Isexpr"; }
} ;

class TYPE_TIMEPARSER_Isofbaseclass : public Record {
public:

  TYPE_TIMEPARSER_Isofbaseclass() : Record(TAG_TYPE_TIMEPARSER_Isofbaseclass, 0) {}
  TYPE_TIMEPARSER_Isofbaseclass &Init();

  TYPE_TIMEPARSER_Isofbaseclass(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Isofbaseclass"; }
} ;

class TYPE_TIMEPARSER_Isofclass : public Record {
public:

  TYPE_TIMEPARSER_Isofclass() : Record(TAG_TYPE_TIMEPARSER_Isofclass, 0) {}
  TYPE_TIMEPARSER_Isofclass &Init();

  TYPE_TIMEPARSER_Isofclass(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Isofclass"; }
} ;

class TYPE_TIMEPARSER_LambdaExpr : public Record {
public:

  TYPE_TIMEPARSER_LambdaExpr() : Record(TAG_TYPE_TIMEPARSER_LambdaExpr, 0) {}
  TYPE_TIMEPARSER_LambdaExpr &Init();

  TYPE_TIMEPARSER_LambdaExpr(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_LambdaExpr"; }
} ;

class TYPE_TIMEPARSER_LetBeST : public Record {
public:

  TYPE_TIMEPARSER_LetBeST() : Record(TAG_TYPE_TIMEPARSER_LetBeST, 0) {}
  TYPE_TIMEPARSER_LetBeST &Init();

  TYPE_TIMEPARSER_LetBeST(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_LetBeST"; }
} ;

class TYPE_TIMEPARSER_Lookup : public Record {
public:

  TYPE_TIMEPARSER_Lookup() : Record(TAG_TYPE_TIMEPARSER_Lookup, 0) {}
  TYPE_TIMEPARSER_Lookup &Init();

  TYPE_TIMEPARSER_Lookup(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Lookup"; }
} ;

class TYPE_TIMEPARSER_Loop : public Record {
public:

  TYPE_TIMEPARSER_Loop() : Record(TAG_TYPE_TIMEPARSER_Loop, 0) {}
  TYPE_TIMEPARSER_Loop &Init();

  TYPE_TIMEPARSER_Loop(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Loop"; }
} ;

class TYPE_TIMEPARSER_MapInverse : public Record {
public:

  TYPE_TIMEPARSER_MapInverse() : Record(TAG_TYPE_TIMEPARSER_MapInverse, 0) {}
  TYPE_TIMEPARSER_MapInverse &Init();

  TYPE_TIMEPARSER_MapInverse(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_MapInverse"; }
} ;

class TYPE_TIMEPARSER_MatchPattern : public Record {
public:

  TYPE_TIMEPARSER_MatchPattern() : Record(TAG_TYPE_TIMEPARSER_MatchPattern, 0) {}
  TYPE_TIMEPARSER_MatchPattern &Init();

  TYPE_TIMEPARSER_MatchPattern(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_MatchPattern"; }
} ;

class TYPE_TIMEPARSER_Minus : public Record {
public:

  TYPE_TIMEPARSER_Minus() : Record(TAG_TYPE_TIMEPARSER_Minus, 0) {}
  TYPE_TIMEPARSER_Minus &Init();

  TYPE_TIMEPARSER_Minus(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Minus"; }
} ;

class TYPE_TIMEPARSER_Mod : public Record {
public:

  TYPE_TIMEPARSER_Mod() : Record(TAG_TYPE_TIMEPARSER_Mod, 0) {}
  TYPE_TIMEPARSER_Mod &Init();

  TYPE_TIMEPARSER_Mod(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Mod"; }
} ;

class TYPE_TIMEPARSER_Mult : public Record {
public:

  TYPE_TIMEPARSER_Mult() : Record(TAG_TYPE_TIMEPARSER_Mult, 0) {}
  TYPE_TIMEPARSER_Mult &Init();

  TYPE_TIMEPARSER_Mult(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Mult"; }
} ;

class TYPE_TIMEPARSER_Newobj : public Record {
public:

  TYPE_TIMEPARSER_Newobj() : Record(TAG_TYPE_TIMEPARSER_Newobj, 0) {}
  TYPE_TIMEPARSER_Newobj &Init();

  TYPE_TIMEPARSER_Newobj(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Newobj"; }
} ;

class TYPE_TIMEPARSER_NonDet : public Record {
public:

  TYPE_TIMEPARSER_NonDet() : Record(TAG_TYPE_TIMEPARSER_NonDet, 0) {}
  TYPE_TIMEPARSER_NonDet &Init();

  TYPE_TIMEPARSER_NonDet(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_NonDet"; }
} ;

class TYPE_TIMEPARSER_Not : public Record {
public:

  TYPE_TIMEPARSER_Not() : Record(TAG_TYPE_TIMEPARSER_Not, 0) {}
  TYPE_TIMEPARSER_Not &Init();

  TYPE_TIMEPARSER_Not(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Not"; }
} ;

class TYPE_TIMEPARSER_Or : public Record {
public:

  TYPE_TIMEPARSER_Or() : Record(TAG_TYPE_TIMEPARSER_Or, 0) {}
  TYPE_TIMEPARSER_Or &Init();

  TYPE_TIMEPARSER_Or(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Or"; }
} ;

class TYPE_TIMEPARSER_Pattern : public Record {
public:

  TYPE_TIMEPARSER_Pattern() : Record(TAG_TYPE_TIMEPARSER_Pattern, 0) {}
  TYPE_TIMEPARSER_Pattern &Init();

  TYPE_TIMEPARSER_Pattern(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Pattern"; }
} ;

class TYPE_TIMEPARSER_Plus : public Record {
public:

  TYPE_TIMEPARSER_Plus() : Record(TAG_TYPE_TIMEPARSER_Plus, 0) {}
  TYPE_TIMEPARSER_Plus &Init();

  TYPE_TIMEPARSER_Plus(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Plus"; }
} ;

class TYPE_TIMEPARSER_Polyinst : public Record {
public:

  TYPE_TIMEPARSER_Polyinst() : Record(TAG_TYPE_TIMEPARSER_Polyinst, 0) {}
  TYPE_TIMEPARSER_Polyinst &Init();

  TYPE_TIMEPARSER_Polyinst(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Polyinst"; }
} ;

class TYPE_TIMEPARSER_RecTrap : public Record {
public:

  TYPE_TIMEPARSER_RecTrap() : Record(TAG_TYPE_TIMEPARSER_RecTrap, 0) {}
  TYPE_TIMEPARSER_RecTrap &Init();

  TYPE_TIMEPARSER_RecTrap(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_RecTrap"; }
} ;

class TYPE_TIMEPARSER_Reccons : public Record {
public:

  TYPE_TIMEPARSER_Reccons() : Record(TAG_TYPE_TIMEPARSER_Reccons, 0) {}
  TYPE_TIMEPARSER_Reccons &Init();

  TYPE_TIMEPARSER_Reccons(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Reccons"; }
} ;

class TYPE_TIMEPARSER_Recmod : public Record {
public:

  TYPE_TIMEPARSER_Recmod() : Record(TAG_TYPE_TIMEPARSER_Recmod, 0) {}
  TYPE_TIMEPARSER_Recmod &Init();

  TYPE_TIMEPARSER_Recmod(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Recmod"; }
} ;

class TYPE_TIMEPARSER_Rem : public Record {
public:

  TYPE_TIMEPARSER_Rem() : Record(TAG_TYPE_TIMEPARSER_Rem, 0) {}
  TYPE_TIMEPARSER_Rem &Init();

  TYPE_TIMEPARSER_Rem(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Rem"; }
} ;

class TYPE_TIMEPARSER_Return : public Record {
public:

  TYPE_TIMEPARSER_Return() : Record(TAG_TYPE_TIMEPARSER_Return, 0) {}
  TYPE_TIMEPARSER_Return &Init();

  TYPE_TIMEPARSER_Return(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Return"; }
} ;

class TYPE_TIMEPARSER_Samebaseclass : public Record {
public:

  TYPE_TIMEPARSER_Samebaseclass() : Record(TAG_TYPE_TIMEPARSER_Samebaseclass, 0) {}
  TYPE_TIMEPARSER_Samebaseclass &Init();

  TYPE_TIMEPARSER_Samebaseclass(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Samebaseclass"; }
} ;

class TYPE_TIMEPARSER_Sameclass : public Record {
public:

  TYPE_TIMEPARSER_Sameclass() : Record(TAG_TYPE_TIMEPARSER_Sameclass, 0) {}
  TYPE_TIMEPARSER_Sameclass &Init();

  TYPE_TIMEPARSER_Sameclass(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Sameclass"; }
} ;

class TYPE_TIMEPARSER_Selfexpr : public Record {
public:

  TYPE_TIMEPARSER_Selfexpr() : Record(TAG_TYPE_TIMEPARSER_Selfexpr, 0) {}
  TYPE_TIMEPARSER_Selfexpr &Init();

  TYPE_TIMEPARSER_Selfexpr(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Selfexpr"; }
} ;

class TYPE_TIMEPARSER_Seqlen : public Record {
public:

  TYPE_TIMEPARSER_Seqlen() : Record(TAG_TYPE_TIMEPARSER_Seqlen, 0) {}
  TYPE_TIMEPARSER_Seqlen &Init();

  TYPE_TIMEPARSER_Seqlen(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Seqlen"; }
} ;

class TYPE_TIMEPARSER_Seqmapover : public Record {
public:

  TYPE_TIMEPARSER_Seqmapover() : Record(TAG_TYPE_TIMEPARSER_Seqmapover, 0) {}
  TYPE_TIMEPARSER_Seqmapover &Init();

  TYPE_TIMEPARSER_Seqmapover(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Seqmapover"; }
} ;

class TYPE_TIMEPARSER_Setcard : public Record {
public:

  TYPE_TIMEPARSER_Setcard() : Record(TAG_TYPE_TIMEPARSER_Setcard, 0) {}
  TYPE_TIMEPARSER_Setcard &Init();

  TYPE_TIMEPARSER_Setcard(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Setcard"; }
} ;

class TYPE_TIMEPARSER_Setrng : public Record {
public:

  TYPE_TIMEPARSER_Setrng() : Record(TAG_TYPE_TIMEPARSER_Setrng, 0) {}
  TYPE_TIMEPARSER_Setrng &Init();

  TYPE_TIMEPARSER_Setrng(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Setrng"; }
} ;

class TYPE_TIMEPARSER_SimpleEntry : public Record {
public:

  TYPE_TIMEPARSER_SimpleEntry() : Record(TAG_TYPE_TIMEPARSER_SimpleEntry, 3) {}
  TYPE_TIMEPARSER_SimpleEntry &Init(TYPE_TIMEPARSER_Instruction p2, TYPE_TIMEPARSER_TimeExpr p3, TYPE_TIMEPARSER_ContextInfo p4);

  TYPE_TIMEPARSER_SimpleEntry(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_SimpleEntry"; }
  TYPE_TIMEPARSER_Instruction get_instr() const;
  void set_instr(const TYPE_TIMEPARSER_Instruction &p);
  TYPE_TIMEPARSER_TimeExpr get_time() const;
  void set_time(const TYPE_TIMEPARSER_TimeExpr &p);
  TYPE_TIMEPARSER_ContextInfo get_cid() const;
  void set_cid(const TYPE_TIMEPARSER_ContextInfo &p);
} ;

class TYPE_TIMEPARSER_Start : public Record {
public:

  TYPE_TIMEPARSER_Start() : Record(TAG_TYPE_TIMEPARSER_Start, 0) {}
  TYPE_TIMEPARSER_Start &Init();

  TYPE_TIMEPARSER_Start(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Start"; }
} ;

class TYPE_TIMEPARSER_Subseq : public Record {
public:

  TYPE_TIMEPARSER_Subseq() : Record(TAG_TYPE_TIMEPARSER_Subseq, 0) {}
  TYPE_TIMEPARSER_Subseq &Init();

  TYPE_TIMEPARSER_Subseq(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Subseq"; }
} ;

class TYPE_TIMEPARSER_Threadid : public Record {
public:

  TYPE_TIMEPARSER_Threadid() : Record(TAG_TYPE_TIMEPARSER_Threadid, 0) {}
  TYPE_TIMEPARSER_Threadid &Init();

  TYPE_TIMEPARSER_Threadid(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Threadid"; }
} ;

class TYPE_TIMEPARSER_TimeBinaryExpr : public Record {
public:

  TYPE_TIMEPARSER_TimeBinaryExpr() : Record(TAG_TYPE_TIMEPARSER_TimeBinaryExpr, 3) {}
  TYPE_TIMEPARSER_TimeBinaryExpr &Init(TYPE_TIMEPARSER_TimeExpr p2, TYPE_TIMEPARSER_TimeBinaryOp p3, TYPE_TIMEPARSER_TimeExpr p4);

  TYPE_TIMEPARSER_TimeBinaryExpr(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_TimeBinaryExpr"; }
  TYPE_TIMEPARSER_TimeExpr get_lexpr() const;
  void set_lexpr(const TYPE_TIMEPARSER_TimeExpr &p);
  TYPE_TIMEPARSER_TimeBinaryOp get_op() const;
  void set_op(const TYPE_TIMEPARSER_TimeBinaryOp &p);
  TYPE_TIMEPARSER_TimeExpr get_rexpr() const;
  void set_rexpr(const TYPE_TIMEPARSER_TimeExpr &p);
} ;

class TYPE_TIMEPARSER_TimeBracketedExpr : public Record {
public:

  TYPE_TIMEPARSER_TimeBracketedExpr() : Record(TAG_TYPE_TIMEPARSER_TimeBracketedExpr, 1) {}
  TYPE_TIMEPARSER_TimeBracketedExpr &Init(TYPE_TIMEPARSER_TimeExpr p2);

  TYPE_TIMEPARSER_TimeBracketedExpr(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_TimeBracketedExpr"; }
  TYPE_TIMEPARSER_TimeExpr get_expr() const;
  void set_expr(const TYPE_TIMEPARSER_TimeExpr &p);
} ;

class TYPE_TIMEPARSER_TimeMultiply : public Record {
public:

  TYPE_TIMEPARSER_TimeMultiply() : Record(TAG_TYPE_TIMEPARSER_TimeMultiply, 0) {}
  TYPE_TIMEPARSER_TimeMultiply &Init();

  TYPE_TIMEPARSER_TimeMultiply(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_TimeMultiply"; }
} ;

class TYPE_TIMEPARSER_TimePlus : public Record {
public:

  TYPE_TIMEPARSER_TimePlus() : Record(TAG_TYPE_TIMEPARSER_TimePlus, 0) {}
  TYPE_TIMEPARSER_TimePlus &Init();

  TYPE_TIMEPARSER_TimePlus(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_TimePlus"; }
} ;

class TYPE_TIMEPARSER_Trap : public Record {
public:

  TYPE_TIMEPARSER_Trap() : Record(TAG_TYPE_TIMEPARSER_Trap, 0) {}
  TYPE_TIMEPARSER_Trap &Init();

  TYPE_TIMEPARSER_Trap(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Trap"; }
} ;

class TYPE_TIMEPARSER_Tupsel : public Record {
public:

  TYPE_TIMEPARSER_Tupsel() : Record(TAG_TYPE_TIMEPARSER_Tupsel, 0) {}
  TYPE_TIMEPARSER_Tupsel &Init();

  TYPE_TIMEPARSER_Tupsel(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Tupsel"; }
} ;

class TYPE_TIMEPARSER_TypedEntry : public Record {
public:

  TYPE_TIMEPARSER_TypedEntry() : Record(TAG_TYPE_TIMEPARSER_TypedEntry, 4) {}
  TYPE_TIMEPARSER_TypedEntry &Init(TYPE_TIMEPARSER_Instruction p2, TYPE_TIMEPARSER_TimeExpr p3, TYPE_REP_BasicTypeRep p4, TYPE_TIMEPARSER_ContextInfo p5);

  TYPE_TIMEPARSER_TypedEntry(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_TypedEntry"; }
  TYPE_TIMEPARSER_Instruction get_instr() const;
  void set_instr(const TYPE_TIMEPARSER_Instruction &p);
  TYPE_TIMEPARSER_TimeExpr get_time() const;
  void set_time(const TYPE_TIMEPARSER_TimeExpr &p);
  TYPE_REP_BasicTypeRep get_tp() const;
  void set_tp(const TYPE_REP_BasicTypeRep &p);
  TYPE_TIMEPARSER_ContextInfo get_cid() const;
  void set_cid(const TYPE_TIMEPARSER_ContextInfo &p);
} ;

class TYPE_TIMEPARSER_Update : public Record {
public:

  TYPE_TIMEPARSER_Update() : Record(TAG_TYPE_TIMEPARSER_Update, 0) {}
  TYPE_TIMEPARSER_Update &Init();

  TYPE_TIMEPARSER_Update(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMEPARSER_Update"; }
} ;
void init_TIMEPARSER();
type_cL vdm_TIMEPARSER_AssemblyInstrMap(const TYPE_TIMEPARSER_AssemblyInstruction &);
type_cL vdm_TIMEPARSER_InstrMap(const TYPE_TIMEPARSER_Instruction &);

#endif

