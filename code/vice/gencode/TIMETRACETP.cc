//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Wed 01-Mar-00 by the VDM-SLtoC++ Code Generator
// (v3.3 - Thu 06-May-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//



#include "TIMETRACETP.h"

TYPE_TIMETRACETP_DelayedThreadSwapIn &TYPE_TIMETRACETP_DelayedThreadSwapIn::Init(TYPE_SCHDTP_ThreadId p1, Generic p2, Generic p3, Real p4) {
  SetField(1, p1);
  SetField(2, p2);
  SetField(3, p3);
  SetField(4, p4);
  return * this;
}

TYPE_SCHDTP_ThreadId TYPE_TIMETRACETP_DelayedThreadSwapIn::get_id() const { return (TYPE_SCHDTP_ThreadId) GetField(1); }

void TYPE_TIMETRACETP_DelayedThreadSwapIn::set_id(const TYPE_SCHDTP_ThreadId &p) { SetField(1, p); }

Generic TYPE_TIMETRACETP_DelayedThreadSwapIn::get_objref() const { return (Generic) GetField(2); }

void TYPE_TIMETRACETP_DelayedThreadSwapIn::set_objref(const Generic &p) { SetField(2, p); }

Generic TYPE_TIMETRACETP_DelayedThreadSwapIn::get_clnm() const { return (Generic) GetField(3); }

void TYPE_TIMETRACETP_DelayedThreadSwapIn::set_clnm(const Generic &p) { SetField(3, p); }

Real TYPE_TIMETRACETP_DelayedThreadSwapIn::get_delay() const { return (Real) GetField(4); }

void TYPE_TIMETRACETP_DelayedThreadSwapIn::set_delay(const Real &p) { SetField(4, p); }

TYPE_TIMETRACETP_OpActivate &TYPE_TIMETRACETP_OpActivate::Init(TYPE_AS_Ids p1, TYPE_SEM_OBJ_uRef p2, TYPE_AS_Ids p3) {
  SetField(1, p1);
  SetField(2, p2);
  SetField(3, p3);
  return * this;
}

TYPE_AS_Ids TYPE_TIMETRACETP_OpActivate::get_opname() const { return (TYPE_AS_Ids) GetField(1); }

void TYPE_TIMETRACETP_OpActivate::set_opname(const TYPE_AS_Ids &p) { SetField(1, p); }

TYPE_SEM_OBJ_uRef TYPE_TIMETRACETP_OpActivate::get_objref() const { return (TYPE_SEM_OBJ_uRef) GetField(2); }

void TYPE_TIMETRACETP_OpActivate::set_objref(const TYPE_SEM_OBJ_uRef &p) { SetField(2, p); }

TYPE_AS_Ids TYPE_TIMETRACETP_OpActivate::get_clnm() const { return (TYPE_AS_Ids) GetField(3); }

void TYPE_TIMETRACETP_OpActivate::set_clnm(const TYPE_AS_Ids &p) { SetField(3, p); }

TYPE_TIMETRACETP_OpCompleted &TYPE_TIMETRACETP_OpCompleted::Init(TYPE_AS_Ids p1, TYPE_SEM_OBJ_uRef p2, TYPE_AS_Ids p3) {
  SetField(1, p1);
  SetField(2, p2);
  SetField(3, p3);
  return * this;
}

TYPE_AS_Ids TYPE_TIMETRACETP_OpCompleted::get_opname() const { return (TYPE_AS_Ids) GetField(1); }

void TYPE_TIMETRACETP_OpCompleted::set_opname(const TYPE_AS_Ids &p) { SetField(1, p); }

TYPE_SEM_OBJ_uRef TYPE_TIMETRACETP_OpCompleted::get_objref() const { return (TYPE_SEM_OBJ_uRef) GetField(2); }

void TYPE_TIMETRACETP_OpCompleted::set_objref(const TYPE_SEM_OBJ_uRef &p) { SetField(2, p); }

TYPE_AS_Ids TYPE_TIMETRACETP_OpCompleted::get_clnm() const { return (TYPE_AS_Ids) GetField(3); }

void TYPE_TIMETRACETP_OpCompleted::set_clnm(const TYPE_AS_Ids &p) { SetField(3, p); }

TYPE_TIMETRACETP_OpRequest &TYPE_TIMETRACETP_OpRequest::Init(TYPE_AS_Ids p1, TYPE_SEM_OBJ_uRef p2, TYPE_AS_Ids p3) {
  SetField(1, p1);
  SetField(2, p2);
  SetField(3, p3);
  return * this;
}

TYPE_AS_Ids TYPE_TIMETRACETP_OpRequest::get_opname() const { return (TYPE_AS_Ids) GetField(1); }

void TYPE_TIMETRACETP_OpRequest::set_opname(const TYPE_AS_Ids &p) { SetField(1, p); }

TYPE_SEM_OBJ_uRef TYPE_TIMETRACETP_OpRequest::get_objref() const { return (TYPE_SEM_OBJ_uRef) GetField(2); }

void TYPE_TIMETRACETP_OpRequest::set_objref(const TYPE_SEM_OBJ_uRef &p) { SetField(2, p); }

TYPE_AS_Ids TYPE_TIMETRACETP_OpRequest::get_clnm() const { return (TYPE_AS_Ids) GetField(3); }

void TYPE_TIMETRACETP_OpRequest::set_clnm(const TYPE_AS_Ids &p) { SetField(3, p); }

TYPE_TIMETRACETP_ThreadSwapIn &TYPE_TIMETRACETP_ThreadSwapIn::Init(TYPE_SCHDTP_ThreadId p1, Generic p2, Generic p3) {
  SetField(1, p1);
  SetField(2, p2);
  SetField(3, p3);
  return * this;
}

TYPE_SCHDTP_ThreadId TYPE_TIMETRACETP_ThreadSwapIn::get_id() const { return (TYPE_SCHDTP_ThreadId) GetField(1); }

void TYPE_TIMETRACETP_ThreadSwapIn::set_id(const TYPE_SCHDTP_ThreadId &p) { SetField(1, p); }

Generic TYPE_TIMETRACETP_ThreadSwapIn::get_objref() const { return (Generic) GetField(2); }

void TYPE_TIMETRACETP_ThreadSwapIn::set_objref(const Generic &p) { SetField(2, p); }

Generic TYPE_TIMETRACETP_ThreadSwapIn::get_clnm() const { return (Generic) GetField(3); }

void TYPE_TIMETRACETP_ThreadSwapIn::set_clnm(const Generic &p) { SetField(3, p); }

TYPE_TIMETRACETP_ThreadSwapOut &TYPE_TIMETRACETP_ThreadSwapOut::Init(TYPE_SCHDTP_ThreadId p1, Generic p2, Generic p3) {
  SetField(1, p1);
  SetField(2, p2);
  SetField(3, p3);
  return * this;
}

TYPE_SCHDTP_ThreadId TYPE_TIMETRACETP_ThreadSwapOut::get_id() const { return (TYPE_SCHDTP_ThreadId) GetField(1); }

void TYPE_TIMETRACETP_ThreadSwapOut::set_id(const TYPE_SCHDTP_ThreadId &p) { SetField(1, p); }

Generic TYPE_TIMETRACETP_ThreadSwapOut::get_objref() const { return (Generic) GetField(2); }

void TYPE_TIMETRACETP_ThreadSwapOut::set_objref(const Generic &p) { SetField(2, p); }

Generic TYPE_TIMETRACETP_ThreadSwapOut::get_clnm() const { return (Generic) GetField(3); }

void TYPE_TIMETRACETP_ThreadSwapOut::set_clnm(const Generic &p) { SetField(3, p); }

TYPE_TIMETRACETP_TraceItem &TYPE_TIMETRACETP_TraceItem::Init(TYPE_TIMETRACETP_TraceEvent p1, Int p2) {
  SetField(1, p1);
  SetField(2, p2);
  return * this;
}

TYPE_TIMETRACETP_TraceEvent TYPE_TIMETRACETP_TraceItem::get_event() const { return (TYPE_TIMETRACETP_TraceEvent) GetField(1); }

void TYPE_TIMETRACETP_TraceItem::set_event(const TYPE_TIMETRACETP_TraceEvent &p) { SetField(1, p); }

Int TYPE_TIMETRACETP_TraceItem::get_time() const { return (Int) GetField(2); }

void TYPE_TIMETRACETP_TraceItem::set_time(const Int &p) { SetField(2, p); }
#ifndef DEF_TIMETRACETP_inv_Trace

Bool vdm_TIMETRACETP_inv_Trace(const type_21TIMETRACETP_TraceItemCL &vdm_TIMETRACETP_t) {
  Bool varRes_3;
  bool tmpQuant_4 = true;
  {
    bool succ_18 = true;
    Set e_set_19;    Set riseq_21;    int max_22 = (Int) vdm_TIMETRACETP_t.Length();    for (int i_23 = 1; i_23 <= max_22; i_23++) 
      riseq_21.Insert((Int) i_23);    e_set_19 = riseq_21;
    Int vdm_TIMETRACETP_i;    Int vdm_TIMETRACETP_j;
    Set e_set_27 = e_set_19;
    {
      Generic tmpe_30;
      for (int bb_29 = e_set_27.First(tmpe_30); bb_29 && tmpQuant_4; bb_29 = e_set_27.Next(tmpe_30)) {
        Int elem_28 = tmpe_30;
        succ_18 = true;        vdm_TIMETRACETP_j = elem_28;        if (succ_18) {
          Generic tmpe_26;
          for (int bb_25 = e_set_19.First(tmpe_26); bb_25 && tmpQuant_4; bb_25 = e_set_19.Next(tmpe_26)) {
            Int elem_24 = tmpe_26;
            succ_18 = true;            vdm_TIMETRACETP_i = elem_24;            if (succ_18) {
              Bool pred_5;
              if (((Bool) ((vdm_TIMETRACETP_i.GetValue()) < (vdm_TIMETRACETP_j.GetValue()))).GetValue()) {
                Bool var2_9;
                Int var1_10;
                if (((Record) vdm_TIMETRACETP_t[vdm_TIMETRACETP_i.GetValue()]).Is(vdm_TIMETRACETP_TraceItem)) 
                  var1_10 = ((Record) vdm_TIMETRACETP_t[vdm_TIMETRACETP_i.GetValue()]).GetField(pos_TIMETRACETP_TraceItem_time);
                else 
                  RunTime(L"Unknown record field selector");
                Int var2_14;
                if (((Record) vdm_TIMETRACETP_t[vdm_TIMETRACETP_j.GetValue()]).Is(vdm_TIMETRACETP_TraceItem)) 
                  var2_14 = ((Record) vdm_TIMETRACETP_t[vdm_TIMETRACETP_j.GetValue()]).GetField(pos_TIMETRACETP_TraceItem_time);
                else 
                  RunTime(L"Unknown record field selector");
                var2_9 = (Bool) ((var1_10.GetValue()) <= (var2_14.GetValue()));
                pred_5 = var2_9;
              }
              else 
                pred_5 = (Bool) true;
              if (pred_5.GetValue()) {}
              else 
                tmpQuant_4 = false;
            }
          }
        }
      }
    }
  }
  varRes_3 = (Bool) tmpQuant_4;
  return (Generic) varRes_3;
}
#endif


void init_TIMETRACETP_VDMLib() {
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_TIMETRACETP_DelayedThreadSwapIn, 4);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_TIMETRACETP_DelayedThreadSwapIn, L"TIMETRACETP`DelayedThreadSwapIn");
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_TIMETRACETP_OpActivate, 3);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_TIMETRACETP_OpActivate, L"TIMETRACETP`OpActivate");
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_TIMETRACETP_OpCompleted, 3);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_TIMETRACETP_OpCompleted, L"TIMETRACETP`OpCompleted");
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_TIMETRACETP_OpRequest, 3);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_TIMETRACETP_OpRequest, L"TIMETRACETP`OpRequest");
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_TIMETRACETP_ThreadSwapIn, 3);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_TIMETRACETP_ThreadSwapIn, L"TIMETRACETP`ThreadSwapIn");
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_TIMETRACETP_ThreadSwapOut, 3);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_TIMETRACETP_ThreadSwapOut, L"TIMETRACETP`ThreadSwapOut");
  VDMGetDefaultRecInfoMap().NewTag(TAG_TYPE_TIMETRACETP_TraceItem, 2);
  VDMGetDefaultRecInfoMap().SetSymTag(TAG_TYPE_TIMETRACETP_TraceItem, L"TIMETRACETP`TraceItem");
  VDMGetDefaultRecInfoMap().NewTag(TOKEN, 1);
  VDMGetDefaultRecInfoMap().SetSymTag(TOKEN, L"token");
}
#ifdef DEF_TIMETRACETP_USERIMPL

#include "TIMETRACETP_userimpl.cc"

#endif


void init_TIMETRACETP() { init_TIMETRACETP_VDMLib(); }
