//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Wed 01-Mar-00 by the VDM-SLtoC++ Code Generator
// (v3.3 - Thu 06-May-99)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _TIMETRACETP_h
#define _TIMETRACETP_h

#include <math.h>
#include "metaiv.h"
#include "cg.h"
#include "cg_aux.h"
#include "AS.h"
#include "INSTRTP.h"
#include "SCHDTP.h"
#include "SEM.h"
#include "TIMETRACETP_anonym.h"
enum  {
  vdm_TIMETRACETP_DelayedThreadSwapIn = TAG_TYPE_TIMETRACETP_DelayedThreadSwapIn,
  length_TIMETRACETP_DelayedThreadSwapIn = 4,
  pos_TIMETRACETP_DelayedThreadSwapIn_id = 1,
  pos_TIMETRACETP_DelayedThreadSwapIn_objref = 2,
  pos_TIMETRACETP_DelayedThreadSwapIn_clnm = 3,
  pos_TIMETRACETP_DelayedThreadSwapIn_delay = 4,
  vdm_TIMETRACETP_OpActivate = TAG_TYPE_TIMETRACETP_OpActivate,
  length_TIMETRACETP_OpActivate = 3,
  pos_TIMETRACETP_OpActivate_opname = 1,
  pos_TIMETRACETP_OpActivate_objref = 2,
  pos_TIMETRACETP_OpActivate_clnm = 3,
  vdm_TIMETRACETP_OpCompleted = TAG_TYPE_TIMETRACETP_OpCompleted,
  length_TIMETRACETP_OpCompleted = 3,
  pos_TIMETRACETP_OpCompleted_opname = 1,
  pos_TIMETRACETP_OpCompleted_objref = 2,
  pos_TIMETRACETP_OpCompleted_clnm = 3,
  vdm_TIMETRACETP_OpRequest = TAG_TYPE_TIMETRACETP_OpRequest,
  length_TIMETRACETP_OpRequest = 3,
  pos_TIMETRACETP_OpRequest_opname = 1,
  pos_TIMETRACETP_OpRequest_objref = 2,
  pos_TIMETRACETP_OpRequest_clnm = 3,
  vdm_TIMETRACETP_ThreadSwapIn = TAG_TYPE_TIMETRACETP_ThreadSwapIn,
  length_TIMETRACETP_ThreadSwapIn = 3,
  pos_TIMETRACETP_ThreadSwapIn_id = 1,
  pos_TIMETRACETP_ThreadSwapIn_objref = 2,
  pos_TIMETRACETP_ThreadSwapIn_clnm = 3,
  vdm_TIMETRACETP_ThreadSwapOut = TAG_TYPE_TIMETRACETP_ThreadSwapOut,
  length_TIMETRACETP_ThreadSwapOut = 3,
  pos_TIMETRACETP_ThreadSwapOut_id = 1,
  pos_TIMETRACETP_ThreadSwapOut_objref = 2,
  pos_TIMETRACETP_ThreadSwapOut_clnm = 3,
  vdm_TIMETRACETP_TraceItem = TAG_TYPE_TIMETRACETP_TraceItem,
  length_TIMETRACETP_TraceItem = 2,
  pos_TIMETRACETP_TraceItem_event = 1,
  pos_TIMETRACETP_TraceItem_time = 2
};

class TYPE_TIMETRACETP_DelayedThreadSwapIn : public Record {
public:

  TYPE_TIMETRACETP_DelayedThreadSwapIn() : Record(TAG_TYPE_TIMETRACETP_DelayedThreadSwapIn, 4) {}
  TYPE_TIMETRACETP_DelayedThreadSwapIn &Init(TYPE_SCHDTP_ThreadId p2, Generic p3, Generic p4, Real p5);

  TYPE_TIMETRACETP_DelayedThreadSwapIn(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMETRACETP_DelayedThreadSwapIn"; }
  TYPE_SCHDTP_ThreadId get_id() const;
  void set_id(const TYPE_SCHDTP_ThreadId &p);
  Generic get_objref() const;
  void set_objref(const Generic &p);
  Generic get_clnm() const;
  void set_clnm(const Generic &p);
  Real get_delay() const;
  void set_delay(const Real &p);
} ;

class TYPE_TIMETRACETP_OpActivate : public Record {
public:

  TYPE_TIMETRACETP_OpActivate() : Record(TAG_TYPE_TIMETRACETP_OpActivate, 3) {}
  TYPE_TIMETRACETP_OpActivate &Init(TYPE_AS_Ids p2, TYPE_SEM_OBJ_uRef p3, TYPE_AS_Ids p4);

  TYPE_TIMETRACETP_OpActivate(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMETRACETP_OpActivate"; }
  TYPE_AS_Ids get_opname() const;
  void set_opname(const TYPE_AS_Ids &p);
  TYPE_SEM_OBJ_uRef get_objref() const;
  void set_objref(const TYPE_SEM_OBJ_uRef &p);
  TYPE_AS_Ids get_clnm() const;
  void set_clnm(const TYPE_AS_Ids &p);
} ;

class TYPE_TIMETRACETP_OpCompleted : public Record {
public:

  TYPE_TIMETRACETP_OpCompleted() : Record(TAG_TYPE_TIMETRACETP_OpCompleted, 3) {}
  TYPE_TIMETRACETP_OpCompleted &Init(TYPE_AS_Ids p2, TYPE_SEM_OBJ_uRef p3, TYPE_AS_Ids p4);

  TYPE_TIMETRACETP_OpCompleted(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMETRACETP_OpCompleted"; }
  TYPE_AS_Ids get_opname() const;
  void set_opname(const TYPE_AS_Ids &p);
  TYPE_SEM_OBJ_uRef get_objref() const;
  void set_objref(const TYPE_SEM_OBJ_uRef &p);
  TYPE_AS_Ids get_clnm() const;
  void set_clnm(const TYPE_AS_Ids &p);
} ;

class TYPE_TIMETRACETP_OpRequest : public Record {
public:

  TYPE_TIMETRACETP_OpRequest() : Record(TAG_TYPE_TIMETRACETP_OpRequest, 3) {}
  TYPE_TIMETRACETP_OpRequest &Init(TYPE_AS_Ids p2, TYPE_SEM_OBJ_uRef p3, TYPE_AS_Ids p4);

  TYPE_TIMETRACETP_OpRequest(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMETRACETP_OpRequest"; }
  TYPE_AS_Ids get_opname() const;
  void set_opname(const TYPE_AS_Ids &p);
  TYPE_SEM_OBJ_uRef get_objref() const;
  void set_objref(const TYPE_SEM_OBJ_uRef &p);
  TYPE_AS_Ids get_clnm() const;
  void set_clnm(const TYPE_AS_Ids &p);
} ;

class TYPE_TIMETRACETP_ThreadSwapIn : public Record {
public:

  TYPE_TIMETRACETP_ThreadSwapIn() : Record(TAG_TYPE_TIMETRACETP_ThreadSwapIn, 3) {}
  TYPE_TIMETRACETP_ThreadSwapIn &Init(TYPE_SCHDTP_ThreadId p2, Generic p3, Generic p4);

  TYPE_TIMETRACETP_ThreadSwapIn(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMETRACETP_ThreadSwapIn"; }
  TYPE_SCHDTP_ThreadId get_id() const;
  void set_id(const TYPE_SCHDTP_ThreadId &p);
  Generic get_objref() const;
  void set_objref(const Generic &p);
  Generic get_clnm() const;
  void set_clnm(const Generic &p);
} ;

class TYPE_TIMETRACETP_ThreadSwapOut : public Record {
public:

  TYPE_TIMETRACETP_ThreadSwapOut() : Record(TAG_TYPE_TIMETRACETP_ThreadSwapOut, 3) {}
  TYPE_TIMETRACETP_ThreadSwapOut &Init(TYPE_SCHDTP_ThreadId p2, Generic p3, Generic p4);

  TYPE_TIMETRACETP_ThreadSwapOut(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMETRACETP_ThreadSwapOut"; }
  TYPE_SCHDTP_ThreadId get_id() const;
  void set_id(const TYPE_SCHDTP_ThreadId &p);
  Generic get_objref() const;
  void set_objref(const Generic &p);
  Generic get_clnm() const;
  void set_clnm(const Generic &p);
} ;

class TYPE_TIMETRACETP_TraceItem : public Record {
public:

  TYPE_TIMETRACETP_TraceItem() : Record(TAG_TYPE_TIMETRACETP_TraceItem, 2) {}
  TYPE_TIMETRACETP_TraceItem &Init(TYPE_TIMETRACETP_TraceEvent p2, Int p3);

  TYPE_TIMETRACETP_TraceItem(const Generic &c) : Record(c) {}

  const wchar_t * GetTypeName() const { return L"TYPE_TIMETRACETP_TraceItem"; }
  TYPE_TIMETRACETP_TraceEvent get_event() const;
  void set_event(const TYPE_TIMETRACETP_TraceEvent &p);
  Int get_time() const;
  void set_time(const Int &p);
} ;
Bool vdm_TIMETRACETP_inv_Trace(const type_21TIMETRACETP_TraceItemCL &);
void init_TIMETRACETP();

#endif

