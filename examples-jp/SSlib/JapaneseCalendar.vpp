class JapaneseCalendar is subclass of Calendar
/*
責任
	日本の休日に関する情報を提供する。
概要
	日本の休日を返す。
	日付の有効期限は、スーパークラスCalendarの定義に従う。
	時刻に関わる計算は、日本標準時（JST)を使用している。
*/

values
	Rcsid = "$Id";
public 日本標準時とグリニッジ標準時との差 = 0.375;	-- 0.375 = 9 時間 = 9 / 24
public 西暦と和暦の年差 = 1988;

functions

static private 文字列変換補助関数: int -> seq of char
文字列変換補助関数(整数) == 
	let	str = Integer`asString	in
	if 整数 >= 10 then str(整数) else " " ^ str(整数);
	
--平成以後の和暦日付文字列を得る
static public 和暦日付文字列を得る : Date -> seq of char
和暦日付文字列を得る(西暦日付) == 
	let	asString =Integer`asString,
		和暦の年 = 西暦日付.年() - 西暦と和暦の年差,
		m = 西暦日付.月(),
		d = 西暦日付.日(),
		年文字列 = asString(和暦の年),
		月文字列 = 文字列変換補助関数(m),
		日付文字列 = 文字列変換補助関数(d)	in
		年文字列 ^ 月文字列 ^ 日付文字列;

operations

/*
let c = new JapaneseCalendar(), d = c.休日列を得る(2001) in [d(i).日付文字列を得る() | i in set inds d] =
[ "20010101",
  "20010108",
  "20010211",
  "20010212",
  "20010320",
  "20010429",
  "20010430",
  "20010503",
  "20010504",
  "20010505",
  "20010720",
  "20010915",
  "20010922",
  "20011008",
  "20011103",
  "20011123",
  "20011223",
  "20011224" ]
 */
public 休日集合を設定する: int ==> ()	--2000年以後の休日のみ考えている。
休日集合を設定する(年) ==
	let	成人の日 = 第n指定曜日を得る(年,1,2,<月>),
		海の日 = if 年 >= 2003 then 第n指定曜日を得る(年,7, 3,<月>) else 整数三つ組から日付を得る(年,7,20),
		敬老の日 = if 年 >= 2003 then 第n指定曜日を得る(年,9, 3,<月>) else 整数三つ組から日付を得る(年,9,15),
		体育の日 = 第n指定曜日を得る(年,10, 2,<月>),
		国民の休日 =  {
			整数三つ組から日付を得る(年,1,1), 
			成人の日,
			整数三つ組から日付を得る(年,2,11),
			春分を得る(年), 
			整数三つ組から日付を得る(年,4,29),
			整数三つ組から日付を得る(年,5,3),
			整数三つ組から日付を得る(年,5,4), 	--formally this date is not national holiday
			整数三つ組から日付を得る(年,5,5),
			海の日,
			敬老の日,
			秋分を得る(年),
			体育の日,
			整数三つ組から日付を得る(年,11,3),
			整数三つ組から日付を得る(年,11,23),
			整数三つ組から日付を得る(年,12,23)
		},
		振替休日 = {日.＋(1) | 日 in set 国民の休日 & 日曜日か？(日)}	in
	休日集合写像 := 休日集合写像 munion { 年 |-> 国民の休日 union 振替休日};

public JapaneseCalendar : () ==> JapaneseCalendar
JapaneseCalendar() ==
	(
	グリニッジ標準時との差を設定する(日本標準時とグリニッジ標準時との差); 
	return self
	);
	
end JapaneseCalendar