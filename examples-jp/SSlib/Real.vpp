class Real
/*
責任
	実数を表す。
概要
	実数や数値演算であらかじめ定義された機能以外の機能を定義する。
*/

values
	Rcsid = "$Id: Real.vpp,v 1.3 2006/05/30 01:28:20 vdmtools Exp $";
	誤差 = 1e-10;
	変分 = 1e-5;	

functions

static public ＝ : real -> real -> bool
＝(r1)( r2) == abs(r1 - r2) < 誤差;

static public 桁数 : real -> nat
桁数(x) ==
	let	i = floor(x)	in
	if x = i then
		整数部桁数(i)
	else
		整数部桁数(i) + 1 + 小数点以下何桁か？(x);

static public 整数部桁数 : int -> nat
整数部桁数(i) == 整数部桁数補助関数(i, 1);

static public 整数部桁数補助関数 : int * nat -> nat
整数部桁数補助関数(i, ある桁数) ==
	let	商 = i div 10 in
	cases 商:
		0		-> ある桁数,
		others	-> Real`整数部桁数補助関数(商, ある桁数 + 1)
	end;

static public 小数点以下n桁か？ : real * nat -> bool
小数点以下n桁か？(x,ある桁数) == 
	小数点以下何桁か？(x) = ある桁数;

static public 小数点以下何桁か？ : real -> nat
小数点以下何桁か？(x) == 小数点以下何桁か？補助関数(x,0);

static 小数点以下何桁か？補助関数 : real * nat -> nat
小数点以下何桁か？補助関数(x,ある桁数) ==
	if x = floor(x) then
		ある桁数
	else
		小数点以下何桁か？補助関数(x * 10, ある桁数 + 1);

static public 小数点以下n桁で四捨五入する : real * nat -> real
小数点以下n桁で四捨五入する(r, ある桁数) ==
	let	倍数 = 10 ** ある桁数
	in
	floor(r * 倍数  + 0.5) / 倍数
pre
	r >= 0;

static public 導関数 : (real -> real) ->real -> real
導関数(f)(x) == (f(x+変分) - f(x)) / 変分 ;

--方程式の解法のニュートン法
static public ニュートン法で方程式を解く: (real ->real) -> real -> real
ニュートン法で方程式を解く(f)(x) ==
	let	終了条件 = lambda y : real &  abs(f(y)) < 誤差,
		次の近似 = lambda y : real & y - (f(y) / 導関数(f)(y))	in
	new Function().Funtil[real](終了条件)(次の近似)(x);
	
-- 台形公式で積分値を求める。誤差は大きいし、まだ十分テストしていない。
-- 区間[a,...,b]をn等分した刻み幅hで、関数f(x)を積分する。
static public 積分 : (real -> real)  -> nat1 -> real -> real -> real
積分(f)(n)(a)(b) == 
	let	
		h = (b - a) / n,
		s = 列生成(n, a, h)
	in
	h * (f(a) / 2 + Sequence`Σ[real](Sequence`fmap[real, real](f)(s)) + f(b) / 2);

operations
static private 列生成 : nat1 * real * real  ==> seq of real
列生成(n, a, h) == 
	(	
		dcl s : seq of real := [];
		for i = 1 to n do
		s := s ^ [a + i * h];
	return s
	);

functions
--平方根を求める。（ニュートン法のテストのため）
static public root: real -> real
root(x) ==
	let	f = lambda y : real & y ** 2 - x	in
	ニュートン法で方程式を解く(f)(x);

static public 元利合計倍数を得る : real * int -> real
元利合計倍数を得る(利子,年) == (1 + 利子) ** 年
pre
	利子 >= 0 and 年 > 0;

static 利子を得る陰仕様_数学版 : real * int -> real
利子を得る陰仕様_数学版(倍数,年) == is not yet specified
pre
	倍数 > 1.0 and 年 > 0 
post
	倍数 > 1.0 and 年 > 0 and
	exists1 利子 : real &
		let 元利合計 = 元利合計倍数を得る(利子,年)
		in 倍数 = 元利合計  and RESULT = 利子;
		
static 利子を得る陰仕様_計算機版 : real * int -> real
利子を得る陰仕様_計算機版 (倍数,年数) ==
	is not yet specified
pre
	倍数 > 1.0 and 年数 > 0 
post
	倍数 > 1.0 and 年数 > 0 and
	exists1 利子 : real & 
		let	元利合計 = 元利合計倍数を得る(利子,年数)
		in	＝(倍数)(元利合計) and RESULT = 利子;

--利子を得る陽仕様（ニュートン法を利用、関数プログラミング使用）
static public 利子を得る: real * int -> real
利子を得る(倍数,年数) ==
	let	f = lambda 利子 : real & 倍数 - 元利合計倍数を得る(利子,年数)	in
	ニュートン法で方程式を解く(f)(0);
	
end Real