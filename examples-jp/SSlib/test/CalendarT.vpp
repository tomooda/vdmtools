--$Id: CalendarT.vpp,v 1.1 2005/10/31 02:15:42 vdmtools Exp $
/*
テストグループ
	Calendarのテスト
関連 UC
	なし
作成者
	佐原伸
*/
class CalendarT is subclass of TestDriver
functions
tests : () -> seq of TestCase
tests() == 
	[
	new CalendarT12(),
	new CalendarT11(),
	new CalendarT10(),
	new CalendarT09(),
	--new CalendarT08(), --廃止
	new CalendarT07(),
	new CalendarT06(),
	new CalendarT05(),
	new CalendarT03(),
	new CalendarT02(), 
	new CalendarT01(),
	new CalendarT04()
	];
end CalendarT

/*
シナリオID
	日付の生成
親UseCase
	なし
内容
	日付を生成する。
*/
class CalendarT01 is subclass of TestCase
operations 
protected test: () ==> bool
	test() == 
		let	jc = new JapaneseCalendar()	in
	(
	jc.今日を設定する(jc.整数三つ組から日付を得る(2001,9,12));
	return
		jc.整数三つ組から日付を得る(2003, 3, 0).asString() = "20030228" and
		jc.整数三つ組から日付を得る(2003, 2, 29).asString() = "20030301" and
		jc.整数三つ組から日付を得る(2004, 3, 0).asString() = "20040229" and
		jc.整数三つ組から日付を得る(2004, 2, 30).asString() = "20040301" and
		jc.整数三つ組から日付を得る(2004, 1, 60).asString() = "20040229" and
		jc.整数三つ組から日付を得る(2004, 1, 61).asString() = "20040301" and
		jc.整数三つ組から日付を得る(2001,5,1).年月日の整数三つ組を得る() = mk_(2001,5,1) and
		jc.年月日の整数組を得る(jc.今日()) = mk_(2001,9,12) and
		jc.修正ユリウス日から日付を得る(jc.修正ユリウス日に変換する(2299160)).年月日の整数三つ組を得る() = mk_(1582,10,4)  and	--グレゴリオ暦切替前日
		jc.修正ユリウス日から日付を得る(jc.修正ユリウス日に変換する(2299160)).＋(1).年月日の整数三つ組を得る() = mk_(1582,10,15) and	--グレゴリオ暦初日
		jc.日付を文字列に変換する(jc.日付文字列から日付を得る("20010711")) = "20010711" and
		jc.日付文字列から日付を得る("saharashin") = nil and
		JapaneseCalendar`和暦日付文字列を得る(jc.整数三つ組から日付を得る(2001,5,1)) = "13 5 1" and
		jc.秋分を得る(2001).＝(jc.整数三つ組から日付を得る(2001,9,23)) = true
	)
	;
protected 準備する: () ==> ()
準備する() == テスト名 := "CalendarT01:\t日付の生成。";
protected 後始末する: () ==> ()
後始末する() == return;
end CalendarT01

/*
シナリオID
	日付の加減算。
親UseCase
	なし
内容
	日付の加算・減算を行う。
*/
class CalendarT02 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	jc = new JapaneseCalendar()	in
	return
		jc.日付を加算する(jc.整数三つ組から日付を得る(2001,5,1),3) .日付文字列を得る() = "20010504" and
		jc.日付の差を求める(jc.整数三つ組から日付を得る(2001,5,8),jc.整数三つ組から日付を得る(2001,5,1)) = 7 and
		jc.日付を減算する(jc.整数三つ組から日付を得る(2001,5,1),1) .年月日の整数三つ組を得る() = mk_(2001,4,30)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "CalendarT02:\t日付の加減算。";
protected 後始末する: () ==> ()
後始末する() == return;
end CalendarT02

/*
シナリオID
	春分、夏至、秋分、冬至の計算。
親UseCase
	なし
内容
	春分、夏至、秋分、冬至の計算を行う。
*/
class CalendarT03 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	jc = new JapaneseCalendar()	in
	return
		jc.春分を得る(2001).日付文字列を得る() = "20010320" and
		jc.夏至を得る(2001).日付文字列を得る() = "20010621" and
		jc.秋分を得る(2001).日付文字列を得る() = "20010923" and
		jc.冬至を得る(2001).日付文字列を得る() = "20011222" and
		jc.春分を得る(2999).日付文字列を得る() = "29990320" and
		jc.夏至を得る(2999).日付文字列を得る() = "29990620" and
		jc.秋分を得る(2999).日付文字列を得る() = "29990922" and
		jc.冬至を得る(2999).日付文字列を得る() = "29991222" 
	;
protected 準備する: () ==> ()
準備する() == テスト名 := "CalendarT03:\t春分、夏至、秋分、冬至の計算。";
protected 後始末する: () ==> ()
後始末する() == return;
end CalendarT03

/*
シナリオID
	休日群を得る。
親UseCase
	なし
内容
	休日群を得る。
*/
class CalendarT04 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	jc = new JapaneseCalendar(),
		休日集合 = jc.休日集合を得る(2001),
		休日集合2003 = jc.休日集合を得る(2003),
		d0401 = jc.文字列から日付を得る("20010401"),
		d0408 = jc.文字列から日付を得る("20010408"),
		d0430 = jc.文字列から日付を得る("20010430"),
		整数三つ組休日集合 =  {jc.年月日の整数組を得る(休日) | 休日 in set 休日集合}	,
		整数三つ組休日集合2003 =  {jc.年月日の整数組を得る(休日) | 休日 in set 休日集合2003}	in
	return
		整数三つ組休日集合 = 
			{ mk_( 2001,1,1 ),
  			mk_( 2001,1,8 ),
			mk_( 2001,2,11 ),
 			mk_( 2001,2,12 ),
  			mk_( 2001,3,20 ),
 			mk_( 2001,4,29 ),
  			mk_( 2001,4,30 ),
  			mk_( 2001,5,3 ),
  			mk_( 2001,5,4 ),
  			mk_( 2001,5,5 ),
 			mk_( 2001,7,20 ),
  			mk_( 2001,9,15 ),
			mk_( 2001,9,23 ),
  			mk_( 2001,9,24 ),
  			mk_( 2001,10,8 ),
  			mk_( 2001,11,3 ),
  			mk_( 2001,11,23 ),
  			mk_( 2001,12,23 ),
  			mk_( 2001,12,24 )
  			} and
  		整数三つ組休日集合2003 =
  			{ mk_( 2003,1,1 ),
			  mk_( 2003,1,13 ),
			  mk_( 2003,2,11 ),
			  mk_( 2003,3,21 ),
			  mk_( 2003,4,29 ),
			  mk_( 2003,5,3 ),
			  mk_( 2003,5,4 ),
			  mk_( 2003,5,5 ),
			  mk_( 2003,7,21 ),
			  mk_( 2003,9,15 ),
			  mk_( 2003,9,23 ),
			  mk_( 2003,10,13 ),
			  mk_( 2003,11,3 ),
			  mk_( 2003,11,23 ),
			  mk_( 2003,11,24 ),
 			  mk_( 2003,12,23 ) 
 			 } and
  		jc.日曜日を除く休日数を得る(d0401,d0430)  = 2 and
  		card jc.日曜日である休日の集合を得る(d0401,d0430) = 1 and
  		jc.日曜日である休日の集合を得る(d0401,d0408) = {}
	;
protected 準備する: () ==> ()
準備する() == テスト名 := "CalendarT04:\t休日群を得る。";
protected 後始末する: () ==> ()
後始末する() == return;
end CalendarT04

/*
シナリオID
	日付の比較。
親UseCase
	なし
内容
	日付を比較する。
*/
class CalendarT05 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	jc = new JapaneseCalendar(),
		d0711 = jc.文字列から日付を得る("20010711")	in
	(
	jc.今日を設定する(jc.整数三つ組から日付を得る(2001,3,1));
	let	d0301 = jc.今日()	in
	return
		d0711.＝(jc.整数三つ組から日付を得る(2001, 7, 11)) and
		jc.等しい(d0711,jc.整数三つ組から日付を得る(2001, 7, 11)) and
		d0301.＜(d0711) and
		jc.小さい(d0301, d0711) and
		d0711.＞(d0301) and
		jc.大きい(d0711,d0301) and
		d0711.≧(d0711) and d0711.≧(d0301) and
		jc.以上(d0711,d0711)  and jc.以上(d0711,d0301) and
		d0711.≦(d0711) and d0301.≦(d0711) and
		jc.以下(d0711,d0711) and jc.以下(d0301,d0711) 
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "CalendarT05:\t日付を比較する。";
protected 後始末する: () ==> ()
後始末する() == return;
end CalendarT05

/*
シナリオID
	指定曜日を得る。
親UseCase
	なし
内容
	指定曜日を得る。
*/
class CalendarT06 is subclass of TestCase, CalendarDefinition
operations 
protected test: () ==> bool
test() == 
	let	jc = new JapaneseCalendar(),
		d10010301 = jc.文字列から日付を得る("10010301"),
		d0711 = jc.文字列から日付を得る("20010711")		in
	(
	let	d0301 = jc.今日()	in
	return
		jc.月初指定曜日を得る(2000,3,<水>).年月日の整数三つ組を得る() = mk_( 2000,3,1 ) and
		jc.月初指定曜日を得る(2001,7,<日>).年月日の整数三つ組を得る() = mk_( 2001,7,1 ) and
		jc.月末指定曜日を得る(2000,2,<火>).年月日の整数三つ組を得る() = mk_( 2000,2,29 ) and
		jc.月末指定曜日を得る(2001,7,<日>).年月日の整数三つ組を得る() = mk_( 2001,7,29 ) and
		jc.第n指定曜日を得る(2001,7,5,<日>).年月日の整数三つ組を得る() = mk_( 2001,7,29 ) and
		jc.第n指定曜日を得る(2001,7,6,<日>) = false and
		jc.指定曜日が何日あるか得る(d0711,d0301,<日>)  = 19 and
		jc.指定曜日が何日あるか得る(d0711,d10010301,<日>)  = 52196 and
		jc.曜日名から曜日数を求める(<木>) = 4 and
		jc.曜日名から曜日数を求める(<金>) = 5 and
		jc.曜日名から曜日数を求める(<土>) = 6 and
		jc.曜日名から曜日数を求める(<日>) = 0 
	)
	;
protected 準備する: () ==> ()
準備する() == テスト名 := "CalendarT06:\t指定曜日を得る。";
protected 後始末する: () ==> ()
後始末する() == return;
end CalendarT06

/*
シナリオID
	文字列から日付を得る。
親UseCase
	なし
内容
	文字列から日付を得る。
*/
class CalendarT07 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	jc = new JapaneseCalendar()	in
	return
		jc.文字列から日付を得る("sahara") = false and
		jc.文字列から日付を得る("20011232") = false and
		jc.文字列から日付を得る("20011231").日付文字列を得る() = "20011231"
	;
protected 準備する: () ==> ()
準備する() == テスト名 := "CalendarT07:\t文字列から日付を得る。";
protected 後始末する: () ==> ()
後始末する() == return;
end CalendarT07

/*
シナリオID
	今日の日付をファイルから読み込む。
親UseCase
	なし
内容
	今日の日付をファイルから読み込む。
*/
class CalendarT09 is subclass of TestCase, CalendarDefinition
operations 
protected test: () ==> bool
test() == 
	let	jc = new JapaneseCalendar()
	in
	return
		jc.今日().＝(jc.整数三つ組から日付を得る(2001, 3, 1)) and
		jc.ファイルから読み込む今日(homedir ^ "/temp/BaseDay.txt").＝(jc.整数三つ組から日付を得る(2003, 10, 24))
	;
protected 準備する: () ==> ()
準備する() == テスト名 := "CalendarT09:\t今日の日付をファイルから読み込む。";
protected 後始末する: () ==> ()
後始末する() == return;

end CalendarT09

/*
シナリオID
	月末日を得る。
親UseCase
	なし
内容
	月末日を得る。
*/
class CalendarT10 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	jc = new JapaneseCalendar()
	in
	return
		jc.月末日を求める(2004, 1).＝(jc.整数三つ組から日付を得る(2004, 1, 31)) and
		jc.月末日を求める(2004, 2).＝(jc.整数三つ組から日付を得る(2004, 2, 29)) and
		jc.月末日を求める(2004, 3).＝(jc.整数三つ組から日付を得る(2004, 3, 31)) and
		jc.月末日を求める(2004, 4).＝(jc.整数三つ組から日付を得る(2004, 4, 30)) and
		jc.月末日を求める(2004, 5).＝(jc.整数三つ組から日付を得る(2004, 5, 31)) and
		jc.月末日を求める(2004, 6).＝(jc.整数三つ組から日付を得る(2004, 6, 30)) and
		jc.月末日を求める(2004, 7).＝(jc.整数三つ組から日付を得る(2004, 7, 31)) and
		jc.月末日を求める(2004, 8).＝(jc.整数三つ組から日付を得る(2004, 8, 31)) and
		jc.月末日を求める(2004, 9).＝(jc.整数三つ組から日付を得る(2004, 9, 30)) and
		jc.月末日を求める(2004, 10).＝(jc.整数三つ組から日付を得る(2004, 10, 31)) and
		jc.月末日を求める(2004, 11).＝(jc.整数三つ組から日付を得る(2004, 11, 30)) and
		jc.月末日を求める(2004, 12).＝(jc.整数三つ組から日付を得る(2004, 12, 31)) and
		jc.月末日を求める(2003, 13).＝(jc.整数三つ組から日付を得る(2004, 1, 31)) and
		jc.月末日を求める(2003, 8+6).＝(jc.整数三つ組から日付を得る(2004, 2, 29)) and
		jc.月末日を求める(2003, 15).＝(jc.整数三つ組から日付を得る(2004, 3, 31)) and
		jc.月末日を求める(2003, 16).＝(jc.整数三つ組から日付を得る(2004, 4, 30)) and
		jc.月末日を求める(2003, 17).＝(jc.整数三つ組から日付を得る(2004, 5, 31)) and
		jc.月末日を求める(2003, 18).＝(jc.整数三つ組から日付を得る(2004, 6, 30)) and
		jc.月末日を求める(2003, 19).＝(jc.整数三つ組から日付を得る(2004, 7, 31)) and
		jc.月末日を求める(2003, 20).＝(jc.整数三つ組から日付を得る(2004, 8, 31)) and
		jc.月末日を求める(2003, 21).＝(jc.整数三つ組から日付を得る(2004, 9, 30)) and
		jc.月末日を求める(2003, 22).＝(jc.整数三つ組から日付を得る(2004, 10, 31)) and
		jc.月末日を求める(2003, 23).＝(jc.整数三つ組から日付を得る(2004, 11, 30)) and
		jc.月末日を求める(2003, 24).＝(jc.整数三つ組から日付を得る(2004, 12, 31)) and
		jc.月末日を求める(2005, 2).＝(jc.整数三つ組から日付を得る(2005, 2, 28))
	;
protected 準備する: () ==> ()
準備する() == テスト名 := "CalendarT10:\t月末日を得る。";
protected 後始末する: () ==> ()
後始末する() == return;
end CalendarT10

/*
シナリオID
	正則日付を得る。
親UseCase
	なし
内容
	正則日付を得る。
*/
class CalendarT11 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	jc = new JapaneseCalendar()
	in
	return
		jc.正則日付を得る(2004, 1, 1).＝(jc.整数三つ組から日付を得る(2004, 1, 1)) and
		jc.正則日付を得る(2003, 12, 32).＝(jc.整数三つ組から日付を得る(2004, 1, 1)) and
		jc.正則日付を得る(2003, 24, 32).＝(jc.整数三つ組から日付を得る(2005, 1, 1)) and
		jc.正則日付を得る(2003, 13, 1).＝(jc.整数三つ組から日付を得る(2004, 1, 1)) and
		jc.正則日付を得る(2004, 1, 32).＝(jc.整数三つ組から日付を得る(2004, 2, 1)) and
		jc.正則日付を得る(2004, 2, 0).＝(jc.整数三つ組から日付を得る(2004, 1, 31)) and
		jc.正則日付を得る(2004, 2, 28).＝(jc.整数三つ組から日付を得る(2004, 2, 28)) and
		jc.正則日付を得る(2004, 2, 29).＝(jc.整数三つ組から日付を得る(2004, 2, 29)) and
		jc.正則日付を得る(2004, 3, 0).＝(jc.整数三つ組から日付を得る(2004, 2, 29)) and
		jc.正則日付を得る(2004, 3, -1).＝(jc.整数三つ組から日付を得る(2004, 2, 28)) and
		jc.正則日付を得る(2003, 2, 29).＝(jc.整数三つ組から日付を得る(2003, 3, 1)) and
		jc.正則日付を得る(2004, 4, 1).＝(jc.整数三つ組から日付を得る(2004, 4, 1)) and
		jc.正則日付を得る(2004, 0, 1).＝(jc.整数三つ組から日付を得る(2003, 12, 1)) and
		jc.正則日付を得る(2004, -1, 1).＝(jc.整数三つ組から日付を得る(2003, 11, 1)) and
		jc.正則日付を得る(2004, -10, 29).＝(jc.整数三つ組から日付を得る(2003, 3, 1)) and
		jc.正則日付を得る(2004, -10, 28).＝(jc.整数三つ組から日付を得る(2003, 2, 28)) and
		jc.正則日付を得る(2004, -11, 1).＝(jc.整数三つ組から日付を得る(2003, 1, 1)) and
		jc.正則日付を得る(2004, -12, 1).＝(jc.整数三つ組から日付を得る(2002, 12, 1))
	;
protected 準備する: () ==> ()
準備する() == テスト名 := "CalendarT11:\t正則日付を得る。";
protected 後始末する: () ==> ()
後始末する() == return;
end CalendarT11

/*
シナリオID
	正則月を得る。
親UseCase
	なし
内容
	正則月を得る。
*/
class CalendarT12 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	jc = new JapaneseCalendar()
	in
	return
		jc.正則月を得る(2004, 1) = mk_(2004, 1) and
		jc.正則月を得る(2004, 2) = mk_(2004, 2) and
		jc.正則月を得る(2004, 3) = mk_(2004, 3) and
		jc.正則月を得る(2004, 4) = mk_(2004, 4) and
		jc.正則月を得る(2004, 5) = mk_(2004, 5) and
		jc.正則月を得る(2004, 6) = mk_(2004, 6) and
		jc.正則月を得る(2004, 7) = mk_(2004, 7) and
		jc.正則月を得る(2004, 8) = mk_(2004, 8) and
		jc.正則月を得る(2004, 9) = mk_(2004, 9) and
		jc.正則月を得る(2004, 10) = mk_(2004, 10) and
		jc.正則月を得る(2004, 11) = mk_(2004, 11) and
		jc.正則月を得る(2004, 12) = mk_(2004, 12) and
		jc.正則月を得る(2004, 13) = mk_(2005, 1)  and
		jc.正則月を得る(2004, 14) = mk_(2005, 2) and
		jc.正則月を得る(2004, 24) = mk_(2005, 12) and
		jc.正則月を得る(2004, 25) = mk_(2006, 1) and
		jc.正則月を得る(2004, 0) = mk_(2003, 12) and
		jc.正則月を得る(2004, -1) = mk_(2003, 11) and
		jc.正則月を得る(2004, -10) = mk_(2003, 2) and
		jc.正則月を得る(2004, -11) = mk_(2003, 1) and
		jc.正則月を得る(2004, -12) = mk_(2002, 12) and
		jc.正則月を得る(2004, -13) = mk_(2002, 11)
	;
protected 準備する: () ==> ()
準備する() == テスト名 := "CalendarT12:\t正則月を得る。";
protected 後始末する: () ==> ()
後始末する() == return;
end CalendarT12
