/*
テストグループ
	StringとCharacterのテスト
関連 UC
	なし
作成者
	佐原伸
*/
class StringT is subclass of TestDriver
functions
tests : () -> seq of TestCase
tests () == 
	[
	new StringT05(), new StringT06(),
	new StringT01(), new StringT02(), 
	new StringT03(), new StringT04(),
	new StringT07(), new StringT08(),
	new StringT09()
	];
end StringT

/*
シナリオID
	文字の変換シナリオ０１
内容
	数字を整数に変換
*/
class StringT01 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	c = new Character()	in
	return
		(
		c.isDigit('0') = true and
		c.isDigit('1') = true and
		c.isDigit('2') = true and
		c.isDigit('3') = true and
		c.isDigit('4') = true and
		c.isDigit('5') = true and
		c.isDigit('6') = true and
		c.isDigit('7') = true and
		c.isDigit('8') = true and
		c.isDigit('9') = true and
		c.isDigit('a') = false and
		c.asDigit('0') = 0 and
		c.asDigit('1') = 1 and
		c.asDigit('2') = 2 and
		c.asDigit('3') = 3 and
		c.asDigit('4') = 4 and
		c.asDigit('5') = 5 and
		c.asDigit('6') = 6 and
		c.asDigit('7') = 7 and
		c.asDigit('8') = 8 and
		c.asDigit('9') = 9 and
		c.asDigit('a') = false )
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT01:\t数字を整数に変換。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT01

/*
シナリオID
	文字の変換シナリオ０2
内容
	文字の辞書順序を返す
*/
class StringT02 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	c = new Character()	in
	return
		(c.as辞書順序('0') = 0 and
		c.as辞書順序('9') = 9 and
		c.as辞書順序('a') = 10 and
		c.as辞書順序('A') = 11 and
		c.as辞書順序('z') = 60 and
		c.as辞書順序('Z') = 61 and
		c.as辞書順序('あ') = 256 and
		c.as辞書順序('+') = 256 )
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT02:\t文字の辞書順序を返す";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT02

/*
シナリオID
	文字の比較シナリオ０１
内容
	文字列の大小を比較する。
*/
class StringT03 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	s = new String(),
		＜ = String`＜,
		≦ = String`≦,
		＞ = String`＞,
		≧ = String`≧
	in
	return
		(s.小さい("123","123") = false and
		＜("123")("123") = false and
		s.大きい("123","123") = false and
		＞("123")( "123") = false and
		s.小さい("","") = false and
		s.大きい("","") = false and
		s.小さい("","123") = true and
		s.大きい("","123") = false and
		s.小さい("123","") = false and
		s.大きい("123","") and
		s.小さい("123","1234") and
		s.大きい("123","1234") = false and
		s.小さい("1234","123") = false and
		s.大きい("1234","123") and
		s.小さい("123","223") and
		s.大きい("123","223") = false and
		s.以下である("123","123") and
		≦("123")("123") and
		s.以上である("123","123") and
		s.以下である("123","1234") and
		≦("123")("1234") and
		s.以上である("123","1234") = false and
		≧("123")("1234") = false and
		s.以下である("1234","123") = false and
		not ≦("1234")("123") and
		s.以上である("1234","123") and
		s.以下である("","") and
		≦("")("") and
		Sequence`fmap[seq of char, bool](＜("123"))(["123", "1234", "", "223"]) = [false, true, false, true] and
		Sequence`fmap[seq of char, bool](≦("123"))(["1234", ""]) = [true, false] and
		Sequence`fmap[seq of char, bool](＞("123"))([ "123", "", "23"]) = [false, true, false] and
		Sequence`fmap[seq of char, bool](≧("123"))(["1234", ""]) = [false, true] 
		)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT03:\t文字列の大小を比較する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT03

/*
シナリオID
	文字の比較シナリオ０2
内容
	文字列が等しいかを比較する。
*/
class StringT04 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	s1234 = "1234",
		s = new String()	in
	return
		s1234 = "1234" and
		s.isSpace("") = true and
		s.isSpace("  ") = true and
		s.isSpace(" \t  ") = true and
		s.isSpace([]) = true 
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT04:\t文字列が等しいかを比較する";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT04

/*
シナリオID
	文字の比較シナリオ０2
内容
	文字の大小を比較する。
*/
class StringT05 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	小さい = Character`小さい,
		大きい = Character`大きい,
		以下である = Character`以下である,
		以上である = Character`以上である
	in
	return
		(小さい('a','a') = false and
		Character`＜('a')('a') = false and
		大きい('a','a') = false and
		Character`＞('a')('a') = false and
		小さい('1','2') and
		Character`＜('1')('2') and
		大きい('1','0') and
		Character`＞('1')('0') and
		小さい('9','a') and
		Character`＜('9')('a') and
		大きい('あ','0') and
		Character`＞('あ')('0') and
		以下である('a','0') = false and
		Character`≦('a')('0') = false and
		以上である('a','0') and
		Character`≧('a')('0') and
		Sequence`fmap[char, bool](Character`＜('5'))("456") = [false, false, true]
		)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT05:\t文字の大小を比較する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT05

/*
シナリオID
	部分文字列を得るシナリオ
内容
	部分文字列を得る。
*/
class StringT06 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	s = new String(),
		substr = String`SubStr
	in
	return
		(s.subStr("Shin Sahara",6,6) = "Sahara" and
		s.subStr("Shin Sahara",6,8) = "Sahara" and
		s.subStr("Shin Sahara",6,3) = "Sah" and
		s.subStr("Shin Sahara",1,0) = "" and
		s.subStrFill("sahara",1,3,'*') = "sah" and
		s.subStrFill("sahara",1,6,'*') = "sahara" and
		s.subStrFill("sahara",1,10,'*') = "sahara****" and
		s.subStrFill("sahara",3,4,'*') = "hara" and
		s.subStrFill("sahara",3,10,'*') = "hara******" and
		s.subStrFill("sahara",1,0,'*') = "" and
		s.subStrFill("",1,6,'*') = "******" and
		String`SubStr(6)(6)("Shin Sahara") = "Sahara" and
		substr(6)(8)("Shin Sahara") = "Sahara" and
		Sequence`fmap[seq of char, seq of char](substr(6)(8))(["1234567890", "12345671"]) = ["67890", "671"]
		)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT06:\t部分文字列を得る。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT06


/*
シナリオID
	数字文字列の扱いを検査するシナリオ
内容
	数字文字列の扱いを検査する。
*/
class StringT07 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	return
		(String`isDigits("1234567890")  = true and
		String`asInteger("1234567890")  = 1234567890 and
		String`asInteger("")  = 0 
		)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT07:\t数字文字列の扱いを検査する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT07

/*
シナリオID
	文字列に最初に出現する位置を検査するシナリオ
内容
	指定した文字が、文字列に最初に出現する位置を検査する。
*/
class StringT08 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	return
		(
		String`index("1234567890",'1')  = 1 and
		String`index("1234567890",'0') = 10 and
		String`index("1234567890",'a')  = 0 and
		String`indexAll("1234567890",'1')  = {1} and
		String`indexAll("1234567890",'0') = {10} and
		String`indexAll("1234567890",'a')  = {} and 
		String`indexAll("1231567190",'1')  = {1,4,8} and 
		String`indexAll("1231567191",'1')  = {1,4,8,10} and
		String`Index('1')("1234567890")  = 1 and
		String`Index('0')("1234567890") = 10 and
		String`Index('a')("1234567890")  = 0 and
		String`IndexAll('1')("1234567890")  = {1} and
		String`IndexAll('0')("1234567890") = {10} and
		String`IndexAll('a')("1234567890")  = {} and 
		String`IndexAll('1')("1231567190")  = {1,4,8} and 
		String`IndexAll('1')("1231567191")  = {1,4,8,10} and
		Sequence`fmap[seq of char, int](String`Index('1'))(["1234567890", "2345671"]) = [1, 7] and
		Sequence`fmap[seq of char, set of int](String`IndexAll('1'))(["1231567190", "1231567191"]) = [{1,4,8}, {1,4,8,10}]
		)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT08:\t指定した文字が、文字列に最初に出現する位置を検査する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT08

/*
シナリオID
	文字列に最初に出現する位置を検査するシナリオ
内容
	指定した文字列が、ある文字列に含まれるかを検査する。
*/
class StringT09 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let 含む = String`含む
	in
	return
		(String`含む("1234567890")( "abc")  = false and
		含む("佐原伸")("佐原伸") = true and
		含む("佐原伸")("佐") = true and
		含む("佐原伸")("伸") = true and
		含む("佐原伸")("原") = true
		)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT09:\t指定した文字列が、ある文字列に含まれるかを検査する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT09

