//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2019-10-07 by the VDM++ to JAVA Code Generator
// (v9.0.10 - Thu 26-Sep-2019 09:44:23 +0900)
//
// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "SQL.vpp".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Map;
import java.util.Set;
import java.util.List;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Tuple;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class SQL {

// ***** VDMTOOLS START Name=iSELECT句項目列 KEEP=NO
  private List iSELECT句項目列 = null;
// ***** VDMTOOLS END Name=iSELECT句項目列

// ***** VDMTOOLS START Name=iFROM句項目列 KEEP=NO
  private List iFROM句項目列 = null;
// ***** VDMTOOLS END Name=iFROM句項目列

// ***** VDMTOOLS START Name=iWHERE句項目列 KEEP=NO
  private List iWHERE句項目列 = null;
// ***** VDMTOOLS END Name=iWHERE句項目列

// ***** VDMTOOLS START Name=iGROUPBY句項目列 KEEP=NO
  private List iGROUPBY句項目列 = null;
// ***** VDMTOOLS END Name=iGROUPBY句項目列

// ***** VDMTOOLS START Name=iORDERBY句項目列 KEEP=NO
  private List iORDERBY句項目列 = null;
// ***** VDMTOOLS END Name=iORDERBY句項目列

// ***** VDMTOOLS START Name=i重複を除外する KEEP=NO
  private Boolean i重複を除外する = null;
// ***** VDMTOOLS END Name=i重複を除外する

// ***** VDMTOOLS START Name=vdm_init_SQL KEEP=NO
  private void vdm_init_SQL () {
    try {
      iSELECT句項目列 = new ArrayList();
      iFROM句項目列 = new ArrayList();
      iWHERE句項目列 = new ArrayList();
      iGROUPBY句項目列 = new ArrayList();
      iORDERBY句項目列 = new ArrayList();
      i重複を除外する = Boolean.FALSE;
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_SQL

// ***** VDMTOOLS START Name=SQL KEEP=NO
  public SQL () throws CGException {
    vdm_init_SQL();
  }
// ***** VDMTOOLS END Name=SQL

// ***** VDMTOOLS START Name=SQL#1|List KEEP=NO
  public SQL (final List a表名列) throws CGException {
    vdm_init_SQL();
    iFROM句項目列 = UTIL.ConvertToList(UTIL.clone(a表名列));
  }
// ***** VDMTOOLS END Name=SQL#1|List

// ***** VDMTOOLS START Name=表名を追加する#1|Object KEEP=NO
  public void 表名を追加する (final Object a表名) throws CGException {
    iFROM句項目列.add(a表名);
  }
// ***** VDMTOOLS END Name=表名を追加する#1|Object

// ***** VDMTOOLS START Name=表名列を追加する#1|List KEEP=NO
  public void 表名列を追加する (final List a表名列) throws CGException {
    List tmpSeq_8 = new ArrayList(a表名列);
    for (Iterator enm_9 = tmpSeq_8.iterator(); enm_9.hasNext(); ) {
      final Object elem_2 = enm_9.next();
      final Object a表名 = elem_2;
      表名を追加する(a表名);
    }
  }
// ***** VDMTOOLS END Name=表名列を追加する#1|List

// ***** VDMTOOLS START Name=選択項目を追加する#1|Object KEEP=NO
  public void 選択項目を追加する (final Object a選択項目) throws CGException {
    iSELECT句項目列.add(a選択項目);
  }
// ***** VDMTOOLS END Name=選択項目を追加する#1|Object

// ***** VDMTOOLS START Name=選択項目列を追加する#1|List KEEP=NO
  public void 選択項目列を追加する (final List a選択項目列) throws CGException {
    List tmpSeq_8 = new ArrayList(a選択項目列);
    for (Iterator enm_9 = tmpSeq_8.iterator(); enm_9.hasNext(); ) {
      final Object elem_2 = enm_9.next();
      final Object a選択項目 = elem_2;
      選択項目を追加する(a選択項目);
    }
  }
// ***** VDMTOOLS END Name=選択項目列を追加する#1|List

// ***** VDMTOOLS START Name=重複を除外する KEEP=NO
  public void 重複を除外する () throws CGException {
    i重複を除外する = Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=重複を除外する

// ***** VDMTOOLS START Name=AND条件を追加する#1|Tuple KEEP=NO
  public void AND条件を追加する (final Tuple a条件) throws CGException {
    iWHERE句項目列.add(a条件);
  }
// ***** VDMTOOLS END Name=AND条件を追加する#1|Tuple

// ***** VDMTOOLS START Name=AND条件列を追加する#1|List KEEP=NO
  public void AND条件列を追加する (final List a条件列) throws CGException {
    List tmpSeq_8 = new ArrayList(a条件列);
    for (Iterator enm_9 = tmpSeq_8.iterator(); enm_9.hasNext(); ) {
      final Tuple elem_2 = (Tuple)enm_9.next();
      final Tuple a条件 = elem_2;
      AND条件を追加する(a条件);
    }
  }
// ***** VDMTOOLS END Name=AND条件列を追加する#1|List

// ***** VDMTOOLS START Name=グループ化キー項目を追加する#1|String KEEP=NO
  public void グループ化キー項目を追加する (final String a列名) throws CGException {
    iGROUPBY句項目列.add(a列名);
  }
// ***** VDMTOOLS END Name=グループ化キー項目を追加する#1|String

// ***** VDMTOOLS START Name=グループ化キー項目列を追加する#1|List KEEP=NO
  public void グループ化キー項目列を追加する (final List a列名列) throws CGException {
    List tmpSeq_8 = new ArrayList(a列名列);
    for (Iterator enm_9 = tmpSeq_8.iterator(); enm_9.hasNext(); ) {
      final String elem_2 = UTIL.ConvertToString(enm_9.next());
      final String a列名 = elem_2;
      グループ化キー項目を追加する(a列名);
    }
  }
// ***** VDMTOOLS END Name=グループ化キー項目列を追加する#1|List

// ***** VDMTOOLS START Name=ソートキー項目を追加する#1|String KEEP=NO
  public void ソートキー項目を追加する (final String a列名) throws CGException {
    iORDERBY句項目列.add(a列名);
  }
// ***** VDMTOOLS END Name=ソートキー項目を追加する#1|String

// ***** VDMTOOLS START Name=ソートキー項目列を追加する#1|List KEEP=NO
  public void ソートキー項目列を追加する (final List a列名列) throws CGException {
    List tmpSeq_8 = new ArrayList(a列名列);
    for (Iterator enm_9 = tmpSeq_8.iterator(); enm_9.hasNext(); ) {
      final String elem_2 = UTIL.ConvertToString(enm_9.next());
      final String a列名 = elem_2;
      ソートキー項目を追加する(a列名);
    }
  }
// ***** VDMTOOLS END Name=ソートキー項目列を追加する#1|List

// ***** VDMTOOLS START Name=問い合わせ言語を取得する#2|Boolean|Number KEEP=NO
  public String 問い合わせ言語を取得する (final Boolean a改行あり, final Number a字下げ) throws CGException {
    if (UTIL.equals(iFROM句項目列, new ArrayList())) {
      UTIL.RunTime("Can not evaluate \'error\' statement");
      return new String();
    }
    else {
      return SELECT句を生成する(iSELECT句項目列, a改行あり, a字下げ).concat(FROM句を生成する(iFROM句項目列, a改行あり, a字下げ)).concat(WHERE句を生成する(iWHERE句項目列, a改行あり, a字下げ)).concat(GROUPBY句を生成する(iGROUPBY句項目列, a改行あり, a字下げ)).concat(ORDERBY句を生成する(iORDERBY句項目列, a改行あり, a字下げ));
    }
  }
// ***** VDMTOOLS END Name=問い合わせ言語を取得する#2|Boolean|Number

// ***** VDMTOOLS START Name=SELECT句を生成する#3|List|Boolean|Number KEEP=NO
  private String SELECT句を生成する (final List a選択項目列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    String res = "SELECT";
    if (i重複を除外する.booleanValue()) {
      res = UTIL.ConvertToString(UTIL.clone(res.concat(" DISTINCT")));
    }
    res = UTIL.ConvertToString(UTIL.clone(res.concat(空白か改行(a改行あり, Integer.valueOf(a字下げ.intValue() + 2)))));
    if (UTIL.equals(a選択項目列, new ArrayList())) {
      res = UTIL.ConvertToString(UTIL.clone(res.concat("*")));
    }
    else {
      for (int ilb_21 = 1; ilb_21 <= a選択項目列.size(); ilb_21++) {
        Number i = ilb_21;
        {
          if ((1 > i.intValue()) || (i.intValue() > a選択項目列.size())) {
            UTIL.RunTime("Illegal index");
          }
          final Object a選択項目 = a選択項目列.get(i.intValue() - 1);
          if (i.intValue() > 1) {
            res = UTIL.ConvertToString(UTIL.clone(res.concat(",").concat(空白か改行(a改行あり, Integer.valueOf(a字下げ.intValue() + 2)))));
          }
          boolean succ_38 = false;
          if (succ_38 = ((a選択項目 instanceof Tuple) && (2 == ((Tuple)a選択項目).Length()))) {
            final Object 項目1 = ((Tuple)a選択項目).GetField(1);
            final List 項目2 = UTIL.ConvertToList(((Tuple)a選択項目).GetField(2));
            if (UTIL.equals(項目1, new quotes.MAX()) ? true : (UTIL.equals(項目1, new quotes.MIN()) ? true : (UTIL.equals(項目1, new quotes.CONCAT()) ? true : UTIL.equals(項目1, new quotes.COUNT())))) {
              res = UTIL.ConvertToString(UTIL.clone(res.concat(関数を生成する(a選択項目))));
            }
            else {
              List rhs_56 = new ArrayList(UTIL.ConvertToList(res.concat(項目を生成する(項目1, a改行あり, Integer.valueOf(a字下げ.intValue() + 2))).concat(" ")));
              rhs_56.addAll(項目2);
              List rhs_68 = rhs_56;
              if (!(((Object)rhs_68) instanceof String)) {
                UTIL.RunTime("Incompatible type");
              }
              res = UTIL.ConvertToString(UTIL.clone(rhs_68));
            }
          }
          if (!succ_38) {
            if (succ_38 = ((a選択項目 instanceof Tuple) && (3 == ((Tuple)a選択項目).Length()))) {
              final Object 項目1 = ((Tuple)a選択項目).GetField(1);
              final String 項目2 = UTIL.ConvertToString(((Tuple)a選択項目).GetField(2));
              final Tuple tmpVar_94 = (Tuple)((Tuple)a選択項目).GetField(3);
              final Map 変換表 = (Map)tmpVar_94.GetField(1);
              final String デフォルト = UTIL.ConvertToString(UTIL.ConvertToString(tmpVar_94.GetField(2)));
              if (UTIL.equals(変換表, new HashMap())) {
                res = UTIL.ConvertToString(UTIL.clone(res.concat(関数を生成する(項目1)).concat(" ").concat(項目2)));
              }
              else {
                res = UTIL.ConvertToString(UTIL.clone(res.concat(CASE句を生成する(UTIL.ConvertToString(項目1), 変換表, デフォルト)).concat(" ").concat(項目2)));
              }
            }
          }
          if (!succ_38) {
            res = UTIL.ConvertToString(UTIL.clone(res.concat(項目を生成する(a選択項目, a改行あり, Integer.valueOf(a字下げ.intValue() + 2)))));
          }
        }
      }
    }
    return res;
  }
// ***** VDMTOOLS END Name=SELECT句を生成する#3|List|Boolean|Number

// ***** VDMTOOLS START Name=FROM句を生成する#3|List|Boolean|Number KEEP=NO
  private String FROM句を生成する (final List a表名列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    String res = 空白か改行(a改行あり, a字下げ).concat("FROM");
    res = UTIL.ConvertToString(UTIL.clone(res.concat(空白か改行(a改行あり, Integer.valueOf(a字下げ.intValue() + 2)))));
    for (int ilb_18 = 1; ilb_18 <= a表名列.size(); ilb_18++) {
      Number i = ilb_18;
      {
        if ((1 > i.intValue()) || (i.intValue() > a表名列.size())) {
          UTIL.RunTime("Illegal index");
        }
        final Object a表名 = a表名列.get(i.intValue() - 1);
        if (i.intValue() > 1) {
          res = UTIL.ConvertToString(UTIL.clone(res.concat(",").concat(空白か改行(a改行あり, Integer.valueOf(a字下げ.intValue() + 2)))));
        }
        List rhs_35 = null;
        List var2_37 = null;
        boolean succ_38 = false;
        if (succ_38 = ((a表名 instanceof Tuple) && (3 == ((Tuple)a表名).Length()))) {
          final String 項目1 = UTIL.ConvertToString(((Tuple)a表名).GetField(1));
          final String 項目2 = UTIL.ConvertToString(((Tuple)a表名).GetField(2));
          final List 項目3 = UTIL.ConvertToList(((Tuple)a表名).GetField(3));
          var2_37 = new ArrayList(UTIL.ConvertToList(副問い合わせを生成する(項目1, a改行あり, Integer.valueOf(a字下げ.intValue() + 2)).concat(" ").concat(項目2)));
          var2_37.addAll(UTIL.ConvertToList(外部結合を生成する(項目3, a改行あり, Integer.valueOf(a字下げ.intValue() + 2))));
        }
        if (!succ_38) {
          if (succ_38 = ((a表名 instanceof Tuple) && (2 == ((Tuple)a表名).Length()))) {
            final Object 項目1 = ((Tuple)a表名).GetField(1);
            final List 項目2 = UTIL.ConvertToList(((Tuple)a表名).GetField(2));
            Boolean cond_57 = null;
            boolean succ_72 = false;
            if (succ_72 = (!項目2.isEmpty())) {
              boolean tmpQuant_75 = true;
              final Set e1_set_78 = new HashSet(項目2);
              Set tmpSet_369 = new HashSet(e1_set_78);
              for (Iterator enm_368 = tmpSet_369.iterator(); enm_368.hasNext() && tmpQuant_75; ) {
                final Object elem_58 = enm_368.next();
                Boolean pred_79 = null;
                Boolean var1_80 = null;
                boolean succ_81 = false;
                if (succ_81 = ((elem_58 instanceof Tuple) && (2 == ((Tuple)elem_58).Length()))) {
                  Boolean var1_85 = null;
                  boolean succ_86 = false;
                  {
                    final Object tmpVar_100 = (Object)((Tuple)elem_58).GetField(1);
                    if (succ_86 = ((tmpVar_100 instanceof List) || (tmpVar_100 instanceof String))) {
                      boolean tmpQuant_91 = true;
                      if (!(((Object)((Tuple)elem_58).GetField(1) instanceof List) || ((Object)((Tuple)elem_58).GetField(1) instanceof String))) {
                        UTIL.RunTime("A sequence was expected");
                      }
                      Set tmpSet_99 = new HashSet(new HashSet(UTIL.ConvertToList((Object)((Tuple)elem_58).GetField(1))));
                      for (Iterator enm_98 = tmpSet_99.iterator(); enm_98.hasNext() && tmpQuant_91; ) {
                        final Character elem_59 = (Character)enm_98.next();
                        if (!(elem_59 instanceof Character)) {
                          tmpQuant_91 = false;
                        }
                      }
                      var1_85 = Boolean.valueOf(tmpQuant_91);
                    }
                  }
                  if (!succ_86) {
                    var1_85 = Boolean.FALSE;
                  }
                  if (var1_85.booleanValue() ? true : ((Object)((Tuple)elem_58).GetField(1) instanceof SQL)) {
                    Boolean var2_105 = null;
                    boolean succ_106 = false;
                    {
                      final List tmpVar_214 = (List)((Tuple)elem_58).GetField(2);
                      if (succ_106 = (!tmpVar_214.isEmpty())) {
                        boolean tmpQuant_111 = true;
                        final Set e1_set_116 = new HashSet((List)((Tuple)elem_58).GetField(2));
                        Set tmpSet_213 = new HashSet(e1_set_116);
                        for (Iterator enm_212 = tmpSet_213.iterator(); enm_212.hasNext() && tmpQuant_111; ) {
                          final Tuple elem_60 = (Tuple)enm_212.next();
                          Boolean pred_117 = null;
                          Boolean var1_118 = null;
                          boolean succ_119 = false;
                          if (succ_119 = (3 == elem_60.Length())) {
                            Boolean var1_122 = null;
                            boolean succ_123 = false;
                            {
                              final String tmpVar_138 = (String)elem_60.GetField(1);
                              if (succ_123 = true) {
                                boolean tmpQuant_128 = true;
                                final Set e1_set_133 = new HashSet(UTIL.ConvertToList((String)elem_60.GetField(1)));
                                Set tmpSet_137 = new HashSet(e1_set_133);
                                for (Iterator enm_136 = tmpSet_137.iterator(); enm_136.hasNext() && tmpQuant_128; ) {
                                  final Character elem_61 = (Character)enm_136.next();
                                  if (!(elem_61 instanceof Character)) {
                                    tmpQuant_128 = false;
                                  }
                                }
                                var1_122 = Boolean.valueOf(tmpQuant_128);
                              }
                            }
                            if (!succ_123) {
                              var1_122 = Boolean.FALSE;
                            }
                            if (var1_122.booleanValue()) {
                              Boolean var2_139 = null;
                              if (UTIL.equals((quotes.等しい)elem_60.GetField(2), new quotes.等しい())) {
                                Boolean var2_145 = null;
                                boolean succ_146 = false;
                                {
                                  final String tmpVar_161 = (String)elem_60.GetField(3);
                                  if (succ_146 = true) {
                                    boolean tmpQuant_151 = true;
                                    final Set e1_set_156 = new HashSet(UTIL.ConvertToList((String)elem_60.GetField(3)));
                                    Set tmpSet_160 = new HashSet(e1_set_156);
                                    for (Iterator enm_159 = tmpSet_160.iterator(); enm_159.hasNext() && tmpQuant_151; ) {
                                      final Character elem_62 = (Character)enm_159.next();
                                      if (!(elem_62 instanceof Character)) {
                                        tmpQuant_151 = false;
                                      }
                                    }
                                    var2_145 = Boolean.valueOf(tmpQuant_151);
                                  }
                                }
                                if (!succ_146) {
                                  var2_145 = Boolean.FALSE;
                                }
                                var2_139 = var2_145;
                              }
                              else {
                                var2_139 = Boolean.FALSE;
                              }
                              var1_118 = var2_139;
                            }
                            else {
                              var1_118 = Boolean.FALSE;
                            }
                          }
                          if (!succ_119) {
                            var1_118 = Boolean.FALSE;
                          }
                          if (!var1_118.booleanValue()) {
                            Boolean var2_162 = null;
                            boolean succ_163 = false;
                            if (succ_163 = (4 == elem_60.Length())) {
                              Boolean var1_166 = null;
                              boolean succ_167 = false;
                              {
                                final String tmpVar_182 = (String)elem_60.GetField(1);
                                if (succ_167 = true) {
                                  boolean tmpQuant_172 = true;
                                  final Set e1_set_177 = new HashSet(UTIL.ConvertToList((String)elem_60.GetField(1)));
                                  Set tmpSet_181 = new HashSet(e1_set_177);
                                  for (Iterator enm_180 = tmpSet_181.iterator(); enm_180.hasNext() && tmpQuant_172; ) {
                                    final Character elem_63 = (Character)enm_180.next();
                                    if (!(elem_63 instanceof Character)) {
                                      tmpQuant_172 = false;
                                    }
                                  }
                                  var1_166 = Boolean.valueOf(tmpQuant_172);
                                }
                              }
                              if (!succ_167) {
                                var1_166 = Boolean.FALSE;
                              }
                              if (var1_166.booleanValue()) {
                                Boolean var2_183 = null;
                                if (UTIL.equals((quotes.が)elem_60.GetField(2), new quotes.が())) {
                                  Boolean var1_190 = null;
                                  boolean succ_191 = false;
                                  {
                                    final String tmpVar_206 = (String)elem_60.GetField(3);
                                    if (succ_191 = true) {
                                      boolean tmpQuant_196 = true;
                                      final Set e1_set_201 = new HashSet(UTIL.ConvertToList((String)elem_60.GetField(3)));
                                      Set tmpSet_205 = new HashSet(e1_set_201);
                                      for (Iterator enm_204 = tmpSet_205.iterator(); enm_204.hasNext() && tmpQuant_196; ) {
                                        final Character elem_64 = (Character)enm_204.next();
                                        if (!(elem_64 instanceof Character)) {
                                          tmpQuant_196 = false;
                                        }
                                      }
                                      var1_190 = Boolean.valueOf(tmpQuant_196);
                                    }
                                  }
                                  if (!succ_191) {
                                    var1_190 = Boolean.FALSE;
                                  }
                                  var2_183 = Boolean.valueOf(var1_190.booleanValue() ? UTIL.equals((quotes.と等しい)elem_60.GetField(4), new quotes.と等しい()) : false);
                                }
                                else {
                                  var2_183 = Boolean.FALSE;
                                }
                                var2_162 = var2_183;
                              }
                              else {
                                var2_162 = Boolean.FALSE;
                              }
                            }
                            if (!succ_163) {
                              var2_162 = Boolean.FALSE;
                            }
                            pred_117 = var2_162;
                          }
                          else {
                            pred_117 = Boolean.TRUE;
                          }
                          if (!(pred_117.booleanValue())) {
                            tmpQuant_111 = false;
                          }
                        }
                        var2_105 = Boolean.valueOf(tmpQuant_111);
                      }
                    }
                    if (!succ_106) {
                      var2_105 = Boolean.FALSE;
                    }
                    var1_80 = var2_105;
                  }
                  else {
                    var1_80 = Boolean.FALSE;
                  }
                }
                if (!succ_81) {
                  var1_80 = Boolean.FALSE;
                }
                if (!var1_80.booleanValue()) {
                  Boolean var2_215 = null;
                  boolean succ_216 = false;
                  if (succ_216 = ((elem_58 instanceof Tuple) && (3 == ((Tuple)elem_58).Length()))) {
                    Boolean var1_220 = null;
                    boolean succ_221 = false;
                    {
                      final Object tmpVar_235 = (Object)((Tuple)elem_58).GetField(1);
                      if (succ_221 = ((tmpVar_235 instanceof List) || (tmpVar_235 instanceof String))) {
                        boolean tmpQuant_226 = true;
                        if (!(((Object)((Tuple)elem_58).GetField(1) instanceof List) || ((Object)((Tuple)elem_58).GetField(1) instanceof String))) {
                          UTIL.RunTime("A sequence was expected");
                        }
                        Set tmpSet_234 = new HashSet(new HashSet(UTIL.ConvertToList((Object)((Tuple)elem_58).GetField(1))));
                        for (Iterator enm_233 = tmpSet_234.iterator(); enm_233.hasNext() && tmpQuant_226; ) {
                          final Character elem_65 = (Character)enm_233.next();
                          if (!(elem_65 instanceof Character)) {
                            tmpQuant_226 = false;
                          }
                        }
                        var1_220 = Boolean.valueOf(tmpQuant_226);
                      }
                    }
                    if (!succ_221) {
                      var1_220 = Boolean.FALSE;
                    }
                    if (var1_220.booleanValue() ? true : ((Object)((Tuple)elem_58).GetField(1) instanceof SQL)) {
                      Boolean var2_240 = null;
                      Boolean var1_241 = null;
                      boolean succ_242 = false;
                      {
                        final String tmpVar_257 = (String)((Tuple)elem_58).GetField(2);
                        if (succ_242 = true) {
                          boolean tmpQuant_247 = true;
                          final Set e1_set_252 = new HashSet(UTIL.ConvertToList((String)((Tuple)elem_58).GetField(2)));
                          Set tmpSet_256 = new HashSet(e1_set_252);
                          for (Iterator enm_255 = tmpSet_256.iterator(); enm_255.hasNext() && tmpQuant_247; ) {
                            final Character elem_66 = (Character)enm_255.next();
                            if (!(elem_66 instanceof Character)) {
                              tmpQuant_247 = false;
                            }
                          }
                          var1_241 = Boolean.valueOf(tmpQuant_247);
                        }
                      }
                      if (!succ_242) {
                        var1_241 = Boolean.FALSE;
                      }
                      if (var1_241.booleanValue()) {
                        Boolean var2_258 = null;
                        boolean succ_259 = false;
                        {
                          final List tmpVar_367 = (List)((Tuple)elem_58).GetField(3);
                          if (succ_259 = (!tmpVar_367.isEmpty())) {
                            boolean tmpQuant_264 = true;
                            final Set e1_set_269 = new HashSet((List)((Tuple)elem_58).GetField(3));
                            Set tmpSet_366 = new HashSet(e1_set_269);
                            for (Iterator enm_365 = tmpSet_366.iterator(); enm_365.hasNext() && tmpQuant_264; ) {
                              final Tuple elem_67 = (Tuple)enm_365.next();
                              Boolean pred_270 = null;
                              Boolean var1_271 = null;
                              boolean succ_272 = false;
                              if (succ_272 = (3 == elem_67.Length())) {
                                Boolean var1_275 = null;
                                boolean succ_276 = false;
                                {
                                  final String tmpVar_291 = (String)elem_67.GetField(1);
                                  if (succ_276 = true) {
                                    boolean tmpQuant_281 = true;
                                    final Set e1_set_286 = new HashSet(UTIL.ConvertToList((String)elem_67.GetField(1)));
                                    Set tmpSet_290 = new HashSet(e1_set_286);
                                    for (Iterator enm_289 = tmpSet_290.iterator(); enm_289.hasNext() && tmpQuant_281; ) {
                                      final Character elem_68 = (Character)enm_289.next();
                                      if (!(elem_68 instanceof Character)) {
                                        tmpQuant_281 = false;
                                      }
                                    }
                                    var1_275 = Boolean.valueOf(tmpQuant_281);
                                  }
                                }
                                if (!succ_276) {
                                  var1_275 = Boolean.FALSE;
                                }
                                if (var1_275.booleanValue()) {
                                  Boolean var2_292 = null;
                                  if (UTIL.equals((quotes.等しい)elem_67.GetField(2), new quotes.等しい())) {
                                    Boolean var2_298 = null;
                                    boolean succ_299 = false;
                                    {
                                      final String tmpVar_314 = (String)elem_67.GetField(3);
                                      if (succ_299 = true) {
                                        boolean tmpQuant_304 = true;
                                        final Set e1_set_309 = new HashSet(UTIL.ConvertToList((String)elem_67.GetField(3)));
                                        Set tmpSet_313 = new HashSet(e1_set_309);
                                        for (Iterator enm_312 = tmpSet_313.iterator(); enm_312.hasNext() && tmpQuant_304; ) {
                                          final Character elem_69 = (Character)enm_312.next();
                                          if (!(elem_69 instanceof Character)) {
                                            tmpQuant_304 = false;
                                          }
                                        }
                                        var2_298 = Boolean.valueOf(tmpQuant_304);
                                      }
                                    }
                                    if (!succ_299) {
                                      var2_298 = Boolean.FALSE;
                                    }
                                    var2_292 = var2_298;
                                  }
                                  else {
                                    var2_292 = Boolean.FALSE;
                                  }
                                  var1_271 = var2_292;
                                }
                                else {
                                  var1_271 = Boolean.FALSE;
                                }
                              }
                              if (!succ_272) {
                                var1_271 = Boolean.FALSE;
                              }
                              if (!var1_271.booleanValue()) {
                                Boolean var2_315 = null;
                                boolean succ_316 = false;
                                if (succ_316 = (4 == elem_67.Length())) {
                                  Boolean var1_319 = null;
                                  boolean succ_320 = false;
                                  {
                                    final String tmpVar_335 = (String)elem_67.GetField(1);
                                    if (succ_320 = true) {
                                      boolean tmpQuant_325 = true;
                                      final Set e1_set_330 = new HashSet(UTIL.ConvertToList((String)elem_67.GetField(1)));
                                      Set tmpSet_334 = new HashSet(e1_set_330);
                                      for (Iterator enm_333 = tmpSet_334.iterator(); enm_333.hasNext() && tmpQuant_325; ) {
                                        final Character elem_70 = (Character)enm_333.next();
                                        if (!(elem_70 instanceof Character)) {
                                          tmpQuant_325 = false;
                                        }
                                      }
                                      var1_319 = Boolean.valueOf(tmpQuant_325);
                                    }
                                  }
                                  if (!succ_320) {
                                    var1_319 = Boolean.FALSE;
                                  }
                                  if (var1_319.booleanValue()) {
                                    Boolean var2_336 = null;
                                    if (UTIL.equals((quotes.が)elem_67.GetField(2), new quotes.が())) {
                                      Boolean var1_343 = null;
                                      boolean succ_344 = false;
                                      {
                                        final String tmpVar_359 = (String)elem_67.GetField(3);
                                        if (succ_344 = true) {
                                          boolean tmpQuant_349 = true;
                                          final Set e1_set_354 = new HashSet(UTIL.ConvertToList((String)elem_67.GetField(3)));
                                          Set tmpSet_358 = new HashSet(e1_set_354);
                                          for (Iterator enm_357 = tmpSet_358.iterator(); enm_357.hasNext() && tmpQuant_349; ) {
                                            final Character elem_71 = (Character)enm_357.next();
                                            if (!(elem_71 instanceof Character)) {
                                              tmpQuant_349 = false;
                                            }
                                          }
                                          var1_343 = Boolean.valueOf(tmpQuant_349);
                                        }
                                      }
                                      if (!succ_344) {
                                        var1_343 = Boolean.FALSE;
                                      }
                                      var2_336 = Boolean.valueOf(var1_343.booleanValue() ? UTIL.equals((quotes.と等しい)elem_67.GetField(4), new quotes.と等しい()) : false);
                                    }
                                    else {
                                      var2_336 = Boolean.FALSE;
                                    }
                                    var2_315 = var2_336;
                                  }
                                  else {
                                    var2_315 = Boolean.FALSE;
                                  }
                                }
                                if (!succ_316) {
                                  var2_315 = Boolean.FALSE;
                                }
                                pred_270 = var2_315;
                              }
                              else {
                                pred_270 = Boolean.TRUE;
                              }
                              if (!(pred_270.booleanValue())) {
                                tmpQuant_264 = false;
                              }
                            }
                            var2_258 = Boolean.valueOf(tmpQuant_264);
                          }
                        }
                        if (!succ_259) {
                          var2_258 = Boolean.FALSE;
                        }
                        var2_240 = var2_258;
                      }
                      else {
                        var2_240 = Boolean.FALSE;
                      }
                      var2_215 = var2_240;
                    }
                    else {
                      var2_215 = Boolean.FALSE;
                    }
                  }
                  if (!succ_216) {
                    var2_215 = Boolean.FALSE;
                  }
                  pred_79 = var2_215;
                }
                else {
                  pred_79 = Boolean.TRUE;
                }
                if (!(pred_79.booleanValue())) {
                  tmpQuant_75 = false;
                }
              }
              cond_57 = Boolean.valueOf(tmpQuant_75);
            }
            if (!succ_72) {
              cond_57 = Boolean.FALSE;
            }
            if (cond_57.booleanValue()) {
              var2_37 = new ArrayList(UTIL.ConvertToList(副問い合わせを生成する(項目1, a改行あり, Integer.valueOf(a字下げ.intValue() + 2))));
              var2_37.addAll(UTIL.ConvertToList(外部結合を生成する(項目2, a改行あり, Integer.valueOf(a字下げ.intValue() + 2))));
            }
            else {
              var2_37 = new ArrayList(UTIL.ConvertToList(副問い合わせを生成する(項目1, a改行あり, Integer.valueOf(a字下げ.intValue() + 2)).concat(" ")));
              var2_37.addAll(項目2);
            }
          }
        }
        if (!succ_38) {
          var2_37 = UTIL.ConvertToList(副問い合わせを生成する(a表名, a改行あり, Integer.valueOf(a字下げ.intValue() + 2)));
        }
        rhs_35 = new ArrayList(UTIL.ConvertToList(res));
        rhs_35.addAll(var2_37);
        List rhs_419 = rhs_35;
        if (!(((Object)rhs_419) instanceof String)) {
          UTIL.RunTime("Incompatible type");
        }
        res = UTIL.ConvertToString(UTIL.clone(rhs_419));
      }
    }
    return res;
  }
// ***** VDMTOOLS END Name=FROM句を生成する#3|List|Boolean|Number

// ***** VDMTOOLS START Name=WHERE句を生成する#3|List|Boolean|Number KEEP=NO
  private String WHERE句を生成する (final List a条件列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    if (UTIL.equals(a条件列, new ArrayList())) {
      return "";
    }
    else {
      return 空白か改行(a改行あり, a字下げ).concat("WHERE").concat(空白か改行(a改行あり, Integer.valueOf(a字下げ.intValue() + 2))).concat(条件を生成する(a条件列, a改行あり, Integer.valueOf(a字下げ.intValue() + 2)));
    }
  }
// ***** VDMTOOLS END Name=WHERE句を生成する#3|List|Boolean|Number

// ***** VDMTOOLS START Name=条件を生成する#3|List|Boolean|Number KEEP=NO
  private String 条件を生成する (final List a条件列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    String res = "";
    for (int ilb_7 = 1; ilb_7 <= a条件列.size(); ilb_7++) {
      Number i = ilb_7;
      {
        if ((1 > i.intValue()) || (i.intValue() > a条件列.size())) {
          UTIL.RunTime("Illegal index");
        }
        final Tuple a条件 = ((Tuple)a条件列.get(i.intValue() - 1));
        if (i.intValue() > 1) {
          res = UTIL.ConvertToString(UTIL.clone(res.concat(" and").concat(空白か改行(a改行あり, a字下げ))));
        }
        boolean succ_22 = false;
        if (succ_22 = (3 == a条件.Length())) {
          final Object 文字列1 = a条件.GetField(1);
          final Object a演算子 = a条件.GetField(2);
          final Object 項目2 = a条件.GetField(3);
          boolean succ_25 = false;
          if (succ_25 = (3 == a条件.Length())) {
            final Object 副問い合わせ1 = a条件.GetField(1);
            if (succ_25 = (UTIL.equals(a条件.GetField(2), new quotes.が()))) {
              if (succ_25 = (UTIL.equals(a条件.GetField(3), new quotes.存在する()))) {
                res = UTIL.ConvertToString(UTIL.clone(res.concat("EXISTS ").concat(副問い合わせを生成する(副問い合わせ1, a改行あり, a字下げ))));
              }
            }
          }
          if (!succ_25) {
            if (succ_25 = (3 == a条件.Length())) {
              final Object 副問い合わせ1 = a条件.GetField(1);
              if (succ_25 = (UTIL.equals(a条件.GetField(2), new quotes.が()))) {
                if (succ_25 = (UTIL.equals(a条件.GetField(3), new quotes.存在しない()))) {
                  res = UTIL.ConvertToString(UTIL.clone(res.concat("NOT EXISTS ").concat(副問い合わせを生成する(副問い合わせ1, a改行あり, a字下げ))));
                }
              }
            }
          }
          if (!succ_25) {
            res = UTIL.ConvertToString(UTIL.clone(res.concat(UTIL.ConvertToString(文字列1)).concat(条件を得る(a演算子, 文字列に変換する(項目2, a改行あり, a字下げ)))));
          }
        }
        if (!succ_22) {
          if (succ_22 = (4 == a条件.Length())) {
            Object 項目2 = null;
            Object a演算子 = null;
            final String 文字列1 = UTIL.ConvertToString(a条件.GetField(1));
            if (succ_22 = (UTIL.equals((quotes.が)a条件.GetField(2), new quotes.が()))) {
              項目2 = a条件.GetField(3);
              a演算子 = a条件.GetField(4);
              res = UTIL.ConvertToString(UTIL.clone(res.concat(文字列1).concat(条件を得る(a演算子, 文字列に変換する(項目2, a改行あり, a字下げ)))));
            }
          }
        }
        if (!succ_22) {
          ;
        }
      }
    }
    return res;
  }
// ***** VDMTOOLS END Name=条件を生成する#3|List|Boolean|Number

// ***** VDMTOOLS START Name=ORDERBY句を生成する#3|List|Boolean|Number KEEP=NO
  private String ORDERBY句を生成する (final List a列名列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    if (UTIL.equals(a列名列, new ArrayList())) {
      return "";
    }
    else {
      String res = 空白か改行(a改行あり, a字下げ).concat("ORDER BY");
      res = UTIL.ConvertToString(UTIL.clone(res.concat(空白か改行(a改行あり, Integer.valueOf(a字下げ.intValue() + 2)))));
      for (int ilb_21 = 1; ilb_21 <= a列名列.size(); ilb_21++) {
        Number i = ilb_21;
        {
          if ((1 > i.intValue()) || (i.intValue() > a列名列.size())) {
            UTIL.RunTime("Illegal index");
          }
          final String a列名 = UTIL.ConvertToString(a列名列.get(i.intValue() - 1));
          if (i.intValue() > 1) {
            res = UTIL.ConvertToString(UTIL.clone(res.concat(",").concat(空白か改行(a改行あり, Integer.valueOf(a字下げ.intValue() + 2)))));
          }
          res = UTIL.ConvertToString(UTIL.clone(res.concat(a列名)));
        }
      }
      return res;
    }
  }
// ***** VDMTOOLS END Name=ORDERBY句を生成する#3|List|Boolean|Number

// ***** VDMTOOLS START Name=GROUPBY句を生成する#3|List|Boolean|Number KEEP=NO
  private String GROUPBY句を生成する (final List a列名列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    if (UTIL.equals(a列名列, new ArrayList())) {
      return "";
    }
    else {
      String res = 空白か改行(a改行あり, a字下げ).concat("GROUP BY");
      res = UTIL.ConvertToString(UTIL.clone(res.concat(空白か改行(a改行あり, Integer.valueOf(a字下げ.intValue() + 2)))));
      for (int ilb_21 = 1; ilb_21 <= a列名列.size(); ilb_21++) {
        Number i = ilb_21;
        {
          if ((1 > i.intValue()) || (i.intValue() > a列名列.size())) {
            UTIL.RunTime("Illegal index");
          }
          final String a列名 = UTIL.ConvertToString(a列名列.get(i.intValue() - 1));
          if (i.intValue() > 1) {
            res = UTIL.ConvertToString(UTIL.clone(res.concat(",").concat(空白か改行(a改行あり, Integer.valueOf(a字下げ.intValue() + 2)))));
          }
          res = UTIL.ConvertToString(UTIL.clone(res.concat(a列名)));
        }
      }
      return res;
    }
  }
// ***** VDMTOOLS END Name=GROUPBY句を生成する#3|List|Boolean|Number

// ***** VDMTOOLS START Name=文字列に変換する#3|Object|Boolean|Number KEEP=NO
  private String 文字列に変換する (final Object a項目, final Boolean a改行あり, final Number a字下げ) throws CGException {
    boolean succ_4 = false;
    if (succ_4 = (a項目 instanceof Set)) {
      String res = " )";
      Boolean 最初の項目 = Boolean.TRUE;
      {
        if (!(a項目 instanceof Set)) {
          UTIL.RunTime("A set was expected in set for loop");
        }
        Set tmpSet_11 = (Set)a項目;
        Set tmpSet_21 = new HashSet(tmpSet_11);
        for (Iterator enm_20 = tmpSet_21.iterator(); enm_20.hasNext(); ) {
          final String w文字 = UTIL.ConvertToString(enm_20.next());
          if (最初の項目.booleanValue()) {
            最初の項目 = Boolean.FALSE;
          }
          else {
            res = UTIL.ConvertToString(UTIL.clone(new String(", ").concat(res)));
          }
          res = UTIL.ConvertToString(UTIL.clone(w文字.concat(res)));
        }
      }
      res = UTIL.ConvertToString(UTIL.clone(new String("( ").concat(res)));
      return res;
    }
    return 副問い合わせを生成する(a項目, a改行あり, Integer.valueOf(a字下げ.intValue() + 2));
  }
// ***** VDMTOOLS END Name=文字列に変換する#3|Object|Boolean|Number

// ***** VDMTOOLS START Name=CASE句を生成する#3|String|Map|String KEEP=NO
  private String CASE句を生成する (final String a文字列, final Map a変換表, final String aデフォルト) throws CGException {
    String res = new String("CASE ").concat(a文字列);
    {
      final Set iset_10 = new HashSet(a変換表.keySet());
      Set tmpSet_23 = new HashSet(iset_10);
      for (Iterator enm_22 = tmpSet_23.iterator(); enm_22.hasNext(); ) {
        final String w条件 = UTIL.ConvertToString(enm_22.next());
        res = UTIL.ConvertToString(UTIL.clone(res.concat(" WHEN ").concat(w条件).concat(" THEN ").concat(UTIL.ConvertToString(a変換表.get(w条件)))));
      }
    }
    if (!UTIL.equals(aデフォルト, null)) {
      res = UTIL.ConvertToString(UTIL.clone(res.concat(" ELSE ").concat(aデフォルト)));
    }
    res = UTIL.ConvertToString(UTIL.clone(res.concat(" END")));
    return res;
  }
// ***** VDMTOOLS END Name=CASE句を生成する#3|String|Map|String

// ***** VDMTOOLS START Name=項目を生成する#3|Object|Boolean|Number KEEP=NO
  private String 項目を生成する (final Object a項目, final Boolean a改行あり, final Number a字下げ) throws CGException {
    boolean succ_4 = false;
    if (succ_4 = ((a項目 instanceof Tuple) && (2 == ((Tuple)a項目).Length()))) {
      return 関数を生成する(a項目);
    }
    if ((Object)a項目 instanceof SQL) {
      return 副問い合わせを生成する(a項目, a改行あり, a字下げ);
    }
    else {
      return UTIL.ConvertToString(a項目);
    }
  }
// ***** VDMTOOLS END Name=項目を生成する#3|Object|Boolean|Number

// ***** VDMTOOLS START Name=関数を生成する#1|Object KEEP=NO
  private String 関数を生成する (final Object a欄名) throws CGException {
    boolean succ_2 = false;
    if (succ_2 = ((a欄名 instanceof Tuple) && (2 == ((Tuple)a欄名).Length()))) {
      final Object a関数 = ((Tuple)a欄名).GetField(1);
      final List a引数 = UTIL.ConvertToList(((Tuple)a欄名).GetField(2));
      {
        String res = null;
        boolean succ_5 = false;
        if (succ_5 = (UTIL.equals(a関数, new quotes.CONCAT()))) {
          res = "CONCAT( ";
        }
        if (!succ_5) {
          if (succ_5 = (UTIL.equals(a関数, new quotes.MAX()))) {
            res = "MAX( ";
          }
        }
        if (!succ_5) {
          if (succ_5 = (UTIL.equals(a関数, new quotes.MIN()))) {
            res = "MIN( ";
          }
        }
        if (!succ_5) {
          if (succ_5 = (UTIL.equals(a関数, new quotes.COUNT()))) {
            res = "COUNT( ";
          }
        }
        if (!succ_5) {
          UTIL.RunTime("Can not evaluate \'undefined\' expression");
        }
        for (int ilb_15 = 1; ilb_15 <= a引数.size(); ilb_15++) {
          Number i = ilb_15;
          if (i.intValue() > 1) {
            res = UTIL.ConvertToString(UTIL.clone(res.concat(", ")));
          }
          if ((1 > i.intValue()) || (i.intValue() > a引数.size())) {
            UTIL.RunTime("Illegal index");
          }
          res = UTIL.ConvertToString(UTIL.clone(res.concat(UTIL.ConvertToString(a引数.get(i.intValue() - 1)))));
        }
        res = UTIL.ConvertToString(UTIL.clone(res.concat(" )")));
        return res;
      }
    }
    return UTIL.ConvertToString(a欄名);
  }
// ***** VDMTOOLS END Name=関数を生成する#1|Object

// ***** VDMTOOLS START Name=副問い合わせを生成する#3|Object|Boolean|Number KEEP=NO
  private String 副問い合わせを生成する (final Object a項目, final Boolean a改行あり, final Number a字下げ) throws CGException {
    boolean succ_4 = false;
    if (succ_4 = ((Object)a項目 instanceof SQL)) {
      SQL obj_13 = (SQL)a項目;
      return new String("( ").concat(obj_13.問い合わせ言語を取得する(a改行あり, Integer.valueOf(a字下げ.intValue() + 2))).concat(" )");
    }
    return UTIL.ConvertToString(a項目);
  }
// ***** VDMTOOLS END Name=副問い合わせを生成する#3|Object|Boolean|Number

// ***** VDMTOOLS START Name=外部結合を生成する#3|List|Boolean|Number KEEP=NO
  private String 外部結合を生成する (final List a外部結合列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    String res = 空白か改行(a改行あり, a字下げ);
    {
      List tmpSeq_63 = new ArrayList(a外部結合列);
      for (Iterator enm_64 = tmpSeq_63.iterator(); enm_64.hasNext(); ) {
        final Tuple elem_6 = (Tuple)enm_64.next();
        final Tuple a外部結合 = elem_6;
        String var2_14 = null;
        boolean succ_15 = false;
        if (succ_15 = (2 == a外部結合.Length())) {
          final Object 項目1 = a外部結合.GetField(1);
          final List 項目2 = UTIL.ConvertToList(a外部結合.GetField(2));
          var2_14 = 副問い合わせを生成する(項目1, a改行あり, Integer.valueOf(a字下げ.intValue() + 16)).concat(空白か改行(a改行あり, a字下げ)).concat("ON ( ").concat(条件を生成する(項目2, a改行あり, Integer.valueOf(a字下げ.intValue() + 7))).concat(" )");
        }
        if (!succ_15) {
          if (succ_15 = (3 == a外部結合.Length())) {
            final Object 項目1 = a外部結合.GetField(1);
            final String 項目2 = UTIL.ConvertToString(a外部結合.GetField(2));
            final List 項目3 = UTIL.ConvertToList(a外部結合.GetField(3));
            var2_14 = 副問い合わせを生成する(項目1, a改行あり, Integer.valueOf(a字下げ.intValue() + 16)).concat(" ").concat(項目2).concat(空白か改行(a改行あり, a字下げ)).concat("ON ( ").concat(条件を生成する(項目3, a改行あり, Integer.valueOf(a字下げ.intValue() + 7))).concat(" )");
          }
        }
        if (!succ_15) {
          UTIL.RunTime("No \'others\' branch in CasesExpr");
        }
        res = UTIL.ConvertToString(UTIL.clone(res.concat("LEFT OUTER JOIN ").concat(var2_14)));
      }
    }
    return res;
  }
// ***** VDMTOOLS END Name=外部結合を生成する#3|List|Boolean|Number

// ***** VDMTOOLS START Name=条件を得る#2|Object|String KEEP=NO
  private String 条件を得る (final Object a演算子, final String a文字列) throws CGException {
    String varRes_3 = null;
    boolean succ_4 = false;
    if (succ_4 = (UTIL.equals(a演算子, new quotes.と等しい()))) {
      varRes_3 = new String(" = ").concat(a文字列);
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.等しい()))) {
        varRes_3 = new String(" = ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.と等しくない()))) {
        varRes_3 = new String(" <> ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.等しくない()))) {
        varRes_3 = new String(" <> ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.以上()))) {
        varRes_3 = new String(" >= ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.以下()))) {
        varRes_3 = new String(" <= ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.より大()))) {
        varRes_3 = new String(" > ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.より大きい()))) {
        varRes_3 = new String(" > ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.より小()))) {
        varRes_3 = new String(" < ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.より小さい()))) {
        varRes_3 = new String(" < ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.以前()))) {
        varRes_3 = new String(" > ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.以後()))) {
        varRes_3 = new String(" < ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.の範囲内()))) {
        varRes_3 = new String(" IN ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.範囲内()))) {
        varRes_3 = new String(" IN ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.の範囲外()))) {
        varRes_3 = new String(" NOT IN ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.範囲外()))) {
        varRes_3 = new String(" NOT IN ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.で始まる()))) {
        varRes_3 = new String(" LIKE ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.で終わる()))) {
        varRes_3 = new String(" LIKE ").concat(a文字列);
      }
    }
    if (!succ_4) {
      if (succ_4 = (UTIL.equals(a演算子, new quotes.を含む()))) {
        varRes_3 = new String(" LIKE ").concat(a文字列);
      }
    }
    if (!succ_4) {
      UTIL.RunTime("Can not evaluate \'undefined\' expression");
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=条件を得る#2|Object|String

// ***** VDMTOOLS START Name=空白か改行#2|Boolean|Number KEEP=NO
  private String 空白か改行 (final Boolean a改行あり, final Number a字下げ) throws CGException {
    String varRes_3 = null;
    if (a改行あり.booleanValue()) {
      String tmpSeq_18 = "";
      for (int count_19 = 1; count_19 <= a字下げ.intValue(); count_19++) {
        Number i = Integer.valueOf(count_19);
        if (i.intValue() <= a字下げ.intValue()) {
          tmpSeq_18 = tmpSeq_18 + Character.valueOf(' ');
        }
      }
      varRes_3 = new String("\n").concat(tmpSeq_18);
    }
    else {
      varRes_3 = " ";
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=空白か改行#2|Boolean|Number

}

