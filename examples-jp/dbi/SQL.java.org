//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2012-09-06 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 06-Sep-2012 08:25:30 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "SQL.vpp".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Map;
import java.util.Set;
import java.util.List;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Tuple;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class SQL {

// ***** VDMTOOLS START Name=iSELECT句項目列 KEEP=NO
  private List iSELECT句項目列 = null;
// ***** VDMTOOLS END Name=iSELECT句項目列

// ***** VDMTOOLS START Name=iFROM句項目列 KEEP=NO
  private List iFROM句項目列 = null;
// ***** VDMTOOLS END Name=iFROM句項目列

// ***** VDMTOOLS START Name=iWHERE句項目列 KEEP=NO
  private List iWHERE句項目列 = null;
// ***** VDMTOOLS END Name=iWHERE句項目列

// ***** VDMTOOLS START Name=iGROUPBY句項目列 KEEP=NO
  private List iGROUPBY句項目列 = null;
// ***** VDMTOOLS END Name=iGROUPBY句項目列

// ***** VDMTOOLS START Name=iORDERBY句項目列 KEEP=NO
  private List iORDERBY句項目列 = null;
// ***** VDMTOOLS END Name=iORDERBY句項目列


// ***** VDMTOOLS START Name=vdm_init_SQL KEEP=NO
  private void vdm_init_SQL () {
    try {
      iSELECT句項目列 = new ArrayList();
      iFROM句項目列 = new ArrayList();
      iWHERE句項目列 = new ArrayList();
      iGROUPBY句項目列 = new ArrayList();
      iORDERBY句項目列 = new ArrayList();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_SQL


// ***** VDMTOOLS START Name=SQL KEEP=NO
  public SQL () throws CGException {
    vdm_init_SQL();
  }
// ***** VDMTOOLS END Name=SQL


// ***** VDMTOOLS START Name=SQL#1|List KEEP=NO
  public SQL (final List a表名列) throws CGException {
    vdm_init_SQL();
    iFROM句項目列 = UTIL.ConvertToList(UTIL.clone(a表名列));
  }
// ***** VDMTOOLS END Name=SQL#1|List


// ***** VDMTOOLS START Name=表名を追加する#1|Object KEEP=NO
  public void 表名を追加する (final Object a表名) throws CGException {
    iFROM句項目列.add(a表名);
  }
// ***** VDMTOOLS END Name=表名を追加する#1|Object


// ***** VDMTOOLS START Name=表名列を追加する#1|List KEEP=NO
  public void 表名列を追加する (final List a表名列) throws CGException {
    List tmpSeq_9 = new ArrayList(a表名列);
    for (Iterator enm_10 = tmpSeq_9.iterator(); enm_10.hasNext(); ) {
      Object elem_2 = enm_10.next();
      Object a表名 = null;
      /* a表名 */
      a表名 = elem_2;
      表名を追加する(a表名);
    }
  }
// ***** VDMTOOLS END Name=表名列を追加する#1|List


// ***** VDMTOOLS START Name=選択項目を追加する#1|Object KEEP=NO
  public void 選択項目を追加する (final Object a選択項目) throws CGException {
    iSELECT句項目列.add(a選択項目);
  }
// ***** VDMTOOLS END Name=選択項目を追加する#1|Object


// ***** VDMTOOLS START Name=選択項目列を追加する#1|List KEEP=NO
  public void 選択項目列を追加する (final List a選択項目列) throws CGException {
    List tmpSeq_9 = new ArrayList(a選択項目列);
    for (Iterator enm_10 = tmpSeq_9.iterator(); enm_10.hasNext(); ) {
      Object elem_2 = enm_10.next();
      Object a選択項目 = null;
      /* a選択項目 */
      a選択項目 = elem_2;
      選択項目を追加する(a選択項目);
    }
  }
// ***** VDMTOOLS END Name=選択項目列を追加する#1|List


// ***** VDMTOOLS START Name=AND条件を追加する#1|Object KEEP=NO
  public void AND条件を追加する (final Object a条件) throws CGException {
    iWHERE句項目列.add(a条件);
  }
// ***** VDMTOOLS END Name=AND条件を追加する#1|Object


// ***** VDMTOOLS START Name=AND条件列を追加する#1|List KEEP=NO
  public void AND条件列を追加する (final List a条件列) throws CGException {
    List tmpSeq_9 = new ArrayList(a条件列);
    for (Iterator enm_10 = tmpSeq_9.iterator(); enm_10.hasNext(); ) {
      Tuple elem_2 = (Tuple)enm_10.next();
      Tuple a条件 = null;
      /* a条件 */
      a条件 = elem_2;
      AND条件を追加する(a条件);
    }
  }
// ***** VDMTOOLS END Name=AND条件列を追加する#1|List


// ***** VDMTOOLS START Name=グループ化キー項目を追加する#1|String KEEP=NO
  public void グループ化キー項目を追加する (final String a列名) throws CGException {
    iGROUPBY句項目列.add(a列名);
  }
// ***** VDMTOOLS END Name=グループ化キー項目を追加する#1|String


// ***** VDMTOOLS START Name=グループ化キー項目列を追加する#1|List KEEP=NO
  public void グループ化キー項目列を追加する (final List a列名列) throws CGException {
    List tmpSeq_9 = new ArrayList(a列名列);
    for (Iterator enm_10 = tmpSeq_9.iterator(); enm_10.hasNext(); ) {
      String elem_2 = UTIL.ConvertToString(enm_10.next());
      String a列名 = null;
      /* a列名 */
      a列名 = elem_2;
      グループ化キー項目を追加する(a列名);
    }
  }
// ***** VDMTOOLS END Name=グループ化キー項目列を追加する#1|List


// ***** VDMTOOLS START Name=ソートキー項目を追加する#1|String KEEP=NO
  public void ソートキー項目を追加する (final String a列名) throws CGException {
    iORDERBY句項目列.add(a列名);
  }
// ***** VDMTOOLS END Name=ソートキー項目を追加する#1|String


// ***** VDMTOOLS START Name=ソートキー項目列を追加する#1|List KEEP=NO
  public void ソートキー項目列を追加する (final List a列名列) throws CGException {
    List tmpSeq_9 = new ArrayList(a列名列);
    for (Iterator enm_10 = tmpSeq_9.iterator(); enm_10.hasNext(); ) {
      String elem_2 = UTIL.ConvertToString(enm_10.next());
      String a列名 = null;
      /* a列名 */
      a列名 = elem_2;
      ソートキー項目を追加する(a列名);
    }
  }
// ***** VDMTOOLS END Name=ソートキー項目列を追加する#1|List


// ***** VDMTOOLS START Name=問い合わせ言語を取得する#2|Boolean|Number KEEP=NO
  public String 問い合わせ言語を取得する (final Boolean a改行あり, final Number a字下げ) throws CGException {
    if (UTIL.equals(iFROM句項目列, new ArrayList())) {
      UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
      return new String();
    }
    else 
      return SELECT句を生成する(iSELECT句項目列, a改行あり, a字下げ).concat(FROM句を生成する(iFROM句項目列, a改行あり, a字下げ)).concat(WHERE句を生成する(iWHERE句項目列, a改行あり, a字下げ)).concat(GROUPBY句を生成する(iGROUPBY句項目列, a改行あり, a字下げ)).concat(ORDERBY句を生成する(iORDERBY句項目列, a改行あり, a字下げ));
  }
// ***** VDMTOOLS END Name=問い合わせ言語を取得する#2|Boolean|Number


// ***** VDMTOOLS START Name=SELECT句を生成する#3|List|Boolean|Number KEEP=NO
  private String SELECT句を生成する (final List a選択項目列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    String res = new String("SELECT");
    res = UTIL.ConvertToString(UTIL.clone(res.concat(空白か改行(a改行あり, new Integer(a字下げ.intValue() + 2)))));
    if (UTIL.equals(a選択項目列, new ArrayList())) 
      res = UTIL.ConvertToString(UTIL.clone(res.concat(new String("*"))));
    else 
      for (int ilb_17 = 1; ilb_17 <= a選択項目列.size(); ilb_17++) {
        Number i = new Integer(ilb_17);
        {
          if ((1 > i.intValue()) || (i.intValue() > a選択項目列.size())) 
            UTIL.RunTime("Run-Time Error:Illegal index");
          final Object a選択項目 = a選択項目列.get(i.intValue() - 1);
          if (i.intValue() > 1) 
            res = UTIL.ConvertToString(UTIL.clone(res.concat(new String(",")).concat(空白か改行(a改行あり, new Integer(a字下げ.intValue() + 2)))));
          boolean succ_35 = false;
          {
            Object 項目1 = null;
            List 項目2 = null;
            /* mk_(項目1, 項目2) */
            if (a選択項目 instanceof Tuple) {
              if (2 == ((Tuple)a選択項目).Length()) {
                succ_35 = true;
                /* 項目1 */
                項目1 = ((Tuple)a選択項目).GetField(1);
                /* 項目2 */
                項目2 = UTIL.ConvertToList(((Tuple)a選択項目).GetField(2));
              }
              else 
                succ_35 = false;
            }
            else 
              succ_35 = false;
            if (succ_35) {
              Boolean cond_38 = null;
              if (!(cond_38 = new Boolean(UTIL.equals(項目1, new quotes.MAX()))).booleanValue()) {
                Boolean var2_42 = null;
                if (!(var2_42 = new Boolean(UTIL.equals(項目1, new quotes.MIN()))).booleanValue()) {
                  Boolean var2_46 = null;
                  if (!(var2_46 = new Boolean(UTIL.equals(項目1, new quotes.COUNT()))).booleanValue()) 
                    var2_46 = new Boolean(UTIL.equals(項目1, new quotes.CONCAT()));
                  var2_42 = var2_46;
                }
                cond_38 = var2_42;
              }
              if (cond_38.booleanValue()) 
                res = UTIL.ConvertToString(UTIL.clone(res.concat(関数を生成する(a選択項目))));
              else {
                List rhs_53 = null;
                rhs_53 = new ArrayList(UTIL.ConvertToList(res.concat(項目を生成する(項目1, a改行あり, new Integer(a字下げ.intValue() + 2))).concat(new String(" "))));
                rhs_53.addAll(項目2);
                List rhs_65 = rhs_53;
                res = UTIL.ConvertToString(UTIL.clone(rhs_65));
              }
            }
          }
          if (!succ_35) {
            Map 変換表 = new HashMap();
            Object 項目1 = null;
            String 項目2 = null;
            String デフォルト = null;
            /* mk_(項目1, 項目2, mk_(変換表, デフォルト)) */
            if (a選択項目 instanceof Tuple) {
              if (3 == ((Tuple)a選択項目).Length()) {
                /* 項目1 */
                項目1 = ((Tuple)a選択項目).GetField(1);
                /* 項目2 */
                項目2 = UTIL.ConvertToString(((Tuple)a選択項目).GetField(2));
                Tuple tmpVar_70 = (Tuple)((Tuple)a選択項目).GetField(3);
                /* mk_(変換表, デフォルト) */
                if (2 == tmpVar_70.Length()) {
                  succ_35 = true;
                  /* 変換表 */
                  変換表 = (Map)tmpVar_70.GetField(1);
                  /* デフォルト */
                  デフォルト = UTIL.ConvertToString(UTIL.ConvertToString(tmpVar_70.GetField(2)));
                }
                else 
                  succ_35 = false;
              }
              else 
                succ_35 = false;
            }
            else 
              succ_35 = false;
            if (succ_35) {
              if (UTIL.equals(変換表, new HashMap())) 
                res = UTIL.ConvertToString(UTIL.clone(res.concat(関数を生成する(項目1)).concat(new String(" ")).concat(項目2)));
              else 
                res = UTIL.ConvertToString(UTIL.clone(res.concat(CASE句を生成する(UTIL.ConvertToString(項目1), 変換表, UTIL.ConvertToString(デフォルト))).concat(new String(" ")).concat(項目2)));
            }
          }
          /* others */
          if (!succ_35) {
            res = UTIL.ConvertToString(UTIL.clone(res.concat(項目を生成する(a選択項目, a改行あり, new Integer(a字下げ.intValue() + 2)))));
          }
        }
      }
    return res;
  }
// ***** VDMTOOLS END Name=SELECT句を生成する#3|List|Boolean|Number


// ***** VDMTOOLS START Name=FROM句を生成する#3|List|Boolean|Number KEEP=NO
  private String FROM句を生成する (final List a表名列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    String res = 空白か改行(a改行あり, a字下げ).concat(new String("FROM"));
    res = UTIL.ConvertToString(UTIL.clone(res.concat(空白か改行(a改行あり, new Integer(a字下げ.intValue() + 2)))));
    for (int ilb_18 = 1; ilb_18 <= a表名列.size(); ilb_18++) {
      Number i = new Integer(ilb_18);
      {
        if ((1 > i.intValue()) || (i.intValue() > a表名列.size())) 
          UTIL.RunTime("Run-Time Error:Illegal index");
        final Object a表名 = a表名列.get(i.intValue() - 1);
        if (i.intValue() > 1) 
          res = UTIL.ConvertToString(UTIL.clone(res.concat(new String(",")).concat(空白か改行(a改行あり, new Integer(a字下げ.intValue() + 2)))));
        List rhs_36 = null;
        List var2_38 = null;
        boolean succ_39 = false;
        {
          /* mk_(項目1, 項目2, 項目3) -> 副問い合わせを生成する(項目1, a改行あり, a字下げ + 2) ^ " " ^ 項目2 ^ 外部結合を生成する(項目3, a改行あり, a字下げ + 2) */
          String 項目1 = null;
          String 項目2 = null;
          List 項目3 = null;
          /* mk_(項目1, 項目2, 項目3) */
          if (a表名 instanceof Tuple) {
            if (3 == ((Tuple)a表名).Length()) {
              succ_39 = true;
              /* 項目1 */
              項目1 = UTIL.ConvertToString(((Tuple)a表名).GetField(1));
              /* 項目2 */
              項目2 = UTIL.ConvertToString(((Tuple)a表名).GetField(2));
              /* 項目3 */
              項目3 = UTIL.ConvertToList(((Tuple)a表名).GetField(3));
            }
            else 
              succ_39 = false;
          }
          else 
            succ_39 = false;
          if (succ_39) {
            /* 副問い合わせを生成する(項目1, a改行あり, a字下げ + 2) ^ " " ^ 項目2 ^ 外部結合を生成する(項目3, a改行あり, a字下げ + 2) */
            var2_38 = new ArrayList(UTIL.ConvertToList(副問い合わせを生成する(項目1, a改行あり, new Integer(a字下げ.intValue() + 2)).concat(new String(" ")).concat(項目2)));
            var2_38.addAll(UTIL.ConvertToList(外部結合を生成する(項目3, a改行あり, new Integer(a字下げ.intValue() + 2))));
          }
        }
        if (!succ_39) {
          /* mk_(項目1, 項目2) -> if is_(項目2, seq1 of 左外部結合) then 副問い合わせを生成する(項目1, a改行あり, a字下げ + 2) ^ 外部結合を生成する(項目2, a改行あり, a字下げ + 2) else 副問い合わせを生成する(項目1, a改行あり, a字下げ + 2) ^ " " ^ 項目2 */
          Object 項目1 = null;
          List 項目2 = null;
          /* mk_(項目1, 項目2) */
          if (a表名 instanceof Tuple) {
            if (2 == ((Tuple)a表名).Length()) {
              succ_39 = true;
              /* 項目1 */
              項目1 = ((Tuple)a表名).GetField(1);
              /* 項目2 */
              項目2 = UTIL.ConvertToList(((Tuple)a表名).GetField(2));
            }
            else 
              succ_39 = false;
          }
          else 
            succ_39 = false;
          if (succ_39) {
            /* if is_(項目2, seq1 of 左外部結合) then 副問い合わせを生成する(項目1, a改行あり, a字下げ + 2) ^ 外部結合を生成する(項目2, a改行あり, a字下げ + 2) else 副問い合わせを生成する(項目1, a改行あり, a字下げ + 2) ^ " " ^ 項目2 */
            Boolean cond_59 = null;
            boolean succ_74 = false;
            {
              /* [] -> true */
              /* [] */
              succ_74 = (項目2.isEmpty());
              if (succ_74) {
                /* true */
                cond_59 = new Boolean(true);
              }
            }
            if (!succ_74) {
              /* [-] ^ - -> forall elem_60 in set elems 項目2 & cases elem_60: mk_(-, -) -> cases elem_60.#1: [] -> true, [-] ^ - -> forall elem_61 in set elems elem_60.#1 & is_char(elem_61), others -> false end or isofclass(SQL, elem_60.#1) and cases elem_60.#2: [] -> true, [-] ^ - -> forall elem_62 in set elems elem_60.#2 & cases elem_62: mk_(-, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_63 in set elems elem_62.#1 & is_char(elem_63), others -> false end and elem_62.#2 = <等しい> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_64 in set elems elem_62.#3 & is_char(elem_64), others -> false end, others -> false end or cases elem_62: mk_(-, -, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_65 in set elems elem_62.#1 & is_char(elem_65), others -> false end and elem_62.#2 = <が> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_66 in set elems elem_62.#3 & is_char(elem_66), others -> false end and elem_62.#4 = <と等しい>, others -> false end, others -> false end, others -> false end or cases elem_60: mk_(-, -, -) -> cases elem_60.#1: [] -> true, [-] ^ - -> forall elem_67 in set elems elem_60.#1 & is_char(elem_67), others -> false end or isofclass(SQL, elem_60.#1) and cases elem_60.#2: [] -> true, [-] ^ - -> forall elem_68 in set elems elem_60.#2 & is_char(elem_68), others -> false end and cases elem_60.#3: [] -> true, [-] ^ - -> forall elem_69 in set elems elem_60.#3 & cases elem_69: mk_(-, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_70 in set elems elem_69.#1 & is_char(elem_70), others -> false end and elem_69.#2 = <等しい> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_71 in set elems elem_69.#3 & is_char(elem_71), others -> false end, others -> false end or cases elem_69: mk_(-, -, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_72 in set elems elem_69.#1 & is_char(elem_72), others -> false end and elem_69.#2 = <が> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_73 in set elems elem_69.#3 & is_char(elem_73), others -> false end and elem_69.#4 = <と等しい>, others -> false end, others -> false end, others -> false end */
              /* [-] ^ - */
              succ_74 = (!項目2.isEmpty());
              if (succ_74) {
                /* forall elem_60 in set elems 項目2 & cases elem_60: mk_(-, -) -> cases elem_60.#1: [] -> true, [-] ^ - -> forall elem_61 in set elems elem_60.#1 & is_char(elem_61), others -> false end or isofclass(SQL, elem_60.#1) and cases elem_60.#2: [] -> true, [-] ^ - -> forall elem_62 in set elems elem_60.#2 & cases elem_62: mk_(-, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_63 in set elems elem_62.#1 & is_char(elem_63), others -> false end and elem_62.#2 = <等しい> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_64 in set elems elem_62.#3 & is_char(elem_64), others -> false end, others -> false end or cases elem_62: mk_(-, -, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_65 in set elems elem_62.#1 & is_char(elem_65), others -> false end and elem_62.#2 = <が> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_66 in set elems elem_62.#3 & is_char(elem_66), others -> false end and elem_62.#4 = <と等しい>, others -> false end, others -> false end, others -> false end or cases elem_60: mk_(-, -, -) -> cases elem_60.#1: [] -> true, [-] ^ - -> forall elem_67 in set elems elem_60.#1 & is_char(elem_67), others -> false end or isofclass(SQL, elem_60.#1) and cases elem_60.#2: [] -> true, [-] ^ - -> forall elem_68 in set elems elem_60.#2 & is_char(elem_68), others -> false end and cases elem_60.#3: [] -> true, [-] ^ - -> forall elem_69 in set elems elem_60.#3 & cases elem_69: mk_(-, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_70 in set elems elem_69.#1 & is_char(elem_70), others -> false end and elem_69.#2 = <等しい> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_71 in set elems elem_69.#3 & is_char(elem_71), others -> false end, others -> false end or cases elem_69: mk_(-, -, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_72 in set elems elem_69.#1 & is_char(elem_72), others -> false end and elem_69.#2 = <が> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_73 in set elems elem_69.#3 & is_char(elem_73), others -> false end and elem_69.#4 = <と等しい>, others -> false end, others -> false end, others -> false end */
                boolean tmpQuant_78 = true;
                {
                  Set e1_set_81 = new HashSet(項目2);
                  Object elem_60 = null;
                  Set tmpSet_415 = new HashSet(e1_set_81);
                  for (Iterator enm_414 = tmpSet_415.iterator(); enm_414.hasNext() && tmpQuant_78; ) {
                    Object elem_413 = enm_414.next();
                    /* elem_60 */
                    elem_60 = elem_413;
                    Boolean pred_82 = null;
                    Boolean var1_83 = null;
                    boolean succ_84 = false;
                    {
                      /* mk_(-, -) -> cases elem_60.#1: [] -> true, [-] ^ - -> forall elem_61 in set elems elem_60.#1 & is_char(elem_61), others -> false end or isofclass(SQL, elem_60.#1) and cases elem_60.#2: [] -> true, [-] ^ - -> forall elem_62 in set elems elem_60.#2 & cases elem_62: mk_(-, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_63 in set elems elem_62.#1 & is_char(elem_63), others -> false end and elem_62.#2 = <等しい> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_64 in set elems elem_62.#3 & is_char(elem_64), others -> false end, others -> false end or cases elem_62: mk_(-, -, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_65 in set elems elem_62.#1 & is_char(elem_65), others -> false end and elem_62.#2 = <が> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_66 in set elems elem_62.#3 & is_char(elem_66), others -> false end and elem_62.#4 = <と等しい>, others -> false end, others -> false end */
                      /* mk_(-, -) */
                      if (elem_60 instanceof Tuple) {
                        succ_84 = (2 == ((Tuple)elem_60).Length());
                      }
                      else 
                        succ_84 = false;
                      if (succ_84) {
                        /* cases elem_60.#1: [] -> true, [-] ^ - -> forall elem_61 in set elems elem_60.#1 & is_char(elem_61), others -> false end or isofclass(SQL, elem_60.#1) and cases elem_60.#2: [] -> true, [-] ^ - -> forall elem_62 in set elems elem_60.#2 & cases elem_62: mk_(-, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_63 in set elems elem_62.#1 & is_char(elem_63), others -> false end and elem_62.#2 = <等しい> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_64 in set elems elem_62.#3 & is_char(elem_64), others -> false end, others -> false end or cases elem_62: mk_(-, -, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_65 in set elems elem_62.#1 & is_char(elem_65), others -> false end and elem_62.#2 = <が> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_66 in set elems elem_62.#3 & is_char(elem_66), others -> false end and elem_62.#4 = <と等しい>, others -> false end, others -> false end */
                        Boolean var1_87 = null;
                        Boolean var1_88 = null;
                        boolean succ_89 = false;
                        {
                          /* [] -> true */
                          /* [] */
                          succ_89 = ((((Object)((Tuple)elem_60).GetField(1)) instanceof List) && ((List)(Object)((Tuple)elem_60).GetField(1)).isEmpty());
                          if (succ_89) {
                            /* true */
                            var1_88 = new Boolean(true);
                          }
                        }
                        if (!succ_89) {
                          /* [-] ^ - -> forall elem_61 in set elems elem_60.#1 & is_char(elem_61) */
                          Object tmpVar_95 = ((Object)((Tuple)elem_60).GetField(1));
                          /* [-] ^ - */
                          succ_89 = ((tmpVar_95 instanceof List) && !((List)tmpVar_95).isEmpty());
                          if (succ_89) {
                            /* forall elem_61 in set elems elem_60.#1 & is_char(elem_61) */
                            boolean tmpQuant_96 = true;
                            {
                              Set e1_set_101 = new HashSet(UTIL.ConvertToList(((Object)((Tuple)elem_60).GetField(1))));
                              Character elem_61 = null;
                              Set tmpSet_107 = new HashSet(e1_set_101);
                              for (Iterator enm_106 = tmpSet_107.iterator(); enm_106.hasNext() && tmpQuant_96; ) {
                                Character elem_105 = (Character)enm_106.next();
                                /* elem_61 */
                                elem_61 = elem_105;
                                if (!(elem_61 instanceof Character)) 
                                  tmpQuant_96 = false;
                              }
                            }
                            var1_88 = new Boolean(tmpQuant_96);
                          }
                        }
                        /* others */
                        if (!succ_89) {
                          var1_88 = new Boolean(false);
                        }
                        if (!(var1_87 = var1_88).booleanValue()) 
                          var1_87 = new Boolean((Object)(Object)((Tuple)elem_60).GetField(1) instanceof SQL);
                        if ((var1_83 = var1_87).booleanValue()) {
                          Boolean var2_112 = null;
                          boolean succ_113 = false;
                          {
                            /* [] -> true */
                            /* [] */
                            succ_113 = (((List)(List)((Tuple)elem_60).GetField(2)).isEmpty());
                            if (succ_113) {
                              /* true */
                              var2_112 = new Boolean(true);
                            }
                          }
                          if (!succ_113) {
                            /* [-] ^ - -> forall elem_62 in set elems elem_60.#2 & cases elem_62: mk_(-, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_63 in set elems elem_62.#1 & is_char(elem_63), others -> false end and elem_62.#2 = <等しい> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_64 in set elems elem_62.#3 & is_char(elem_64), others -> false end, others -> false end or cases elem_62: mk_(-, -, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_65 in set elems elem_62.#1 & is_char(elem_65), others -> false end and elem_62.#2 = <が> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_66 in set elems elem_62.#3 & is_char(elem_66), others -> false end and elem_62.#4 = <と等しい>, others -> false end */
                            List tmpVar_119 = ((List)((Tuple)elem_60).GetField(2));
                            /* [-] ^ - */
                            succ_113 = (!tmpVar_119.isEmpty());
                            if (succ_113) {
                              /* forall elem_62 in set elems elem_60.#2 & cases elem_62: mk_(-, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_63 in set elems elem_62.#1 & is_char(elem_63), others -> false end and elem_62.#2 = <等しい> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_64 in set elems elem_62.#3 & is_char(elem_64), others -> false end, others -> false end or cases elem_62: mk_(-, -, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_65 in set elems elem_62.#1 & is_char(elem_65), others -> false end and elem_62.#2 = <が> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_66 in set elems elem_62.#3 & is_char(elem_66), others -> false end and elem_62.#4 = <と等しい>, others -> false end */
                              boolean tmpQuant_120 = true;
                              {
                                Set e1_set_125 = new HashSet(((List)((Tuple)elem_60).GetField(2)));
                                Tuple elem_62 = null;
                                Set tmpSet_236 = new HashSet(e1_set_125);
                                for (Iterator enm_235 = tmpSet_236.iterator(); enm_235.hasNext() && tmpQuant_120; ) {
                                  Tuple elem_234 = (Tuple)enm_235.next();
                                  /* elem_62 */
                                  elem_62 = elem_234;
                                  Boolean pred_126 = null;
                                  Boolean var1_127 = null;
                                  boolean succ_128 = false;
                                  {
                                    /* mk_(-, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_63 in set elems elem_62.#1 & is_char(elem_63), others -> false end and elem_62.#2 = <等しい> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_64 in set elems elem_62.#3 & is_char(elem_64), others -> false end */
                                    /* mk_(-, -, -) */
                                    succ_128 = (3 == elem_62.Length());
                                    if (succ_128) {
                                      /* cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_63 in set elems elem_62.#1 & is_char(elem_63), others -> false end and elem_62.#2 = <等しい> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_64 in set elems elem_62.#3 & is_char(elem_64), others -> false end */
                                      Boolean var1_131 = null;
                                      boolean succ_132 = false;
                                      {
                                        /* [] -> true */
                                        /* [] */
                                        succ_132 = (((String)(String)elem_62.GetField(1)).isEmpty());
                                        if (succ_132) {
                                          /* true */
                                          var1_131 = new Boolean(true);
                                        }
                                      }
                                      if (!succ_132) {
                                        /* [-] ^ - -> forall elem_63 in set elems elem_62.#1 & is_char(elem_63) */
                                        String tmpVar_138 = ((String)elem_62.GetField(1));
                                        /* [-] ^ - */
                                        succ_132 = (!tmpVar_138.isEmpty());
                                        if (succ_132) {
                                          /* forall elem_63 in set elems elem_62.#1 & is_char(elem_63) */
                                          boolean tmpQuant_139 = true;
                                          {
                                            Set e1_set_144 = new HashSet(UTIL.ConvertToList(((String)elem_62.GetField(1))));
                                            Character elem_63 = null;
                                            Set tmpSet_150 = new HashSet(e1_set_144);
                                            for (Iterator enm_149 = tmpSet_150.iterator(); enm_149.hasNext() && tmpQuant_139; ) {
                                              Character elem_148 = (Character)enm_149.next();
                                              /* elem_63 */
                                              elem_63 = elem_148;
                                              if (!(elem_63 instanceof Character)) 
                                                tmpQuant_139 = false;
                                            }
                                          }
                                          var1_131 = new Boolean(tmpQuant_139);
                                        }
                                      }
                                      /* others */
                                      if (!succ_132) {
                                        var1_131 = new Boolean(false);
                                      }
                                      if ((var1_127 = var1_131).booleanValue()) {
                                        Boolean var2_151 = null;
                                        if ((var2_151 = new Boolean(UTIL.equals(((quotes.等しい)elem_62.GetField(2)), new quotes.等しい()))).booleanValue()) {
                                          Boolean var2_157 = null;
                                          boolean succ_158 = false;
                                          {
                                            /* [] -> true */
                                            /* [] */
                                            succ_158 = (((String)(String)elem_62.GetField(3)).isEmpty());
                                            if (succ_158) {
                                              /* true */
                                              var2_157 = new Boolean(true);
                                            }
                                          }
                                          if (!succ_158) {
                                            /* [-] ^ - -> forall elem_64 in set elems elem_62.#3 & is_char(elem_64) */
                                            String tmpVar_164 = ((String)elem_62.GetField(3));
                                            /* [-] ^ - */
                                            succ_158 = (!tmpVar_164.isEmpty());
                                            if (succ_158) {
                                              /* forall elem_64 in set elems elem_62.#3 & is_char(elem_64) */
                                              boolean tmpQuant_165 = true;
                                              {
                                                Set e1_set_170 = new HashSet(UTIL.ConvertToList(((String)elem_62.GetField(3))));
                                                Character elem_64 = null;
                                                Set tmpSet_176 = new HashSet(e1_set_170);
                                                for (Iterator enm_175 = tmpSet_176.iterator(); enm_175.hasNext() && tmpQuant_165; ) {
                                                  Character elem_174 = (Character)enm_175.next();
                                                  /* elem_64 */
                                                  elem_64 = elem_174;
                                                  if (!(elem_64 instanceof Character)) 
                                                    tmpQuant_165 = false;
                                                }
                                              }
                                              var2_157 = new Boolean(tmpQuant_165);
                                            }
                                          }
                                          /* others */
                                          if (!succ_158) {
                                            var2_157 = new Boolean(false);
                                          }
                                          var2_151 = var2_157;
                                        }
                                        var1_127 = var2_151;
                                      }
                                    }
                                  }
                                  /* others */
                                  if (!succ_128) {
                                    var1_127 = new Boolean(false);
                                  }
                                  if (!(pred_126 = var1_127).booleanValue()) {
                                    Boolean var2_177 = null;
                                    boolean succ_178 = false;
                                    {
                                      /* mk_(-, -, -, -) -> cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_65 in set elems elem_62.#1 & is_char(elem_65), others -> false end and elem_62.#2 = <が> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_66 in set elems elem_62.#3 & is_char(elem_66), others -> false end and elem_62.#4 = <と等しい> */
                                      /* mk_(-, -, -, -) */
                                      succ_178 = (4 == elem_62.Length());
                                      if (succ_178) {
                                        /* cases elem_62.#1: [] -> true, [-] ^ - -> forall elem_65 in set elems elem_62.#1 & is_char(elem_65), others -> false end and elem_62.#2 = <が> and cases elem_62.#3: [] -> true, [-] ^ - -> forall elem_66 in set elems elem_62.#3 & is_char(elem_66), others -> false end and elem_62.#4 = <と等しい> */
                                        Boolean var1_181 = null;
                                        boolean succ_182 = false;
                                        {
                                          /* [] -> true */
                                          /* [] */
                                          succ_182 = (((String)(String)elem_62.GetField(1)).isEmpty());
                                          if (succ_182) {
                                            /* true */
                                            var1_181 = new Boolean(true);
                                          }
                                        }
                                        if (!succ_182) {
                                          /* [-] ^ - -> forall elem_65 in set elems elem_62.#1 & is_char(elem_65) */
                                          String tmpVar_188 = ((String)elem_62.GetField(1));
                                          /* [-] ^ - */
                                          succ_182 = (!tmpVar_188.isEmpty());
                                          if (succ_182) {
                                            /* forall elem_65 in set elems elem_62.#1 & is_char(elem_65) */
                                            boolean tmpQuant_189 = true;
                                            {
                                              Set e1_set_194 = new HashSet(UTIL.ConvertToList(((String)elem_62.GetField(1))));
                                              Character elem_65 = null;
                                              Set tmpSet_200 = new HashSet(e1_set_194);
                                              for (Iterator enm_199 = tmpSet_200.iterator(); enm_199.hasNext() && tmpQuant_189; ) {
                                                Character elem_198 = (Character)enm_199.next();
                                                /* elem_65 */
                                                elem_65 = elem_198;
                                                if (!(elem_65 instanceof Character)) 
                                                  tmpQuant_189 = false;
                                              }
                                            }
                                            var1_181 = new Boolean(tmpQuant_189);
                                          }
                                        }
                                        /* others */
                                        if (!succ_182) {
                                          var1_181 = new Boolean(false);
                                        }
                                        if ((var2_177 = var1_181).booleanValue()) {
                                          Boolean var2_201 = null;
                                          if ((var2_201 = new Boolean(UTIL.equals(((quotes.が)elem_62.GetField(2)), new quotes.が()))).booleanValue()) {
                                            Boolean var2_207 = null;
                                            Boolean var1_208 = null;
                                            boolean succ_209 = false;
                                            {
                                              /* [] -> true */
                                              /* [] */
                                              succ_209 = (((String)(String)elem_62.GetField(3)).isEmpty());
                                              if (succ_209) {
                                                /* true */
                                                var1_208 = new Boolean(true);
                                              }
                                            }
                                            if (!succ_209) {
                                              /* [-] ^ - -> forall elem_66 in set elems elem_62.#3 & is_char(elem_66) */
                                              String tmpVar_215 = ((String)elem_62.GetField(3));
                                              /* [-] ^ - */
                                              succ_209 = (!tmpVar_215.isEmpty());
                                              if (succ_209) {
                                                /* forall elem_66 in set elems elem_62.#3 & is_char(elem_66) */
                                                boolean tmpQuant_216 = true;
                                                {
                                                  Set e1_set_221 = new HashSet(UTIL.ConvertToList(((String)elem_62.GetField(3))));
                                                  Character elem_66 = null;
                                                  Set tmpSet_227 = new HashSet(e1_set_221);
                                                  for (Iterator enm_226 = tmpSet_227.iterator(); enm_226.hasNext() && tmpQuant_216; ) {
                                                    Character elem_225 = (Character)enm_226.next();
                                                    /* elem_66 */
                                                    elem_66 = elem_225;
                                                    if (!(elem_66 instanceof Character)) 
                                                      tmpQuant_216 = false;
                                                  }
                                                }
                                                var1_208 = new Boolean(tmpQuant_216);
                                              }
                                            }
                                            /* others */
                                            if (!succ_209) {
                                              var1_208 = new Boolean(false);
                                            }
                                            if ((var2_207 = var1_208).booleanValue()) 
                                              var2_207 = new Boolean(UTIL.equals(((quotes.と等しい)elem_62.GetField(4)), new quotes.と等しい()));
                                            var2_201 = var2_207;
                                          }
                                          var2_177 = var2_201;
                                        }
                                      }
                                    }
                                    /* others */
                                    if (!succ_178) {
                                      var2_177 = new Boolean(false);
                                    }
                                    pred_126 = var2_177;
                                  }
                                  if (!pred_126.booleanValue()) 
                                    tmpQuant_120 = false;
                                }
                              }
                              var2_112 = new Boolean(tmpQuant_120);
                            }
                          }
                          /* others */
                          if (!succ_113) {
                            var2_112 = new Boolean(false);
                          }
                          var1_83 = var2_112;
                        }
                      }
                    }
                    /* others */
                    if (!succ_84) {
                      var1_83 = new Boolean(false);
                    }
                    if (!(pred_82 = var1_83).booleanValue()) {
                      Boolean var2_237 = null;
                      boolean succ_238 = false;
                      {
                        /* mk_(-, -, -) -> cases elem_60.#1: [] -> true, [-] ^ - -> forall elem_67 in set elems elem_60.#1 & is_char(elem_67), others -> false end or isofclass(SQL, elem_60.#1) and cases elem_60.#2: [] -> true, [-] ^ - -> forall elem_68 in set elems elem_60.#2 & is_char(elem_68), others -> false end and cases elem_60.#3: [] -> true, [-] ^ - -> forall elem_69 in set elems elem_60.#3 & cases elem_69: mk_(-, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_70 in set elems elem_69.#1 & is_char(elem_70), others -> false end and elem_69.#2 = <等しい> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_71 in set elems elem_69.#3 & is_char(elem_71), others -> false end, others -> false end or cases elem_69: mk_(-, -, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_72 in set elems elem_69.#1 & is_char(elem_72), others -> false end and elem_69.#2 = <が> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_73 in set elems elem_69.#3 & is_char(elem_73), others -> false end and elem_69.#4 = <と等しい>, others -> false end, others -> false end */
                        /* mk_(-, -, -) */
                        if (elem_60 instanceof Tuple) {
                          succ_238 = (3 == ((Tuple)elem_60).Length());
                        }
                        else 
                          succ_238 = false;
                        if (succ_238) {
                          /* cases elem_60.#1: [] -> true, [-] ^ - -> forall elem_67 in set elems elem_60.#1 & is_char(elem_67), others -> false end or isofclass(SQL, elem_60.#1) and cases elem_60.#2: [] -> true, [-] ^ - -> forall elem_68 in set elems elem_60.#2 & is_char(elem_68), others -> false end and cases elem_60.#3: [] -> true, [-] ^ - -> forall elem_69 in set elems elem_60.#3 & cases elem_69: mk_(-, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_70 in set elems elem_69.#1 & is_char(elem_70), others -> false end and elem_69.#2 = <等しい> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_71 in set elems elem_69.#3 & is_char(elem_71), others -> false end, others -> false end or cases elem_69: mk_(-, -, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_72 in set elems elem_69.#1 & is_char(elem_72), others -> false end and elem_69.#2 = <が> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_73 in set elems elem_69.#3 & is_char(elem_73), others -> false end and elem_69.#4 = <と等しい>, others -> false end, others -> false end */
                          Boolean var1_241 = null;
                          Boolean var1_242 = null;
                          boolean succ_243 = false;
                          {
                            /* [] -> true */
                            /* [] */
                            succ_243 = ((((Object)((Tuple)elem_60).GetField(1)) instanceof List) && ((List)(Object)((Tuple)elem_60).GetField(1)).isEmpty());
                            if (succ_243) {
                              /* true */
                              var1_242 = new Boolean(true);
                            }
                          }
                          if (!succ_243) {
                            /* [-] ^ - -> forall elem_67 in set elems elem_60.#1 & is_char(elem_67) */
                            Object tmpVar_249 = ((Object)((Tuple)elem_60).GetField(1));
                            /* [-] ^ - */
                            succ_243 = ((tmpVar_249 instanceof List) && !((List)tmpVar_249).isEmpty());
                            if (succ_243) {
                              /* forall elem_67 in set elems elem_60.#1 & is_char(elem_67) */
                              boolean tmpQuant_250 = true;
                              {
                                Set e1_set_255 = new HashSet(UTIL.ConvertToList(((Object)((Tuple)elem_60).GetField(1))));
                                Character elem_67 = null;
                                Set tmpSet_261 = new HashSet(e1_set_255);
                                for (Iterator enm_260 = tmpSet_261.iterator(); enm_260.hasNext() && tmpQuant_250; ) {
                                  Character elem_259 = (Character)enm_260.next();
                                  /* elem_67 */
                                  elem_67 = elem_259;
                                  if (!(elem_67 instanceof Character)) 
                                    tmpQuant_250 = false;
                                }
                              }
                              var1_242 = new Boolean(tmpQuant_250);
                            }
                          }
                          /* others */
                          if (!succ_243) {
                            var1_242 = new Boolean(false);
                          }
                          if (!(var1_241 = var1_242).booleanValue()) 
                            var1_241 = new Boolean((Object)(Object)((Tuple)elem_60).GetField(1) instanceof SQL);
                          if ((var2_237 = var1_241).booleanValue()) {
                            Boolean var2_266 = null;
                            Boolean var1_267 = null;
                            boolean succ_268 = false;
                            {
                              /* [] -> true */
                              /* [] */
                              succ_268 = (((String)(String)((Tuple)elem_60).GetField(2)).isEmpty());
                              if (succ_268) {
                                /* true */
                                var1_267 = new Boolean(true);
                              }
                            }
                            if (!succ_268) {
                              /* [-] ^ - -> forall elem_68 in set elems elem_60.#2 & is_char(elem_68) */
                              String tmpVar_274 = ((String)((Tuple)elem_60).GetField(2));
                              /* [-] ^ - */
                              succ_268 = (!tmpVar_274.isEmpty());
                              if (succ_268) {
                                /* forall elem_68 in set elems elem_60.#2 & is_char(elem_68) */
                                boolean tmpQuant_275 = true;
                                {
                                  Set e1_set_280 = new HashSet(UTIL.ConvertToList(((String)((Tuple)elem_60).GetField(2))));
                                  Character elem_68 = null;
                                  Set tmpSet_286 = new HashSet(e1_set_280);
                                  for (Iterator enm_285 = tmpSet_286.iterator(); enm_285.hasNext() && tmpQuant_275; ) {
                                    Character elem_284 = (Character)enm_285.next();
                                    /* elem_68 */
                                    elem_68 = elem_284;
                                    if (!(elem_68 instanceof Character)) 
                                      tmpQuant_275 = false;
                                  }
                                }
                                var1_267 = new Boolean(tmpQuant_275);
                              }
                            }
                            /* others */
                            if (!succ_268) {
                              var1_267 = new Boolean(false);
                            }
                            if ((var2_266 = var1_267).booleanValue()) {
                              Boolean var2_287 = null;
                              boolean succ_288 = false;
                              {
                                /* [] -> true */
                                /* [] */
                                succ_288 = (((List)(List)((Tuple)elem_60).GetField(3)).isEmpty());
                                if (succ_288) {
                                  /* true */
                                  var2_287 = new Boolean(true);
                                }
                              }
                              if (!succ_288) {
                                /* [-] ^ - -> forall elem_69 in set elems elem_60.#3 & cases elem_69: mk_(-, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_70 in set elems elem_69.#1 & is_char(elem_70), others -> false end and elem_69.#2 = <等しい> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_71 in set elems elem_69.#3 & is_char(elem_71), others -> false end, others -> false end or cases elem_69: mk_(-, -, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_72 in set elems elem_69.#1 & is_char(elem_72), others -> false end and elem_69.#2 = <が> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_73 in set elems elem_69.#3 & is_char(elem_73), others -> false end and elem_69.#4 = <と等しい>, others -> false end */
                                List tmpVar_294 = ((List)((Tuple)elem_60).GetField(3));
                                /* [-] ^ - */
                                succ_288 = (!tmpVar_294.isEmpty());
                                if (succ_288) {
                                  /* forall elem_69 in set elems elem_60.#3 & cases elem_69: mk_(-, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_70 in set elems elem_69.#1 & is_char(elem_70), others -> false end and elem_69.#2 = <等しい> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_71 in set elems elem_69.#3 & is_char(elem_71), others -> false end, others -> false end or cases elem_69: mk_(-, -, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_72 in set elems elem_69.#1 & is_char(elem_72), others -> false end and elem_69.#2 = <が> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_73 in set elems elem_69.#3 & is_char(elem_73), others -> false end and elem_69.#4 = <と等しい>, others -> false end */
                                  boolean tmpQuant_295 = true;
                                  {
                                    Set e1_set_300 = new HashSet(((List)((Tuple)elem_60).GetField(3)));
                                    Tuple elem_69 = null;
                                    Set tmpSet_411 = new HashSet(e1_set_300);
                                    for (Iterator enm_410 = tmpSet_411.iterator(); enm_410.hasNext() && tmpQuant_295; ) {
                                      Tuple elem_409 = (Tuple)enm_410.next();
                                      /* elem_69 */
                                      elem_69 = elem_409;
                                      Boolean pred_301 = null;
                                      Boolean var1_302 = null;
                                      boolean succ_303 = false;
                                      {
                                        /* mk_(-, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_70 in set elems elem_69.#1 & is_char(elem_70), others -> false end and elem_69.#2 = <等しい> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_71 in set elems elem_69.#3 & is_char(elem_71), others -> false end */
                                        /* mk_(-, -, -) */
                                        succ_303 = (3 == elem_69.Length());
                                        if (succ_303) {
                                          /* cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_70 in set elems elem_69.#1 & is_char(elem_70), others -> false end and elem_69.#2 = <等しい> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_71 in set elems elem_69.#3 & is_char(elem_71), others -> false end */
                                          Boolean var1_306 = null;
                                          boolean succ_307 = false;
                                          {
                                            /* [] -> true */
                                            /* [] */
                                            succ_307 = (((String)(String)elem_69.GetField(1)).isEmpty());
                                            if (succ_307) {
                                              /* true */
                                              var1_306 = new Boolean(true);
                                            }
                                          }
                                          if (!succ_307) {
                                            /* [-] ^ - -> forall elem_70 in set elems elem_69.#1 & is_char(elem_70) */
                                            String tmpVar_313 = ((String)elem_69.GetField(1));
                                            /* [-] ^ - */
                                            succ_307 = (!tmpVar_313.isEmpty());
                                            if (succ_307) {
                                              /* forall elem_70 in set elems elem_69.#1 & is_char(elem_70) */
                                              boolean tmpQuant_314 = true;
                                              {
                                                Set e1_set_319 = new HashSet(UTIL.ConvertToList(((String)elem_69.GetField(1))));
                                                Character elem_70 = null;
                                                Set tmpSet_325 = new HashSet(e1_set_319);
                                                for (Iterator enm_324 = tmpSet_325.iterator(); enm_324.hasNext() && tmpQuant_314; ) {
                                                  Character elem_323 = (Character)enm_324.next();
                                                  /* elem_70 */
                                                  elem_70 = elem_323;
                                                  if (!(elem_70 instanceof Character)) 
                                                    tmpQuant_314 = false;
                                                }
                                              }
                                              var1_306 = new Boolean(tmpQuant_314);
                                            }
                                          }
                                          /* others */
                                          if (!succ_307) {
                                            var1_306 = new Boolean(false);
                                          }
                                          if ((var1_302 = var1_306).booleanValue()) {
                                            Boolean var2_326 = null;
                                            if ((var2_326 = new Boolean(UTIL.equals(((quotes.等しい)elem_69.GetField(2)), new quotes.等しい()))).booleanValue()) {
                                              Boolean var2_332 = null;
                                              boolean succ_333 = false;
                                              {
                                                /* [] -> true */
                                                /* [] */
                                                succ_333 = (((String)(String)elem_69.GetField(3)).isEmpty());
                                                if (succ_333) {
                                                  /* true */
                                                  var2_332 = new Boolean(true);
                                                }
                                              }
                                              if (!succ_333) {
                                                /* [-] ^ - -> forall elem_71 in set elems elem_69.#3 & is_char(elem_71) */
                                                String tmpVar_339 = ((String)elem_69.GetField(3));
                                                /* [-] ^ - */
                                                succ_333 = (!tmpVar_339.isEmpty());
                                                if (succ_333) {
                                                  /* forall elem_71 in set elems elem_69.#3 & is_char(elem_71) */
                                                  boolean tmpQuant_340 = true;
                                                  {
                                                    Set e1_set_345 = new HashSet(UTIL.ConvertToList(((String)elem_69.GetField(3))));
                                                    Character elem_71 = null;
                                                    Set tmpSet_351 = new HashSet(e1_set_345);
                                                    for (Iterator enm_350 = tmpSet_351.iterator(); enm_350.hasNext() && tmpQuant_340; ) {
                                                      Character elem_349 = (Character)enm_350.next();
                                                      /* elem_71 */
                                                      elem_71 = elem_349;
                                                      if (!(elem_71 instanceof Character)) 
                                                        tmpQuant_340 = false;
                                                    }
                                                  }
                                                  var2_332 = new Boolean(tmpQuant_340);
                                                }
                                              }
                                              /* others */
                                              if (!succ_333) {
                                                var2_332 = new Boolean(false);
                                              }
                                              var2_326 = var2_332;
                                            }
                                            var1_302 = var2_326;
                                          }
                                        }
                                      }
                                      /* others */
                                      if (!succ_303) {
                                        var1_302 = new Boolean(false);
                                      }
                                      if (!(pred_301 = var1_302).booleanValue()) {
                                        Boolean var2_352 = null;
                                        boolean succ_353 = false;
                                        {
                                          /* mk_(-, -, -, -) -> cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_72 in set elems elem_69.#1 & is_char(elem_72), others -> false end and elem_69.#2 = <が> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_73 in set elems elem_69.#3 & is_char(elem_73), others -> false end and elem_69.#4 = <と等しい> */
                                          /* mk_(-, -, -, -) */
                                          succ_353 = (4 == elem_69.Length());
                                          if (succ_353) {
                                            /* cases elem_69.#1: [] -> true, [-] ^ - -> forall elem_72 in set elems elem_69.#1 & is_char(elem_72), others -> false end and elem_69.#2 = <が> and cases elem_69.#3: [] -> true, [-] ^ - -> forall elem_73 in set elems elem_69.#3 & is_char(elem_73), others -> false end and elem_69.#4 = <と等しい> */
                                            Boolean var1_356 = null;
                                            boolean succ_357 = false;
                                            {
                                              /* [] -> true */
                                              /* [] */
                                              succ_357 = (((String)(String)elem_69.GetField(1)).isEmpty());
                                              if (succ_357) {
                                                /* true */
                                                var1_356 = new Boolean(true);
                                              }
                                            }
                                            if (!succ_357) {
                                              /* [-] ^ - -> forall elem_72 in set elems elem_69.#1 & is_char(elem_72) */
                                              String tmpVar_363 = ((String)elem_69.GetField(1));
                                              /* [-] ^ - */
                                              succ_357 = (!tmpVar_363.isEmpty());
                                              if (succ_357) {
                                                /* forall elem_72 in set elems elem_69.#1 & is_char(elem_72) */
                                                boolean tmpQuant_364 = true;
                                                {
                                                  Set e1_set_369 = new HashSet(UTIL.ConvertToList(((String)elem_69.GetField(1))));
                                                  Character elem_72 = null;
                                                  Set tmpSet_375 = new HashSet(e1_set_369);
                                                  for (Iterator enm_374 = tmpSet_375.iterator(); enm_374.hasNext() && tmpQuant_364; ) {
                                                    Character elem_373 = (Character)enm_374.next();
                                                    /* elem_72 */
                                                    elem_72 = elem_373;
                                                    if (!(elem_72 instanceof Character)) 
                                                      tmpQuant_364 = false;
                                                  }
                                                }
                                                var1_356 = new Boolean(tmpQuant_364);
                                              }
                                            }
                                            /* others */
                                            if (!succ_357) {
                                              var1_356 = new Boolean(false);
                                            }
                                            if ((var2_352 = var1_356).booleanValue()) {
                                              Boolean var2_376 = null;
                                              if ((var2_376 = new Boolean(UTIL.equals(((quotes.が)elem_69.GetField(2)), new quotes.が()))).booleanValue()) {
                                                Boolean var2_382 = null;
                                                Boolean var1_383 = null;
                                                boolean succ_384 = false;
                                                {
                                                  /* [] -> true */
                                                  /* [] */
                                                  succ_384 = (((String)(String)elem_69.GetField(3)).isEmpty());
                                                  if (succ_384) {
                                                    /* true */
                                                    var1_383 = new Boolean(true);
                                                  }
                                                }
                                                if (!succ_384) {
                                                  /* [-] ^ - -> forall elem_73 in set elems elem_69.#3 & is_char(elem_73) */
                                                  String tmpVar_390 = ((String)elem_69.GetField(3));
                                                  /* [-] ^ - */
                                                  succ_384 = (!tmpVar_390.isEmpty());
                                                  if (succ_384) {
                                                    /* forall elem_73 in set elems elem_69.#3 & is_char(elem_73) */
                                                    boolean tmpQuant_391 = true;
                                                    {
                                                      Set e1_set_396 = new HashSet(UTIL.ConvertToList(((String)elem_69.GetField(3))));
                                                      Character elem_73 = null;
                                                      Set tmpSet_402 = new HashSet(e1_set_396);
                                                      for (Iterator enm_401 = tmpSet_402.iterator(); enm_401.hasNext() && tmpQuant_391; ) {
                                                        Character elem_400 = (Character)enm_401.next();
                                                        /* elem_73 */
                                                        elem_73 = elem_400;
                                                        if (!(elem_73 instanceof Character)) 
                                                          tmpQuant_391 = false;
                                                      }
                                                    }
                                                    var1_383 = new Boolean(tmpQuant_391);
                                                  }
                                                }
                                                /* others */
                                                if (!succ_384) {
                                                  var1_383 = new Boolean(false);
                                                }
                                                if ((var2_382 = var1_383).booleanValue()) 
                                                  var2_382 = new Boolean(UTIL.equals(((quotes.と等しい)elem_69.GetField(4)), new quotes.と等しい()));
                                                var2_376 = var2_382;
                                              }
                                              var2_352 = var2_376;
                                            }
                                          }
                                        }
                                        /* others */
                                        if (!succ_353) {
                                          var2_352 = new Boolean(false);
                                        }
                                        pred_301 = var2_352;
                                      }
                                      if (!pred_301.booleanValue()) 
                                        tmpQuant_295 = false;
                                    }
                                  }
                                  var2_287 = new Boolean(tmpQuant_295);
                                }
                              }
                              /* others */
                              if (!succ_288) {
                                var2_287 = new Boolean(false);
                              }
                              var2_266 = var2_287;
                            }
                            var2_237 = var2_266;
                          }
                        }
                      }
                      /* others */
                      if (!succ_238) {
                        var2_237 = new Boolean(false);
                      }
                      pred_82 = var2_237;
                    }
                    if (!pred_82.booleanValue()) 
                      tmpQuant_78 = false;
                  }
                }
                cond_59 = new Boolean(tmpQuant_78);
              }
            }
            /* others */
            if (!succ_74) {
              cond_59 = new Boolean(false);
            }
            if (cond_59.booleanValue()) {
              var2_38 = new ArrayList(UTIL.ConvertToList(副問い合わせを生成する(項目1, a改行あり, new Integer(a字下げ.intValue() + 2))));
              var2_38.addAll(UTIL.ConvertToList(外部結合を生成する(項目2, a改行あり, new Integer(a字下げ.intValue() + 2))));
            }
            else {
              var2_38 = new ArrayList(UTIL.ConvertToList(副問い合わせを生成する(項目1, a改行あり, new Integer(a字下げ.intValue() + 2)).concat(new String(" "))));
              var2_38.addAll(項目2);
            }
          }
        }
        /* others */
        if (!succ_39) {
          var2_38 = UTIL.ConvertToList(副問い合わせを生成する(a表名, a改行あり, new Integer(a字下げ.intValue() + 2)));
        }
        rhs_36 = new ArrayList(UTIL.ConvertToList(res));
        rhs_36.addAll(var2_38);
        List rhs_442 = rhs_36;
        res = UTIL.ConvertToString(UTIL.clone(rhs_442));
      }
    }
    return res;
  }
// ***** VDMTOOLS END Name=FROM句を生成する#3|List|Boolean|Number


// ***** VDMTOOLS START Name=WHERE句を生成する#3|List|Boolean|Number KEEP=NO
  private String WHERE句を生成する (final List a条件列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    if (UTIL.equals(a条件列, new ArrayList())) 
      return new String("");
    else 
      return 空白か改行(a改行あり, a字下げ).concat(new String("WHERE")).concat(空白か改行(a改行あり, new Integer(a字下げ.intValue() + 2))).concat(条件を生成する(a条件列, a改行あり, new Integer(a字下げ.intValue() + 2)));
  }
// ***** VDMTOOLS END Name=WHERE句を生成する#3|List|Boolean|Number


// ***** VDMTOOLS START Name=条件を生成する#3|List|Boolean|Number KEEP=NO
  private String 条件を生成する (final List a条件列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    String res = UTIL.ConvertToString(new String());
    for (int ilb_7 = 1; ilb_7 <= a条件列.size(); ilb_7++) {
      Number i = new Integer(ilb_7);
      {
        if ((1 > i.intValue()) || (i.intValue() > a条件列.size())) 
          UTIL.RunTime("Run-Time Error:Illegal index");
        final Tuple a条件 = ((Tuple)a条件列.get(i.intValue() - 1));
        if (i.intValue() > 1) 
          res = UTIL.ConvertToString(UTIL.clone(res.concat(new String(" and")).concat(空白か改行(a改行あり, a字下げ))));
        boolean succ_23 = false;
        {
          Object 項目2 = null;
          Object a演算子 = null;
          Object 文字列1 = null;
          /* mk_(文字列1, a演算子, 項目2) */
          if (3 == a条件.Length()) {
            succ_23 = true;
            /* 文字列1 */
            文字列1 = a条件.GetField(1);
            /* a演算子 */
            a演算子 = a条件.GetField(2);
            /* 項目2 */
            項目2 = a条件.GetField(3);
          }
          else 
            succ_23 = false;
          if (succ_23) {
            res = UTIL.ConvertToString(UTIL.clone(res.concat(UTIL.ConvertToString(文字列1)).concat(条件を得る(a演算子, 文字列に変換する(項目2, a改行あり, a字下げ)))));
          }
        }
        if (!succ_23) {
          Object 項目2 = null;
          Object a演算子 = null;
          String 文字列1 = null;
          /* mk_(文字列1, <が>, 項目2, a演算子) */
          if (4 == a条件.Length()) {
            /* 文字列1 */
            文字列1 = UTIL.ConvertToString(a条件.GetField(1));
            /* <が> */
            if (UTIL.equals((quotes.が)a条件.GetField(2), new quotes.が())) {
              succ_23 = true;
              /* 項目2 */
              項目2 = a条件.GetField(3);
              /* a演算子 */
              a演算子 = a条件.GetField(4);
            }
            else 
              succ_23 = false;
          }
          else 
            succ_23 = false;
          if (succ_23) {
            res = UTIL.ConvertToString(UTIL.clone(res.concat(文字列1).concat(条件を得る(a演算子, 文字列に変換する(項目2, a改行あり, a字下げ)))));
          }
        }
        if (!succ_23) {
          Object 副問い合わせ1 = null;
          /* mk_(副問い合わせ1, <が>, <存在する>) */
          if (3 == a条件.Length()) {
            /* 副問い合わせ1 */
            副問い合わせ1 = a条件.GetField(1);
            /* <が> */
            if (UTIL.equals(a条件.GetField(2), new quotes.が())) {
              succ_23 = true;
              /* <存在する> */
              succ_23 = (UTIL.equals(a条件.GetField(3), new quotes.存在する()));
            }
            else 
              succ_23 = false;
          }
          else 
            succ_23 = false;
          if (succ_23) {
            res = UTIL.ConvertToString(UTIL.clone(res.concat(new String("EXISTS ")).concat(副問い合わせを生成する(副問い合わせ1, a改行あり, a字下げ))));
          }
        }
        if (!succ_23) {
          Object 副問い合わせ1 = null;
          /* mk_(副問い合わせ1, <が>, <存在しない>) */
          if (3 == a条件.Length()) {
            /* 副問い合わせ1 */
            副問い合わせ1 = a条件.GetField(1);
            /* <が> */
            if (UTIL.equals(a条件.GetField(2), new quotes.が())) {
              succ_23 = true;
              /* <存在しない> */
              succ_23 = (UTIL.equals(a条件.GetField(3), new quotes.存在しない()));
            }
            else 
              succ_23 = false;
          }
          else 
            succ_23 = false;
          if (succ_23) {
            res = UTIL.ConvertToString(UTIL.clone(res.concat(new String("NOT EXISTS ")).concat(副問い合わせを生成する(副問い合わせ1, a改行あり, a字下げ))));
          }
        }
        /* others */
        if (!succ_23) {
          ;
        }
      }
    }
    return res;
  }
// ***** VDMTOOLS END Name=条件を生成する#3|List|Boolean|Number


// ***** VDMTOOLS START Name=ORDERBY句を生成する#3|List|Boolean|Number KEEP=NO
  private String ORDERBY句を生成する (final List a列名列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    if (UTIL.equals(a列名列, new ArrayList())) 
      return new String("");
    else {
      String res = 空白か改行(a改行あり, a字下げ).concat(new String("ORDER BY"));
      res = UTIL.ConvertToString(UTIL.clone(res.concat(空白か改行(a改行あり, new Integer(a字下げ.intValue() + 2)))));
      for (int ilb_21 = 1; ilb_21 <= a列名列.size(); ilb_21++) {
        Number i = new Integer(ilb_21);
        {
          if ((1 > i.intValue()) || (i.intValue() > a列名列.size())) 
            UTIL.RunTime("Run-Time Error:Illegal index");
          final String a列名 = UTIL.ConvertToString(a列名列.get(i.intValue() - 1));
          if (i.intValue() > 1) 
            res = UTIL.ConvertToString(UTIL.clone(res.concat(new String(",")).concat(空白か改行(a改行あり, new Integer(a字下げ.intValue() + 2)))));
          res = UTIL.ConvertToString(UTIL.clone(res.concat(a列名)));
        }
      }
      return res;
    }
  }
// ***** VDMTOOLS END Name=ORDERBY句を生成する#3|List|Boolean|Number


// ***** VDMTOOLS START Name=GROUPBY句を生成する#3|List|Boolean|Number KEEP=NO
  private String GROUPBY句を生成する (final List a列名列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    if (UTIL.equals(a列名列, new ArrayList())) 
      return new String("");
    else {
      String res = 空白か改行(a改行あり, a字下げ).concat(new String("GROUP BY"));
      res = UTIL.ConvertToString(UTIL.clone(res.concat(空白か改行(a改行あり, new Integer(a字下げ.intValue() + 2)))));
      for (int ilb_21 = 1; ilb_21 <= a列名列.size(); ilb_21++) {
        Number i = new Integer(ilb_21);
        {
          if ((1 > i.intValue()) || (i.intValue() > a列名列.size())) 
            UTIL.RunTime("Run-Time Error:Illegal index");
          final String a列名 = UTIL.ConvertToString(a列名列.get(i.intValue() - 1));
          if (i.intValue() > 1) 
            res = UTIL.ConvertToString(UTIL.clone(res.concat(new String(",")).concat(空白か改行(a改行あり, new Integer(a字下げ.intValue() + 2)))));
          res = UTIL.ConvertToString(UTIL.clone(res.concat(a列名)));
        }
      }
      return res;
    }
  }
// ***** VDMTOOLS END Name=GROUPBY句を生成する#3|List|Boolean|Number


// ***** VDMTOOLS START Name=文字列に変換する#3|Object|Boolean|Number KEEP=NO
  private String 文字列に変換する (final Object a項目, final Boolean a改行あり, final Number a字下げ) throws CGException {
    boolean succ_4 = false;
    {
      /* - union - */
      succ_4 = (a項目 instanceof Set);
      if (succ_4) {
        String res = new String(" )");
        Boolean 最初の項目 = new Boolean(true);
        {
          if (!(a項目 instanceof Set)) 
            UTIL.RunTime("Run-Time Error:A set was expected in set for loop");
          Set tmpSet_11 = (Set)a項目;
          Set tmpSet_21 = new HashSet(tmpSet_11);
          for (Iterator enm_20 = tmpSet_21.iterator(); enm_20.hasNext(); ) {
            String elem_7 = UTIL.ConvertToString(enm_20.next());
            String w文字 = null;
            /* w文字 */
            w文字 = elem_7;
            if (最初の項目.booleanValue()) 
              最初の項目 = new Boolean(false);
            else 
              res = UTIL.ConvertToString(UTIL.clone(new String(", ").concat(res)));
            res = UTIL.ConvertToString(UTIL.clone(w文字.concat(res)));
          }
        }
        res = UTIL.ConvertToString(UTIL.clone(new String("( ").concat(res)));
        return res;
      }
    }
    /* others */
    return 副問い合わせを生成する(a項目, a改行あり, new Integer(a字下げ.intValue() + 2));
  }
// ***** VDMTOOLS END Name=文字列に変換する#3|Object|Boolean|Number


// ***** VDMTOOLS START Name=CASE句を生成する#3|String|Map|String KEEP=NO
  private String CASE句を生成する (final String a文字列, final Map a変換表, final String aデフォルト) throws CGException {
    String res = new String("CASE ").concat(a文字列);
    {
      Set iset_10 = new HashSet(a変換表.keySet());
      Set tmpSet_23 = new HashSet(iset_10);
      for (Iterator enm_22 = tmpSet_23.iterator(); enm_22.hasNext(); ) {
        String elem_6 = UTIL.ConvertToString(enm_22.next());
        String w条件 = null;
        /* w条件 */
        w条件 = elem_6;
        res = UTIL.ConvertToString(UTIL.clone(res.concat(new String(" WHEN ")).concat(w条件).concat(new String(" THEN ")).concat(UTIL.ConvertToString(a変換表.get(w条件)))));
      }
    }
    if (!UTIL.equals(aデフォルト, null)) 
      res = UTIL.ConvertToString(UTIL.clone(res.concat(new String(" ELSE ")).concat(UTIL.ConvertToString(aデフォルト))));
    res = UTIL.ConvertToString(UTIL.clone(res.concat(new String(" END"))));
    return res;
  }
// ***** VDMTOOLS END Name=CASE句を生成する#3|String|Map|String


// ***** VDMTOOLS START Name=項目を生成する#3|Object|Boolean|Number KEEP=NO
  private String 項目を生成する (final Object a項目, final Boolean a改行あり, final Number a字下げ) throws CGException {
    boolean succ_4 = false;
    {
      /* mk_(-, -) */
      if (a項目 instanceof Tuple) {
        succ_4 = (2 == ((Tuple)a項目).Length());
      }
      else 
        succ_4 = false;
      if (succ_4) {
        return 関数を生成する(a項目);
      }
    }
    /* others */
    if ((Object)a項目 instanceof SQL) 
      return 副問い合わせを生成する(a項目, a改行あり, a字下げ);
    else 
      return UTIL.ConvertToString(a項目);
  }
// ***** VDMTOOLS END Name=項目を生成する#3|Object|Boolean|Number


// ***** VDMTOOLS START Name=関数を生成する#1|Object KEEP=NO
  private String 関数を生成する (final Object a欄名) throws CGException {
    boolean succ_2 = false;
    {
      List a引数 = null;
      Object a関数 = null;
      /* mk_(a関数, a引数) */
      if (a欄名 instanceof Tuple) {
        if (2 == ((Tuple)a欄名).Length()) {
          succ_2 = true;
          /* a関数 */
          a関数 = ((Tuple)a欄名).GetField(1);
          /* a引数 */
          a引数 = UTIL.ConvertToList(((Tuple)a欄名).GetField(2));
        }
        else 
          succ_2 = false;
      }
      else 
        succ_2 = false;
      if (succ_2) {
        String res = null;
        boolean succ_5 = false;
        {
          /* <CONCAT> -> "CONCAT( " */
          /* <CONCAT> */
          succ_5 = (UTIL.equals(a関数, new quotes.CONCAT()));
          if (succ_5) {
            /* "CONCAT( " */
            res = new String("CONCAT( ");
          }
        }
        if (!succ_5) {
          /* <MAX> -> "MAX( " */
          /* <MAX> */
          succ_5 = (UTIL.equals(a関数, new quotes.MAX()));
          if (succ_5) {
            /* "MAX( " */
            res = new String("MAX( ");
          }
        }
        if (!succ_5) {
          /* <MIN> -> "MIN( " */
          /* <MIN> */
          succ_5 = (UTIL.equals(a関数, new quotes.MIN()));
          if (succ_5) {
            /* "MIN( " */
            res = new String("MIN( ");
          }
        }
        if (!succ_5) {
          /* <COUNT> -> "COUNT( " */
          /* <COUNT> */
          succ_5 = (UTIL.equals(a関数, new quotes.COUNT()));
          if (succ_5) {
            /* "COUNT( " */
            res = new String("COUNT( ");
          }
        }
        /* others */
        if (!succ_5) {
          UTIL.RunTime("Run-Time Error:Can not evaluate an undefined expression");
        }
        for (int ilb_15 = 1; ilb_15 <= a引数.size(); ilb_15++) {
          Number i = new Integer(ilb_15);
          if (i.intValue() > 1) 
            res = UTIL.ConvertToString(UTIL.clone(res.concat(new String(", "))));
          if ((1 > i.intValue()) || (i.intValue() > a引数.size())) 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res = UTIL.ConvertToString(UTIL.clone(res.concat(UTIL.ConvertToString(a引数.get(i.intValue() - 1)))));
        }
        res = UTIL.ConvertToString(UTIL.clone(res.concat(new String(" )"))));
        return res;
      }
    }
    /* others */
    return UTIL.ConvertToString(a欄名);
  }
// ***** VDMTOOLS END Name=関数を生成する#1|Object


// ***** VDMTOOLS START Name=副問い合わせを生成する#3|Object|Boolean|Number KEEP=NO
  private String 副問い合わせを生成する (final Object a項目, final Boolean a改行あり, final Number a字下げ) throws CGException {
    boolean succ_4 = false;
    {
      /* (is_(a項目, SQL)) */
      succ_4 = (UTIL.equals(new Boolean(true), new Boolean((Object)a項目 instanceof SQL)));
      if (succ_4) {
        SQL obj_13 = (SQL)(Object)a項目;
        return new String("( ").concat(obj_13.問い合わせ言語を取得する(a改行あり, new Integer(a字下げ.intValue() + 2))).concat(new String(" )"));
      }
    }
    /* others */
    return UTIL.ConvertToString(a項目);
  }
// ***** VDMTOOLS END Name=副問い合わせを生成する#3|Object|Boolean|Number


// ***** VDMTOOLS START Name=外部結合を生成する#3|List|Boolean|Number KEEP=NO
  private String 外部結合を生成する (final List a外部結合列, final Boolean a改行あり, final Number a字下げ) throws CGException {
    String res = 空白か改行(a改行あり, a字下げ);
    {
      List tmpSeq_63 = new ArrayList(a外部結合列);
      for (Iterator enm_64 = tmpSeq_63.iterator(); enm_64.hasNext(); ) {
        Tuple elem_6 = (Tuple)enm_64.next();
        Tuple a外部結合 = null;
        /* a外部結合 */
        a外部結合 = elem_6;
        String var2_14 = null;
        boolean succ_15 = false;
        {
          /* mk_(項目1, 項目2) -> 副問い合わせを生成する(項目1, a改行あり, a字下げ + 16) ^ 空白か改行(a改行あり, a字下げ) ^ "ON ( " ^ 条件を生成する(項目2, a改行あり, a字下げ + 7) ^ " )" */
          Object 項目1 = null;
          List 項目2 = null;
          /* mk_(項目1, 項目2) */
          if (2 == a外部結合.Length()) {
            succ_15 = true;
            /* 項目1 */
            項目1 = a外部結合.GetField(1);
            /* 項目2 */
            項目2 = UTIL.ConvertToList(a外部結合.GetField(2));
          }
          else 
            succ_15 = false;
          if (succ_15) {
            /* 副問い合わせを生成する(項目1, a改行あり, a字下げ + 16) ^ 空白か改行(a改行あり, a字下げ) ^ "ON ( " ^ 条件を生成する(項目2, a改行あり, a字下げ + 7) ^ " )" */
            var2_14 = 副問い合わせを生成する(項目1, a改行あり, new Integer(a字下げ.intValue() + 16)).concat(空白か改行(a改行あり, a字下げ)).concat(new String("ON ( ")).concat(条件を生成する(項目2, a改行あり, new Integer(a字下げ.intValue() + 7))).concat(new String(" )"));
          }
        }
        if (!succ_15) {
          /* mk_(項目1, 項目2, 項目3) -> 副問い合わせを生成する(項目1, a改行あり, a字下げ + 16) ^ " " ^ 項目2 ^ 空白か改行(a改行あり, a字下げ) ^ "ON ( " ^ 条件を生成する(項目3, a改行あり, a字下げ + 7) ^ " )" */
          Object 項目1 = null;
          String 項目2 = null;
          List 項目3 = null;
          /* mk_(項目1, 項目2, 項目3) */
          if (3 == a外部結合.Length()) {
            succ_15 = true;
            /* 項目1 */
            項目1 = a外部結合.GetField(1);
            /* 項目2 */
            項目2 = UTIL.ConvertToString(a外部結合.GetField(2));
            /* 項目3 */
            項目3 = UTIL.ConvertToList(a外部結合.GetField(3));
          }
          else 
            succ_15 = false;
          if (succ_15) {
            /* 副問い合わせを生成する(項目1, a改行あり, a字下げ + 16) ^ " " ^ 項目2 ^ 空白か改行(a改行あり, a字下げ) ^ "ON ( " ^ 条件を生成する(項目3, a改行あり, a字下げ + 7) ^ " )" */
            var2_14 = 副問い合わせを生成する(項目1, a改行あり, new Integer(a字下げ.intValue() + 16)).concat(new String(" ")).concat(項目2).concat(空白か改行(a改行あり, a字下げ)).concat(new String("ON ( ")).concat(条件を生成する(項目3, a改行あり, new Integer(a字下げ.intValue() + 7))).concat(new String(" )"));
          }
        }
        if (!succ_15) 
          UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
        res = UTIL.ConvertToString(UTIL.clone(res.concat(new String("LEFT OUTER JOIN ")).concat(var2_14)));
      }
    }
    return res;
  }
// ***** VDMTOOLS END Name=外部結合を生成する#3|List|Boolean|Number


// ***** VDMTOOLS START Name=条件を得る#2|Object|String KEEP=NO
  private String 条件を得る (final Object a演算子, final String a文字列) throws CGException {
    String varRes_3 = null;
    boolean succ_4 = false;
    {
      /* <と等しい> -> " = " ^ a文字列 */
      /* <と等しい> */
      succ_4 = (UTIL.equals(a演算子, new quotes.と等しい()));
      if (succ_4) {
        /* " = " ^ a文字列 */
        varRes_3 = new String(" = ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <等しい> -> " = " ^ a文字列 */
      /* <等しい> */
      succ_4 = (UTIL.equals(a演算子, new quotes.等しい()));
      if (succ_4) {
        /* " = " ^ a文字列 */
        varRes_3 = new String(" = ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <と等しくない> -> " <> " ^ a文字列 */
      /* <と等しくない> */
      succ_4 = (UTIL.equals(a演算子, new quotes.と等しくない()));
      if (succ_4) {
        /* " <> " ^ a文字列 */
        varRes_3 = new String(" <> ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <等しくない> -> " <> " ^ a文字列 */
      /* <等しくない> */
      succ_4 = (UTIL.equals(a演算子, new quotes.等しくない()));
      if (succ_4) {
        /* " <> " ^ a文字列 */
        varRes_3 = new String(" <> ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <以上> -> " >= " ^ a文字列 */
      /* <以上> */
      succ_4 = (UTIL.equals(a演算子, new quotes.以上()));
      if (succ_4) {
        /* " >= " ^ a文字列 */
        varRes_3 = new String(" >= ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <以下> -> " <= " ^ a文字列 */
      /* <以下> */
      succ_4 = (UTIL.equals(a演算子, new quotes.以下()));
      if (succ_4) {
        /* " <= " ^ a文字列 */
        varRes_3 = new String(" <= ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <より大> -> " > " ^ a文字列 */
      /* <より大> */
      succ_4 = (UTIL.equals(a演算子, new quotes.より大()));
      if (succ_4) {
        /* " > " ^ a文字列 */
        varRes_3 = new String(" > ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <より大きい> -> " > " ^ a文字列 */
      /* <より大きい> */
      succ_4 = (UTIL.equals(a演算子, new quotes.より大きい()));
      if (succ_4) {
        /* " > " ^ a文字列 */
        varRes_3 = new String(" > ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <より小> -> " < " ^ a文字列 */
      /* <より小> */
      succ_4 = (UTIL.equals(a演算子, new quotes.より小()));
      if (succ_4) {
        /* " < " ^ a文字列 */
        varRes_3 = new String(" < ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <より小さい> -> " < " ^ a文字列 */
      /* <より小さい> */
      succ_4 = (UTIL.equals(a演算子, new quotes.より小さい()));
      if (succ_4) {
        /* " < " ^ a文字列 */
        varRes_3 = new String(" < ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <以前> -> " > " ^ a文字列 */
      /* <以前> */
      succ_4 = (UTIL.equals(a演算子, new quotes.以前()));
      if (succ_4) {
        /* " > " ^ a文字列 */
        varRes_3 = new String(" > ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <以後> -> " < " ^ a文字列 */
      /* <以後> */
      succ_4 = (UTIL.equals(a演算子, new quotes.以後()));
      if (succ_4) {
        /* " < " ^ a文字列 */
        varRes_3 = new String(" < ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <の範囲内> -> " IN " ^ a文字列 */
      /* <の範囲内> */
      succ_4 = (UTIL.equals(a演算子, new quotes.の範囲内()));
      if (succ_4) {
        /* " IN " ^ a文字列 */
        varRes_3 = new String(" IN ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <範囲内> -> " IN " ^ a文字列 */
      /* <範囲内> */
      succ_4 = (UTIL.equals(a演算子, new quotes.範囲内()));
      if (succ_4) {
        /* " IN " ^ a文字列 */
        varRes_3 = new String(" IN ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <の範囲外> -> " NOT IN " ^ a文字列 */
      /* <の範囲外> */
      succ_4 = (UTIL.equals(a演算子, new quotes.の範囲外()));
      if (succ_4) {
        /* " NOT IN " ^ a文字列 */
        varRes_3 = new String(" NOT IN ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <範囲外> -> " NOT IN " ^ a文字列 */
      /* <範囲外> */
      succ_4 = (UTIL.equals(a演算子, new quotes.範囲外()));
      if (succ_4) {
        /* " NOT IN " ^ a文字列 */
        varRes_3 = new String(" NOT IN ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <で始まる> -> " LIKE " ^ a文字列 */
      /* <で始まる> */
      succ_4 = (UTIL.equals(a演算子, new quotes.で始まる()));
      if (succ_4) {
        /* " LIKE " ^ a文字列 */
        varRes_3 = new String(" LIKE ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <で終わる> -> " LIKE " ^ a文字列 */
      /* <で終わる> */
      succ_4 = (UTIL.equals(a演算子, new quotes.で終わる()));
      if (succ_4) {
        /* " LIKE " ^ a文字列 */
        varRes_3 = new String(" LIKE ").concat(a文字列);
      }
    }
    if (!succ_4) {
      /* <を含む> -> " LIKE " ^ a文字列 */
      /* <を含む> */
      succ_4 = (UTIL.equals(a演算子, new quotes.を含む()));
      if (succ_4) {
        /* " LIKE " ^ a文字列 */
        varRes_3 = new String(" LIKE ").concat(a文字列);
      }
    }
    /* others */
    if (!succ_4) {
      UTIL.RunTime("Run-Time Error:Can not evaluate an undefined expression");
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=条件を得る#2|Object|String


// ***** VDMTOOLS START Name=空白か改行#2|Boolean|Number KEEP=NO
  private String 空白か改行 (final Boolean a改行あり, final Number a字下げ) throws CGException {
    String varRes_3 = null;
    if (a改行あり.booleanValue()) {
      String tmpSeq_8 = new String();
      for (int count_9 = 1; count_9 <= a字下げ.intValue(); count_9++) {
        Number i = new Integer(count_9);
        tmpSeq_8 = tmpSeq_8 + new Character(' ');
      }
      varRes_3 = new String("\n").concat(tmpSeq_8);
    }
    else 
      varRes_3 = new String(" ");
    return varRes_3;
  }
// ***** VDMTOOLS END Name=空白か改行#2|Boolean|Number

}
;
