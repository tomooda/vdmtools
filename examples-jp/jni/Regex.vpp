class Pattern

values
private
classname = "java/util/regex/Pattern";

instance variables
private
obj : [jobject] := nil;

operations
public
Pattern: () ==> Pattern
Pattern() ==
  def version = JNIEnv`JNI_VERSION_1_8;
      options = [ "-Xmx128m", "-verbose:gc" ];
      - = JNI`CreateJavaVM(version, options);
  in return self;

public static
compile: seq of char ==> Pattern
compile(regex) ==
  def pattern = new Pattern().compile'(regex);
  in return pattern;

public
compile': seq of char ==> Pattern 
compile'(regex) ==
  def jstr = JNI`NewString(regex);
      cls = JNI`FindClass(classname);
      resobj = JNI`CallStaticMethod(cls, "compile", [jstr], "(Ljava/lang/String;)Ljava/util/regex/Pattern;");
  in
   (obj := resobj;
    return self);

public
pattern: () ==> seq of char
pattern() ==
  def resobj = JNI`CallMethod(obj, "pattern", [], "()Ljava/lang/String;");
  in return JNI`GetStringChars(resobj);

public
matcher: seq of char ==> Matcher
matcher(input) ==
  def jstr = JNI`NewString(input);
      resobj = JNI`CallMethod(obj, "matcher", [jstr], "(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;");
  in return new Matcher(resobj); 

public static
matches: seq of char * seq of char ==> bool
matches(regex, input) ==
  def jstr = JNI`NewString(regex);
      jinp = JNI`NewString(input);
      cls = JNI`FindClass(classname);
  in return JNI`CallStaticMethod(cls, "matches", [jstr, jinp], "(Ljava/lang/String;Ljava/lang/CharSequence;)Z");

end Pattern

class Matcher

values
private
classname = "java/util/regex/Matcher";

instance variables
private
obj : [jobject] := nil;

operations
public
Matcher: jobject ==> Matcher
Matcher(jobj) ==
 (obj := jobj;
  return self);

public
find: () ==> bool
find() ==
  return JNI`CallMethod(obj, "find", [], "()Z");

public
matches: () ==> bool
matches() ==
  return JNI`CallMethod(obj, "matches", [], "()Z");

public
groupCount: () ==> nat
groupCount() ==
  return JNI`CallMethod(obj, "groupCount", [], "()I");

public
group: nat ==> seq of char
group(i) ==
  def resobj =  JNI`CallMethod(obj, "group", [i], "(I)Ljava/lang/String;");
  in return JNI`GetStringChars(resobj);

end Matcher
