--$Header: /home/vdmtools/cvsroot/toolbox/examples-jp/pp/ModelingSystemByJapanese/examples/explo2.vpp,v 1.1 2006/01/04 06:44:17 vdmtools Exp $
--第６章の爆発物貯蔵庫コントローラー
-- 分配演算子と濃度を使った第２版をVDM++対応にしたもの
class 貯蔵庫クラス

types

点型 :: x : nat
         y : nat;

貯蔵庫名 = token;

物型 :: 位置 : 点型
          x長  : nat
          y長  : nat;
          
貯蔵庫型 :: 内容物集合 : set of 物型
         x限度   : nat
         y限度   : nat
	 名前     : 貯蔵庫名

inv mk_貯蔵庫型(内容物集合, x限度, y限度, -) ==

-- 1. 物は貯蔵庫の範囲内にある
   (forall 物 in set 内容物集合 & 限度内？(物,x限度,y限度))
   and
   
-- 2. ２つの異なる物は重ならない
   not exists 物1, 物2 in set 内容物集合 & 物1 <> 物2 and 重複？(物1,物2);


--
-- 分配演算子のための追加材料
--

場所型 = set of 貯蔵庫型
inv 場所 == 
   forall 場所1, 場所2 in set 場所 & 
   	場所1.名前 = 場所2.名前 => 場所1 = 場所2;

目録品目 :: 貯蔵庫 : 貯蔵庫名   
                 品目  : 物型;

目録 = set of 目録品目


functions

-- 不変条件のための補助関数

-- 与えられた物の位置は、与えられたx限度とy限度の内にあるか？

限度内？ : 物型 * nat * nat -> bool
限度内？(ある物,x限度,y限度) == 
   ある物.位置.x + ある物.x長 <= x限度 and 
   ある物.位置.y + ある物.y長 <= y限度;

-- ２つの物が重なるか？

重複？ : 物型 * 物型 -> bool
重複？(ある物1,ある物2) ==
   点の集合(ある物1) inter 点の集合(ある物2) <> {};

-- 物内の点の集合

点の集合 : 物型 -> set of 点型
点の集合(mk_物型(ある位置,あるx長,あるy長)) == 
   {mk_点型(x,y) | x in set {ある位置.x ,..., ある位置.x + あるx長},
                    y in set {ある位置.y ,..., ある位置.y + あるy長}};

-- 主な機能

-- 貯蔵庫中の物数 

物数 : 貯蔵庫型 -> nat
物数(ある貯蔵庫) == card ある貯蔵庫.内容物集合;

-- 与えられた物を、与えられた位置に格納する余裕があるか,
-- 他の物と重ならないかをチェックする。 

余地がある？ : nat * nat * 貯蔵庫型 * 点型 -> bool
余地がある？(あるx長,あるy長,ある貯蔵庫,ある位置) == 
   let 新しい物 = mk_物型(ある位置,あるx長,あるy長) in 
      限度内？(新しい物,ある貯蔵庫.x限度,ある貯蔵庫.y限度) and 
      not exists ある物 in set ある貯蔵庫.内容物集合 & 重複？(ある物,新しい物);

--可能ならば、与えられた物を置く位置を返す陰関数。
--そのような位置が無ければ、nilを返す。

位置を示唆する(あるx長,あるy長 : nat, ある貯蔵庫:貯蔵庫型) ある位置:[点型]
post if exists ある点:点型 & 余地がある？(あるx長,あるy長,ある貯蔵庫,ある点) 
     then 余地がある？(あるx長,あるy長,ある貯蔵庫,ある位置)
     else ある位置 = nil;

-- 与えられた物を、与えられた貯蔵庫の与えられた位置に置く。
-- 修正された貯蔵庫を返す。 

置く: nat * nat * 貯蔵庫型 * 点型 -> 貯蔵庫型
置く(あるx長,あるy長,ある貯蔵庫,ある位置) == 
   let 新しい物 = mk_物型(ある位置,あるx長,あるy長) in 
   mk_貯蔵庫型(ある貯蔵庫.内容物集合 union {新しい物},
            ある貯蔵庫.x限度,
            ある貯蔵庫.y限度,
            ある貯蔵庫.名前)
pre 余地がある？(あるx長,あるy長,ある貯蔵庫,ある位置);

-- 与えられた貯蔵庫から、与えられた位置の物集合を除く。 
-- 修正されたた貯蔵庫を返す。 

除去する : 貯蔵庫型 * set of 点型 -> 貯蔵庫型
除去する(mk_貯蔵庫型(内容物集合,x限度,y限度,名前),位置集合) == 
   let 物集合 = {物 |物 in set 内容物集合 & 物.位置 in set 位置集合} in
   mk_貯蔵庫型(内容物集合 \ 物集合, x限度, y限度, 名前)
pre 位置集合 subset { 物.位置 | 物 in set 内容物集合};

-- 分配集合演算子を説明する関数

--場所の目録は場所中の貯蔵庫の目録より構成される。

場所目録 : 場所型 -> 目録
場所目録(ある場所) == 
  dunion {貯蔵庫目録(貯蔵庫)|貯蔵庫 in set ある場所};

貯蔵庫目録 : 貯蔵庫型 -> 目録
貯蔵庫目録(ある貯蔵庫) == 
  {mk_目録品目(ある貯蔵庫.名前,物) | 物 in set ある貯蔵庫.内容物集合}

end 貯蔵庫クラス