--$Header: /home/vdmtools/cvsroot/toolbox/examples-jp/pp/ModelingSystemByJapanese/examples/gateway.vpp,v 1.1 2006/01/04 06:44:17 vdmtools Exp $
-- 第７章（系列）の信頼されるゲートウェイ
class ゲートウェイ

types

文字列型 = seq of char
inv 文字列 == 文字列 <> [];  

メッセージ型 = 文字列型
inv  メッセージ == len  メッセージ <= 100;

機密型 = <高> | <低>;

カテゴリー型 = set of 文字列型;

ポート型 :: 
	高ポート: seq of メッセージ型	--高機密メッセージ出力ポート
	低ポート: seq of メッセージ型	--低機密メッセージ出力ポート

functions

-- 他の文字列中に部分文字列があるかチェックする
存在する？: 文字列型 * 文字列型 -> bool
存在する？(ある部分文字列, ある文字列) ==
	exists i, j in set inds ある文字列 & ある部分文字列 = ある文字列(i,...,j);

-- メッセージを分類する
分類する: メッセージ型 * カテゴリー型 -> 機密型
分類する(あるメッセージ, あるカテゴリー) ==
	if exists 高 in set あるカテゴリー & 存在する？(高, あるメッセージ)
	then <高>
	else <低>;

-- 再帰を使ったゲートウェイ関数本体
ゲートウェイ: seq of メッセージ型 * カテゴリー型 -> ポート型
ゲートウェイ(あるメッセージ列, あるカテゴリー) ==
	if あるメッセージ列 = [] then 
		mk_ポート型([],[])
	else
		let 残りのポート = ゲートウェイ(tl あるメッセージ列, あるカテゴリー)
	in
	メッセージを処理する(hd あるメッセージ列, あるカテゴリー, 残りのポート);

-- メッセージを分類し、対応するポートへ追加する。
メッセージを処理する: メッセージ型 * カテゴリー型 * ポート型 -> ポート型
メッセージを処理する(あるメッセージ, あるカテゴリー, あるポート) ==
	if 分類する(あるメッセージ, あるカテゴリー) = <高> then 
		mk_ポート型([あるメッセージ] ^ あるポート.高ポート, あるポート.低ポート)
	else mk_ポート型(あるポート.高ポート, [あるメッセージ] ^ あるポート.低ポート);


-- 再帰を使わないゲートウェイ関数本体。
ゲートウェイ2: seq of メッセージ型 * カテゴリー型 -> ポート型
ゲートウェイ2(あるメッセージ列, あるカテゴリー) ==
	mk_ポート型(
		[あるメッセージ列(i) | i in set inds あるメッセージ列 & 分類する(あるメッセージ列(i), あるカテゴリー) = <高>],
		[あるメッセージ列(i) | i in set inds あるメッセージ列 & 分類する(あるメッセージ列(i), あるカテゴリー) = <低>]
	);

-- 他の系列演算子を表す関数。 
高機密？: seq of メッセージ型 * カテゴリー型 -> bool
高機密？(あるメッセージ列, あるカテゴリー) ==
	exists あるメッセージ in set elems あるメッセージ列 & 分類する(あるメッセージ, あるカテゴリー) = <高>;

/*
検閲する: seq of メッセージ型 * カテゴリー型 -> seq of メッセージ型
検閲する(あるメッセージ列, あるカテゴリー) ==
	[あるメッセージ列(i) | i in set inds あるメッセージ列 & 分類する(あるメッセージ列(i), あるカテゴリー) = <低>];
*/
検閲する: メッセージ型 * nat1 * nat1  -> メッセージ型
検閲する(あるメッセージ, 開始位置, 長さ) ==
	あるメッセージ ++ { i |-> ' ' | i in set {開始位置, ..., 開始位置 + 長さ - 1}}
pre
	{開始位置, ..., 開始位置 + 長さ - 1} subset inds あるメッセージ ;

メッセージを平滑化する: seq of メッセージ型 -> メッセージ型
メッセージを平滑化する(あるメッセージ列) ==
	conc あるメッセージ列
pre len conc あるメッセージ列 <= 100;

end ゲートウェイ