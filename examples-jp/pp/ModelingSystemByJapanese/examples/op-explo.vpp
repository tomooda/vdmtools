--$Header: /home/vdmtools/cvsroot/toolbox/examples-jp/pp/ModelingSystemByJapanese/examples/op-explo.vpp,v 1.1 2006/01/04 06:44:17 vdmtools Exp $
-- 爆発物貯蔵庫コントローラー 
-- 第１０章の状態ベース版（状態ベース・モデリング） を修正してVDM++版としたもの
class 貯蔵庫クラス

types

点型 ::
	x : nat
	y : nat;

貯蔵庫名型 = token;

物型 ::
	位置 : 点型
	x長  : nat
	y長  : nat; 
	
貯蔵庫型 :: 
	内容物集合 : set of 物型
         x限度   : nat
         y限度   : nat
inv mk_貯蔵庫型(内容物集合, x限度, y限度) ==
	(forall 物 in set 内容物集合 & 限度内？(物,x限度,y限度))
	and 
	not exists 物1, 物2 in set 内容物集合 & 物1 <> 物2 and 重複？(物1,物2)

functions

-- 補助関数

-- 与えられた物の位置は、与えられたx限度とy限度の内にあるか？

限度内？ : 物型 * nat * nat -> bool
限度内？(ある物,x限度,y限度) == 
   ある物.位置.x + ある物.x長 <= x限度 and 
   ある物.位置.y + ある物.y長 <= y限度;

-- ２つの物が重なるか？

重複？ : 物型 * 物型 -> bool
重複？(ある物1,ある物2) ==
   点の集合(ある物1) inter 点の集合(ある物2) <> {}; 

-- 物内の点の集合

点の集合 : 物型 -> set of 点型
点の集合(mk_物型(ある位置,あるx長,あるy長)) == 
   {mk_点型(x,y) | x in set {ある位置.x ,..., ある位置.x + あるx長},
                    y in set {ある位置.y ,..., ある位置.y + あるy長}};

-- 与えられた物を、与えられた位置に格納する余裕があるか,
-- 他の物と重ならないかをチェックする。 

余地がある？: 物型 * set of 物型 * nat * nat * [点型] -> bool
余地がある？(ある物,内容物集合, x限度, y限度, ある位置) == 
   let 新しい物 = mk_物型(ある位置,ある物.x長,ある物.y長) in 
      限度内？(新しい物,x限度,y限度) and 
      not exists 物 in set 内容物集合 & 重複？(物,新しい物)


operations
-- 主な機能

-- 貯蔵庫中の物数 

物数() ある数: nat
ext rd 内容物集合 : set of 物型 
post ある数 = card 内容物集合;


--可能ならば、与えられた物を置く位置を返す陰関数。
--そのような位置が無ければ、nilを返す。

位置を示唆する(ある物:物型) ある位置:[点型]
ext  rd 内容物集合 : set of 物型
     rd x限度   : nat
     rd y限度   : nat

post if exists ある点:点型 & 余地がある？(ある物,内容物集合,x限度,y限度,ある点) 
     then 余地がある？(ある物,内容物集合,x限度,y限度,ある位置) 
     else ある位置 = nil;


-- 与えられた物を、与えられた貯蔵庫の与えられた位置に置く 

置く(ある物:物型, ある位置:点型) 
ext  wr 内容物集合 : set of 物型
     rd x限度   : nat
     rd y限度   : nat
pre 余地がある？(ある物,内容物集合,x限度,y限度,ある位置)
post let 新しい物 = mk_物型(ある位置,ある物.x長,ある物.y長) in 
     内容物集合  = 内容物集合~ union {新しい物};


-- 与えられた貯蔵庫から、与えられた位置の物集合を除く。

除去する(ある位置集合:set of 点型)
ext  wr 内容物集合 : set of 物型
post let ある物集合 = {物 | 物 in set 内容物集合 & 物.位置 in set ある位置集合} in
     内容物集合 = 内容物集合~\ある物集合

end 貯蔵庫クラス