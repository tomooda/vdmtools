\subsection{図書館貸出管理クラスT}
図書館貸出管理クラスの回帰テストを行う
\begin{vdm_al}	
class 図書館貸出管理クラスT is subclass of TestDriver

values
	- = "$Header: /home/vdmtools/cvsroot/toolbox/examples-jp/pp/library/testCase.vpp,v 1.3 2005/11/22 07:47:00 vdmtools Exp $"
	
functions
tests : () -> seq of TestCase
tests () == 
	[
		new 図書館貸出管理クラスT01(),
		new 図書館貸出管理クラスT02(),
		new 図書館貸出管理クラスT03(),
		new 図書館貸出管理クラスT04(),
		new 図書館貸出管理クラスT05(),
		new 図書館貸出管理クラスT06()
	];
end 図書館貸出管理クラスT

/*
シナリオID
	本を借りる。
親UseCase
	なし
内容
	借りている本を求める。
*/
class 図書館貸出管理クラスT01 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	today = new SBCalendar().基準日(),
		図書館 = new 図書館クラス(),
		主題1 = 図書館.分野を作成する("ソフトウェア"),
		主題2 = 図書館.分野を作成する("小説"),
		主題3 = 図書館.分野を作成する("戦争"),
		著者1 = 図書館.著者を作成する("佐原伸","0422-55-7724"),
		著者2 = 図書館.著者を作成する("井上ひさし","不明"),
		本1 = 図書館.本を作成する("デザインパターン",著者1,{主題1}),
		本2 = 図書館.本を作成する("紙屋町桜ホテル",著者2,{主題2, 主題3}),
		本3 = 図書館.本を作成する("夢の裂け目",著者2,{主題2, 主題3}),
		本実体1 = 図書館.本実体を作成する("101",本1),
		本実体2 = 図書館.本実体を作成する("102",本1),
		本実体3 = 図書館.本実体を作成する("103",本2),
		本実体4 = 図書館.本実体を作成する("104",本3),
		職員1 = 図書館.職員を作成する(図書館,"11","宮崎寅蔵","不明"),
		利用者1 = 図書館.利用者を作成する(図書館,"10","チェ・ゲバラ","不明"),
		利用者2 = 図書館.利用者を作成する(図書館,"12","胡志明","不明"),
		図書館0 = 図書館.利用者を追加する(利用者1,  職員1) ,
		図書館1 = 図書館0.利用者を追加する(利用者2,  職員1) ,
		図書館2 = 図書館1.蔵書を追加する(本実体1,職員1) ,
		図書館3 = 図書館2.蔵書を追加する(本実体2,職員1) ,
		図書館4 = 図書館3.蔵書を追加する(本実体3,職員1) ,
		- = 図書館4.蔵書を追加する(本実体4,職員1) ,
		- = 職員1.本を貸す(today, 本実体1 ,利用者1) ,
		- = 職員1.本を貸す(today, 本実体3 ,利用者1) ,
		- = 職員1.本を貸す(today, 本実体4 ,利用者1) 
	in
	return
		利用者1.借りている本(職員1)  = {本1, 本2, 本3} and
		利用者1.借りている本(利用者1)  = {本1, 本2, 本3} and 
		利用者2.借りている本(職員1)  = {} and 
		利用者2.借りている本(利用者2)  = {} 
;
protected 準備する: () ==> ()
準備する() == テスト名 := "図書館貸出管理クラスT01:\t借りている本を求める";
protected 後始末する: () ==> ()
後始末する() == return;
end 図書館貸出管理クラスT01

/*
シナリオID
	本を検索する。
親UseCase
	なし
内容
	本を検索する。
*/
class 図書館貸出管理クラスT02 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	today = new SBCalendar().基準日(),
		図書館 = new 図書館クラス(),
		主題1 = 図書館.分野を作成する("ソフトウェア"),
		主題2 = 図書館.分野を作成する("小説"),
		主題3 = 図書館.分野を作成する("戦争"),
		主題4 = 図書館.分野を作成する("VDM"),
		著者1 = 図書館.著者を作成する("佐原伸","0422-55-7724"),
		著者2 = 図書館.著者を作成する("井上ひさし","不明"),
		本1 = 図書館.本を作成する("デザインパターン",著者1,{主題1}),
		本2 = 図書館.本を作成する("紙屋町桜ホテル",著者2,{主題2, 主題3}),
		本3 = 図書館.本を作成する("夢の裂け目",著者2,{主題2, 主題3}),
		本実体1 = 図書館.本実体を作成する("101",本1),
		本実体2 = 図書館.本実体を作成する("102",本1),
		本実体3 = 図書館.本実体を作成する("103",本2),
		本実体4 = 図書館.本実体を作成する("104",本3),
		職員1 = 図書館.職員を作成する(図書館,"11","宮崎寅蔵","不明"),
		利用者1 = 図書館.利用者を作成する(図書館,"10","チェ・ゲバラ","不明"),
		図書館1 = 図書館.利用者を追加する(利用者1,  職員1) ,
		図書館2 = 図書館1.蔵書を追加する(本実体1,職員1) ,
		図書館3 = 図書館2.蔵書を追加する(本実体2,職員1) ,
		図書館4 = 図書館3.蔵書を追加する(本実体3,職員1) ,
		図書館5 = 図書館4.蔵書を追加する(本実体4,職員1) ,
		- = 職員1.本を貸す(today, 本実体1 ,利用者1) ,
		- = 職員1.本を貸す(today, 本実体4 ,利用者1) 
	in
	return
		図書館5.本を検索する(著者1)  = {本1} and
		図書館5.本を検索する(著者2)  = {本2,本3} and
		図書館5.本を検索する(主題1)  = {本1} and
		図書館5.本を検索する(主題2)  = {本2,本3} and
		図書館5.本を検索する(主題4)  = {}
;
protected 準備する: () ==> ()
準備する() == テスト名 := "図書館貸出管理クラスT02:\t本を検索する";
protected 後始末する: () ==> ()
後始末する() == return;
end 図書館貸出管理クラスT02

/*
シナリオID
	本を検索する。
親UseCase
	なし
内容
	最後の利用者を求める。
*/
class 図書館貸出管理クラスT03 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	today = new SBCalendar().基準日(),
		図書館 = new 図書館クラス(),
		主題1 = 図書館.分野を作成する("ソフトウェア"),
		主題2 = 図書館.分野を作成する("小説"),
		主題3 = 図書館.分野を作成する("戦争"),
		著者1 = 図書館.著者を作成する("佐原伸","0422-55-7724"),
		著者2 = 図書館.著者を作成する("井上ひさし","不明"),
		本1 = 図書館.本を作成する("デザインパターン",著者1,{主題1}),
		本2 = 図書館.本を作成する("紙屋町桜ホテル",著者2,{主題2, 主題3}),
		本3 = 図書館.本を作成する("夢の裂け目",著者2,{主題2, 主題3}),
		本実体1 = 図書館.本実体を作成する("101",本1),
		本実体2 = 図書館.本実体を作成する("102",本1),
		本実体3 = 図書館.本実体を作成する("103",本2),
		本実体4 = 図書館.本実体を作成する("104",本3),
		職員1 = 図書館.職員を作成する(図書館,"11","宮崎寅蔵","不明"),
		利用者1 = 図書館.利用者を作成する(図書館,"10","チェ・ゲバラ","不明"),
		図書館1 = 図書館.利用者を追加する(利用者1,  職員1) ,
		図書館2 = 図書館1.蔵書を追加する(本実体1,職員1) ,
		図書館3 = 図書館2.蔵書を追加する(本実体2,職員1) ,
		図書館4 = 図書館3.蔵書を追加する(本実体3,職員1) ,
		図書館5 = 図書館4.蔵書を追加する(本実体4,職員1) ,
		- = 職員1.本を貸す(today, 本実体1 ,利用者1) ,
		- = 職員1.本を貸す(today, 本実体4 ,利用者1) 
	in
	return
		図書館5.最後の利用者(本実体3, 職員1)  = nil and
		図書館5.最後の利用者(本実体4, 職員1) = 利用者1 
;
protected 準備する: () ==> ()
準備する() == テスト名 := "図書館貸出管理クラスT03:\t最後の利用者を求める";
protected 後始末する: () ==> ()
後始末する() == return;
end 図書館貸出管理クラスT03

/*
シナリオID
	本を検索する。
親UseCase
	なし
内容
	本を返す。
*/
class 図書館貸出管理クラスT04 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	today = new SBCalendar().基準日(),
		図書館 = new 図書館クラス(),
		主題1 = 図書館.分野を作成する("ソフトウェア"),
		主題2 = 図書館.分野を作成する("小説"),
		主題3 = 図書館.分野を作成する("戦争"),
		著者1 = 図書館.著者を作成する("佐原伸","0422-55-7724"),
		著者2 = 図書館.著者を作成する("井上ひさし","不明"),
		本1 = 図書館.本を作成する("デザインパターン",著者1,{主題1}),
		本2 = 図書館.本を作成する("紙屋町桜ホテル",著者2,{主題2, 主題3}),
		本3 = 図書館.本を作成する("夢の裂け目",著者2,{主題2, 主題3}),
		本実体1 = 図書館.本実体を作成する("101",本1),
		本実体2 = 図書館.本実体を作成する("102",本1),
		本実体3 = 図書館.本実体を作成する("103",本2),
		本実体4 = 図書館.本実体を作成する("104",本3),
		職員1 = 図書館.職員を作成する(図書館,"11","宮崎寅蔵","不明"),
		利用者1 = 図書館.利用者を作成する(図書館,"10","チェ・ゲバラ","不明"),
		利用者2 = 図書館.利用者を作成する(図書館,"12","胡志明","不明"),
		図書館0 = 図書館.利用者を追加する(利用者1,  職員1) ,
		図書館1 = 図書館0.利用者を追加する(利用者2,  職員1) ,
		図書館2 = 図書館1.蔵書を追加する(本実体1,職員1) ,
		図書館3 = 図書館2.蔵書を追加する(本実体2,職員1) ,
		図書館4 = 図書館3.蔵書を追加する(本実体3,職員1) ,
		- = 図書館4.蔵書を追加する(本実体4,職員1) ,
		- = 職員1.本を貸す(today, 本実体1 ,利用者1) ,
		- = 職員1.本を貸す(today, 本実体4 ,利用者1),
		図書館6 = 職員1.本を返す(today, 本実体1),
		- = 職員1.本を貸す(today, 本実体1 ,利用者2) 
	in
	return  
		図書館6.最後の利用者(本実体1, 職員1) = 利用者2 
;
protected 準備する: () ==> ()
準備する() == テスト名 := "図書館貸出管理クラスT04:\t本を返す";
protected 後始末する: () ==> ()
後始末する() == return;
end 図書館貸出管理クラスT04

/*
シナリオID
	その他の検査。
親UseCase
	なし
内容
	テスト・カバレージを上げるための検査。
*/
class 図書館貸出管理クラスT05 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	today = new SBCalendar().基準日(),
		図書館 = new 図書館クラス(),
		主題1 = 図書館.分野を作成する("ソフトウェア"),
		主題2 = 図書館.分野を作成する("小説"),
		主題3 = 図書館.分野を作成する("戦争"),
		著者1 = 図書館.著者を作成する("佐原伸","0422-55-7724"),
		著者2 = 図書館.著者を作成する("井上ひさし","不明"),
		本1 = 図書館.本を作成する("デザインパターン",著者1,{主題1}),
		本2 = 図書館.本を作成する("紙屋町桜ホテル",著者2,{主題2, 主題3}),
		本3 = 図書館.本を作成する("夢の裂け目",著者2,{主題2, 主題3}),
		本実体1 = 図書館.本実体を作成する("101",本1),
		本実体2 = 図書館.本実体を作成する("102",本1),
		本実体3 = 図書館.本実体を作成する("103",本2),
		本実体4 = 図書館.本実体を作成する("104",本3),
		職員1 = 図書館.職員を作成する(図書館,"11","宮崎寅蔵","不明"),
		利用者1 = 図書館.利用者を作成する(図書館,"10","チェ・ゲバラ","不明"),
		利用者2 = 図書館.利用者を作成する(図書館,"12","胡志明","不明"),
		図書館0 = 図書館.利用者を追加する(利用者1,  職員1) ,
		図書館1 = 図書館0.利用者を追加する(利用者2,  職員1) ,
		図書館2 = 図書館1.蔵書を追加する(本実体1,職員1) ,
		図書館3 = 図書館2.蔵書を追加する(本実体2,職員1) ,
		図書館4 = 図書館3.蔵書を追加する(本実体3,職員1) ,
		- = 図書館4.蔵書を追加する(本実体4,職員1) ,
		貸出1 = 職員1.本を貸す(today, 本実体1 ,利用者1) ,
		- = 職員1.本を貸す(today, 本実体4 ,利用者1),
		- = 職員1.本を返す(today, 本実体1),
		--図書館7 = 職員1.本を返す(today, 本実体3),
		- = 職員1.本を貸す(today, 本実体1 ,利用者2) 
	in
	return  
		貸出1.借用者を得る() = nil and 
		利用者2.職員() = false 
;
protected 準備する: () ==> ()
準備する() == テスト名 := "図書館貸出管理クラスT05:\tその他の検査";
protected 後始末する: () ==> ()
後始末する() == return;
end 図書館貸出管理クラスT05

/*
シナリオID
	制約違反の検査。
親UseCase
	なし
内容
	最大貸出数の検査。
*/
class 図書館貸出管理クラスT06 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	today = new SBCalendar().基準日(),
		図書館 = new 図書館クラス(),
		主題1 = 図書館.分野を作成する("ソフトウェア"),
		主題2 = 図書館.分野を作成する("小説"),
		主題3 = 図書館.分野を作成する("戦争"),
		著者1 = 図書館.著者を作成する("佐原伸","0422-55-7724"),
		著者2 = 図書館.著者を作成する("井上ひさし","不明"),
		本1 = 図書館.本を作成する("デザインパターン",著者1,{主題1}),
		本2 = 図書館.本を作成する("紙屋町桜ホテル",著者2,{主題2, 主題3}),
		本3 = 図書館.本を作成する("夢の裂け目",著者2,{主題2, 主題3}),
		本実体1 = 図書館.本実体を作成する("101",本1),
		本実体2 = 図書館.本実体を作成する("102",本1),
		本実体3 = 図書館.本実体を作成する("103",本2),
		本実体4 = 図書館.本実体を作成する("104",本3),
		職員1 = 図書館.職員を作成する(図書館,"11","宮崎寅蔵","不明"),
		利用者1 = 図書館.利用者を作成する(図書館,"10","チェ・ゲバラ","不明"),
		利用者2 = 図書館.利用者を作成する(図書館,"12","胡志明","不明"),
		図書館0 = 図書館.利用者を追加する(利用者1,  職員1) ,
		図書館1 = 図書館0.利用者を追加する(利用者2,  職員1) ,
		図書館2 = 図書館1.蔵書を追加する(本実体1,職員1) ,
		図書館3 = 図書館2.蔵書を追加する(本実体2,職員1) ,
		図書館4 = 図書館3.蔵書を追加する(本実体3,職員1) ,
		- = 図書館4.蔵書を追加する(本実体4,職員1) ,
		- = 職員1.本を貸す(today, 本実体1 ,利用者1) ,
		- = 職員1.本を貸す(today, 本実体2 ,利用者1) ,
		- = 職員1.本を貸す(today, 本実体3 ,利用者1) ,
		- = 職員1.本を返す(today, 本実体1),
		- = 職員1.本を貸す(today, 本実体4 ,利用者1) ,
		- = 職員1.本を貸す(today, 本実体1 ,利用者1) 
	in
	return
		利用者1.借りている本(職員1)  = {本1, 本2, 本3} and
		利用者1.借りている本(利用者1)  = {本1, 本2, 本3} and 
		利用者2.借りている本(職員1)  = {} and 
		利用者2.借りている本(利用者2)  = {} 
;
protected 準備する: () ==> ()
準備する() == テスト名 := "図書館貸出管理クラスT06:\t制約違反の検査";
protected 後始末する: () ==> ()
後始末する() == return;
end 図書館貸出管理クラスT06
\end{vdm_al}