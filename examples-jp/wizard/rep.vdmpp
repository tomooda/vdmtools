%--------------------------------------------------------------------------------
% WHAT
%    Internal representation of types for the Static Semantics of VDM++
% $Id: rep.vdm,v 1.19 2001/03/29 11:39:06 john Exp $
% Implemented in: ???
%--------------------------------------------------------------------------------

\section{Type Representations}

This section presents the type representation module which contains the type
definitions for the semantic domains which are used internally in
the static semantics to model the types from the abstract syntax
and the derived types.
The interface of the REP module can be seen from figure~\ref{rep}.

As mentioned in the introduction REP is imported by all
modules in the hierarchy and it does only import the AS module.

%\insertfig{rep.ps}{13cm}{Interface for the REP module}{\label{rep}}

\begin{vdm_al}
--module REP
class REP

--imports
--  from AS all,
--  from CI all
--  
--exports all
--
--definitions

  types
public 
    TypeRep    = InvTypeRep |
                 BasicTypeRep |
                 QuoteTypeRep |
		 CompositeTypeRep |
		 UnionTypeRep |
                 ProductTypeRep |
		 SetTypeRep |
		 SeqTypeRep | 
                 MapTypeRep |
                 TypeVarRep |
		 TypeParRep |
		 TypeNameRep |
		 FnTypeRep |
                 ObjRefTypeRep |
                 OverTypeRep |
                 OpTypeRep |
                 ExitTypeRep |
		 PolyTypeRep |
		 AllTypeRep |
		 TmpTypeRep |
                 UnitTypeRep |
                 RetTypeRep |
		 NilTypeRep |
		 EmptySetTypeRep |
		 EmptySeqTypeRep |
                 EmptyMapTypeRep;

public
InvTypeRep :: name      : AS`Name
              shape     : TypeRep
              invariant : AS`Pattern * AS`Expr;
	      
public
BasicTypeRep = BooleanTypeRep | NumericTypeRep | TokenTypeRep | CharTypeRep;

public
BooleanTypeRep :: ;

public
NumericTypeRep :: qtp : <NATONE> | <NAT> | <INTEGER> | <RAT> | <REAL>;

public
TokenTypeRep :: ;

public
CharTypeRep :: ;

public
QuoteTypeRep :: lit : AS`Name;

public
CompositeTypeRep :: nm : AS`Name
                    fields : seq of FieldRep;

public
FieldRep :: sel : [AS`Name]
            tp  : TypeRep
	    dc  : bool;
	    
public
UnionTypeRep :: tps : set of TypeRep;

public
ProductTypeRep :: tps : seq1 of TypeRep;

public
SetTypeRep :: elemtp : TypeRep;

public
SeqTypeRep :: elemtp : TypeRep;

public
MapTypeRep = GeneralMapTypeRep | InjectiveMapTypeRep;

public
GeneralMapTypeRep :: mapdom : TypeRep          
                     maprng : TypeRep;

public
InjectiveMapTypeRep :: mapdom : TypeRep                          
                       maprng : TypeRep;

public
TypeNameRep :: nm : AS`Name;

  
public
TypeVarRep :: nm : AS`Name; -- type variable from functions

public
TypeParRep :: nm : AS`Name; -- type parameters from modules and
                            -- types which are not imported by struct!

public
FnTypeRep = PartialFnTypeRep | TotalFnTypeRep;                         

public
PartialFnTypeRep :: fndom : DiscretionaryTypeRep | AllTypeRep
                    fnrng : TypeRep;

public
TotalFnTypeRep :: fndom : DiscretionaryTypeRep | AllTypeRep
                  fnrng : TypeRep;

public
DiscretionaryTypeRep = seq of TypeRep;

public
ObjRefTypeRep :: nm : AS`Name;
public
OverTypeRep :: tps : set of TypeRep;


public
    OpTypeRep :: Dom  : DiscretionaryTypeRep 
                 Rng  : TypeRep;

public
    ExitTypeRep :: tp : TypeRep;

public
    PolyTypeRep :: vars : seq of TypeVarRep
                   tp   : FnTypeRep;

public
    AllTypeRep :: ;

public
    TmpTypeRep :: ;

public
    UnitTypeRep :: ;
        
public
    RetTypeRep :: ;

public
    NilTypeRep ::;

public
    --EmptySetTypeRep ::;
    EmptySetTypeRep:: elemtp :- TypeRep;

public
    --EmptySeqTypeRep ::;
    EmptySeqTypeRep:: elemtp :- TypeRep;

public
    --EmptyMapTypeRep ::;
    EmptyMapTypeRep :: mapdom :- TypeRep
                       maprng :- TypeRep;

end REP
\end{vdm_al}

{\it TypeRep} is an extension of the abstract syntactic class {\it
Type} which is used internally by the VDM++ tools. Thus, the types
defined in this section should strictly speaking not be present in the
abstract syntax document. The main reason for having these
semantically used domains together with the rest of the abstract
syntax is that it has been decided that it is more convinient to use
the abstract syntax for types directly in the semantics (alternatively
one could define equivalent domain definitions for each of the types
which are present in the abstract syntax for {\it Type}).

\subsection{Test Coverage}

\begin{rtinfo}[MotGeneralNumericType]
{rtinfo.ast}[REP]
\end{rtinfo}
