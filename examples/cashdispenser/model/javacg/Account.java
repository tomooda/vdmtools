//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Fri 27-May-2005 by the VDM++ JAVA Code Generator
// (v6.8.5 - Wed 25-May-2005 13:41:53)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.*;
import java.util.*;
import jp.vdmtools.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class Account implements EvaluatePP {


// ***** VDMTOOLS START Name=Transaction KEEP=NO
  public static class Transaction implements Record {

    public String date;

    public Integer cardId;

    public Integer amount;


    public Transaction () {}


    public Transaction (String p1, Integer p2, Integer p3) {
      date = p1;
      cardId = p2;
      amount = p3;
    }


    public Object clone () {
      return new Transaction(date,cardId,amount);
    }


    public String toString () {
      return "mk_Account`Transaction(" + UTIL.toString(date) + "," + UTIL.toString(cardId) + "," + UTIL.toString(amount) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof Transaction)) 
        return false;
      else {        
        Transaction temp = (Transaction) obj;
        return UTIL.equals(date, temp.date) && UTIL.equals(cardId, temp.cardId) && UTIL.equals(amount, temp.amount);
      }
    }


    public int hashCode () {
      return (date == null ? 0 : date.hashCode()) + (cardId == null ? 0 : cardId.hashCode()) + (amount == null ? 0 : amount.hashCode());
    }

  }
// ***** VDMTOOLS END Name=Transaction
 ;

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=cards KEEP=NO
  private volatile HashMap cards = new HashMap();
// ***** VDMTOOLS END Name=cards

// ***** VDMTOOLS START Name=balance KEEP=NO
  private volatile Integer balance = null;
// ***** VDMTOOLS END Name=balance

// ***** VDMTOOLS START Name=transactions KEEP=NO
  private volatile Vector transactions = null;
// ***** VDMTOOLS END Name=transactions

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=AccountSentinel KEEP=NO
  class AccountSentinel extends Sentinel {

    public final int Create = 0;

    public final int AddCard = 1;

    public final int GetBalance = 2;

    public final int GetCardIds = 3;

    public final int Withdrawal = 4;

    public final int MakeStatement = 5;

    public final int nr_functions = 6;


    public AccountSentinel () throws CGException {}


    public AccountSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=AccountSentinel
;

// ***** VDMTOOLS START Name=evaluatePP KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new AccountSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=dailyLimit KEEP=NO
  private static final Integer dailyLimit = new Integer(2000);
// ***** VDMTOOLS END Name=dailyLimit


// ***** VDMTOOLS START Name=Account KEEP=NO
  public Account () throws CGException {
    try {
      setSentinel();
      transactions = new Vector();
    }
    catch (Exception e){
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Account


// ***** VDMTOOLS START Name=Create KEEP=NO
  public Account Create (final HashMap cs, final Integer b) throws CGException {
    sentinel.entering(((AccountSentinel) sentinel).Create);
    try {
      cards = (HashMap) UTIL.clone(cs);
      balance = UTIL.NumberToInt(UTIL.clone(b));
      return (Account) this;
    }
    finally {
      sentinel.leaving(((AccountSentinel) sentinel).Create);
    }
  }
// ***** VDMTOOLS END Name=Create


// ***** VDMTOOLS START Name=GetBalance KEEP=NO
  public Integer GetBalance () throws CGException {
    sentinel.entering(((AccountSentinel) sentinel).GetBalance);
    try {
      return balance;
    }
    finally {
      sentinel.leaving(((AccountSentinel) sentinel).GetBalance);
    }
  }
// ***** VDMTOOLS END Name=GetBalance


// ***** VDMTOOLS START Name=Withdrawal KEEP=NO
  public Boolean Withdrawal (final Integer cardId, final Integer amount, final String date) throws CGException {
    sentinel.entering(((AccountSentinel) sentinel).Withdrawal);
    try {      
      Transaction transaction = null;
      transaction = new Transaction(date,cardId,amount);      
      Boolean cond_9 = null;
      {
        if ((cond_9 = new Boolean((new Integer(balance.intValue() - amount.intValue()).intValue()) >= (new Integer(0).intValue()))).booleanValue()) {          
          Boolean var2_15 = null;          
          Integer var1_16 = null;          
          Vector par_18 = null;          
          Vector var2_20 = null;
          var2_20 = new Vector();
          var2_20.add(transaction);
          par_18 = (Vector) transactions.clone();
          par_18.addAll(var2_20);
          var1_16 = DateTotal(date, par_18);
          var2_15 = new Boolean((var1_16.intValue()) <= (dailyLimit.intValue()));
          cond_9 = var2_15;
        }
      }
      if (cond_9.booleanValue()) {
        balance = UTIL.NumberToInt(UTIL.clone(new Integer(balance.intValue() - amount.intValue())));
        transactions.add(transaction);
        return new Boolean(true);
      }
      else 
        return new Boolean(false);
    }
    finally {
      sentinel.leaving(((AccountSentinel) sentinel).Withdrawal);
    }
  }
// ***** VDMTOOLS END Name=Withdrawal


// ***** VDMTOOLS START Name=pre_Withdrawal KEEP=NO
  public Boolean pre_Withdrawal (final Integer cardId, final Integer amount, final String date) throws CGException {    
    Boolean varRes_4 = null;
    varRes_4 = new Boolean(cards.containsKey(cardId));
    return varRes_4;
  }
// ***** VDMTOOLS END Name=pre_Withdrawal


// ***** VDMTOOLS START Name=MakeStatement KEEP=NO
  public Letter MakeStatement (final Integer cardId, final String date) throws CGException {
    sentinel.entering(((AccountSentinel) sentinel).MakeStatement);
    try {      
      String tmpVal_4 = null;      
      Cardholder obj_5 = null;
      obj_5 = (Cardholder) (Cardholder) cards.get(cardId);
      tmpVal_4 = obj_5.GetName();      
      String nm = null;
      nm = tmpVal_4;      
      String tmpVal_8 = null;      
      Cardholder obj_9 = null;
      obj_9 = (Cardholder) (Cardholder) cards.get(cardId);
      tmpVal_8 = obj_9.GetAddress();      
      String addr = null;
      addr = tmpVal_8;
      {        
        Letter letter = new Letter();        
        Letter tmpObj_13 = null;
        tmpObj_13 = (Letter) letter.Create(nm, addr, date, transactions, balance);
        return (Letter) tmpObj_13;
      }
    }
    finally {
      sentinel.leaving(((AccountSentinel) sentinel).MakeStatement);
    }
  }
// ***** VDMTOOLS END Name=MakeStatement


// ***** VDMTOOLS START Name=pre_MakeStatement KEEP=NO
  public Boolean pre_MakeStatement (final Integer cardId, final String date) throws CGException {    
    Boolean varRes_3 = null;
    varRes_3 = new Boolean(cards.containsKey(cardId));
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_MakeStatement


// ***** VDMTOOLS START Name=GetCardIds KEEP=NO
  public HashSet GetCardIds () throws CGException {
    sentinel.entering(((AccountSentinel) sentinel).GetCardIds);
    try {      
      HashSet rexpr_1 = new HashSet();
      rexpr_1.clear();
      rexpr_1.addAll(cards.keySet());
      return rexpr_1;
    }
    finally {
      sentinel.leaving(((AccountSentinel) sentinel).GetCardIds);
    }
  }
// ***** VDMTOOLS END Name=GetCardIds


// ***** VDMTOOLS START Name=AddCard KEEP=NO
  private void AddCard (final Integer cId, final Cardholder ch) throws CGException {
    sentinel.entering(((AccountSentinel) sentinel).AddCard);
    try {      
      HashMap rhs_3 = new HashMap();      
      HashMap var2_5 = new HashMap();
      var2_5 = new HashMap();
      var2_5.put(cId, ch);
      {        
        HashMap m1_12 = (HashMap) cards.clone();        
        HashMap m2_13 = var2_5;        
        HashSet com_8 = new HashSet();
        com_8.addAll(m1_12.keySet());
        com_8.retainAll(m2_13.keySet());        
        boolean all_applies_9 = true;        
        Object d_10;
        for (Iterator bb_11 = com_8.iterator(); bb_11.hasNext() && all_applies_9; ) {
          d_10 = bb_11.next();
          all_applies_9 = m1_12.get(d_10).equals(m2_13.get(d_10));
        }
        if (!all_applies_9) 
          UTIL.RunTime("Run-Time Error:Map Merge: Incompatible maps");
        m1_12.putAll(m2_13);
        rhs_3 = m1_12;
      }
      cards = (HashMap) UTIL.clone(rhs_3);
    }
    finally {
      sentinel.leaving(((AccountSentinel) sentinel).AddCard);
    }
  }
// ***** VDMTOOLS END Name=AddCard


// ***** VDMTOOLS START Name=pre_AddCard KEEP=NO
  private Boolean pre_AddCard (final Integer cId, final Cardholder ch) throws CGException {    
    Boolean varRes_3 = null;    
    HashSet var2_5 = new HashSet();
    var2_5.clear();
    var2_5.addAll(cards.keySet());
    varRes_3 = new Boolean(!var2_5.contains(cId));
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_AddCard


// ***** VDMTOOLS START Name=TransactionsInvariant KEEP=NO
  private Boolean TransactionsInvariant (final Vector ts) throws CGException {    
    Boolean varRes_2 = null;    
    boolean tmpQuant_3 = true;
    {      
      boolean succ_9 = true;      
      HashSet e_set_10 = new HashSet();      
      HashSet res_s_11 = new HashSet();{        
        boolean succ_16 = true;        
        HashSet e_set_17 = new HashSet();        
        HashSet riseq_19 = new HashSet();        
        int max_20 = ts.size();
        for (int i_21 = 1; i_21 <= max_20; i_21++) 
          riseq_19.add(new Integer(i_21));
        e_set_17 = riseq_19;        
        Integer i = null;
        {
          for (Iterator enum_23 = e_set_17.iterator(); enum_23.hasNext(); ) {            
            Integer elem_22 = UTIL.NumberToInt(enum_23.next());
            succ_16 = true;
            i = elem_22;
            if (succ_16) {              
              String res_s_12 = null;              
              Transaction tmpRec_13 = null;
              if (1 <= ((Integer) i).intValue() && ((Integer) i).intValue() <= ts.size()) 
                tmpRec_13 = (Transaction) ts.get(((Integer) i).intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              res_s_12 = (tmpRec_13).date;
              res_s_11.add(res_s_12);
            }
          }
        }
      }
      e_set_10 = res_s_11;      
      String date = null;
      {
        for (Iterator enum_25 = e_set_10.iterator(); enum_25.hasNext() && tmpQuant_3; ) {          
          String elem_24 = UTIL.ConvertToString(enum_25.next());
          succ_9 = true;
          date = elem_24;
          if (succ_9) {
            if (new Boolean((DateTotal(date, ts).intValue()) <= (dailyLimit.intValue())).booleanValue()) {}
            else 
              tmpQuant_3 = false;
          }
        }
      }
    }
    varRes_2 = new Boolean(tmpQuant_3);
    return varRes_2;
  }
// ***** VDMTOOLS END Name=TransactionsInvariant


// ***** VDMTOOLS START Name=DateTotal KEEP=NO
  private Integer DateTotal (final String date, final Vector ts) throws CGException {    
    Double varRes_3 = null;    
    Vector par_4 = null;
    {      
      Vector res_l_5 = new Vector();      
      HashSet resBind_s_7 = new HashSet();      
      HashSet riseq_11 = new HashSet();      
      int max_12 = ts.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Integer(i_13));
      resBind_s_7 = riseq_11;      
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);      
      boolean succ_8 = true;      
      Integer i = null;
      for (Iterator enum_25 = bind_l_6.iterator(); enum_25.hasNext(); ) {        
        Integer e_9 = UTIL.NumberToInt(enum_25.next());
        i = e_9;
        if (succ_8) {          
          Boolean pred_18 = null;          
          String var1_19 = null;          
          Transaction tmpRec_20 = null;
          if (1 <= ((Integer) i).intValue() && ((Integer) i).intValue() <= ts.size()) 
            tmpRec_20 = (Transaction) ts.get(((Integer) i).intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var1_19 = (tmpRec_20).date;
          pred_18 = new Boolean(UTIL.equals(var1_19, date));
          if (pred_18.booleanValue()) {            
            Integer reselem_14 = null;            
            Transaction tmpRec_15 = null;
            if (1 <= ((Integer) i).intValue() && ((Integer) i).intValue() <= ts.size()) 
              tmpRec_15 = (Transaction) ts.get(((Integer) i).intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_14 = (tmpRec_15).amount;
            res_l_5.add(reselem_14);
          }
        }
      }
      par_4 = res_l_5;
    }
    varRes_3 = Sum(par_4);
    return UTIL.NumberToInt(varRes_3);
  }
// ***** VDMTOOLS END Name=DateTotal


// ***** VDMTOOLS START Name=Sum KEEP=NO
  private Double Sum (final Vector rs) throws CGException {    
    Double varRes_2 = null;
    if (new Boolean(UTIL.equals(rs, new Vector())).booleanValue()) 
      varRes_2 = UTIL.NumberToReal(new Double(0));
    else 
      varRes_2 = new Double(UTIL.NumberToReal(rs.get(0)).doubleValue() + Sum(new Vector(rs.subList(1, rs.size()))).doubleValue());
    return varRes_2;
  }
// ***** VDMTOOLS END Name=Sum

}
;
