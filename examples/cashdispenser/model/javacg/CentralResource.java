//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Fri 27-May-2005 by the VDM++ JAVA Code Generator
// (v6.8.5 - Wed 25-May-2005 13:41:53)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.*;
import java.util.*;
import jp.vdmtools.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class CentralResource implements EvaluatePP {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=accounts KEEP=NO
  private volatile HashMap accounts = new HashMap();
// ***** VDMTOOLS END Name=accounts

// ***** VDMTOOLS START Name=numberOfTries KEEP=NO
  private volatile HashMap numberOfTries = new HashMap();
// ***** VDMTOOLS END Name=numberOfTries

// ***** VDMTOOLS START Name=illegalCards KEEP=NO
  private volatile HashSet illegalCards = new HashSet();
// ***** VDMTOOLS END Name=illegalCards

// ***** VDMTOOLS START Name=letterbox KEEP=NO
  private volatile Letterbox letterbox = null;
// ***** VDMTOOLS END Name=letterbox

// ***** VDMTOOLS START Name=clock KEEP=NO
  private volatile Clock clock = null;
// ***** VDMTOOLS END Name=clock

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=CentralResourceSentinel KEEP=NO
  class CentralResourceSentinel extends Sentinel {

    public final int Create = 0;

    public final int AddAccount = 1;

    public final int GetBalance = 2;

    public final int Withdrawal = 3;

    public final int IsLegalCard = 4;

    public final int PostStatement = 5;

    public final int AddIllegalCard = 6;

    public final int IncrNumberOfTries = 7;

    public final int ResetNumberOfTries = 8;

    public final int NumberOfTriesExceeded = 9;

    public final int nr_functions = 10;


    public CentralResourceSentinel () throws CGException {}


    public CentralResourceSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=CentralResourceSentinel
;

// ***** VDMTOOLS START Name=evaluatePP KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new CentralResourceSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=maxNumberOfTries KEEP=NO
  private static final Integer maxNumberOfTries = new Integer(3);
// ***** VDMTOOLS END Name=maxNumberOfTries


// ***** VDMTOOLS START Name=CentralResource KEEP=NO
  public CentralResource () throws CGException {
    try {
      setSentinel();
      accounts = new HashMap();
      numberOfTries = new HashMap();
      illegalCards = new HashSet();
    }
    catch (Exception e){
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=CentralResource


// ***** VDMTOOLS START Name=Create KEEP=NO
  public CentralResource Create (final Clock c, final Letterbox l) throws CGException {
    sentinel.entering(((CentralResourceSentinel) sentinel).Create);
    try {
      clock = (Clock) UTIL.clone(c);
      letterbox = (Letterbox) UTIL.clone(l);
      return (CentralResource) this;
    }
    finally {
      sentinel.leaving(((CentralResourceSentinel) sentinel).Create);
    }
  }
// ***** VDMTOOLS END Name=Create


// ***** VDMTOOLS START Name=GetBalance KEEP=NO
  public Integer GetBalance (final Integer accountId) throws CGException {
    sentinel.entering(((CentralResourceSentinel) sentinel).GetBalance);
    try {      
      Boolean cond_2 = null;
      cond_2 = new Boolean(accounts.containsKey(accountId));
      if (cond_2.booleanValue()) {        
        Integer tmpObj_7 = null;        
        Account obj_8 = null;
        obj_8 = (Account) (Account) accounts.get(accountId);
        tmpObj_7 = obj_8.GetBalance();
        return tmpObj_7;
      }
      else 
        return null;
    }
    finally {
      sentinel.leaving(((CentralResourceSentinel) sentinel).GetBalance);
    }
  }
// ***** VDMTOOLS END Name=GetBalance


// ***** VDMTOOLS START Name=Withdrawal KEEP=NO
  public Boolean Withdrawal (final Integer accountId, final Integer cardId, final Integer amount) throws CGException {
    sentinel.entering(((CentralResourceSentinel) sentinel).Withdrawal);
    try {
      if (IsLegalCard(accountId, cardId).booleanValue()) {        
        Boolean tmpObj_9 = null;        
        Account obj_10 = null;
        obj_10 = (Account) (Account) accounts.get(accountId);        
        String par_15 = null;
        par_15 = clock.GetDate();
        tmpObj_9 = obj_10.Withdrawal(cardId, amount, par_15);
        return tmpObj_9;
      }
      else 
        return new Boolean(false);
    }
    finally {
      sentinel.leaving(((CentralResourceSentinel) sentinel).Withdrawal);
    }
  }
// ***** VDMTOOLS END Name=Withdrawal


// ***** VDMTOOLS START Name=PostStatement KEEP=NO
  public Boolean PostStatement (final Integer accountId, final Integer cardId) throws CGException {
    sentinel.entering(((CentralResourceSentinel) sentinel).PostStatement);
    try {
      if (IsLegalCard(accountId, cardId).booleanValue()) {        
        Letter par_8 = null;        
        Account obj_9 = null;
        obj_9 = (Account) (Account) accounts.get(accountId);        
        String par_13 = null;
        par_13 = clock.GetDate();
        par_8 = (Letter) obj_9.MakeStatement(cardId, par_13);
        letterbox.PostStatement((Letter) par_8);
        return new Boolean(true);
      }
      else 
        return new Boolean(false);
    }
    finally {
      sentinel.leaving(((CentralResourceSentinel) sentinel).PostStatement);
    }
  }
// ***** VDMTOOLS END Name=PostStatement


// ***** VDMTOOLS START Name=IsLegalCard KEEP=NO
  public Boolean IsLegalCard (final Integer accountId, final Integer cardId) throws CGException {
    sentinel.entering(((CentralResourceSentinel) sentinel).IsLegalCard);
    try {      
      Boolean rexpr_3 = null;      
      Boolean var1_4 = null;      
      Boolean var1_5 = null;
      var1_5 = new Boolean(!illegalCards.contains(cardId));
      {
        if ((var1_4 = var1_5).booleanValue()) {          
          Boolean var2_8 = null;
          var2_8 = new Boolean(accounts.containsKey(accountId));
          var1_4 = var2_8;
        }
      }
      {
        if ((rexpr_3 = var1_4).booleanValue()) {          
          Boolean var2_11 = null;          
          HashSet var2_13 = new HashSet();          
          Account obj_14 = null;
          obj_14 = (Account) (Account) accounts.get(accountId);
          var2_13 = obj_14.GetCardIds();
          var2_11 = new Boolean(var2_13.contains(cardId));
          rexpr_3 = var2_11;
        }
      }
      return rexpr_3;
    }
    finally {
      sentinel.leaving(((CentralResourceSentinel) sentinel).IsLegalCard);
    }
  }
// ***** VDMTOOLS END Name=IsLegalCard


// ***** VDMTOOLS START Name=NumberOfTriesExceeded KEEP=NO
  public Boolean NumberOfTriesExceeded (final Integer cardId) throws CGException {
    sentinel.entering(((CentralResourceSentinel) sentinel).NumberOfTriesExceeded);
    try {
      return new Boolean((UTIL.NumberToInt(numberOfTries.get(cardId)).intValue()) >= (maxNumberOfTries.intValue()));
    }
    finally {
      sentinel.leaving(((CentralResourceSentinel) sentinel).NumberOfTriesExceeded);
    }
  }
// ***** VDMTOOLS END Name=NumberOfTriesExceeded


// ***** VDMTOOLS START Name=ResetNumberOfTries KEEP=NO
  public void ResetNumberOfTries (final Integer cardId) throws CGException {
    sentinel.entering(((CentralResourceSentinel) sentinel).ResetNumberOfTries);
    try {
      numberOfTries.put(cardId, new Integer(0));
    }
    finally {
      sentinel.leaving(((CentralResourceSentinel) sentinel).ResetNumberOfTries);
    }
  }
// ***** VDMTOOLS END Name=ResetNumberOfTries


// ***** VDMTOOLS START Name=IncrNumberOfTries KEEP=NO
  public void IncrNumberOfTries (final Integer cardId) throws CGException {
    sentinel.entering(((CentralResourceSentinel) sentinel).IncrNumberOfTries);
    try {
      numberOfTries.put(cardId, new Integer(UTIL.NumberToInt(numberOfTries.get(cardId)).intValue() + new Integer(1).intValue()));
    }
    finally {
      sentinel.leaving(((CentralResourceSentinel) sentinel).IncrNumberOfTries);
    }
  }
// ***** VDMTOOLS END Name=IncrNumberOfTries


// ***** VDMTOOLS START Name=AddAccount KEEP=NO
  public void AddAccount (final Integer accId, final Account acc) throws CGException {
    sentinel.entering(((CentralResourceSentinel) sentinel).AddAccount);
    try {      
      HashMap rhs_3 = new HashMap();      
      HashMap modmap_4 = new HashMap();      
      HashMap res_m_7 = new HashMap();
      {        
        boolean succ_10 = true;        
        HashSet e_set_11 = new HashSet();
        e_set_11 = acc.GetCardIds();        
        Integer cId = null;
        {
          for (Iterator enum_13 = e_set_11.iterator(); enum_13.hasNext(); ) {            
            Integer elem_12 = UTIL.NumberToInt(enum_13.next());
            succ_10 = true;
            cId = elem_12;
            if (succ_10) 
              res_m_7.put(cId, new Integer(0));
          }
        }
      }
      modmap_4 = res_m_7;
      rhs_3 = new HashMap(numberOfTries);
      rhs_3.putAll(modmap_4);
      numberOfTries = (HashMap) UTIL.clone(rhs_3);
      accounts.put(accId, acc);
    }
    finally {
      sentinel.leaving(((CentralResourceSentinel) sentinel).AddAccount);
    }
  }
// ***** VDMTOOLS END Name=AddAccount


// ***** VDMTOOLS START Name=pre_AddAccount KEEP=NO
  public Boolean pre_AddAccount (final Integer accId, final Account acc) throws CGException {    
    Boolean varRes_3 = null;    
    HashSet var2_5 = new HashSet();
    var2_5.clear();
    var2_5.addAll(accounts.keySet());
    varRes_3 = new Boolean(!var2_5.contains(accId));
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_AddAccount


// ***** VDMTOOLS START Name=AddIllegalCard KEEP=NO
  public void AddIllegalCard (final Integer cId) throws CGException {
    sentinel.entering(((CentralResourceSentinel) sentinel).AddIllegalCard);
    try {
      illegalCards.add(cId);
    }
    finally {
      sentinel.leaving(((CentralResourceSentinel) sentinel).AddIllegalCard);
    }
  }
// ***** VDMTOOLS END Name=AddIllegalCard

}
;
