//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Fri 27-May-2005 by the VDM++ JAVA Code Generator
// (v6.8.5 - Wed 25-May-2005 13:41:53)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.*;
import java.util.*;
import jp.vdmtools.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class Letterbox implements EvaluatePP {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=statements KEEP=NO
  private volatile Vector statements = null;
// ***** VDMTOOLS END Name=statements

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=LetterboxSentinel KEEP=NO
  class LetterboxSentinel extends Sentinel {

    public final int PostStatement = 0;

    public final int GetLastStatement = 1;

    public final int nr_functions = 2;


    public LetterboxSentinel () throws CGException {}


    public LetterboxSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=LetterboxSentinel
;

// ***** VDMTOOLS START Name=evaluatePP KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new LetterboxSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=Letterbox KEEP=NO
  public Letterbox () throws CGException {
    try {
      setSentinel();
      statements = new Vector();
    }
    catch (Exception e){
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Letterbox


// ***** VDMTOOLS START Name=PostStatement KEEP=NO
  public void PostStatement (final Letter letter) throws CGException {
    sentinel.entering(((LetterboxSentinel) sentinel).PostStatement);
    try {
      statements.add(letter);
    }
    finally {
      sentinel.leaving(((LetterboxSentinel) sentinel).PostStatement);
    }
  }
// ***** VDMTOOLS END Name=PostStatement


// ***** VDMTOOLS START Name=GetLastStatement KEEP=NO
//  private Letter GetLastStatement () throws CGException {
  public Letter GetLastStatement () throws CGException {
    sentinel.entering(((LetterboxSentinel) sentinel).GetLastStatement);
    try {      
      Letter rexpr_1 = null;
      if (1 <= ((Integer) new Integer(statements.size())).intValue() && ((Integer) new Integer(statements.size())).intValue() <= statements.size()) 
        rexpr_1 = (Letter) statements.get(((Integer) new Integer(statements.size())).intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      return (Letter) rexpr_1;
    }
    finally {
      sentinel.leaving(((LetterboxSentinel) sentinel).GetLastStatement);
    }
  }
// ***** VDMTOOLS END Name=GetLastStatement


// ***** VDMTOOLS START Name=pre_GetLastStatement KEEP=NO
  private Boolean pre_GetLastStatement () throws CGException {
    return new Boolean(!UTIL.equals(statements, new Vector()));
  }
// ***** VDMTOOLS END Name=pre_GetLastStatement

}
;
