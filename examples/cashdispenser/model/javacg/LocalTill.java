//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Fri 27-May-2005 by the VDM++ JAVA Code Generator
// (v6.8.5 - Wed 25-May-2005 13:41:53)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.*;
import java.util.*;
import jp.vdmtools.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class LocalTill implements EvaluatePP , Runnable {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=c KEEP=NO
  private volatile Channel c = null;
// ***** VDMTOOLS END Name=c

// ***** VDMTOOLS START Name=resource KEEP=NO
  private volatile CentralResource resource = null;
// ***** VDMTOOLS END Name=resource

// ***** VDMTOOLS START Name=enabled KEEP=NO
  private volatile Boolean enabled = null;
// ***** VDMTOOLS END Name=enabled

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel

// ***** VDMTOOLS START Name=procThread KEEP=NO
  VDMThread procThread;
// ***** VDMTOOLS END Name=procThread


// ***** VDMTOOLS START Name=LocalTillSentinel KEEP=NO
  class LocalTillSentinel extends Sentinel {

    public final int Fail = 0;

    public final int Create = 1;

    public final int Repair = 2;

    public final int ProcessRequest = 3;

    public final int nr_functions = 4;


    public LocalTillSentinel () throws CGException {}


    public LocalTillSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=LocalTillSentinel
;

// ***** VDMTOOLS START Name=evaluatePP KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new LocalTillSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=run KEEP=NO
  public void run () {
    try {
      while ( enabled.booleanValue()){        
        Channel.Request tmpVal_131 = null;
        tmpVal_131 = c.ReceiveRequest();        
        Channel.Request req_1 = null;
        req_1 = tmpVal_131;
        if (enabled.booleanValue()) 
          ProcessRequest(req_1);
      }
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=run


// ***** VDMTOOLS START Name=start KEEP=NO
  public void start () throws CGException {
    procThread = new VDMThread(this);
    procThread.start();
  }
// ***** VDMTOOLS END Name=start


// ***** VDMTOOLS START Name=LocalTill KEEP=NO
  public LocalTill () throws CGException {
    try {
      setSentinel();
      enabled = new Boolean(true);
    }
    catch (Exception e){
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=LocalTill


// ***** VDMTOOLS START Name=ProcessRequest KEEP=NO
  private void ProcessRequest (final Channel.Request req) throws CGException {
    sentinel.entering(((LocalTillSentinel) sentinel).ProcessRequest);
    try {      
      Object respdata = null;      
      boolean succ_2 = true;
      {        
        Integer amt = null;        
        Integer accId_3 = null;        
        Integer cardId_5 = null;
        succ_2 = true;
        if (req instanceof Channel.Request) {          
          Vector e_l_103 = new Vector();
          e_l_103.add(req.command);
          e_l_103.add(req.data);
          if (succ_2 = 2 == e_l_103.size()) {
            succ_2 = true;
            if (!UTIL.equals(e_l_103.get(0), new quotes.Withdrawal())) 
              succ_2 = false;
            if (succ_2) {              
              boolean succ_set_v_109 = false;
              if ((e_l_103.get(2 - 1) instanceof HashSet)) {                
                HashSet tmpvarExpr_110 = (HashSet) e_l_103.get(2 - 1);
                if (tmpvarExpr_110.size() == 3) {                  
                  Vector valSeq_106 = new Vector();
                  for (Iterator enum_112 = tmpvarExpr_110.iterator(); enum_112.hasNext(); ) {                    
                    Channel.ReqData e_111 = (Channel.ReqData) enum_112.next();
                    valSeq_106.add(e_111);
                  }                  
                  HashSet permSL_107 = UTIL.Permute(valSeq_106);
                  for (Iterator enum_119 = permSL_107.iterator(); enum_119.hasNext() && !succ_set_v_109; ) {                    
                    Vector perm_108 = (Vector) UTIL.ConvertToList(enum_119.next());
                    if (succ_set_v_109 = 3 == perm_108.size()) {
                      succ_set_v_109 = true;
                      if ((Channel.ReqData) perm_108.get(0) instanceof Channel.AccountId) {                        
                        Vector e_l_113 = new Vector();
                        e_l_113.add(((Channel.AccountId) (Channel.ReqData) perm_108.get(0)).val);
                        if (succ_set_v_109 = 1 == e_l_113.size()) 
                          accId_3 = UTIL.NumberToInt(e_l_113.get(0));
                      }
                      else 
                        succ_set_v_109 = false;
                      if (succ_set_v_109) {
                        if ((Channel.ReqData) perm_108.get(2 - 1) instanceof Channel.CardId) {                          
                          Vector e_l_115 = new Vector();
                          e_l_115.add(((Channel.CardId) (Channel.ReqData) perm_108.get(2 - 1)).val);
                          if (succ_set_v_109 = 1 == e_l_115.size()) 
                            cardId_5 = UTIL.NumberToInt(e_l_115.get(0));
                        }
                        else 
                          succ_set_v_109 = false;
                      }
                      if (succ_set_v_109) {
                        if ((Channel.ReqData) perm_108.get(3 - 1) instanceof Channel.Amount) {                          
                          Vector e_l_117 = new Vector();
                          e_l_117.add(((Channel.Amount) (Channel.ReqData) perm_108.get(3 - 1)).val);
                          if (succ_set_v_109 = 1 == e_l_117.size()) 
                            amt = UTIL.NumberToInt(e_l_117.get(0));
                        }
                        else 
                          succ_set_v_109 = false;
                      }
                    }
                  }
                }
                else 
                  succ_set_v_109 = false;
              }
              else 
                succ_set_v_109 = false;
              if (!succ_set_v_109) 
                succ_2 = false;
            }
          }
        }
        else 
          succ_2 = false;
        if (succ_2) {          
          Boolean rhs_120 = null;
          rhs_120 = resource.Withdrawal(accId_3, cardId_5, amt);
          respdata = UTIL.clone(rhs_120);
        }
        else {          
          Integer accId_2 = null;          
          Integer cardId_4 = null;
          succ_2 = true;
          if (req instanceof Channel.Request) {            
            Vector e_l_85 = new Vector();
            e_l_85.add(req.command);
            e_l_85.add(req.data);
            if (succ_2 = 2 == e_l_85.size()) {
              succ_2 = true;
              if (!UTIL.equals(e_l_85.get(0), new quotes.PostStmt())) 
                succ_2 = false;
              if (succ_2) {                
                boolean succ_set_v_91 = false;
                if ((e_l_85.get(2 - 1) instanceof HashSet)) {                  
                  HashSet tmpvarExpr_92 = (HashSet) e_l_85.get(2 - 1);
                  if (tmpvarExpr_92.size() == 2) {                    
                    Vector valSeq_88 = new Vector();
                    for (Iterator enum_94 = tmpvarExpr_92.iterator(); enum_94.hasNext(); ) {                      
                      Channel.ReqData e_93 = (Channel.ReqData) enum_94.next();
                      valSeq_88.add(e_93);
                    }                    
                    HashSet permSL_89 = UTIL.Permute(valSeq_88);
                    for (Iterator enum_99 = permSL_89.iterator(); enum_99.hasNext() && !succ_set_v_91; ) {                      
                      Vector perm_90 = (Vector) UTIL.ConvertToList(enum_99.next());
                      if (succ_set_v_91 = 2 == perm_90.size()) {
                        succ_set_v_91 = true;
                        if ((Channel.ReqData) perm_90.get(0) instanceof Channel.AccountId) {                          
                          Vector e_l_95 = new Vector();
                          e_l_95.add(((Channel.AccountId) (Channel.ReqData) perm_90.get(0)).val);
                          if (succ_set_v_91 = 1 == e_l_95.size()) 
                            accId_2 = UTIL.NumberToInt(e_l_95.get(0));
                        }
                        else 
                          succ_set_v_91 = false;
                        if (succ_set_v_91) {
                          if ((Channel.ReqData) perm_90.get(2 - 1) instanceof Channel.CardId) {                            
                            Vector e_l_97 = new Vector();
                            e_l_97.add(((Channel.CardId) (Channel.ReqData) perm_90.get(2 - 1)).val);
                            if (succ_set_v_91 = 1 == e_l_97.size()) 
                              cardId_4 = UTIL.NumberToInt(e_l_97.get(0));
                          }
                          else 
                            succ_set_v_91 = false;
                        }
                      }
                    }
                  }
                  else 
                    succ_set_v_91 = false;
                }
                else 
                  succ_set_v_91 = false;
                if (!succ_set_v_91) 
                  succ_2 = false;
              }
            }
          }
          else 
            succ_2 = false;
          if (succ_2) {            
            Boolean rhs_100 = null;
            rhs_100 = resource.PostStatement(accId_2, cardId_4);
            respdata = UTIL.clone(rhs_100);
          }
          else {            
            Integer accId_1 = null;            
            Integer cardId_3 = null;
            succ_2 = true;
            if (req instanceof Channel.Request) {              
              Vector e_l_67 = new Vector();
              e_l_67.add(req.command);
              e_l_67.add(req.data);
              if (succ_2 = 2 == e_l_67.size()) {
                succ_2 = true;
                if (!UTIL.equals(e_l_67.get(0), new quotes.IsLegalCard())) 
                  succ_2 = false;
                if (succ_2) {                  
                  boolean succ_set_v_73 = false;
                  if ((e_l_67.get(2 - 1) instanceof HashSet)) {                    
                    HashSet tmpvarExpr_74 = (HashSet) e_l_67.get(2 - 1);
                    if (tmpvarExpr_74.size() == 2) {                      
                      Vector valSeq_70 = new Vector();
                      for (Iterator enum_76 = tmpvarExpr_74.iterator(); enum_76.hasNext(); ) {                        
                        Channel.ReqData e_75 = (Channel.ReqData) enum_76.next();
                        valSeq_70.add(e_75);
                      }                      
                      HashSet permSL_71 = UTIL.Permute(valSeq_70);
                      for (Iterator enum_81 = permSL_71.iterator(); enum_81.hasNext() && !succ_set_v_73; ) {                        
                        Vector perm_72 = (Vector) UTIL.ConvertToList(enum_81.next());
                        if (succ_set_v_73 = 2 == perm_72.size()) {
                          succ_set_v_73 = true;
                          if ((Channel.ReqData) perm_72.get(0) instanceof Channel.AccountId) {                            
                            Vector e_l_77 = new Vector();
                            e_l_77.add(((Channel.AccountId) (Channel.ReqData) perm_72.get(0)).val);
                            if (succ_set_v_73 = 1 == e_l_77.size()) 
                              accId_1 = UTIL.NumberToInt(e_l_77.get(0));
                          }
                          else 
                            succ_set_v_73 = false;
                          if (succ_set_v_73) {
                            if ((Channel.ReqData) perm_72.get(2 - 1) instanceof Channel.CardId) {                              
                              Vector e_l_79 = new Vector();
                              e_l_79.add(((Channel.CardId) (Channel.ReqData) perm_72.get(2 - 1)).val);
                              if (succ_set_v_73 = 1 == e_l_79.size()) 
                                cardId_3 = UTIL.NumberToInt(e_l_79.get(0));
                            }
                            else 
                              succ_set_v_73 = false;
                          }
                        }
                      }
                    }
                    else 
                      succ_set_v_73 = false;
                  }
                  else 
                    succ_set_v_73 = false;
                  if (!succ_set_v_73) 
                    succ_2 = false;
                }
              }
            }
            else 
              succ_2 = false;
            if (succ_2) {              
              Boolean rhs_82 = null;
              rhs_82 = resource.IsLegalCard(accId_1, cardId_3);
              respdata = UTIL.clone(rhs_82);
            }
            else {              
              Integer accId = null;
              succ_2 = true;
              if (req instanceof Channel.Request) {                
                Vector e_l_52 = new Vector();
                e_l_52.add(req.command);
                e_l_52.add(req.data);
                if (succ_2 = 2 == e_l_52.size()) {
                  succ_2 = true;
                  if (!UTIL.equals(e_l_52.get(0), new quotes.GetBalance())) 
                    succ_2 = false;
                  if (succ_2) {                    
                    boolean succ_set_v_58 = false;
                    if ((e_l_52.get(2 - 1) instanceof HashSet)) {                      
                      HashSet tmpvarExpr_59 = (HashSet) e_l_52.get(2 - 1);
                      if (tmpvarExpr_59.size() == 1) {                        
                        Vector valSeq_55 = new Vector();
                        for (Iterator enum_61 = tmpvarExpr_59.iterator(); enum_61.hasNext(); ) {                          
                          Channel.ReqData e_60 = (Channel.ReqData) enum_61.next();
                          valSeq_55.add(e_60);
                        }                        
                        HashSet permSL_56 = UTIL.Permute(valSeq_55);
                        for (Iterator enum_64 = permSL_56.iterator(); enum_64.hasNext() && !succ_set_v_58; ) {                          
                          Vector perm_57 = (Vector) UTIL.ConvertToList(enum_64.next());
                          if (succ_set_v_58 = 1 == perm_57.size()) {
                            succ_set_v_58 = true;
                            if ((Channel.ReqData) perm_57.get(0) instanceof Channel.AccountId) {                              
                              Vector e_l_62 = new Vector();
                              e_l_62.add(((Channel.AccountId) (Channel.ReqData) perm_57.get(0)).val);
                              if (succ_set_v_58 = 1 == e_l_62.size()) 
                                accId = UTIL.NumberToInt(e_l_62.get(0));
                            }
                            else 
                              succ_set_v_58 = false;
                          }
                        }
                      }
                      else 
                        succ_set_v_58 = false;
                    }
                    else 
                      succ_set_v_58 = false;
                    if (!succ_set_v_58) 
                      succ_2 = false;
                  }
                }
              }
              else 
                succ_2 = false;
              if (succ_2) {                
                Integer rhs_65 = null;
                rhs_65 = resource.GetBalance(accId);
                respdata = UTIL.clone(rhs_65);
              }
              else {                
                Integer cardId_2 = null;
                succ_2 = true;
                if (req instanceof Channel.Request) {                  
                  Vector e_l_37 = new Vector();
                  e_l_37.add(req.command);
                  e_l_37.add(req.data);
                  if (succ_2 = 2 == e_l_37.size()) {
                    succ_2 = true;
                    if (!UTIL.equals(e_l_37.get(0), new quotes.TriesExceeded())) 
                      succ_2 = false;
                    if (succ_2) {                      
                      boolean succ_set_v_43 = false;
                      if ((e_l_37.get(2 - 1) instanceof HashSet)) {                        
                        HashSet tmpvarExpr_44 = (HashSet) e_l_37.get(2 - 1);
                        if (tmpvarExpr_44.size() == 1) {                          
                          Vector valSeq_40 = new Vector();
                          for (Iterator enum_46 = tmpvarExpr_44.iterator(); enum_46.hasNext(); ) {                            
                            Channel.ReqData e_45 = (Channel.ReqData) enum_46.next();
                            valSeq_40.add(e_45);
                          }                          
                          HashSet permSL_41 = UTIL.Permute(valSeq_40);
                          for (Iterator enum_49 = permSL_41.iterator(); enum_49.hasNext() && !succ_set_v_43; ) {                            
                            Vector perm_42 = (Vector) UTIL.ConvertToList(enum_49.next());
                            if (succ_set_v_43 = 1 == perm_42.size()) {
                              succ_set_v_43 = true;
                              if ((Channel.ReqData) perm_42.get(0) instanceof Channel.CardId) {                                
                                Vector e_l_47 = new Vector();
                                e_l_47.add(((Channel.CardId) (Channel.ReqData) perm_42.get(0)).val);
                                if (succ_set_v_43 = 1 == e_l_47.size()) 
                                  cardId_2 = UTIL.NumberToInt(e_l_47.get(0));
                              }
                              else 
                                succ_set_v_43 = false;
                            }
                          }
                        }
                        else 
                          succ_set_v_43 = false;
                      }
                      else 
                        succ_set_v_43 = false;
                      if (!succ_set_v_43) 
                        succ_2 = false;
                    }
                  }
                }
                else 
                  succ_2 = false;
                if (succ_2) {                  
                  Boolean rhs_50 = null;
                  rhs_50 = resource.NumberOfTriesExceeded(cardId_2);
                  respdata = UTIL.clone(rhs_50);
                }
                else {                  
                  Integer cardId_1 = null;
                  succ_2 = true;
                  if (req instanceof Channel.Request) {                    
                    Vector e_l_21 = new Vector();
                    e_l_21.add(req.command);
                    e_l_21.add(req.data);
                    if (succ_2 = 2 == e_l_21.size()) {
                      succ_2 = true;
                      if (!UTIL.equals(e_l_21.get(0), new quotes.ResetTries())) 
                        succ_2 = false;
                      if (succ_2) {                        
                        boolean succ_set_v_27 = false;
                        if ((e_l_21.get(2 - 1) instanceof HashSet)) {                          
                          HashSet tmpvarExpr_28 = (HashSet) e_l_21.get(2 - 1);
                          if (tmpvarExpr_28.size() == 1) {                            
                            Vector valSeq_24 = new Vector();
                            for (Iterator enum_30 = tmpvarExpr_28.iterator(); enum_30.hasNext(); ) {                              
                              Channel.ReqData e_29 = (Channel.ReqData) enum_30.next();
                              valSeq_24.add(e_29);
                            }                            
                            HashSet permSL_25 = UTIL.Permute(valSeq_24);
                            for (Iterator enum_33 = permSL_25.iterator(); enum_33.hasNext() && !succ_set_v_27; ) {                              
                              Vector perm_26 = (Vector) UTIL.ConvertToList(enum_33.next());
                              if (succ_set_v_27 = 1 == perm_26.size()) {
                                succ_set_v_27 = true;
                                if ((Channel.ReqData) perm_26.get(0) instanceof Channel.CardId) {                                  
                                  Vector e_l_31 = new Vector();
                                  e_l_31.add(((Channel.CardId) (Channel.ReqData) perm_26.get(0)).val);
                                  if (succ_set_v_27 = 1 == e_l_31.size()) 
                                    cardId_1 = UTIL.NumberToInt(e_l_31.get(0));
                                }
                                else 
                                  succ_set_v_27 = false;
                              }
                            }
                          }
                          else 
                            succ_set_v_27 = false;
                        }
                        else 
                          succ_set_v_27 = false;
                        if (!succ_set_v_27) 
                          succ_2 = false;
                      }
                    }
                  }
                  else 
                    succ_2 = false;
                  if (succ_2) {
                    resource.ResetNumberOfTries(cardId_1);
                    respdata = null;
                  }
                  else {                    
                    Integer cardId = null;
                    succ_2 = true;
                    if (req instanceof Channel.Request) {                      
                      Vector e_l_5 = new Vector();
                      e_l_5.add(req.command);
                      e_l_5.add(req.data);
                      if (succ_2 = 2 == e_l_5.size()) {
                        succ_2 = true;
                        if (!UTIL.equals(e_l_5.get(0), new quotes.IncTries())) 
                          succ_2 = false;
                        if (succ_2) {                          
                          boolean succ_set_v_11 = false;
                          if ((e_l_5.get(2 - 1) instanceof HashSet)) {                            
                            HashSet tmpvarExpr_12 = (HashSet) e_l_5.get(2 - 1);
                            if (tmpvarExpr_12.size() == 1) {                              
                              Vector valSeq_8 = new Vector();
                              for (Iterator enum_14 = tmpvarExpr_12.iterator(); enum_14.hasNext(); ) {                                
                                Channel.ReqData e_13 = (Channel.ReqData) enum_14.next();
                                valSeq_8.add(e_13);
                              }                              
                              HashSet permSL_9 = UTIL.Permute(valSeq_8);
                              for (Iterator enum_17 = permSL_9.iterator(); enum_17.hasNext() && !succ_set_v_11; ) {                                
                                Vector perm_10 = (Vector) UTIL.ConvertToList(enum_17.next());
                                if (succ_set_v_11 = 1 == perm_10.size()) {
                                  succ_set_v_11 = true;
                                  if ((Channel.ReqData) perm_10.get(0) instanceof Channel.CardId) {                                    
                                    Vector e_l_15 = new Vector();
                                    e_l_15.add(((Channel.CardId) (Channel.ReqData) perm_10.get(0)).val);
                                    if (succ_set_v_11 = 1 == e_l_15.size()) 
                                      cardId = UTIL.NumberToInt(e_l_15.get(0));
                                  }
                                  else 
                                    succ_set_v_11 = false;
                                }
                              }
                            }
                            else 
                              succ_set_v_11 = false;
                          }
                          else 
                            succ_set_v_11 = false;
                          if (!succ_set_v_11) 
                            succ_2 = false;
                        }
                      }
                    }
                    else 
                      succ_2 = false;
                    if (succ_2) {
                      resource.IncrNumberOfTries(cardId);
                      respdata = null;
                    }
                  }
                }
              }
            }
          }
        }
      }      
      Channel.Response par_125 = null;      
      Object tmpVar_126 = null;
      tmpVar_126 = (req).command;
      par_125 = new Channel.Response(tmpVar_126,respdata);
      c.SendResponse(par_125);
    }
    finally {
      sentinel.leaving(((LocalTillSentinel) sentinel).ProcessRequest);
    }
  }
// ***** VDMTOOLS END Name=ProcessRequest


// ***** VDMTOOLS START Name=Create KEEP=NO
  public void Create (final Channel nc, final CentralResource nr) throws CGException {
    sentinel.entering(((LocalTillSentinel) sentinel).Create);
    try {
      c = (Channel) UTIL.clone(nc);
      resource = (CentralResource) UTIL.clone(nr);
    }
    finally {
      sentinel.leaving(((LocalTillSentinel) sentinel).Create);
    }
  }
// ***** VDMTOOLS END Name=Create


// ***** VDMTOOLS START Name=Fail KEEP=NO
  public void Fail () throws CGException {
    sentinel.entering(((LocalTillSentinel) sentinel).Fail);
    try {
      enabled = (Boolean) UTIL.clone(new Boolean(false));
    }
    finally {
      sentinel.leaving(((LocalTillSentinel) sentinel).Fail);
    }
  }
// ***** VDMTOOLS END Name=Fail


// ***** VDMTOOLS START Name=Repair KEEP=NO
  public void Repair (final Channel nc) throws CGException {
    sentinel.entering(((LocalTillSentinel) sentinel).Repair);
    try {
      c = (Channel) UTIL.clone(nc);
      enabled = (Boolean) UTIL.clone(new Boolean(true));
    }
    finally {
      sentinel.leaving(((LocalTillSentinel) sentinel).Repair);
    }
  }
// ***** VDMTOOLS END Name=Repair

}
;
