//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Fri 27-May-2005 by the VDM++ JAVA Code Generator
// (v6.8.5 - Wed 25-May-2005 13:41:53)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.*;
import java.util.*;
import jp.vdmtools.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class Till implements EvaluatePP {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=curCard KEEP=NO
  private volatile Card curCard = null;
// ***** VDMTOOLS END Name=curCard

// ***** VDMTOOLS START Name=cardOk KEEP=NO
  private volatile Boolean cardOk = null;
// ***** VDMTOOLS END Name=cardOk

// ***** VDMTOOLS START Name=retainedCards KEEP=NO
  private volatile HashSet retainedCards = new HashSet();
// ***** VDMTOOLS END Name=retainedCards

// ***** VDMTOOLS START Name=resource KEEP=NO
  private volatile LocalResource resource = null;
// ***** VDMTOOLS END Name=resource

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=TillSentinel KEEP=NO
  class TillSentinel extends Sentinel {

    public final int Create = 0;

    public final int Validate = 1;

    public final int CardInside = 2;

    public final int GetBalance = 3;

    public final int InsertCard = 4;

    public final int ReturnCard = 5;

    public final int IsLegalCard = 6;

    public final int CardValidated = 7;

    public final int MakeWithdrawal = 8;

    public final int RequestStatement = 9;

    public final int nr_functions = 10;


    public TillSentinel () throws CGException {}


    public TillSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=TillSentinel
;

// ***** VDMTOOLS START Name=evaluatePP KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new TillSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=Till KEEP=NO
  public Till () throws CGException {
    try {
      setSentinel();
      curCard = null;
      cardOk = new Boolean(false);
      retainedCards = new HashSet();
    }
    catch (Exception e){
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Till


// ***** VDMTOOLS START Name=Create KEEP=NO
  public Till Create (final LocalResource res) throws CGException {
    sentinel.entering(((TillSentinel) sentinel).Create);
    try {
      resource = (LocalResource) UTIL.clone(res);
      return (Till) this;
    }
    finally {
      sentinel.leaving(((TillSentinel) sentinel).Create);
    }
  }
// ***** VDMTOOLS END Name=Create


// ***** VDMTOOLS START Name=InsertCard KEEP=NO
  public void InsertCard (final Card c) throws CGException {
    sentinel.entering(((TillSentinel) sentinel).InsertCard);
    try {
      curCard = (Card) UTIL.clone(c);
    }
    finally {
      sentinel.leaving(((TillSentinel) sentinel).InsertCard);
    }
  }
// ***** VDMTOOLS END Name=InsertCard


// ***** VDMTOOLS START Name=pre_InsertCard KEEP=NO
  public Boolean pre_InsertCard (final Card c) throws CGException {
    return new Boolean(!CardInside().booleanValue());
  }
// ***** VDMTOOLS END Name=pre_InsertCard


// ***** VDMTOOLS START Name=Validate KEEP=NO
  public Object Validate (final Integer pin) throws CGException {
    sentinel.entering(((TillSentinel) sentinel).Validate);
    try {      
      Integer tmpVal_3 = null;
      tmpVal_3 = curCard.GetCardId();      
      Integer cardId = null;
      cardId = tmpVal_3;      
      Boolean codeOk = null;      
      Integer var1_5 = null;
      var1_5 = curCard.GetCode();
      codeOk = new Boolean(var1_5.intValue() == Encode(pin).intValue());      
      Object cardLegal = IsLegalCard();
      if (new Boolean(UTIL.equals(cardLegal, new quotes.Fail())).booleanValue()) 
        return new quotes.Fail();
      else {        
        Boolean rhs_12 = null;
        {
          if ((rhs_12 = codeOk).booleanValue()) {
            if (!(cardLegal instanceof Boolean)) 
              UTIL.RunTime("Run-Time Error:A boolean was expected");
            rhs_12 = (Boolean) cardLegal;
          }
        }
        cardOk = (Boolean) UTIL.clone(rhs_12);        
        Boolean cond_15 = null;
        if ((cardLegal instanceof Boolean)) 
          cond_15 = new Boolean(!((Boolean) cardLegal).booleanValue());
        else 
          UTIL.RunTime("Run-Time Error:A boolean was expected");
        if (cond_15.booleanValue()) {
          retainedCards.add(curCard);
          curCard = null;
          return new quotes.Retained();
        }
        else 
          if (codeOk.booleanValue()) {            
            Boolean cond_36 = null;            
            quotes.Fail var1_37 = null;
            var1_37 = resource.ResetNumberOfTries(cardId);
            cond_36 = new Boolean(UTIL.equals(var1_37, new quotes.Fail()));
            if (cond_36.booleanValue()) 
              return new quotes.Fail();
            else 
              return new quotes.PinOk();
          }
          else {            
            quotes.Fail incTries = null;
            incTries = resource.IncrNumberOfTries(cardId);            
            Object numTriesExceeded = null;
            numTriesExceeded = resource.NumberOfTriesExceeded(cardId);            
            Boolean cond_22 = null;            
            HashSet var2_24 = new HashSet();
            var2_24 = new HashSet();
            var2_24.add(incTries);
            var2_24.add(numTriesExceeded);
            cond_22 = new Boolean(var2_24.contains(new quotes.Fail()));
            if (cond_22.booleanValue()) 
              return new quotes.Fail();
            else 
              if (((Boolean) numTriesExceeded).booleanValue()) {
                retainedCards.add(curCard);
                cardOk = (Boolean) UTIL.clone(new Boolean(false));
                curCard = null;
                return new quotes.Retained();
              }
              else {
                return new quotes.PinNotOk();
              }
          }
      }
    }
    finally {
      sentinel.leaving(((TillSentinel) sentinel).Validate);
    }
  }
// ***** VDMTOOLS END Name=Validate


// ***** VDMTOOLS START Name=pre_Validate KEEP=NO
  public Boolean pre_Validate (final Integer pin) throws CGException {    
    Boolean varRes_2 = null;
    {
      if ((varRes_2 = CardInside()).booleanValue()) 
        varRes_2 = new Boolean(!cardOk.booleanValue());
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_Validate


// ***** VDMTOOLS START Name=ReturnCard KEEP=NO
  public void ReturnCard () throws CGException {
    sentinel.entering(((TillSentinel) sentinel).ReturnCard);
    try {
      cardOk = (Boolean) UTIL.clone(new Boolean(false));
      curCard = null;
    }
    finally {
      sentinel.leaving(((TillSentinel) sentinel).ReturnCard);
    }
  }
// ***** VDMTOOLS END Name=ReturnCard


// ***** VDMTOOLS START Name=pre_ReturnCard KEEP=NO
  public Boolean pre_ReturnCard () throws CGException {
    return CardInside();
  }
// ***** VDMTOOLS END Name=pre_ReturnCard


// ***** VDMTOOLS START Name=GetBalance KEEP=NO
  public Object GetBalance () throws CGException {
    sentinel.entering(((TillSentinel) sentinel).GetBalance);
    try {      
      Object tmpObj_2 = null;      
      Integer par_3 = null;
      par_3 = curCard.GetAccountId();
      tmpObj_2 = resource.GetBalance(par_3);
      return tmpObj_2;
    }
    finally {
      sentinel.leaving(((TillSentinel) sentinel).GetBalance);
    }
  }
// ***** VDMTOOLS END Name=GetBalance


// ***** VDMTOOLS START Name=pre_GetBalance KEEP=NO
  public Boolean pre_GetBalance () throws CGException {
    return CardValidated();
  }
// ***** VDMTOOLS END Name=pre_GetBalance


// ***** VDMTOOLS START Name=MakeWithdrawal KEEP=NO
  public Object MakeWithdrawal (final Integer amount) throws CGException {
    sentinel.entering(((TillSentinel) sentinel).MakeWithdrawal);
    try {      
      Object tmpObj_3 = null;      
      Integer par_4 = null;
      par_4 = curCard.GetAccountId();      
      Integer par_5 = null;
      par_5 = curCard.GetCardId();
      tmpObj_3 = resource.Withdrawal(par_4, par_5, amount);
      return tmpObj_3;
    }
    finally {
      sentinel.leaving(((TillSentinel) sentinel).MakeWithdrawal);
    }
  }
// ***** VDMTOOLS END Name=MakeWithdrawal


// ***** VDMTOOLS START Name=pre_MakeWithdrawal KEEP=NO
  public Boolean pre_MakeWithdrawal (final Integer amount) throws CGException {
    return CardValidated();
  }
// ***** VDMTOOLS END Name=pre_MakeWithdrawal


// ***** VDMTOOLS START Name=RequestStatement KEEP=NO
  public Object RequestStatement () throws CGException {
    sentinel.entering(((TillSentinel) sentinel).RequestStatement);
    try {      
      Object tmpObj_2 = null;      
      Integer par_3 = null;
      par_3 = curCard.GetAccountId();      
      Integer par_4 = null;
      par_4 = curCard.GetCardId();
      tmpObj_2 = resource.PostStatement(par_3, par_4);
      return tmpObj_2;
    }
    finally {
      sentinel.leaving(((TillSentinel) sentinel).RequestStatement);
    }
  }
// ***** VDMTOOLS END Name=RequestStatement


// ***** VDMTOOLS START Name=pre_RequestStatement KEEP=NO
  public Boolean pre_RequestStatement () throws CGException {
    return CardValidated();
  }
// ***** VDMTOOLS END Name=pre_RequestStatement


// ***** VDMTOOLS START Name=IsLegalCard KEEP=NO
  public Object IsLegalCard () throws CGException {
    sentinel.entering(((TillSentinel) sentinel).IsLegalCard);
    try {      
      Object rexpr_1 = null;      
      Integer par_2 = null;
      par_2 = curCard.GetAccountId();      
      Integer par_3 = null;
      par_3 = curCard.GetCardId();
      rexpr_1 = resource.IsLegalCard(par_2, par_3);
      return rexpr_1;
    }
    finally {
      sentinel.leaving(((TillSentinel) sentinel).IsLegalCard);
    }
  }
// ***** VDMTOOLS END Name=IsLegalCard


// ***** VDMTOOLS START Name=pre_IsLegalCard KEEP=NO
  public Boolean pre_IsLegalCard () throws CGException {
    return CardInside();
  }
// ***** VDMTOOLS END Name=pre_IsLegalCard


// ***** VDMTOOLS START Name=CardValidated KEEP=NO
  public Boolean CardValidated () throws CGException {
    sentinel.entering(((TillSentinel) sentinel).CardValidated);
    try {      
      Boolean rexpr_1 = null;
      {
        if ((rexpr_1 = new Boolean(!UTIL.equals(curCard, null))).booleanValue()) 
          rexpr_1 = cardOk;
      }
      return rexpr_1;
    }
    finally {
      sentinel.leaving(((TillSentinel) sentinel).CardValidated);
    }
  }
// ***** VDMTOOLS END Name=CardValidated


// ***** VDMTOOLS START Name=CardInside KEEP=NO
  public Boolean CardInside () throws CGException {
    sentinel.entering(((TillSentinel) sentinel).CardInside);
    try {
      return new Boolean(!UTIL.equals(curCard, null));
    }
    finally {
      sentinel.leaving(((TillSentinel) sentinel).CardInside);
    }
  }
// ***** VDMTOOLS END Name=CardInside


// ***** VDMTOOLS START Name=Encode KEEP=NO
  private Integer Encode (final Integer pin) throws CGException {
    return pin;
  }
// ***** VDMTOOLS END Name=Encode

}
;
