//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Wed 05-Nov-97 by the VDM++toC++ Code Generator
// (v6.0e - Tue 04-Nov-97)
//
// Supported compilers:
// 	g++ version 2.7.2 on SunOS4, SunOS5, Linux, HP-UX10
// 	Dec cxx version 5.5 on Alpha OSF1
// 	VC++ version 5.0 on Windows95, Windows NT
//



#include "SegmentDePrediction.h"
#include "BulletinMeteo.h"

vdm_SegmentDePrediction::vdm_SegmentDePrediction() { RegisterAsDerived(vdm_GetId()); }

Int vdm_SegmentDePrediction::vdm_ModeC2Altitude(const Int &vdm_modeC, const Real &vdm_qnh) { return vdm_modeC - (Real) 27.5 * ((Real) 1013.25 - vdm_qnh); }

Tuple vdm_SegmentDePrediction::vdm_PositionFuture(const Tuple &var_1_1, const Int &var_2_2, const Tuple &var_3_3, const Int &var_4_4, const Int &var_5_5, const Tuple &var_6_6) {
  Int vdm_d;
  Tuple vdm_vitesse(3);
  Int vdm_x_uactuel;
  Int vdm_x_upasse;
  Int vdm_y_uactuel;
  Int vdm_y_upasse;
  Int vdm_z_uactuel;
  Int vdm_z_upasse;
  bool succ_7 = true;
  if (var_1_1.IsTuple()) {
    Sequence e_l_28;
    for (int i_29 = 1; i_29 <= ((Tuple) var_1_1).Length(); i_29++) 
      e_l_28.ImpAppend(((Tuple) var_1_1).GetField(i_29));
    if (succ_7 = 2 == (Int) e_l_28.Length()) {
      vdm_x_upasse = (Int) e_l_28.Hd();
      vdm_y_upasse = (Int) e_l_28[2];
    }
  }
  else 
    succ_7 = false;
  vdm_z_upasse = var_2_2;
  if (var_3_3.IsTuple()) {
    Sequence e_l_30;
    for (int i_31 = 1; i_31 <= ((Tuple) var_3_3).Length(); i_31++) 
      e_l_30.ImpAppend(((Tuple) var_3_3).GetField(i_31));
    if (succ_7 = 2 == (Int) e_l_30.Length()) {
      vdm_x_uactuel = (Int) e_l_30.Hd();
      vdm_y_uactuel = (Int) e_l_30[2];
    }
  }
  else 
    succ_7 = false;
  vdm_z_uactuel = var_4_4;
  vdm_d = var_5_5;
  vdm_vitesse = var_6_6;
  if (!succ_7) 
    RunTime("Pattern Match in Function Apply in function : PositionFuture failed");
  Tuple varRes_8(2);
  {
    Tuple tmpVal_10(2);
    tmpVal_10 = Tuple(2);    tmpVal_10.SetField(1, (Int) 2 * vdm_x_uactuel - vdm_x_upasse);    tmpVal_10.SetField(2, (Int) 2 * vdm_y_uactuel - vdm_y_upasse);
    Tuple vdm_c(2);
    vdm_c = tmpVal_10;
    Int tmpVal_21;
    tmpVal_21 = (Int) 2 * vdm_z_uactuel - vdm_z_upasse;
    Int vdm_p;
    vdm_p = tmpVal_21;
    varRes_8 = Tuple(2);
    varRes_8.SetField(1, vdm_c);
    varRes_8.SetField(2, vdm_p);
  }
  return varRes_8;
}

void vdm_SegmentDePrediction::vdm_Set(const Record &vdm_modeA_q, const Map &vdm_positions, const ObjectRef &vdm_bulletin_umeteo) {
  bool succ_1;
  Int tmpVal_2;
  tmpVal_2 = vdm_LaPlusRecente(vdm_positions.Dom());
  Int vdm_temps_uactuel;
  vdm_temps_uactuel = tmpVal_2;
  Int tmpVal_5;
  Set par_6;  Set var2_9;  var2_9 = Set().Insert(vdm_temps_uactuel);  par_6 = vdm_positions.Dom();  par_6.ImpDiff(var2_9);  tmpVal_5 = vdm_LaPlusRecente(par_6);
  Int vdm_temps_upasse;
  vdm_temps_upasse = tmpVal_5;
  Tuple tmpVal_11(2);
  tmpVal_11 = (Tuple) vdm_positions[vdm_temps_uactuel];
  Int vdm_modeC_uactuel;
  Tuple vdm_xy_uactuel(2);
  succ_1 = true;
  if (tmpVal_11.IsTuple()) {
    Sequence e_l_14;
    for (int i_15 = 1; i_15 <= ((Tuple) tmpVal_11).Length(); i_15++) 
      e_l_14.ImpAppend(((Tuple) tmpVal_11).GetField(i_15));
    if (succ_1 = 2 == (Int) e_l_14.Length()) {
      vdm_xy_uactuel = (Generic) e_l_14.Hd();
      vdm_modeC_uactuel = (Generic) e_l_14[2];
    }
  }
  else 
    succ_1 = false;
  if (!succ_1) 
    RunTime("Pattern match did not succeed in value definition");
  Tuple tmpVal_16(2);
  tmpVal_16 = (Tuple) vdm_positions[vdm_temps_upasse];
  Int vdm_modeC_upasse;
  Tuple vdm_xy_upasse(2);
  succ_1 = true;
  if (tmpVal_16.IsTuple()) {
    Sequence e_l_19;
    for (int i_20 = 1; i_20 <= ((Tuple) tmpVal_16).Length(); i_20++) 
      e_l_19.ImpAppend(((Tuple) tmpVal_16).GetField(i_20));
    if (succ_1 = 2 == (Int) e_l_19.Length()) {
      vdm_xy_upasse = (Generic) e_l_19.Hd();
      vdm_modeC_upasse = (Generic) e_l_19[2];
    }
  }
  else 
    succ_1 = false;
  if (!succ_1) 
    RunTime("Pattern match did not succeed in value definition");
  {
    Real tmpVal_22 = ObjGet_vdm_BulletinMeteo(vdm_bulletin_umeteo)->vdm_GetQNH(vdm_xy_uactuel);
    Real vdm_qnh_uxy_uactuel;
    vdm_qnh_uxy_uactuel = tmpVal_22;
    Real tmpVal_25 = ObjGet_vdm_BulletinMeteo(vdm_bulletin_umeteo)->vdm_GetQNH(vdm_xy_upasse);
    Real vdm_qnh_uxy_upasse;
    vdm_qnh_uxy_upasse = tmpVal_25;
    {
      bool succ_28;
      Int tmpVal_29;
      tmpVal_29 = vdm_ModeC2Altitude(vdm_modeC_uactuel, vdm_qnh_uxy_uactuel);
      Int vdm_z_uactuel;
      vdm_z_uactuel = tmpVal_29;
      Int tmpVal_32;
      tmpVal_32 = vdm_ModeC2Altitude(vdm_modeC_upasse, vdm_qnh_uxy_upasse);
      Int vdm_z_upasse;
      vdm_z_upasse = tmpVal_32;
      Tuple tmpVal_35(2);
      tmpVal_35 = vdm_PositionFuture(vdm_xy_upasse, vdm_z_upasse, vdm_xy_uactuel, vdm_z_uactuel, vdm_DureeExtrapolation, vdm_VitesseMaximale);
      Tuple vdm_xy_uprevu(2);
      Int vdm_z_uprevu;
      succ_28 = true;
      if (tmpVal_35.IsTuple()) {
        Sequence e_l_42;
        for (int i_43 = 1; i_43 <= ((Tuple) tmpVal_35).Length(); i_43++) 
          e_l_42.ImpAppend(((Tuple) tmpVal_35).GetField(i_43));
        if (succ_28 = 2 == (Int) e_l_42.Length()) {
          vdm_xy_uprevu = (Generic) e_l_42.Hd();
          vdm_z_uprevu = (Generic) e_l_42[2];
        }
      }
      else 
        succ_28 = false;
      if (!succ_28) 
        RunTime("Pattern match did not succeed in value definition");
      {
        vdm_modeA = vdm_modeA_q;
        vdm_xy_uqueue = vdm_xy_uactuel;
        vdm_z_uqueue = vdm_z_uactuel;
        vdm_xy_utete = vdm_xy_uprevu;
        vdm_z_utete = vdm_z_uprevu;
      }
    }
  }
}

Record vdm_SegmentDePrediction::vdm_GetmodeA() { return vdm_modeA; }
