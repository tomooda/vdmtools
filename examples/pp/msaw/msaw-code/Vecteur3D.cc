//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Wed 05-Nov-97 by the VDM++toC++ Code Generator
// (v6.0e - Tue 04-Nov-97)
//
// Supported compilers:
// 	g++ version 2.7.2 on SunOS4, SunOS5, Linux, HP-UX10
// 	Dec cxx version 5.5 on Alpha OSF1
// 	VC++ version 5.0 on Windows95, Windows NT
//



#include "Vecteur3D.h"

vdm_Vecteur3D::vdm_Vecteur3D() { RegisterAsDerived(vdm_GetId()); }

Real vdm_Vecteur3D::vdm_Rico(const Real &vdm_x_utete, const Real &vdm_x_uqueue, const Real &vdm_y_utete, const Real &vdm_y_uqueue) {
  Real varRes_6;
  if (((Bool) !(vdm_x_utete == vdm_x_uqueue)).GetValue()) 
    varRes_6 = (vdm_y_utete - vdm_y_uqueue) / (vdm_x_utete - vdm_x_uqueue);
  else 
    varRes_6 = (Int) 100;
  return varRes_6;
}

Real vdm_Vecteur3D::vdm_Ricoz(const Real &vdm_z_utete, const Real &vdm_z_uqueue, const Real &vdm_x_utete, const Real &vdm_x_uqueue, const Real &vdm_y_utete, const Real &vdm_y_uqueue) {
  Real varRes_8;
  if (((Bool) (vdm_z_utete == vdm_z_uqueue)).GetValue()) 
    varRes_8 = (Int) 0;
  else 
    if (((Bool) !(vdm_x_utete == vdm_x_uqueue)).GetValue()) 
      varRes_8 = (vdm_z_utete - vdm_z_uqueue) / (vdm_x_utete - vdm_x_uqueue);
    else 
      varRes_8 = (vdm_z_utete - vdm_z_uqueue) / (vdm_y_utete - vdm_y_uqueue);
  return varRes_8;
}

Bool vdm_Vecteur3D::vdm_OuterTest(const Real &vdm_x, const Real &vdm_x_uqueue, const Real &vdm_x_utete) {
  Bool varRes_5;
  if (((Bool) ((vdm_x_uqueue.GetValue()) <= (vdm_x_utete.GetValue()))).GetValue()) 
    varRes_5 = (Bool) ((vdm_x.GetValue()) <= (vdm_x_utete.GetValue()));
  else 
    varRes_5 = (Bool) ((vdm_x.GetValue()) >= (vdm_x_utete.GetValue()));
  return varRes_5;
}

Bool vdm_Vecteur3D::vdm_InnerTest(const Real &vdm_y, const Real &vdm_y_uold, const Real &vdm_y_ufinal) {
  Bool varRes_5;
  if (((Bool) ((vdm_y_uold.GetValue()) <= (vdm_y_ufinal.GetValue()))).GetValue()) 
    varRes_5 = (Bool) ((vdm_y.GetValue()) <= (vdm_y_ufinal.GetValue()));
  else 
    varRes_5 = (Bool) ((vdm_y.GetValue()) >= (vdm_y_ufinal.GetValue()));
  return varRes_5;
}

Set vdm_Vecteur3D::vdm_GetPoints() {
  bool succ_1;
  Tuple tmpVal_2(2);
  tmpVal_2 = vdm_xy_utete;
  Int vdm_x_utete;
  Int vdm_y_utete;
  succ_1 = true;
  if (tmpVal_2.IsTuple()) {
    Sequence e_l_3;
    for (int i_4 = 1; i_4 <= ((Tuple) tmpVal_2).Length(); i_4++) 
      e_l_3.ImpAppend(((Tuple) tmpVal_2).GetField(i_4));
    if (succ_1 = 2 == (Int) e_l_3.Length()) {
      vdm_x_utete = (Int) e_l_3.Hd();
      vdm_y_utete = (Int) e_l_3[2];
    }
  }
  else 
    succ_1 = false;
  if (!succ_1) 
    RunTime("Pattern match did not succeed in value definition");
  Tuple tmpVal_5(2);
  tmpVal_5 = vdm_xy_uqueue;
  Int vdm_x_uqueue;
  Int vdm_y_uqueue;
  succ_1 = true;
  if (tmpVal_5.IsTuple()) {
    Sequence e_l_6;
    for (int i_7 = 1; i_7 <= ((Tuple) tmpVal_5).Length(); i_7++) 
      e_l_6.ImpAppend(((Tuple) tmpVal_5).GetField(i_7));
    if (succ_1 = 2 == (Int) e_l_6.Length()) {
      vdm_x_uqueue = (Int) e_l_6.Hd();
      vdm_y_uqueue = (Int) e_l_6[2];
    }
  }
  else 
    succ_1 = false;
  if (!succ_1) 
    RunTime("Pattern match did not succeed in value definition");
  {
    Real tmpVal_9;
    tmpVal_9 = vdm_Rico(vdm_x_utete, vdm_x_uqueue, vdm_y_utete, vdm_y_uqueue);
    Real vdm_rico;
    vdm_rico = tmpVal_9;
    Real tmpVal_14;
    tmpVal_14 = vdm_Ricoz(vdm_z_utete, vdm_z_uqueue, vdm_x_utete, vdm_x_uqueue, vdm_y_utete, vdm_y_uqueue);
    Real vdm_ricoz;
    vdm_ricoz = tmpVal_14;
    {
      Set varname_21;
      Tuple enum_set_22(2);
      enum_set_22 = Tuple(2);
      enum_set_22.SetField(1, vdm_xy_utete);
      enum_set_22.SetField(2, vdm_z_utete);
      varname_21 = Set().Insert(enum_set_22);
      Set vdm_points = varname_21;
      Real vdm_y_uold = vdm_y_uqueue;
      Real vdm_y_ufinal;
      Real vdm_x = vdm_x_uqueue;
      while ( true){ if (vdm_OuterTest(vdm_x, vdm_x_uqueue, vdm_x_utete).GetValue()) {
   Real vdm_y = vdm_y_uold;
   vdm_y_ufinal = vdm_rico * vdm_x + vdm_y_utete - (vdm_rico * vdm_x_utete);
   while ( true){ if (vdm_InnerTest(vdm_y, vdm_y_uold, vdm_y_ufinal).GetValue()) {
   Real vdm_z;
   if (((Bool) !(vdm_x_utete == vdm_x_uqueue)).GetValue()) 
     vdm_z = vdm_x - vdm_x_uqueue;
   else 
     vdm_z = vdm_y - vdm_y_uqueue;
   vdm_z = vdm_z_uqueue + vdm_ricoz * vdm_z;
   Tuple elem_59(2);
   elem_59 = Tuple(2);
   Tuple tmpVar_60(2);
   tmpVar_60 = Tuple(2);
   tmpVar_60.SetField(1, vdm_x);
   tmpVar_60.SetField(2, vdm_y);
   elem_59.SetField(1, tmpVar_60);
   elem_59.SetField(2, vdm_z);
   vdm_points.Insert(elem_59);
   if (((Bool) ((vdm_y_uold.GetValue()) <= (vdm_y_ufinal.GetValue()))).GetValue()) 
     vdm_y = vdm_y + (Int) 1;
   else 
     vdm_y = vdm_y - (Int) 1;
 }
 else 
   break; }
   vdm_y_uold = vdm_y_ufinal;
   if (((Bool) ((vdm_x_uqueue.GetValue()) <= (vdm_x_utete.GetValue()))).GetValue()) 
     vdm_x = vdm_x + (Int) 1;
   else 
     vdm_x = vdm_x - (Int) 1;
 }
 else 
   break; }
      return vdm_points;
    }
  }
}
