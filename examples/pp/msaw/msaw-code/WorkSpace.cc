//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Wed 05-Nov-97 by the VDM++toC++ Code Generator
// (v6.0e - Tue 04-Nov-97)
//
// Supported compilers:
// 	g++ version 2.7.2 on SunOS4, SunOS5, Linux, HP-UX10
// 	Dec cxx version 5.5 on Alpha OSF1
// 	VC++ version 5.0 on Windows95, Windows NT
//



#include "WorkSpace.h"
#include "BulletinMeteo.h"
#include "Detecteur.h"
#include "Obstacle.h"
#include "PistesRadar.h"
#include "SegmentDePrediction.h"
#include "Terrain.h"

vdm_WorkSpace::vdm_WorkSpace() {
  RegisterAsDerived(vdm_GetId());
  {
    vdm_obstacles = Set();
    vdm_pistes_uradar = ObjectRef(new vdm_PistesRadar());
    vdm_bulletin_umeteo = ObjectRef(new vdm_BulletinMeteo());
    vdm_terrain = ObjectRef(new vdm_Terrain());
    vdm_detecteur = ObjectRef(new vdm_Detecteur());
  }
}

Sequence vdm_WorkSpace::vdm_OrdreDeTraitement(const Set &vdm_obstacles) {
  Sequence varRes_3;
  if (((Bool) (vdm_obstacles == Set())).GetValue()) 
    varRes_3 = Sequence();
  else {
    Set tmpSet_8;
    tmpSet_8 = vdm_obstacles;
    ObjectRef vdm_obstacle;
    bool succ_10 = false;
    Generic tmpe_14;
    for (int bb_13 = tmpSet_8.First(tmpe_14); bb_13 && !succ_10; bb_13 = tmpSet_8.Next(tmpe_14)) {
      ObjectRef tmpElem_11 = tmpe_14;
      vdm_obstacle = tmpElem_11;      succ_10 = ((Bool) true).GetValue();
    }
    if (!succ_10) 
      RunTime("The binding environment was empty");
    Sequence var1_15;
    var1_15 = Sequence().ImpAppend(vdm_obstacle);
    Sequence var2_17;
    Set par_18;
    Set var2_20;
    var2_20 = Set().Insert(vdm_obstacle);
    par_18 = vdm_obstacles;
    par_18.ImpDiff(var2_20);
    var2_17 = vdm_OrdreDeTraitement(par_18);
    varRes_3.ImpConc(var1_15).ImpConc(var2_17);
  }
  return varRes_3;
}

void vdm_WorkSpace::vdm_SetObstacle(const ObjectRef &vdm_obstacle) { vdm_obstacles.Insert(vdm_obstacle); }

void vdm_WorkSpace::vdm_TraiterPistesRadar() {
  Set tmpVal_2 = ObjGet_vdm_PistesRadar(vdm_pistes_uradar)->vdm_GetModeAs();
  Set vdm_modeAs;
  vdm_modeAs = tmpVal_2;
  {
    Sequence tmpVal_5;
    Set par_6;    Set var1_7;    var1_7 = Set().Insert(vdm_terrain);    par_6 = var1_7;    par_6.ImpUnion((Set) vdm_obstacles);    tmpVal_5 = vdm_OrdreDeTraitement(par_6);
    Sequence vdm_obstacles;
    vdm_obstacles = tmpVal_5;
    {
      Record vdm_modeA(vdm_MSAWTypes::vdm_ModeA, vdm_MSAWTypes::length_ModeA);
      Generic tmpe_46;
      for (int bb_45 = vdm_modeAs.First(tmpe_46); bb_45; bb_45 = vdm_modeAs.Next(tmpe_46)) {
        Record elem_11 = tmpe_46;
        vdm_modeA = elem_11;        {
          ObjectRef tmpVal_15 = ObjectRef(new vdm_SegmentDePrediction());
          ObjectRef vdm_segment_ude_uprediction;
          vdm_segment_ude_uprediction = tmpVal_15;
          Map tmpVal_16 = ObjGet_vdm_PistesRadar(vdm_pistes_uradar)->vdm_GetPositions(vdm_modeA);
          Map vdm_positions;
          vdm_positions = tmpVal_16;
          if (((Bool) ((((Int) vdm_positions.Dom().Card()).GetValue()) >= (((Int) 2).GetValue()))).GetValue()) {
            ObjGet_vdm_SegmentDePrediction(vdm_segment_ude_uprediction)->vdm_Set(vdm_modeA, vdm_positions, vdm_bulletin_umeteo);
            {
              Set iset_27;
              Set riseq_36;
              int max_37 = (Int) vdm_obstacles.Length();
              for (int i_38 = 1; i_38 <= max_37; i_38++) 
                riseq_36.Insert((Int) i_38);
              iset_27 = riseq_36;
              Int vdm_i;
              Generic tmpe_44;
              for (int bb_43 = iset_27.First(tmpe_44); bb_43; bb_43 = iset_27.Next(tmpe_44)) {
                Int elem_28 = tmpe_44;
                vdm_i = elem_28;                ObjGet_vdm_Detecteur(vdm_detecteur)->vdm_CalculeRisque(vdm_segment_ude_uprediction, (ObjectRef) vdm_obstacles[vdm_i.GetValue()]);
              }
            }
          }
        }
      }
    }
  }
}
