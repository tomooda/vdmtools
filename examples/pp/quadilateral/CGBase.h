//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Thu 12-Oct-2000 by the VDM++ C++ Code Generator
// (v6.5e - Thu 05-Oct-2000)
//
// Supported compilers:
// 	egcs version 1.1 on SunOS4, SunOS5, Linux, HP-UX10
// 	VC++ version 6.0 on Windows95, Windows NT
//

#ifndef _CGBase_h
#define _CGBase_h

#include "cg.h"


class vdm_AAH;
class vdm_Clock;
class vdm_Command;
class vdm_HandControlUnit;
class vdm_IntegratedCommand;
class vdm_Interface;
class vdm_RotationCommand;
class vdm_SixDOfCommand;
class vdm_Test;
class vdm_Thruster;
class vdm_ThrusterControl;
class vdm_ThrusterSelectionTable;
class vdm_TranslationCommand;
class vdm_ValveDriveAssembly;
class vdm_WorkSpace;


class CGBase : public vdmBase {
private:

  virtual bool has_cg_base () const {
 return true;
  }
public:

  virtual vdm_AAH * Get_vdm_AAH () {
 return 0;
  }

  virtual vdm_Clock * Get_vdm_Clock () {
 return 0;
  }

  virtual vdm_Command * Get_vdm_Command () {
 return 0;
  }

  virtual vdm_HandControlUnit * Get_vdm_HandControlUnit () {
 return 0;
  }

  virtual vdm_IntegratedCommand * Get_vdm_IntegratedCommand () {
 return 0;
  }

  virtual vdm_Interface * Get_vdm_Interface () {
 return 0;
  }

  virtual vdm_RotationCommand * Get_vdm_RotationCommand () {
 return 0;
  }

  virtual vdm_SixDOfCommand * Get_vdm_SixDOfCommand () {
 return 0;
  }

  virtual vdm_Test * Get_vdm_Test () {
 return 0;
  }

  virtual vdm_Thruster * Get_vdm_Thruster () {
 return 0;
  }

  virtual vdm_ThrusterControl * Get_vdm_ThrusterControl () {
 return 0;
  }

  virtual vdm_ThrusterSelectionTable * Get_vdm_ThrusterSelectionTable () {
 return 0;
  }

  virtual vdm_TranslationCommand * Get_vdm_TranslationCommand () {
 return 0;
  }

  virtual vdm_ValveDriveAssembly * Get_vdm_ValveDriveAssembly () {
 return 0;
  }

  virtual vdm_WorkSpace * Get_vdm_WorkSpace () {
 return 0;
  }
};
vdm_AAH * ObjGet_vdm_AAH (const ObjectRef &obj);
vdm_Clock * ObjGet_vdm_Clock (const ObjectRef &obj);
vdm_Command * ObjGet_vdm_Command (const ObjectRef &obj);
vdm_HandControlUnit * ObjGet_vdm_HandControlUnit (const ObjectRef &obj);
vdm_IntegratedCommand * ObjGet_vdm_IntegratedCommand (const ObjectRef &obj);
vdm_Interface * ObjGet_vdm_Interface (const ObjectRef &obj);
vdm_RotationCommand * ObjGet_vdm_RotationCommand (const ObjectRef &obj);
vdm_SixDOfCommand * ObjGet_vdm_SixDOfCommand (const ObjectRef &obj);
vdm_Test * ObjGet_vdm_Test (const ObjectRef &obj);
vdm_Thruster * ObjGet_vdm_Thruster (const ObjectRef &obj);
vdm_ThrusterControl * ObjGet_vdm_ThrusterControl (const ObjectRef &obj);
vdm_ThrusterSelectionTable * ObjGet_vdm_ThrusterSelectionTable (const ObjectRef &obj);
vdm_TranslationCommand * ObjGet_vdm_TranslationCommand (const ObjectRef &obj);
vdm_ValveDriveAssembly * ObjGet_vdm_ValveDriveAssembly (const ObjectRef &obj);
vdm_WorkSpace * ObjGet_vdm_WorkSpace (const ObjectRef &obj);
enum  {
  VDM_AAH,
  VDM_Clock,
  VDM_Command,
  VDM_HandControlUnit,
  VDM_IntegratedCommand,
  VDM_Interface,
  VDM_RotationCommand,
  VDM_SixDOfCommand,
  VDM_Test,
  VDM_Thruster,
  VDM_ThrusterControl,
  VDM_ThrusterSelectionTable,
  VDM_TranslationCommand,
  VDM_ValveDriveAssembly,
  VDM_WorkSpace
};

#endif

