class St

values

v15 = selection_sort([3,2,9,1,3]);
st1 = mk_(1,6,[3,2,-9,11,5,3])

instance variables
  x:nat;
  y:nat;
  l:seq1 of nat;


functions

min_index : seq1 of nat -> nat
min_index(l) ==
  if len l = 1
  then 1
  else let mi = min_index(tl l)
       in if l(mi+1) < hd l
          then mi+1
          else 1;

permutation : seq of nat * seq of nat -> bool
permutation (l1,l2) ==
  exists m : inmap nat to nat &
    dom m = inds l1 and
    rng m = inds l2;

-- convoluted example of let .. be .. st
--   forward ref to subsequence notation
remove : nat * seq of nat -> seq of nat
remove (x,l) ==
  let i in set inds l be st l(i) = x
  in l(1,...,i-1)^l(i+1,...,len l)
pre x in set elems l;

public
selection_sort : seq of nat -> seq of nat
selection_sort (l) ==
  if l = []
  then []
  else let m in set elems l be st
         forall x in set elems l & m <= x
       in [m]^(selection_sort (remove(m,l)));

-- conditional expressions
lmerge : seq of nat * seq of nat -> seq of nat
lmerge (s1,s2) ==
  if s1 = []
  then s2
  elseif s2 = []
  then s1
  elseif (hd s1) < (hd s2)
  then [hd s1]^(lmerge (tl s1, s2))
  else [hd s2]^(lmerge (s1, tl s2));

public
mergesort : seq of nat -> seq of nat
mergesort (l) ==
  cases l:
    [] -> [],
    l1^l2 -> lmerge (mergesort(l1), mergesort(l2))
  end;

public
quicksort : seq of nat -> seq of nat
quicksort (l) ==
  cases l:
    [] -> [],
    -^[x]^- -> quicksort ([y | y in set elems l & y < x]) ^ [x] ^
               quicksort ([y | y in set elems l & y > x])
  end

-- see also print_Expr (lang.vdm) for record patterns



    


operations

setup : nat * nat * seq1 of nat ==> ()
setup (x',y',l') ==
  ( x := x';
    y := y';
    l := l'
  );

Swap : () ==> ()
Swap () ==
  (dcl temp: nat := x;
   x := y;
   y := temp
  );

-- assignment to state designator
SelectionSort : nat ==> ()
SelectionSort (i) ==
  if i < len l
  then (dcl temp: nat;
        dcl mi : nat := min_index(l(i,...,len l)) + i - 1;
       
        temp := l(mi);
        l(mi) := l(i);
        l(i) := temp;
        SelectionSort(i+1)
       );

-- for loops
BubbleSort : seq of nat ==> seq of nat
BubbleSort (k) ==
  (dcl sorted_list : seq of nat := k;
   for i = len k to 1 by -1 do
     for j = 1 to i-1 do
       if sorted_list(j) > sorted_list(j+1)
       then (dcl temp:nat := sorted_list(j);
             sorted_list(j) := sorted_list(j+1);
             sorted_list(j+1) := temp
            );
   return sorted_list
   );

Remove : (seq of nat) * nat ==> seq of nat
Remove (k,z) ==
  (dcl nk : seq of nat := [];
   for i in k do
     if i <> z
     then nk := nk^[i];
   return nk
  );

-- non-deterministic statement
BubbleMin : () ==> ()
BubbleMin () ==
  (dcl z:nat := x;
   dcl m:nat := l(z);
   for i = x to y do
     if l(i) < m
     then ( m := l(i);
            z := i
          );
   (dcl temp:nat;
    temp := l(x);
    l(x) := l(z);
    l(z) := temp;
    x := x+1
   )
  );

BubbleMax : () ==> ()
BubbleMax () ==
  (dcl z:nat := x;
   dcl m:nat := l(z);
   for i = x to y do
     if l(i) > m
     then ( m := l(i);
            z := i
          );
   (dcl temp:nat;
    temp := l(y);
    l(y) := l(z);
    l(z) := temp;
    y := y-1
   )
  );

Sort: () ==> ()
Sort () ==
  while x < y do
    ||(BubbleMin(), BubbleMax());


-- identity statement
Remove2 : (seq of nat) * nat ==> seq of nat
Remove2 (k,z) ==
  (dcl nk : seq of nat := [];
   for i in k do
     if i <> z
     then nk := nk^[i]
     else skip;
   return nk
  );

-- specification statement
Sort2 : () ==> ()
Sort2 () ==
  while x < y do
    || (BubbleMin(),
        [ext wr l : seq1 of nat
             wr y : nat
             rd x : nat
         pre x < y
         post y < y~ and 
              permutation (l~(x,...,y~),l(x,...,y~)) and
              forall i in set {x,...,y} & l(i) < l(y~)]
       );

o1 : () ==> ()
o1 () == is not yet specified;

o2 : () ==> ()
o2 () == is not yet specified

end St








