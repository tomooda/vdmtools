%--------------------------------------------------------------------------------
% WHAT
%    Module providing functions generating code corresponding to
%    function and value definitions in VDM++ classes.
% $Id: mod_fvd.vdm,v 1.20 2001/12/17 07:38:21 paulm Exp $
% Implemented in: ???
%--------------------------------------------------------------------------------

\section{Module FVD - Value Definitions}


The module $FVD$ provides functions generating code
corresponding to  
%function and 
value definitions inside VDM++ classes.


Value definitions in a VDM++ are code generated in two parts. First
a number of C++/Java variables corresponding to patterns in the value
definitions are declared as members of the C++(JAVA) class.
The second part of the value definitions, the initialization, is done
by a number of C++/Java statements. In C++, the initialisation is done by the {\em Init\_$<$ClassName$>$} class which is instantiated in the ".cc" file.
In Java, the initialization is either done directly or in the static initializer of the class. 

The code generation corresponding to value definitions is done using a
global state, $Sigma$. This global state hold the variable definitions
and initialization statements. The operation $GenValues$ is the
overall operation in the code generation of value definitions. This
operation generates the C++/Java member declarations and the
initialization statements. The member declarations are returned by
$GenValues$ whereas the initialization statements are accumulated in
the global state. The operation $GetValInit$ is then used to get the
initialization statements. The operation $GenValues$ is an auxiliary
operation to $GenHFile$/$GenJavaFile$, whereas the operations
$GenValInit$ and $GetIdeclL$ are auxiliary operations to
$GenClassInit$/$GenJavaClassInit$.  The $seq of MemberDeclarations$
returned by $GenValues$/$VD`GenValDef$ is ignored when code generating
Java.

\vspace{1cm}

\begin{vdm_al}

module FVD

imports

  from CPP all,
  from AS all,
  from REP all,
  from CI all,
  from BC all,
  from CGAUX all,
  from VD all
 
exports 
operations
  GenValues: AS`Name * seq of AS`ValueDef ==> map AS`Access to seq of CPP`MemberDeclaration;
  GetIdeclL: () ==> seq of CPP`IdentDeclaration;
  GetValInit: () ==> seq of CPP`Stmt;
  AddValInit : seq of CPP`Stmt ==> ();
  AddUncaughtValInit : seq of CPP`Stmt ==> ();
  GetUncaught : () ==> seq of CPP`Stmt

definitions


\end{vdm_al}
%\subsection{Member Functions}

%To generate code corresponding to member functions in a VDM++ class we
%need two functions: $GenFctDecls$ and $GenFctDefs$. The function
%$GenFctDecls$ generates code corresponding to the member declarations of
%functions in a C++ class, and the function $GenFctDefs$ generates the
%function definitions. Code generated by $GenFctDecls$ will be
%placed in class declarations in the header files, and code generated
%by $GenFctDefs$ will be placed the ``CC-files''.

%Consider the function:

%\begin{quote}
%\begin{verbatim}
%f: nat * nat -> nat
%f(i,j) ==
%  i + j
%\end{verbatim}
%\end{quote}

%The code corresponding to {\tt f}, generated by $GenFctDecls$ will
%take the following form:

%\begin{quote}
%\begin{verbatim}
%Int vdm_f(Int, Int);
%\end{verbatim}
%\end{quote}



%If it is assumed that {\tt f} is a member function of the class $A$,
%the code generated by $GenFctDefs$ will take the following form:


%\begin{quote}
%\begin{verbatim}
%Int vdm_A::vdm(Int var1, Int var1)
%{
%  // function body
%}
%\end{verbatim}
%\end{quote}

%Note, that the function definition is qualified into class $A$. This
%is done because the function is defined outside the class declaration
%(in the ``CC-file''). The qualification is done by the function
%$FD`GenFctDef$.


\begin{vdm_al}

state Sigma of
  vi : seq of CPP`Stmt
  uncaught : seq of CPP`Stmt
  v_idecl_l : seq of CPP`IdentDeclaration
  init s == s = mk_Sigma([],[],[])
end

operations

  GenValues: AS`Name * seq of AS`ValueDef ==> map AS`Access to seq of CPP`MemberDeclaration
  GenValues(classname, valdef_l) ==
   ( 
    CGAUX`SetValState();
    def mk_(mem_decl_l, stmt_l, idecl_l) = VD`GenValDef(classname, valdef_l) 
    in
    ( CGAUX`UnsetValState();
      vi := stmt_l;
      v_idecl_l := idecl_l;
      return mem_decl_l
    );
   );

  GetValInit: () ==> seq of CPP`Stmt
  GetValInit() ==
    return vi;

  GetIdeclL: () ==> seq of CPP`IdentDeclaration
  GetIdeclL() == 
    return v_idecl_l;

  AddValInit : seq of CPP`Stmt ==> ()
  AddValInit(p_stmts) ==
    vi := vi ^ p_stmts;

  AddUncaughtValInit : seq of CPP`Stmt ==> ()
  AddUncaughtValInit(p_stmts) ==
    uncaught := uncaught ^ p_stmts;

  GetUncaught : () ==> seq of CPP`Stmt
  GetUncaught() ==
    return uncaught;

end FVD
\end{vdm_al}


