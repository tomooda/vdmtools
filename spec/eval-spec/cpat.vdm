%--------------------------------------------------------------------------------
% WHAT
%    Compilation of patterns into stack instructions
% $Id: cpat.vdm,v 1.8 2001/03/08 08:49:33 peter Exp $
% Implemented in: ???
%--------------------------------------------------------------------------------

\chapter{Compilation of Patterns}\label{sec:cpat}

This module specifies how ASTs representing patterns
are translated into the stack machine instructions defined in module
{\em STKM}.

\begin{vdm_al}
module CPAT

imports
  from AS all,
  from CI all,
  from SEM all,
  from REP all,
  from INSTRTP all,
  from STKM all,
#ifdef VDMPP
  from SCHDTP all,
#ifdef VICE
  from TIMEMAP all,
  from TIMEPARSER all,
#endif VICE
#endif VDMPP
  from PAT all,
  from CMPL all,
  from IO all,
  from CEXPR all,
  from GLOBAL all,
  from RTERR all

exports
  functions
    P2E: AS`Pattern -> AS`Expr
  operations
    CompileMultBindL: AS`BindList * PAT`PARTITION ==> STKM`SubProgram;
    PL2PL: seq of AS`Pattern ==> seq of STKM`Pattern;
    P2P: AS`Pattern ==> STKM`Pattern;
    PB2I: AS`PatternBind ==> STKM`SubProgram;
    P2I: AS`Pattern ==> STKM`SubProgram;
    SD2I: AS`StateDesignator ==> STKM`SubProgram

definitions

\end{vdm_al}

\section{Bindings}

\begin{vdm_al}

operations

  CompileMultBindL: AS`BindList * PAT`PARTITION ==> STKM`SubProgram
  CompileMultBindL(bind_l,part) ==
   (dcl sp_val : STKM`SubProgram := [],
        p_l : seq of AS`Pattern := [];
    for bind in bind_l do
      cases bind:
        mk_AS`MultTypeBind(pat,tp,-) -> (sp_val := sp_val ^ [ mk_INSTRTP`TPTOSET(tp) ] ^
                                          [ mk_INSTRTP`COPYVAL() | - in set {2,...,len pat} ];
                                         p_l := p_l ^ pat),
        mk_AS`MultSetBind(pat,Set,-) -> (sp_val := sp_val ^ CEXPR`E2I(Set) ^
                                          [ mk_INSTRTP`COPYVAL() | - in set {2,...,len pat} ];
                                         p_l := p_l ^ pat),
        others -> error
      end;

    def sp_pat = conc [ P2I(p_l(i)) | i in set inds p_l ];
    in
      return sp_val ^ sp_pat ^ [mk_INSTRTP`MULTBINDL(len p_l, part)];
   );

  PB2I: AS`PatternBind ==> STKM`SubProgram
  PB2I(pb) ==
    cases pb:
      mk_AS`TypeBind(pat,tp,-) -> return [mk_INSTRTP`DTC(tp)] ^ P2I(pat),
      mk_AS`SetBind(pat,Set,-) -> return CEXPR`E2I(Set) ^ [mk_INSTRTP`DTCSET()] ^ P2I(pat),
      others                   -> return P2I(pb)
    end;
\end{vdm_al}

\section{Patterns}

\begin{vdm_al}
operations

  P2I: AS`Pattern ==> STKM`SubProgram
  P2I(pat) ==
    if AnyMatchVals(pat)
    then return PStack2I(pat)
    else return PDirect2I(pat);
\end{vdm_al}

Note that the match values are translated directly to instruction code
which produces a value without having any $MatchVal$ tag with an
additional context id around it. This could naturally easily be
changed here.

\begin{vdm_al}

operations

  PStack2I: AS`Pattern ==> STKM`SubProgram
  PStack2I(pat) ==
    cases pat:
      mk_AS`PatternName(nm,tp,cid)        -> return [mk_INSTRTP`PUSH(mk_STKM`PatternName(nm,tp,cid))],
      mk_AS`MatchVal(val,cid)             -> return CEXPR`E2I(val) ^ [mk_INSTRTP`MATCHVAL(cid)],
      mk_AS`SetEnumPattern(els,cid)       -> return conc [ P2I(els(i)) | i in set inds els ] ^
                                                    [mk_INSTRTP`SETENUM(len els, cid)],
      mk_AS`SeqEnumPattern(els,cid)       -> return conc [ P2I(els(i)) | i in set inds els ] ^
                                                    [mk_INSTRTP`SEQENUM(len els, cid)],
      mk_AS`MapEnumPattern(mls,cid)       -> return conc [ P2I(mls(i)) | i in set inds mls ] ^
                                                    [mk_INSTRTP`MAPENUM(len mls, cid)],
      mk_AS`SetUnionPattern(lp,rp,cid)    -> return P2I(lp) ^ P2I(rp) ^ [mk_INSTRTP`SETUNION(cid)],
      mk_AS`SeqConcPattern(lp,rp,cid)     -> return P2I(lp) ^ P2I(rp) ^ [mk_INSTRTP`SEQCONC(cid)],
      mk_AS`MapMergePattern(lp,rp,cid)    -> return P2I(lp) ^ P2I(rp) ^ [mk_INSTRTP`MAPMERGE(cid)],
      mk_AS`MapletPattern(dp,rp,cid)      -> return P2I(dp) ^ P2I(rp) ^ [mk_INSTRTP`MAPLET(cid)],
      mk_AS`TuplePattern(fields,cid)      -> return conc [ P2I(fields(i)) | i in set inds fields ] ^
                                                    [mk_INSTRTP`TUPPATCONS(len fields, cid)],
      mk_AS`RecordPattern(nm,fields,cid)  -> return conc [ P2I(fields(i)) | i in set inds fields ] ^
                                                    [mk_INSTRTP`RECPATCONS(nm, len fields, cid)],
#ifdef VDMPP
      mk_AS`ObjectPattern(cls,fields,cid) -> return conc [ P2I(fields(i)) | i in set inds fields ] ^
                                                    [mk_INSTRTP`OBJECTPAT(cls, len fields, cid)],
      mk_AS`FieldPattern(nm,fp,cid)       -> return P2I(fp) ^ [mk_INSTRTP`FIELDPAT(nm, cid)],
#endif VDMPP
      others -> error
    end;

  PDirect2I: AS`Pattern ==> STKM`SubProgram
  PDirect2I(pat) == return [mk_INSTRTP`PUSH(P2P(pat))];

  PL2PL: seq of AS`Pattern ==> seq of STKM`Pattern
  PL2PL(pl) == return [P2P(pl(i)) | i in set inds pl];

  P2P: AS`Pattern ==> STKM`Pattern
  P2P(pat) ==
    cases pat:
      mk_AS`PatternName(nm,tp,cid)     -> return mk_STKM`PatternName(nm,tp,cid),
      mk_AS`MatchVal(val,cid)          ->
           cases val:
             mk_AS`BoolLit(b,-)    -> return mk_STKM`MatchVal(mk_SEM`BOOL(b),cid),
             mk_AS`NilLit(-)       -> return mk_STKM`MatchVal(mk_SEM`NIL(),cid),
             mk_AS`RealLit(r,-)    -> return mk_STKM`MatchVal(mk_SEM`NUM(r),cid),
             mk_AS`NumLit(r,-)     -> return mk_STKM`MatchVal(mk_SEM`NUM(r),cid),
             mk_AS`CharLit(c,-)    -> return mk_STKM`MatchVal(mk_SEM`CHAR(c),cid),
             mk_AS`TextLit(str,-)  -> return mk_STKM`MatchVal(mk_SEM`SEQ([mk_SEM`CHAR(str(i))
                                                                          | i in set inds str ]),cid),
             mk_AS`QuoteLit(quo,-) -> return mk_STKM`MatchVal(mk_SEM`QUOTE(quo),cid),
 -- PGL (06.07) This is not correct but a major update is needed to fix it.
             --others                -> return mk_STKM`PatternName(nil,nil,cid)
             others                -> def clmodName = CMPL`GetClMod();
                                          id = CMPL`InsertProgram(clmodName, CEXPR`E2I(val));
                                          lft = mk_AS`TotalFnType([], mk_AS`AllType(CI`NilContextId), CI`NilContextId);
                                          env = mk_SEM`BlkEnv({|->},<READ_ONLY>);
                                          fnm = mk_AS`Name([],CI`NilContextId);
                                          efn = mk_SEM`ExplFN(lft,[],id,env,{|->},fnm,clmodName,false,nil,<PRIVATE_AS>);
                                      in return mk_STKM`MatchVal(SEM`CompFN(efn),cid)
           end,
      mk_AS`SetEnumPattern(-,-)    -> def mk_AS`SetEnumPattern(els,-) =
                           PAT`DoCarePattern(pat,mk_AS`Name(["1"], CI`NilContextId));
                                          e_l = [P2P(els(i)) | i in set inds els];
                                          e_l' = [ e_l(i) | i in set inds e_l &
                                                   e_l(i) not in set { e_l(j) | j in set inds e_l & j < i } ]
                                          in return mk_STKM`SetEnumPattern(e_l', pat.cid),
      mk_AS`SetUnionPattern(lp,rp,cid) -> return mk_STKM`SetUnionPattern(P2P(lp), P2P(rp), cid),
      mk_AS`SeqEnumPattern(els,cid)    -> def e_l = [P2P(els(i)) | i in set inds els]
                                          in return mk_STKM`SeqEnumPattern(e_l, cid),
      mk_AS`SeqConcPattern(lp,rp,cid)  -> return mk_STKM`SeqConcPattern(P2P(lp),  P2P(rp), cid),
      mk_AS`MapletPattern(dp,rp,cid)   -> return mk_STKM`MapletPattern(P2P(dp), P2P(rp), cid),
      mk_AS`MapEnumPattern(mls,cid)    -> def m_l = [P2P(mls(i)) | i in set inds mls];
                                              m_l' = [ m_l(i) | i in set inds m_l &
                                                       m_l(i) not in set { m_l(j) | j in set inds m_l & j < i } ]
                                          in return mk_STKM`MapEnumPattern(m_l', cid),
      mk_AS`MapMergePattern(lp,rp,cid) -> return mk_STKM`MapMergePattern(P2P(lp), P2P(rp), cid),
      mk_AS`TuplePattern(p_l,cid)      -> def els = [P2P(p_l(i)) | i in set inds p_l]
                                          in return mk_STKM`TuplePattern(els, cid),
      mk_AS`RecordPattern(nm,p_l,cid)  -> def els = [P2P(p_l(i)) | i in set inds p_l]
                                          in return mk_STKM`RecordPattern(nm, els, cid),
#ifdef VDMPP
      mk_AS`ObjectPattern(cls,fields,cid) -> def f_l = [P2P(fields(i)) | i in set inds fields]
                                             in return mk_STKM`ObjectPattern(cls, f_l, cid),
      mk_AS`FieldPattern(nm,fp,cid)    -> return mk_STKM`FieldPattern(nm, P2P(fp), cid),
#endif VDMPP
      others -> error
    end;

functions
  AnyMatchVals: AS`Pattern +> bool
  AnyMatchVals(pat) ==
    cases pat:
      mk_AS`PatternName(-,-,-)       -> false,
      mk_AS`MatchVal(val,-)          -> not IsLiteral(val),
      mk_AS`SetEnumPattern(els,-)    -> exists p in set elems els & AnyMatchVals(p),
      mk_AS`SetUnionPattern(lp,rp,-) -> AnyMatchVals(lp) or AnyMatchVals(rp),
      mk_AS`SeqEnumPattern(els,-)    -> exists p in set elems els & AnyMatchVals(p),
      mk_AS`SeqConcPattern(lp,rp,-)  -> AnyMatchVals(lp) or AnyMatchVals(rp),
      mk_AS`MapEnumPattern(mls,-)    -> exists p in set elems mls & AnyMatchVals(p),
      mk_AS`MapMergePattern(lp,rp,-) -> AnyMatchVals(lp) or AnyMatchVals(rp),
      mk_AS`MapletPattern(dp,rp,-)   -> AnyMatchVals(dp) or AnyMatchVals(rp),
      mk_AS`TuplePattern(p_l,-)      -> exists p in set elems p_l & AnyMatchVals(p),
      mk_AS`RecordPattern(-,p_l,-)   -> exists p in set elems p_l & AnyMatchVals(p),
#ifdef VDMPP
      mk_AS`ObjectPattern(-,f_l,-)   -> exists p in set elems f_l & AnyMatchVals(p),
      mk_AS`FieldPattern(-,p,-)      -> AnyMatchVals(p),
#endif VDMPP
      others -> undefined
    end;

  IsLiteral: AS`Expr +> bool
  IsLiteral(expr) ==
    is_AS`BoolLit(expr) or
    is_AS`NilLit(expr) or
    is_AS`RealLit(expr) or
    is_AS`NumLit(expr) or
    is_AS`CharLit(expr) or
    is_AS`TextLit(expr) or
    is_AS`QuoteLit(expr)
\end{vdm_al}

\section{State Designators}

\begin{vdm_al}
operations
  SD2I: AS`StateDesignator ==> STKM`SubProgram
  SD2I(sd) ==
    if AnyExprs(sd)
    then return SDStack2I(sd)
    else return SDDirect2I(sd);

  SDStack2I: AS`StateDesignator ==> STKM`SubProgram
  SDStack2I(sd) ==
    cases sd:
#ifdef VDMPP
      mk_AS`SelfExpr(-),
#endif VDMPP
      mk_AS`Name(-,-)                -> return [mk_INSTRTP`PUSH(sd)],
      mk_AS`FieldRef(var,sel,cid)    -> return SD2I(var) ^ [mk_INSTRTP`FREF(sel,cid)],
      mk_AS`MapOrSeqRef(var,arg,cid) -> return SD2I(var) ^ CEXPR`E2I(arg) ^ [mk_INSTRTP`MOSREF(cid)],
      mk_AS`NarrowRef(var,-,-)      -> return SD2I(var)
    end;

functions

  SDDirect2I: AS`StateDesignator +> STKM`SubProgram
  SDDirect2I(sd) ==
    [mk_INSTRTP`PUSH(SD2SD(sd))]
  pre not AnyExprs(sd);

  SD2SD: AS`StateDesignator +> STKM`StateDesignator
  SD2SD(sd) ==
    cases sd:
#ifdef VDMPP
      mk_AS`SelfExpr(-),
#endif VDMPP
      mk_AS`Name(-,-)                -> sd,
      mk_AS`FieldRef(var,sel,cid)    -> mk_STKM`FieldRef(SD2SD(var),sel,cid),
      mk_AS`MapOrSeqRef(var,arg,cid) ->
           cases arg:
             mk_AS`BoolLit(b,-)    -> mk_STKM`MapOrSeqRef(SD2SD(var),mk_SEM`BOOL(b),cid),
             mk_AS`NilLit(-)       -> mk_STKM`MapOrSeqRef(SD2SD(var),mk_SEM`NIL(),cid),
             mk_AS`RealLit(r,-)    -> mk_STKM`MapOrSeqRef(SD2SD(var),mk_SEM`NUM(r),cid),
             mk_AS`NumLit(r,-)     -> mk_STKM`MapOrSeqRef(SD2SD(var),mk_SEM`NUM(r),cid),
             mk_AS`CharLit(c,-)    -> mk_STKM`MapOrSeqRef(SD2SD(var),mk_SEM`CHAR(c),cid),
             mk_AS`TextLit(str,-)  -> mk_STKM`MapOrSeqRef(SD2SD(var),mk_SEM`SEQ([mk_SEM`CHAR(str(i)) | i in set inds str ]),cid),
             mk_AS`QuoteLit(quo,-) -> mk_STKM`MapOrSeqRef(SD2SD(var),mk_SEM`QUOTE(quo),cid),
             others                -> undefined
           end,
      mk_AS`NarrowRef(var,-,-)     -> SD2SD(var)
    end
  pre not AnyExprs(sd);

  AnyExprs: AS`StateDesignator +> bool
  AnyExprs(sd) ==
    cases sd:
#ifdef VDMPP
      mk_AS`SelfExpr(-),
#endif VDMPP
      mk_AS`Name(-,-)              -> false,
      mk_AS`FieldRef(var,-,-)      -> AnyExprs(var),
      mk_AS`MapOrSeqRef(var,arg,-) -> AnyExprs(var) or not IsLiteral(arg),
      mk_AS`NarrowRef(var,-,-)     -> AnyExprs(var)
    end;

  P2E: AS`Pattern -> AS`Expr
  P2E(pat) ==
    cases pat:
      mk_AS`PatternName(nm,-,-)         -> if nm = nil
                                           then undefined
                                           else nm,
      mk_AS`MatchVal(val,-)             -> val,
      mk_AS`SetEnumPattern(p_l,cid)     -> let els = [ P2E(p_l(i)) | i in set inds p_l ]
                                           in mk_AS`SetEnumerationExpr(els, cid),
      mk_AS`SetUnionPattern(lp,rp,cid)  -> mk_AS`BinaryExpr(P2E(lp), <SETUNION>, P2E(rp), cid),
      mk_AS`SeqEnumPattern(p_l,cid)     -> let els = [ P2E(p_l(i)) | i in set inds p_l ]
                                           in mk_AS`SeqEnumerationExpr(els, cid),
      mk_AS`SeqConcPattern(lp,rp,cid)   -> mk_AS`BinaryExpr(P2E(lp), <SEQCONC>, P2E(rp), cid),
      mk_AS`MapletPattern(dp,rp,cid)    -> mk_AS`Maplet(P2E(dp), P2E(rp), cid),
      mk_AS`MapEnumPattern(p_l,cid)     -> let mls = [ P2E(p_l(i)) | i in set inds p_l ]
                                           in mk_AS`MapEnumerationExpr(mls, cid),
      mk_AS`MapMergePattern(lp,rp,cid)  -> mk_AS`BinaryExpr(P2E(lp), <MAPMERGE>, P2E(rp), cid),
      mk_AS`RecordPattern(nm,p_l,cid)   -> let fields = [ P2E(p_l(i)) | i in set inds p_l ]
                                           in mk_AS`RecordConstructorExpr(nm, fields, cid),
      mk_AS`TuplePattern(p_l,cid)       -> let fields = [ P2E(p_l(i)) | i in set inds p_l ]
                                           in mk_AS`TupleConstructorExpr(fields, cid),
#ifdef VDMPP
      mk_AS`ObjectPattern(-,-,-)        -> undefined,
      mk_AS`FieldPattern(-,-,-)         -> undefined,
#endif VDMPP
      others                            -> undefined
    end;

end CPAT
\end{vdm_al}

\vspace{0.5cm}

#ifdef RTINFO
\begin{rtinfo}
{rtinfo.ast}[CPAT]
\end{rtinfo}
#endif RTINFO
