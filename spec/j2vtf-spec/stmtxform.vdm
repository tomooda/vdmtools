\section{VDM++ Statement Transformations}

\label{sec:sxf}

\begin{vdm_al}
module SXF

imports

  from CI all,
  from REP all,
  from AS all,
  from STRIP all

exports all

definitions

\end{vdm_al}

The type {\em SXFId} uniquely identifies the different
transformations which apply to statements. For simplicity we use
natural numbers. 

\begin{vdm_al}

types

SXFId :: id : nat ;

SXFResult = map SXFId to map CI`ContextId to [AS`Stmt] ;

\end{vdm_al}

Statement transformations are currently defined for if statements,
block statements, while loop statements, and define statements. The
specific transformations which are defined are: 

\begin{figure}[htbp]
  \begin{center}
\begin{tabular}{|l|l|l|l|}
Id & Name & Statement Type & Description \\ \hline \hline
1 & whileIfTestTrue &  While Loop & \\ \hline
2 & ifToCases & If Stmt & \\ \hline
3 & ifToEquiv & If Stmt & \\ \hline
4 & nestedIfsNoElses & If Stmt  & \\ \hline
5 & isMapCompLoop & Block Stmt  & \\ \hline
6 & ifTestTrue & Block Stmt  & \\ \hline
7 & ifTestFalse & Block Stmt  & \\ \hline
8 & isRedundantIfBlock & Block Stmt  & \\ \hline
9 & ifToAnd & Block Stmt &  \\ \hline
10 & isRedundantIfBlockNoElse & Block Stmt &  \\ \hline
11 & isRenamingDefStmt & Define Stmt &  \\ \hline
12 & isRedundantDcl & Block Stmt &  \\ \hline
\end{tabular}    
    \caption{Statement Transformations}
    \label{fig:stmtxfs}
  \end{center}
\end{figure}


\begin{vdm_al}

functions

-- test for transformation C; call initially with expr = nil

ifToCases : AS`IfStmt * [AS`Expr] -> bool
ifToCases(mk_AS`IfStmt(p_test, -, p_elsif, p_altn, -), p_expr) == 
  let l_test = STRIP`stripBrackets(p_test) in 
  isEqualityLHS(l_test, p_expr) 
  and let l_common = STRIP`stripBrackets(l_test.left) in
  (p_elsif <> [] or p_altn <> nil)
  and commonElseifs(p_elsif, l_common) 
  and commonElse(p_altn, l_common) ;

getIfToCasesXF : AS`IfStmt -> AS`CasesStmt
getIfToCasesXF(p_stmt) == 
  let l_test = STRIP`stripBrackets(p_stmt.test),
      l_sel = STRIP`stripBrackets(l_test.left),
      l_caseAltns = makeAltnsIf(p_stmt) 
  in mk_AS`CasesStmt(l_sel, l_caseAltns, nil, CI`NilContextId)
pre ifToCases(p_stmt, nil) ;

makeAltnsIf : AS`IfStmt -> seq of AS`CasesStmtAltn
makeAltnsIf(p_stmt) == 
  let mk_AS`IfStmt(l_test, l_cons, l_elsif, l_altn, -) = p_stmt,
      l_test' = STRIP`stripBrackets(l_test),
      l_firstAltn = makeAltn(l_test', l_cons),
      l_elseifAltns = [makeAltn(STRIP`stripBrackets(l_elsif(i).test), l_elsif(i).cons) | i in set inds l_elsif ],
      l_elseAltns = if l_altn = nil then [] else makeAltnsIf(STRIP`stripBlocks(l_altn)) 
  in [l_firstAltn] ^ l_elseifAltns ^ l_elseAltns
pre ifToCases(p_stmt, nil) ;


makeAltn : AS`BinaryExpr * AS`Stmt -> AS`CasesStmtAltn
makeAltn(p_expr, p_stmt) == 
  let l_test = STRIP`stripBrackets(p_expr.right),
      l_pat = mk_AS`MatchVal(l_test, CI`NilContextId)
  in mk_AS`CasesStmtAltn([l_pat], p_stmt, CI`NilContextId)
pre p_expr.opr = <EQ> ;

-- test for transformation F

-- moved to j2vxformexpr.vdm

-- test for transformation G

isMapCompLoop : AS`BlockStmt * AS`Class -> bool
isMapCompLoop(mk_AS`BlockStmt(p_al, p_sl, -), p_c) == 
  p_sl <> []
  and exists mk_AS`AssignDef(b_var, b_tp, b_init, -) in set elems p_al & 
    isIntOrNat(b_tp, p_c) and hasMapCompLoop(p_sl, b_var) and b_init <> nil ;

getMapCompLoopXF : AS`BlockStmt * AS`Class -> AS`BlockStmt
getMapCompLoopXF(p_stmt, p_c) == 
  let mk_AS`BlockStmt(l_al, l_sl, -) = p_stmt,
      mk_AS`WhileLoopStmt(l_test, l_body, -) = hd l_sl,
      [l_s1, l_s2] = l_body.stmts,
      mk_AS`BinaryExpr(l_left, -, l_right, -) = l_test,
      mk_AS`AssignStmt(p_l1, p_r1, -) = l_s1,
      p_r2 = l_s2.rhs,
      l_maplet = hd p_r1.mapexp.els in
  let b_ad in set elems l_al be st b_ad.var = l_left in
  let l_varInit = b_ad.dclinit,
      --l_pat = mk_AS`PatternName(l_left, CI`NilContextId), 
      l_pat = mk_AS`PatternName(l_left, nil, CI`NilContextId), 
      l_set = getSet(l_varInit, l_right, p_r2.opr),
      l_pred = getPred(l_varInit, p_r2.right, l_left, p_r2.opr),
      l_bind = mk_AS`MultSetBind([l_pat], l_set, CI`NilContextId),
      l_mapComp = mk_AS`MapComprehensionExpr(l_maplet, [l_bind], l_pred, CI`NilContextId),
      l_ass = mk_AS`AssignStmt(p_l1, l_mapComp, CI`NilContextId)
  in mk_AS`BlockStmt(l_al, [l_ass] ^ tl l_sl, CI`NilContextId)
pre isMapCompLoop(p_stmt, p_c) ; 

getSet : [AS`Expr] * AS`Expr * AS`BinaryOp -> AS`SetRangeExpr
getSet(p_first, p_last, p_op) == 
  if p_op = <NUMPLUS>
  then mk_AS`SetRangeExpr(p_first, p_last, CI`NilContextId)
  else mk_AS`SetRangeExpr(p_last, p_first, CI`NilContextId)
pre p_first <> nil and p_op in set {<NUMPLUS>, <NUMMINUS>} ;

getPred : AS`Expr * AS`RealLit * AS`Name * AS`BinaryOp -> [AS`Expr]
getPred(p_first, p_step, p_name, p_op) == 
  if abs p_step.val = 1 
  then nil
  else let l_left = if p_op = <NUMPLUS>
                    then mk_AS`BinaryExpr(p_first, <NUMMINUS>, p_name, CI`NilContextId)
                    else mk_AS`BinaryExpr(p_name, <NUMMINUS>, p_first, CI`NilContextId)
       in mk_AS`BinaryExpr(l_left, <NUMMOD>, p_step, CI`NilContextId)
pre p_op in set {<NUMPLUS>, <NUMMINUS>} ;

-- test for transformation I

isRedundantDcl : AS`BlockStmt -> bool
isRedundantDcl(p_stmt) == 
  let mk_AS`BlockStmt(l_al, l_sl, -) = p_stmt in 
    len l_al = 1 
    and len l_sl = 1 
    and let [l_a] = l_al, [l_s] = l_sl in
      is_AS`ReturnStmt(l_s)
      and l_a.var = l_s.val;

getRedundantDclXF : AS`BlockStmt -> AS`ReturnStmt
getRedundantDclXF(p_stmt) == 
 mk_AS`ReturnStmt((hd p_stmt.dcls).dclinit, CI`NilContextId) 
pre isRedundantDcl(p_stmt) ;

-- moved to j2vxopform.vdm

-- test for transformation J (simplified)

isRenamingDefStmt : AS`DefStmt -> bool
isRenamingDefStmt(mk_AS`DefStmt(p_defs, -, -)) == 
  exists  mk_(l_patBind, l_expr) in set elems p_defs & 
    let l_pat = STRIP`patternOfBind(l_patBind) in 
      is_AS`PatternName(l_pat) and is_AS`Name(STRIP`stripBrackets(l_expr)) ;

getRenamingDefSXF : AS`DefStmt -> [AS`DefStmt]
getRenamingDefSXF(p_stmt) == nil 
pre isRenamingDefStmt(p_stmt) ;

-- def expression moved to j2vxformexpr.vdm

-- test for transformation L

ifTestTrue : AS`BlockStmt * AS`Class -> bool
ifTestTrue(mk_AS`BlockStmt(p_al, p_sl, -), p_class) == 
  p_sl <> [] 
  and exists b_a in set elems p_al & 
    isBool(b_a.tp, p_class) 
    and is_AS`BoolLit(b_a.dclinit) 
    and b_a.dclinit.val 
    and isSingleIfTest(hd p_sl, b_a.var);

getIfTestTrueXF : AS`BlockStmt * AS`Class -> AS`BlockStmt
getIfTestTrueXF(p_stmt, p_c) == 
  let mk_AS`BlockStmt(l_dcls, l_body, -) = p_stmt,
      l_first = hd l_body,
      l_newFirst = getThen(l_first),
      l_newBody = [l_newFirst] ^ tl l_body
  in mk_AS`BlockStmt(l_dcls, l_newBody, CI`NilContextId)
pre ifTestTrue(p_stmt, p_c) ;

ifTestFalse : AS`BlockStmt * AS`Class -> bool
ifTestFalse(mk_AS`BlockStmt(p_al, p_sl, -), p_class) == 
  p_sl <> [] 
  and exists b_a in set elems p_al & 
    isBool(b_a.tp, p_class) 
    and is_AS`BoolLit(b_a.dclinit) 
    and not b_a.dclinit.val
    and isSingleIfTest(hd p_sl, b_a.var);

getIfTestFalseXF : AS`BlockStmt * AS`Class -> AS`BlockStmt
getIfTestFalseXF(p_stmt, p_c) == 
  let mk_AS`BlockStmt(l_dcls, l_body, -) = p_stmt,
      l_first = hd l_body,
      l_newFirst = getElse(l_first),
      l_newBody = [l_newFirst] ^ tl l_body
  in mk_AS`BlockStmt(l_dcls, l_newBody, CI`NilContextId)
pre ifTestFalse(p_stmt, p_c) ;

-- test for transformation N(1)

ifToEquiv : AS`IfStmt -> bool
ifToEquiv(mk_AS`IfStmt(-, p_cons, p_elsif, p_altn, -)) == 
           p_elsif = [] 
           and p_altn <> nil
           and isSingleIfThenElseNoDcls(p_cons)
           and isSingleIfThenElseNoDcls(p_altn) 
           and let mk_(l_test1, l_cons1, l_altn1) = ifOf(p_cons),
                   mk_(l_test2, l_cons2, l_altn2) = ifOf(p_altn) in
               l_altn1 <> nil
               and l_altn2 <> nil
               and STRIP`areEquivExprs(l_test1, l_test2)
               and STRIP`areEquivStmts(l_cons1, l_altn2)
               and STRIP`areEquivStmts(l_cons2, l_altn1) ;

getIfToEquivXF : AS`IfStmt -> AS`IfStmt
getIfToEquivXF(p_stmt) == 
  let mk_AS`IfStmt(l_test, l_cons, -, -, -) = p_stmt,
      mk_(l_test', l_cons', l_altn') = ifOf(l_cons),
      l_newTest = mk_AS`BinaryExpr(l_test, <EQUIV>, l_test', CI`NilContextId)
  in mk_AS`IfStmt(l_newTest, l_cons', [], l_altn', CI`NilContextId)
pre ifToEquiv(p_stmt) ;

-- test N(2) moved to j2vxformexpr.vdm

-- test for transformation Q

isRedundantIfBlock : AS`BlockStmt * AS`Class -> bool
isRedundantIfBlock(mk_AS`BlockStmt(p_al, p_sl, -), p_c) ==  
  len p_sl = 2 
  and exists b_a in set elems p_al & 
    isBool(b_a.tp, p_c)
    and isRedundantIfStmt(hd p_sl, b_a.var) 
    and isSingleReturnVal(p_sl(2), b_a.var) 
    and let l_dcls = getDcls(hd p_sl) in 
        not exists b_a' in set elems l_dcls & b_a'.var = b_a.var ;

isRedundantIfBlockNoElse : AS`BlockStmt * AS`Class -> bool
isRedundantIfBlockNoElse(mk_AS`BlockStmt(p_al, p_sl, -), p_c) ==  
  len p_sl = 2 
  and exists mk_AS`AssignDef(l_var, l_tp, l_init, -) in set elems p_al & 
    isBool(l_tp, p_c) 
    and is_AS`BoolLit(l_init)
    and isRedundantIfNoElse(hd p_sl, l_var, l_init) 
    and isSingleReturnVal(p_sl(2), l_var) 
    and let l_dcls = getDcls(hd p_sl) in 
        not exists b_a' in set elems l_dcls & b_a'.var = l_var ;

isRedundantIfNoElse : AS`Stmt * AS`Name * AS`BoolLit-> bool
isRedundantIfNoElse(p_stmt, p_name, p_b) == 
  ( is_AS`BlockStmt(p_stmt) 
    and let mk_AS`BlockStmt(-, l_sl, -) =  p_stmt in 
    len l_sl = 1 
    and isRedundantIfNoElse(hd l_sl, p_name, p_b) )
  or
    is_AS`IfStmt(p_stmt) 
    and let mk_AS`IfStmt(-, l_cons, l_elsif, l_altn, -) = p_stmt in
      l_elsif = [] 
      and l_altn = nil 
      and isSingleAssignmentLHS(l_cons, p_name) 
      and let l_b1 = assignsTo(l_cons, p_name) in
         is_AS`BoolLit(l_b1)
          and areOpposite(l_b1, p_b) ;


getRedundantIfBlockXF : AS`BlockStmt * AS`Class -> AS`BlockStmt
getRedundantIfBlockXF(p_stmt, p_c) ==
  let mk_AS`BlockStmt(l_al, l_sl, -) = p_stmt,
      l_name = returnValue(l_sl(2)),
      l_test = getTest(hd l_sl),
      l_neg = assignsTo(getThen(hd l_sl), l_name).val,
      l_result = if l_neg then l_test else mk_AS`PrefixExpr(<NOT>, l_test, CI`NilContextId),
      l_newReturn = mk_AS`ReturnStmt(l_result, CI`NilContextId),
      l_newBody = replaceIf(hd l_sl, l_newReturn)
  in mk_AS`BlockStmt(l_al, [l_newBody], CI`NilContextId)
 pre isRedundantIfBlock(p_stmt, p_c) or isRedundantIfBlockNoElse(p_stmt, p_c);

replaceIf : AS`Stmt * AS`Stmt -> AS`Stmt
replaceIf(p_stmt, p_newBody) == 
  if is_AS`IfStmt(p_stmt) 
  then p_newBody
  else let mk_AS`BlockStmt(l_al, l_sl, -) =  p_stmt,
           l_newIf = replaceIf(hd l_sl, p_newBody)
       in mk_AS`BlockStmt(l_al, [l_newIf], CI`NilContextId)
pre isSingleIfThenElse(p_stmt) ;

-- test for transformation R

whileIfTestTrue : AS`WhileLoopStmt -> bool
whileIfTestTrue(mk_AS`WhileLoopStmt(p_test, p_body, -)) == 
  let l_test = STRIP`stripBrackets(p_test) in
               isSingleIfTest(p_body, l_test)
               or 
               is_AS`BlockStmt(p_body) 
               and let l_sl = p_body.stmts in 
               l_sl <> [] and  isSingleIfTest(hd l_sl, l_test);

getWhileIfTestTrue : AS`WhileLoopStmt -> AS`WhileLoopStmt
getWhileIfTestTrue(p_stmt) == 
  let mk_AS`WhileLoopStmt(l_test, l_body, -) = p_stmt,
      l_stripTest = STRIP`stripBrackets(l_test),
      l_newBody = if isSingleIfTest(l_body, l_stripTest)
                  then getThen(l_body)
                  else mk_AS`BlockStmt(l_body.dcls, [getThen(hd
                  l_body.stmts)] ^ tl l_body.stmts, CI`NilContextId)
  in mk_AS`WhileLoopStmt(l_test, l_newBody, CI`NilContextId)
pre whileIfTestTrue(p_stmt) ;

-- test for transformation U

ifToAnd : AS`BlockStmt -> bool
ifToAnd(p_block) == 
  let l_sl = p_block.stmts in 
    len l_sl = 2 
    and let [l_s1, l_s2] = l_sl in
      isSingleIfThenElseNoDcls(l_s1)
      and getElsif(l_s1) = []
      and getElse(l_s1) = nil
      and isSingleReturn(getThen(l_s1))
      and isSingleReturn(l_s2)
      and let l_expr = returnValue(l_s2) in
        is_AS`BoolLit(l_expr) 
        and not l_expr.val ;

-- brackets in and expression?

getIfToAndXF: AS`BlockStmt -> AS`BlockStmt
getIfToAndXF(p_stmt) == 
  let mk_AS`BlockStmt(l_dcls, l_body, -) = p_stmt,
      l_s1 = hd l_body, 
      l_left = mk_AS`BracketedExpr(getTest(l_s1), CI`NilContextId),
      l_right = mk_AS`BracketedExpr(returnValue(getThen(l_s1)), CI`NilContextId),
      l_and = mk_AS`BinaryExpr(l_left, <AND>, l_right, CI`NilContextId), 
      l_newBody = [mk_AS`ReturnStmt(l_and, CI`NilContextId)] 
  in mk_AS`BlockStmt(l_dcls, l_newBody, CI`NilContextId)
pre ifToAnd(p_stmt) ;

-- test for transformation W

nestedIfsNoElses : AS`IfStmt -> bool
nestedIfsNoElses(mk_AS`IfStmt(-, p_cons, p_elsif, p_altn, -)) == 
  p_elsif = [] and p_altn = nil and isIfNoElse(p_cons) ;

-- brackets in and expression?

getNestedIfsNoElsesXF : AS`IfStmt -> AS`IfStmt
getNestedIfsNoElsesXF(p_stmt) == 
  let mk_AS`IfStmt(p_test, p_cons, -, -, -) = p_stmt,
      l_right = mk_AS`BracketedExpr(getTest(p_cons), CI`NilContextId),
      l_left = mk_AS`BracketedExpr(p_test, CI`NilContextId),
      l_newTest = mk_AS`BinaryExpr(l_left, <AND>, l_right, CI`NilContextId),
      l_newCons = getThen(p_cons) 
  in mk_AS`IfStmt(l_newTest, l_newCons, [], nil, CI`NilContextId)
pre nestedIfsNoElses(p_stmt) ;

-- local tests for transforms

-- only test J matches a Def statement

localSXFSDefStmt : AS`DefStmt * set of SXFId -> SXFResult
localSXFSDefStmt(p_stmt, p_ids) == 
  if mk_SXFId(11) in set p_ids and isRenamingDefStmt(p_stmt)
  then emptyXFStmt(p_ids) ++ { mk_SXFId(11) |-> { p_stmt.cid |-> getRenamingDefSXF(p_stmt) } }
  else emptyXFStmt(p_ids) ;

-- only test R matches a WhileLoop statement

localSXFSWhileLoopStmt : AS`WhileLoopStmt * set of SXFId -> SXFResult
localSXFSWhileLoopStmt(p_stmt, p_ids) == 
  if mk_SXFId(1) in set p_ids and whileIfTestTrue(p_stmt)
  then emptyXFStmt(p_ids) ++ { mk_SXFId(1) |-> { p_stmt.cid |-> getWhileIfTestTrue(p_stmt) } }
  else emptyXFStmt(p_ids) ;

-- tests C, N and W match an If statement

localSXFSIfStmt : AS`IfStmt * set of SXFId -> SXFResult
localSXFSIfStmt(p_stmt, p_ids) == 
  let l_matchC = if mk_SXFId(2) in set p_ids and ifToCases(p_stmt, nil)
               then emptyXFStmt(p_ids) ++ { mk_SXFId(2) |-> { p_stmt.cid |-> getIfToCasesXF(p_stmt) } }
               else emptyXFStmt(p_ids),
      l_matchN = if mk_SXFId(3) in set p_ids and ifToEquiv(p_stmt)
               then emptyXFStmt(p_ids) ++ { mk_SXFId(3) |-> { p_stmt.cid |-> getIfToEquivXF(p_stmt) } }
               else emptyXFStmt(p_ids),
      l_matchW = if mk_SXFId(4) in set p_ids and nestedIfsNoElses(p_stmt)
               then emptyXFStmt(p_ids) ++ { mk_SXFId(4) |-> { p_stmt.cid |-> getNestedIfsNoElsesXF(p_stmt) } }
               else emptyXFStmt(p_ids)
  in
  mergeSXFList([l_matchC, l_matchN, l_matchW], p_ids) ;

-- tests G, L (both), Q and U match a Block statement

localSXFSBlockStmt : AS`BlockStmt * AS`Class * set of SXFId -> SXFResult
localSXFSBlockStmt(p_stmt, p_c, p_ids) == 
  let l_matchG = if mk_SXFId(5) in set p_ids and isMapCompLoop(p_stmt, p_c)
               then emptyXFStmt(p_ids) ++ { mk_SXFId(5) |-> { p_stmt.cid |-> getMapCompLoopXF(p_stmt, p_c) } }
               else emptyXFStmt(p_ids),
      l_matchL1 = if mk_SXFId(6) in set p_ids and ifTestTrue(p_stmt, p_c)
               then emptyXFStmt(p_ids) ++ { mk_SXFId(6) |-> { p_stmt.cid |-> getIfTestTrueXF(p_stmt, p_c) } }
               else emptyXFStmt(p_ids),
      l_matchL2 = if mk_SXFId(7) in set p_ids and ifTestFalse(p_stmt, p_c)
               then emptyXFStmt(p_ids) ++ { mk_SXFId(7) |-> { p_stmt.cid |->  getIfTestFalseXF(p_stmt, p_c) } }
               else emptyXFStmt(p_ids),
      l_matchQ = if mk_SXFId(8) in set p_ids and isRedundantIfBlock(p_stmt, p_c)
               then emptyXFStmt(p_ids) ++ { mk_SXFId(8) |-> { p_stmt.cid |-> getRedundantIfBlockXF(p_stmt, p_c) } }
               else emptyXFStmt(p_ids),
      l_matchU = if mk_SXFId(9) in set p_ids and ifToAnd(p_stmt)
               then emptyXFStmt(p_ids) ++ { mk_SXFId(9) |-> { p_stmt.cid |-> getIfToAndXF(p_stmt) } }
               else emptyXFStmt(p_ids),
      l_matchQ1 = if mk_SXFId(10) in set p_ids and isRedundantIfBlockNoElse(p_stmt, p_c)
               then emptyXFStmt(p_ids) ++ { mk_SXFId(10) |-> { p_stmt.cid |-> getRedundantIfBlockXF(p_stmt, p_c) } } else emptyXFStmt(p_ids),
      l_matchI = if mk_SXFId(12) in set p_ids and isRedundantDcl(p_stmt)
               then emptyXFStmt(p_ids) ++ { mk_SXFId(12) |-> { p_stmt.cid |-> getRedundantDclXF(p_stmt) } }
               else emptyXFStmt(p_ids)
  in
  mergeSXFList([l_matchG, l_matchL1, l_matchL2, l_matchQ, l_matchU, l_matchQ1, l_matchI], p_ids) ;

-- search functions

emptyXFStmt : set of SXFId -> SXFResult
emptyXFStmt(p_ids) == { b_id |-> { |-> } | b_id in set p_ids } ; 

mergeSXFS : SXFResult * SXFResult -> SXFResult
mergeSXFS(p_m1, p_m2) == { b_id |-> p_m1(b_id) ++ p_m2(b_id) | b_id in set dom p_m1 }
pre dom p_m1 = dom p_m2 ; 

mergeSXFList : seq of SXFResult * set of SXFId -> SXFResult
mergeSXFList(p_ml, p_ids) == 
  if p_ml = [] 
  then emptyXFStmt(p_ids)
  else mergeSXFS( hd p_ml, mergeSXFList(tl p_ml, p_ids) )
pre forall b_m in set elems p_ml & dom b_m = p_ids ; 

sxfsClassList : seq of AS`Class * set of SXFId -> SXFResult
sxfsClassList(p_cl, p_ids) == 
  if p_cl = [] 
  then emptyXFStmt(p_ids)
  else let l_hdXfs = sxfsClass(hd p_cl, p_ids), 
           l_tlXfs = sxfsClassList(tl p_cl, p_ids) in
  mergeSXFS(l_hdXfs, l_tlXfs) ;

sxfsClass : AS`Class * set of SXFId -> SXFResult
sxfsClass(p_c, p_ids) == 
  let l_defs = p_c.defs in 
    if l_defs = nil 
    then emptyXFStmt(p_ids) 
    else sxfsDefinitions(l_defs, p_c, p_ids) ;

sxfsDefinitions : AS`Definitions * AS`Class * set of SXFId -> SXFResult
sxfsDefinitions(p_defs, p_c, p_ids) == 
  let l_opXfs = sxfsOps(p_defs.opm, p_c, p_ids),
      l_threadXfs = sxfsThread(p_defs.threaddef, p_c, p_ids) in
  mergeSXFS(l_opXfs, l_threadXfs) ;

sxfsOps : map AS`Name to AS`OpDef * AS`Class * set of SXFId -> SXFResult
sxfsOps(p_opMap, p_c, p_ids) == 
  if p_opMap = { |-> } 
  then emptyXFStmt(p_ids) 
  else let l_name in set dom p_opMap in 
       let l_opXfs = sxfsOpDef(p_opMap(l_name), p_c, p_ids),
           l_dsubXfs = sxfsOps({l_name} <-: p_opMap, p_c, p_ids) 
       in  
       mergeSXFS(l_opXfs, l_dsubXfs) ;

sxfsOpDef : AS`OpDef * AS`Class * set of SXFId -> SXFResult
sxfsOpDef(p_opDef, p_c, p_ids) == 
  if is_AS`ImplOpDef(p_opDef) 
  then emptyXFStmt(p_ids) 
  else sxfsOpBody(p_opDef.body, p_c, p_ids) ;

sxfsOpBody : AS`OpBody * AS`Class * set of SXFId -> SXFResult
sxfsOpBody(p_opBody, p_c, p_ids) == 
  let l_body = p_opBody.body in 
    if l_body = <NOTYETSPEC> or l_body = <SUBRESP> 
    then emptyXFStmt(p_ids) 
    else sxfsStmt(l_body, p_c, p_ids) ;

sxfsThread : [AS`ThreadDef] * AS`Class * set of SXFId -> SXFResult
sxfsThread(p_thread, p_c, p_ids) == 
  if p_thread = nil or is_AS`PerObl(p_thread) 
  then emptyXFStmt(p_ids) 
  else sxfsStmt(p_thread, p_c, p_ids) ;

sxfsStmtList : seq of AS`Stmt * AS`Class * set of SXFId -> SXFResult
sxfsStmtList(p_sl, p_c, p_ids) == 
  if p_sl = [] 
  then emptyXFStmt(p_ids)
  else let l_hdXfs = sxfsStmt(hd p_sl, p_c, p_ids), 
           l_tlXfs = sxfsStmtList(tl p_sl, p_c, p_ids) in
  mergeSXFS(l_hdXfs, l_tlXfs) ;

-- the lines commented out in the cases statement below correspond to types of statement 
-- for which no transformations are (so far) defined

sxfsStmt : AS`Stmt * AS`Class * set of SXFId -> SXFResult
sxfsStmt(p_stmt, p_c, p_ids) == cases true:
      (is_AS`DefStmt(p_stmt)) -> sxfsDefStmt (p_stmt, p_c, p_ids),
      (is_AS`LetStmt (p_stmt)) -> sxfsLetStmt (p_stmt, p_c, p_ids),
      (is_AS`LetBeSTStmt(p_stmt)) -> sxfsLetBeSTStmt (p_stmt, p_c, p_ids),
--      (is_AS`AssignStmt(p_stmt)) -> sxfsAssignStmt (p_stmt, p_c, p_ids),
--      (is_AS`AtomicAssignStmt(p_stmt)) -> sxfsAtomicAssignStmt (p_stmt, p_c, p_ids),
      (is_AS`SeqForLoopStmt(p_stmt)) -> sxfsSeqForLoopStmt (p_stmt, p_c, p_ids),
      (is_AS`SetForLoopStmt(p_stmt)) -> sxfsSetForLoopStmt (p_stmt, p_c, p_ids),
      (is_AS`IndexForLoopStmt(p_stmt)) -> sxfsIndexForLoopStmt (p_stmt, p_c, p_ids),
      (is_AS`WhileLoopStmt(p_stmt)) -> sxfsWhileLoopStmt (p_stmt, p_c, p_ids),
--      (is_AS`CallStmt(p_stmt)) -> sxfsCallStmt (p_stmt, p_c, p_ids),
--      (is_AS`ReturnStmt(p_stmt)) -> sxfsReturnStmt (p_stmt, p_c, p_ids),
      (is_AS`IfStmt(p_stmt)) -> sxfsIfStmt (p_stmt, p_c, p_ids),
      (is_AS`CasesStmt(p_stmt)) -> sxfsCasesStmt (p_stmt, p_c, p_ids),
--      (is_AS`ErrorStmt(p_stmt)) -> sxfsErrorStmt (p_stmt, p_c, p_ids),
      (is_AS`AlwaysStmt(p_stmt)) -> sxfsAlwaysStmt (p_stmt, p_c, p_ids),
--      (is_AS`ExitStmt(p_stmt)) -> sxfsExitStmt (p_stmt, p_c, p_ids),
      (is_AS`TrapStmt(p_stmt)) -> sxfsTrapStmt (p_stmt, p_c, p_ids),
      (is_AS`RecTrapStmt(p_stmt)) -> sxfsRecTrapStmt (p_stmt, p_c, p_ids),
      (is_AS`BlockStmt(p_stmt)) -> sxfsBlockStmt (p_stmt, p_c, p_ids),
      (is_AS`NonDetStmt(p_stmt)) -> sxfsNonDetStmt (p_stmt, p_c, p_ids),
--      (is_AS`SpecificationStmt(p_stmt)) -> sxfsSpecificationStmt (p_stmt, p_c, p_ids),
--      (is_AS`IdentStmt(p_stmt)) -> sxfsIdentStmt (p_stmt, p_c, p_ids),
--      (is_AS`StartStmt(p_stmt)) -> sxfsStartStmt(p_stmt, p_c, p_ids),
--      (is_AS`StartListStmt(p_stmt)) -> sxfsStartListStmt(p_stmt, p_c, p_ids),
      others -> emptyXFStmt(p_ids)
    end;

-- no statement transform matches a Def statement directly so match its In

sxfsDefStmt : AS`DefStmt * AS`Class * set of SXFId -> SXFResult
sxfsDefStmt(p_stmt, p_c, p_ids) == 
  let l_localXfs = localSXFSDefStmt(p_stmt, p_ids),
      l_subXfs = sxfsStmt(p_stmt.In, p_c, p_ids) in
  mergeSXFS(l_localXfs, l_subXfs) ;

-- no statement transform matches a Let statement directly so match its In

sxfsLetStmt : AS`LetStmt * AS`Class * set of SXFId -> SXFResult
sxfsLetStmt(p_stmt, p_c, p_ids) == sxfsStmt(p_stmt.In, p_c, p_ids) ;

-- no statement transform matches a LetBeST statement directly so match its In

sxfsLetBeSTStmt : AS`LetBeSTStmt * AS`Class * set of SXFId -> SXFResult
sxfsLetBeSTStmt(p_stmt, p_c, p_ids) == sxfsStmt(p_stmt.In, p_c, p_ids) ;

-- no statement transform matches a SeqForLoop statement directly so match its body

sxfsSeqForLoopStmt : AS`SeqForLoopStmt * AS`Class * set of SXFId -> SXFResult
sxfsSeqForLoopStmt(p_stmt, p_c, p_ids) == sxfsStmt(p_stmt.body, p_c, p_ids) ;

-- no statement transform matches a SetForLoop statement directly so match its body

sxfsSetForLoopStmt : AS`SetForLoopStmt * AS`Class * set of SXFId -> SXFResult
sxfsSetForLoopStmt(p_stmt, p_c, p_ids) == sxfsStmt(p_stmt.body, p_c, p_ids) ;

-- no statement transform matches an IndexForLoop statement directly so match its body

sxfsIndexForLoopStmt : AS`IndexForLoopStmt * AS`Class * set of SXFId -> SXFResult
sxfsIndexForLoopStmt(p_stmt, p_c, p_ids) == sxfsStmt(p_stmt.body, p_c, p_ids) ;

-- get transforms matching WhileLoop statement directly using localSXFSWhileLoopStmt; search for other transforms in body of loop

sxfsWhileLoopStmt : AS`WhileLoopStmt * AS`Class * set of SXFId -> SXFResult
sxfsWhileLoopStmt(p_stmt, p_c, p_ids) == 
  let l_localXfs = localSXFSWhileLoopStmt(p_stmt, p_ids),
      l_subXfs = sxfsStmt(p_stmt.body, p_c, p_ids) in
  mergeSXFS(l_localXfs, l_subXfs) ;

-- get transforms matching If statement directly using localSXFSIfStmt; search for other transforms in cons, elsif and altn

sxfsIfStmt : AS`IfStmt * AS`Class * set of SXFId -> SXFResult
sxfsIfStmt(p_stmt, p_c, p_ids) == 
  let mk_AS`IfStmt(-, l_cons, l_elsif, l_altn, -) = p_stmt, 
      l_elsifCons = [l_elsif(b_i).cons | b_i in set inds l_elsif ], 
      l_consXFs = sxfsStmtList([l_cons] ^ l_elsifCons, p_c, p_ids), 
      l_subXFs = if l_altn = nil then l_consXFs else
        mergeSXFS(l_consXFs, 
          sxfsStmt(l_altn, p_c, p_ids)) in 
 mergeSXFS(localSXFSIfStmt(p_stmt, p_ids), l_subXFs ) ;

-- no statement transform matches a Cases statement directly so match its altns and Others

sxfsCasesStmt : AS`CasesStmt * AS`Class * set of SXFId -> SXFResult
sxfsCasesStmt(p_stmt, p_c, p_ids) == 
  let l_altns = p_stmt.altns, 
      l_others = p_stmt.Others, 
      l_altnBodies = [l_altns(b_i).body | b_i in set inds l_altns ], 
      l_altnXFs = sxfsStmtList(l_altnBodies, p_c, p_ids)
      in 
  if l_others = nil 
  then l_altnXFs 
  else mergeSXFS(l_altnXFs, sxfsStmt(l_others, p_c, p_ids)) ;

-- no statement transform matches an Always statement directly so match Post and body

sxfsAlwaysStmt : AS`AlwaysStmt * AS`Class * set of SXFId -> SXFResult
sxfsAlwaysStmt(p_stmt, p_c, p_ids) == 
  mergeSXFS( sxfsStmt(p_stmt.Post, p_c, p_ids), 
    sxfsStmt(p_stmt.body, p_c, p_ids)) ;

-- no statement transform matches a Trap statement directly so match Post and body

sxfsTrapStmt : AS`TrapStmt * AS`Class * set of SXFId -> SXFResult
sxfsTrapStmt(p_stmt, p_c, p_ids) == 
  mergeSXFS( sxfsStmt(p_stmt.Post, p_c, p_ids), 
    sxfsStmt(p_stmt.body, p_c, p_ids)) ;

-- no statement transform matches a RecTrap statement directly so match its body and the trappost of each of its traps

sxfsRecTrapStmt : AS`RecTrapStmt * AS`Class * set of SXFId -> SXFResult
sxfsRecTrapStmt(p_stmt, p_c, p_ids) == 
  let l_traps = p_stmt.traps, 
    l_trapposts = [l_traps(b_i).trappost | b_i in set inds l_traps ] in 
  mergeSXFS( sxfsStmtList(l_trapposts, p_c, p_ids), 
    sxfsStmt(p_stmt.body, p_c, p_ids)) ;

-- get transforms matching Block statement directly using localSXFSBlockStmt; search for other transforms in stmts of block

sxfsBlockStmt : AS`BlockStmt * AS`Class * set of SXFId -> SXFResult
sxfsBlockStmt(p_stmt, p_c, p_ids) == 
  mergeSXFS(localSXFSBlockStmt(p_stmt, p_c, p_ids), 
    sxfsStmtList(p_stmt.stmts, p_c, p_ids) ) ;

-- no statement transform matches a NonDet statement directly so match all its stmts

sxfsNonDetStmt : AS`NonDetStmt * AS`Class * set of SXFId -> SXFResult
sxfsNonDetStmt(p_stmt, p_c, p_ids) == sxfsStmtList(p_stmt.stmts, p_c, p_ids) ;

-- auxiliary functions

isIfNoElse : AS`Stmt -> bool
isIfNoElse(p_stmt) == 
  is_AS`IfStmt(p_stmt) and p_stmt.elsif = [] and p_stmt.altn = nil
  or
  is_AS`BlockStmt(p_stmt) and p_stmt.dcls = [] and len p_stmt.stmts = 1 and isIfNoElse(hd p_stmt.stmts) ; 

isRedundantIfStmt : AS`Stmt * AS`Name -> bool
isRedundantIfStmt(p_stmt, p_name) == 
  ( is_AS`BlockStmt(p_stmt) 
    and let mk_AS`BlockStmt(-, l_sl, -) =  p_stmt in 
    len l_sl = 1 
    and isRedundantIfStmt(hd l_sl, p_name) )
  or
    is_AS`IfStmt(p_stmt) 
    and let mk_AS`IfStmt(-, l_cons, l_elsif, l_altn, -) = p_stmt in
      l_elsif = [] 
      and l_altn <> nil 
      and isSingleAssignmentLHS(l_cons, p_name) 
      and isSingleAssignmentLHS(l_altn, p_name) 
      and let l_b1 = assignsTo(l_cons, p_name),
              l_b2 = assignsTo(l_altn, p_name) in
         is_AS`BoolLit(l_b1)
         and is_AS`BoolLit(l_b2)
         and areOpposite(l_b1, l_b2) ;

getDcls : AS`Stmt -> seq of AS`AssignDef 
getDcls(p_stmt) == 
  if is_AS`IfStmt(p_stmt) 
  then []
  else let mk_AS`BlockStmt(l_al, l_sl, -) =  p_stmt,
           l_dcls = getDcls(hd l_sl)
       in l_al ^ l_dcls
pre isSingleIfThenElse(p_stmt) ;

areOpposite : AS`BoolLit * AS`BoolLit -> bool
areOpposite(p_b1, p_b2) == p_b1.val <=> not p_b2.val ;

isSingleAssignmentLHS : AS`Stmt * AS`Name -> bool
isSingleAssignmentLHS(p_stmt, p_name) == 
  ( is_AS`BlockStmt(p_stmt) 
    and let mk_AS`BlockStmt(l_al, l_sl, -) =  p_stmt in 
      l_al = [] and len l_sl = 1 and isSingleAssignmentLHS(hd l_sl, p_name) )
  or
  is_AS`AssignStmt(p_stmt) and p_stmt.lhs = p_name ;

assignsTo : AS`Stmt * AS`Name -> AS`Expr
assignsTo(p_stmt, p_name) ==
  if is_AS`AssignStmt(p_stmt)
  then p_stmt.rhs
  else assignsTo(hd p_stmt.stmts, p_name)
pre isSingleAssignmentLHS(p_stmt, p_name) ;

isSingleReturnVal : AS`Stmt * AS`Expr -> bool
isSingleReturnVal(p_stmt, p_expr) == 
  isSingleReturn(p_stmt) and returnValue(p_stmt)= p_expr ;

isSingleReturn : AS`Stmt -> bool
isSingleReturn(p_stmt) == 
  ( is_AS`BlockStmt(p_stmt) 
    and let mk_AS`BlockStmt(l_al, l_sl, -) =  p_stmt in 
    l_al = [] and len l_sl = 1 and isSingleReturn(hd l_sl) )
  or
  is_AS`ReturnStmt(p_stmt) ;

returnValue : AS`Stmt -> AS`Expr
returnValue(p_stmt) ==
  if is_AS`ReturnStmt(p_stmt)
  then p_stmt.val
  else returnValue(hd p_stmt.stmts)
pre isSingleReturn(p_stmt) ;

isSingleIfThenElse : AS`Stmt -> bool
isSingleIfThenElse(p_stmt) == 
  ( is_AS`BlockStmt(p_stmt) 
    and let mk_AS`BlockStmt(-, l_sl, -) =  p_stmt in 
      len l_sl = 1 and isSingleIfThenElse(hd l_sl) )
  or
  is_AS`IfStmt(p_stmt) ;

isSingleIfThenElseNoDcls : AS`Stmt -> bool
isSingleIfThenElseNoDcls(p_stmt) == 
  ( is_AS`BlockStmt(p_stmt) 
    and let mk_AS`BlockStmt(l_al, l_sl, -) =  p_stmt in 
      l_al = [] and len l_sl = 1 and isSingleIfThenElseNoDcls(hd l_sl) )
  or
  is_AS`IfStmt(p_stmt) ;

getTest : AS`Stmt -> AS`Expr
getTest(p_stmt) == 
  if is_AS`BlockStmt(p_stmt) 
  then getTest(hd p_stmt.stmts)
  else p_stmt.test
pre isSingleIfThenElse(p_stmt) ;

getThen : AS`Stmt -> AS`Stmt
getThen(p_stmt) == 
  if is_AS`BlockStmt(p_stmt) 
  then getThen(hd p_stmt.stmts)
  else p_stmt.cons
pre isSingleIfThenElse(p_stmt) ;

getElse : AS`Stmt -> [AS`Stmt]
getElse(p_stmt) == 
  if is_AS`BlockStmt(p_stmt) 
  then getElse(hd p_stmt.stmts)
  else p_stmt.altn
pre isSingleIfThenElse(p_stmt) ;

getElsif : AS`Stmt -> seq of AS`ElseifStmt
getElsif(p_stmt) == 
  if is_AS`BlockStmt(p_stmt) 
  then getElsif(hd p_stmt.stmts)
  else p_stmt.elsif
pre isSingleIfThenElse(p_stmt) ;

ifOf : AS`Stmt -> AS`Expr * AS`Stmt * [AS`Stmt]
ifOf(p_stmt) ==
  if is_AS`IfStmt(p_stmt)
  then mk_(p_stmt.test, p_stmt.cons, p_stmt.altn)
  else ifOf(hd p_stmt.stmts)
pre isSingleIfThenElse(p_stmt) ;

isSingleIfTest : AS`Stmt * AS`Expr -> bool
isSingleIfTest(p_stmt, p_test) == 
--  ( is_AS`BlockStmt(p_stmt) 
--    and let mk_AS`BlockStmt(l_al, l_sl, -) =  p_stmt in 
--      l_al = [] and len l_sl = 1 and isSingleIfTest(hd l_sl, p_test))
--  or
--  is_AS`IfStmt(p_stmt) and STRIP`stripBrackets(p_stmt.test) = p_test ;
  cases p_stmt:
     mk_AS`BlockStmt(l_al, l_sl, -) -> l_al = [] and len l_sl = 1 and isSingleIfTest(hd l_sl, p_test),
     mk_AS`IfStmt(test, -, -, -, -) -> STRIP`stripBrackets(test) = p_test,
     others                         -> false
  end;

-- what about access restrictions?

isBool : AS`Type * AS`Class -> bool
isBool(p_t, p_c) == 
  cases p_t:
    mk_AS`BooleanType(-)          -> true,
    mk_AS`TypeName(l_n, -)        -> let typem = p_c.defs.typem
                                     in l_n in set dom typem and isBool(typem(l_n).shape, p_c),
    others                        -> false
  end;

-- always called with expr2 already stripped

isEqualityLHS : AS`Expr * [AS`Expr] -> bool
isEqualityLHS(p_expr1, p_expr2) == 
  let l_expr1 = STRIP`stripBrackets(p_expr1) in 
  is_AS`BinaryExpr(l_expr1)
  and l_expr1.opr = <EQ>
  and (p_expr2 <> nil => STRIP`stripBrackets(l_expr1.left) = p_expr2) ;

commonElse : [AS`Stmt] * AS`Expr -> bool
commonElse(p_stmt, p_expr) == 
  p_stmt <> nil => 
    let l_stmt = STRIP`stripBlocks(p_stmt) in 
    is_AS`IfStmt(l_stmt) and ifToCases(l_stmt, p_expr) ;

commonElseifs : seq of AS`ElseifStmt * AS`Expr -> bool
commonElseifs(p_el, p_expr) == 
  forall b_es in set elems p_el & isEqualityLHS(b_es.test, p_expr) ;

hasMapCompLoop : seq1 of AS`Stmt * AS`Name -> bool
hasMapCompLoop(p_sl, p_name) == 
  let l_s = hd p_sl in 
    is_AS`WhileLoopStmt(l_s) 
    and let mk_AS`WhileLoopStmt(l_test, l_body, -) = l_s in 
      is_AS`BinaryExpr(l_test) 
      and l_test.left = p_name 
      and isNumComparisonOp(l_test.opr) 
      and is_AS`BlockStmt(l_body) 
      and l_body.dcls = [] 
      and isMapCompIteration(l_body.stmts, p_name, sign(l_test.opr)) ;

isMapCompIteration : seq of AS`Stmt * AS`Name * AS`BinaryOp -> bool
isMapCompIteration(p_sl, p_name, p_op) == 
  len p_sl = 2 
  and let [l_s1, l_s2] = p_sl in 
    is_AS`AssignStmt(l_s1) 
    and is_AS`AssignStmt(l_s2) 
    and isMapOverrideAssign(l_s1)
    and isIntIncrementAssign(l_s2, p_name, p_op) ;

isMapOverrideAssign : AS`AssignStmt -> bool
isMapOverrideAssign(mk_AS`AssignStmt(p_l, p_r, -)) == 
  is_AS`SeqModifyMapOverrideExpr(p_r) 
  and matchesStateDesignator(p_l, p_r.seqmap)
  and is_AS`MapEnumerationExpr(p_r.mapexp) 
  and len p_r.mapexp.els = 1 ;

matchesStateDesignator : AS`StateDesignator * AS`Expr -> bool
matchesStateDesignator(p_sd, p_expr) == 
  cases true :
    (is_AS`Name(p_sd)) -> p_sd = p_expr,
    (is_AS`FieldRef(p_sd)) -> matchesFieldRef(p_sd, p_expr),
    (is_AS`MapOrSeqRef(p_sd)) -> matchesMapOrSeqRef(p_sd, p_expr)
  end ; 

matchesFieldRef : AS`FieldRef * AS`Expr -> bool
matchesFieldRef(p_sd, p_expr) == 
  is_AS`FieldSelectExpr(p_expr) 
  and matchesStateDesignator(p_sd.var, p_expr.rec)
  and p_sd.sel = nameOf(p_expr) ;

nameOf : AS`FieldSelectExpr -> AS`Name
nameOf(p_expr) == 
  if is_AS`FctTypeInstExpr(p_expr.nm) 
  then p_expr.nm.polyfct
  else p_expr.nm ;

matchesMapOrSeqRef : AS`MapOrSeqRef * AS`Expr -> bool
matchesMapOrSeqRef(p_sd, p_expr) == 
  is_AS`ApplyExpr(p_expr) 
  and matchesStateDesignator(p_sd.var, p_expr.fct)
  and len p_expr.arg = 1
  and p_sd.arg = hd p_expr.arg ; 

isIntIncrementAssign : AS`AssignStmt * AS`Name * AS`BinaryOp -> bool
isIntIncrementAssign(mk_AS`AssignStmt(p_l, p_r, -), p_name, p_op) == 
  p_l = p_name
  and is_AS`BinaryExpr(p_r) 
  and p_r.left = p_name 
  and p_r.opr = p_op 
  and is_AS`RealLit(p_r.right)
  and is_int(p_r.right.val)
  and p_r.right.val <> 0 ;

isNumComparisonOp : AS`BinaryOp -> bool
isNumComparisonOp(p_op) == 
  p_op in set {<NUMLT>, <NUMLE>, <NUMGT>, <NUMGE>} ;

sign : AS`BinaryOp -> AS`BinaryOp
sign(p_op) == 
  cases p_op:
    <NUMLT>, <NUMLE> -> <NUMPLUS>,
    others -> <NUMMINUS>
  end
pre isNumComparisonOp(p_op);

-- what about access restrictions?

isIntOrNat : AS`Type * AS`Class -> bool
isIntOrNat(p_t, p_c) == 
  cases p_t:
    mk_AS`NumericType(l_b, -)   -> l_b in set {<NAT>, <NATONE>, <INTEGER>},
    mk_AS`TypeName(l_name, -) -> let typem = p_c.defs.typem
                                 in l_name in set dom typem and isIntOrNat(typem(l_name).shape, p_c),
    others                    -> false
  end;

end SXF
\end{vdm_al}



