\section{The J2V Module}

\begin{vdm_al}
module J2V

imports
  from AS all,
  from CPP all,
  from CI all,
  from REP all,
  from JSSREP all,
  from J2VBVDM all,
  from J2VTYPE all,
  from JAVAERR all,
  from J2VERR all,
  from J2VCLASS
    operations
      J2VClass: CPP`ClassSpecifier | CPP`InterfaceSpecifier ==> AS`Class,

  from J2VAUX
    functions
      ConvertFileName': CPP`Module +> [seq1 of char],

  from ASX all,
  from AEX all,
  from XF all

exports

operations
  J2VModule: CPP`Module * bool * bool ==> AS`SpecFile;
  Java2VDM: CPP`AstCI ==> AS`VdmFiles | JAVAERR`ErrType;
  ResetOptions: () ==> ();
  TurnOptionsON: set of Option ==> ();
  MustTranslateBodies: () ==> bool;
  MustTranslatePrivate: () ==> bool;
  MustSkipUnspecified: () ==> bool;
  TurnOptionsOFF: set of Option ==> ();
  GetClassComments: CI`ContextId ==> seq of seq of char;
  GetMemberComments: CI`ContextId ==> seq of seq of char;
  Push: () ==> CI`ContextId;
  SetComments: CI`ContextId * seq1 of seq of char ==> ();
  J2VSetTransMethods: set of XF`SXFId * set of XF`EXFId ==> ()

definitions

\end{vdm_al}
Translator's options:
\texttt{<NO\_BODIES>}
  - operation bodies are translated in \texttt{not yet specified}
\texttt{<NO\_PRIVATE>}
  - all which is private is skipped
\texttt{<NO\_NOTSPECIFIED>}
  - all not yet specified, or erroneous stuff is skipped
\begin{vdm_al}

types
  Option = <NO_BODIES> | <NO_PRIVATE> | <NO_UNSPECIFIED> -- | ...

\end{vdm_al}
A set of the translator options. The default options are translate bodies, ...
\begin{vdm_al}
state J2VSt of
  tllci : seq of CI`TokenContextInfo
  tci   : CI`TokenContextInfo
  options : set of Option
  etrans: set of XF`EXFId
  strans: set of XF`SXFId
--init s==s=mk_J2VSt([],mk_CI`TokenContextInfo([],[]),{<NO_BODIES>, <NO_PRIVATE>, <NO_UNSPECIFIED>})
--init s==s=mk_J2VSt([],mk_CI`TokenContextInfo([],[]),{},{mk_XF`EXFId(1),mk_XF`EXFId(2),mk_XF`EXFId(3)},{mk_XF`SXFId(1),mk_XF`SXFId(2),mk_XF`SXFId(3),mk_XF`SXFId(4),mk_XF`SXFId(5),mk_XF`SXFId(6),mk_XF`SXFId(7),mk_XF`SXFId(8),mk_XF`SXFId(9),mk_XF`SXFId(10),mk_XF`SXFId(11),mk_XF`SXFId(12)})
init s==s=mk_J2VSt([],mk_CI`TokenContextInfo([],[]),{},{},{})
end

operations

\end{vdm_al}

The top level operation that translates the selected Java class to VDM++ specification.

\begin{formalparameters}
\verb+p_mod: CPP`Module+ & A Java class,
with the file name and header for the file from which the class
originates.\\
\verb+p_stubs: bool+ & An option to substitute bodies
by not yet specified statement.\\
\verb+p_rename: bool+ & An option to make automatic renaming
to avoid conflicts of Java names with VDM++ keywords.\\
\hline
\end{formalparameters}
\methodresult{AS`SpecFile}{The VDM++ specification which is
the result of p\_mod translation.}
\begin{vdm_al}

  J2VModule: CPP`Module * bool * bool ==> AS`SpecFile
  J2VModule(p_mod,p_stubs,-) ==
   ( --J2VENV`AddHeaderInfo(p_mod.header);
    tci := mk_CI`TokenContextInfo([],[]);
    tllci := [];
    ResetOptions();
    TurnOptionsON({<NO_UNSPECIFIED>});
    if p_stubs
    then TurnOptionsON({<NO_BODIES>});
      def l_document = J2VAS([p_mod.ast])
      in
        return J2VBVDM`GenSpecFile(J2VAUX`ConvertFileName'(p_mod),
                                   l_document,
                                   tci, -- mk_CI`TokenContextInfo([],[]),
                                   nil)
   );

\end{vdm_al}

The top level operation that translates the selected Java files to
VDM++ asbstract syntax trees.

\begin{formalparameters}
\verb+p_files: CPP`AstCI+ & The abstract syntax tree with TokenContextInfo
                     for the selected Java files to be translated in VDM++.\\
\hline
\end{formalparameters}
\methodresult{AS`VdmFiles}{The resulting abstract syntax trees in VDM++}
\begin{vdm_al}

  Java2VDM: CPP`AstCI ==> AS`VdmFiles | JAVAERR`ErrType
  Java2VDM(p_astci) ==
   (dcl l_res: AS`VdmFiles | JAVAERR`ErrType;
    tllci := p_astci.tllci;
    l_res:=Java2VDM'(p_astci.ast);
    if J2VERR`HaveErrors()
    then l_res:=J2VERR`PrintErrors ();
    return l_res
   );

\end{vdm_al}
\begin{formalparameters}
\verb+p_files: CPP`Files+ & The abstract syntax tree for the selected Java files to be translated in VDM++.\\
\hline
\end{formalparameters}
\methodresult{AS`VdmFiles}{The resulting abstract syntax trees in VDM++}
\begin{vdm_al}

Java2VDM': CPP`Files ==> AS`VdmFiles
Java2VDM'(p_files) ==
 (dcl l_asfilem : map CI`FileId to AS`SpecFile := {|->},
      l_fid: int := 5;
--
--  First pass
--
--  for all l_file in set p_files do
--    J2VENV`AddPackageInfo(l_file);
--
--  Second pass
--
  for all l_file in set p_files do
   (l_asfilem := l_asfilem ++
--
--    Javamain always return -1. So we
--    correct this for the time being.
--
--      {CI`ConvCid2Fid(l_file.cid) |-> J2VFile(l_file)};
      { CI`ConvCid2Fid(CI`MaxNid * l_fid) |-> J2VFile(l_file) };
      l_fid := l_fid + 1
    );
  return l_asfilem);

\end{vdm_al}

There is not yet any use of the dirname component. This depends what we decide to do about packages.

\begin{vdm_al}
J2VFile: CPP`File ==> AS`SpecFile
J2VFile(p_file) ==
--( --J2VENV`AddHeaderInfo(p_file.h);
--  tci := mk_CI`TokenContextInfo([],[]);
--  let l_document = J2VAS(p_file.ast)
--  in
--    return
--      J2VBVDM`GenSpecFile(
--        J2VAUX`ConvertFileName(p_file),
--        l_document,
----    mk_CI`TokenContextInfo([],[]),
--   tci,
--  mk_token("nil"))
--);
--
--  Just to test J2VModule
--
 (return J2VModule(mk_CPP`Module(p_file.name, p_file.h, hd p_file.ast), false, false)
);
\end{vdm_al}

\begin{vdm_al}
  --J2VAS: CPP`CPPAS ==> AS`Document
  J2VAS: seq of CPP`IdentDeclaration ==> AS`Document
  J2VAS(p_cppas) ==
   (dcl l_class_l : seq of AS`Class := [];
    CPP`setmode(<JAVA>);
    for l_decl in p_cppas do
      def l_defs' = J2VDeclaration(l_decl);
          l_defs  = J2VTransform(l_defs')
      in
        l_class_l := l_class_l ^ l_defs;
    return l_class_l
   );

  J2VTransform: seq of AS`Class ==> seq of AS`Class
  J2VTransform(p_clss) ==
   (let l_clss' = if card strans = 0
                  then p_clss
                  else ASX`applySXFClassList(p_clss,strans),
        l_clss = if card etrans = 0
                 then l_clss'
                 else AEX`applyEXFClassList(l_clss',etrans)
      in return l_clss
   );

  J2VSetTransMethods: set of XF`SXFId * set of XF`EXFId ==> ()
  J2VSetTransMethods(s,e) ==
   (etrans := e;
    strans := s;
  );

\end{vdm_al}

The operation translates \texttt{CPP`IdentDeclaration} in a sequence of VDM++ classes.

\begin{formalparameters}
\verb+p_decl: CPP`IdentDeclaration+ & The abstract syntax tree for classes
                     in a JAVA file to be translated in VDM++.\\
\hline
\end{formalparameters}
\methodresult{seq of AS`Class}{The sequence of VDM++ classes}

\begin{vdm_al}
  J2VDeclaration: CPP`IdentDeclaration ==> seq of AS`Class
  J2VDeclaration(p_decl) ==
   (dcl l_clss: seq of AS`Class := [];
    for l_d in p_decl.ds do
      l_clss := l_clss ^ [J2VCLASS`J2VClass(l_d.tp)];
    return l_clss
   )
  pre
    forall l_d in set elems p_decl.ds & is_CPP`ClassSpecifier(l_d.tp) or is_CPP`InterfaceSpecifier(l_d.tp);

\end{vdm_al}
The operation set the set of options to the default one.
\begin{vdm_al}

  ResetOptions: () ==> ()
  ResetOptions() ==
    options := {};

\end{vdm_al}
The operation turns on options in spicified in \texttt{p\_opts}.
\begin{vdm_al}
  TurnOptionsON: set of Option ==> ()
  TurnOptionsON(p_opts) ==
    options := options union p_opts;

\end{vdm_al}
The operation turns off options in spicified in \texttt{p\_opts}.
\begin{vdm_al}
  TurnOptionsOFF: set of Option ==> ()
  TurnOptionsOFF(p_opts) ==
    options := options \ p_opts;

  MustTranslateBodies: () ==> bool
  MustTranslateBodies() ==
    return not (<NO_BODIES> in set options);

  MustTranslatePrivate: () ==> bool
  MustTranslatePrivate() ==
    return not (<NO_PRIVATE> in set options);

  MustSkipUnspecified: () ==> bool
  MustSkipUnspecified() ==
    return (<NO_UNSPECIFIED> in set options);

  GetClassComments: CI`ContextId ==> seq of seq of char
  GetClassComments(p_cid) ==
  ( dcl l_res: seq of seq of char := [],
        l_nid: int := CI`ConvCid2Nid(p_cid),
        l_fid: int := CI`ConvCid2Fid(p_cid),
        --l_st : int := 1,
        l_quit: bool := false,
        l_end: int;
  
    if l_fid in set inds tllci
    then
      if l_nid in set inds  tllci(l_fid).ci
      then
      ( l_end := tllci(l_fid).ci(l_nid).tokenpos.token_st;
        while l_end >= 1 and not l_quit
        do
        ( if tllci(l_fid).tll(l_end).lexid = 347
          then
            l_res := [tllci(l_fid).tll(l_end).text] ^ l_res;
          if tllci(l_fid).tll(l_end).lexid = 360
          then
            l_quit := true;
          l_end := l_end - 1;
        )
      );
    return l_res
  );

  GetMemberComments: CI`ContextId ==> seq of seq of char
  GetMemberComments(p_cid) ==
  ( dcl l_res: seq of seq of char := [],
        l_nid: int := CI`ConvCid2Nid(p_cid),
        l_fid: int := CI`ConvCid2Fid(p_cid),
        --l_st : int := 1,
        l_quit: bool := false,
        l_end: int;

    if l_fid in set inds tllci and l_nid in set inds  tllci(l_fid).ci
    then
    ( l_end := tllci(l_fid).ci(l_nid).tokenpos.token_st;
      while l_end >= 1 and not l_quit
      do
      ( if tllci(l_fid).tll(l_end).lexid = 347
        then
          l_res := [tllci(l_fid).tll(l_end).text] ^ l_res;
        if tllci(l_fid).tll(l_end).lexid in set {360,344,359}
        then
          l_quit := true;
        l_end := l_end - 1;
      )
    );
    return l_res
  );

\end{vdm_al}

The operation {\em Push} adds an entry in the context table for
a current file and returns a new corresponding {\em ContextId}.

\begin{vdm_al}
  Push: () ==> CI`ContextId
  Push() ==
   (tci.ci := tci.ci ^ [CI`InitCntxtNodeInfo];
    return len tci.ci
   );

  SetComments: CI`ContextId * seq1 of seq of char ==> ()
  SetComments(l_cid, l_comments) ==
   (dcl l_st:   int := len tci.tll + 1,
        l_t:    int,
        l_end:  int,
        l_spos:  CI`TokenPos,
        l_epos:  CI`TokenPos;
    let mk_(-, l_nid) = CI`SplitCid(l_cid)
    in
     (for l_c in l_comments do
       (l_t := len tci.tll + 1;
        l_spos := mk_CI`TokenPos(1,l_t,l_t,l_t,1);
        l_epos := mk_CI`TokenPos(1,l_t,l_t,l_t,len l_c);
        tci.tll := tci.tll ^ [mk_CI`TokenInfo(347,l_c,l_spos,l_epos)];
       );
      l_end := len tci.tll;
      tci.ci(l_nid).tokenpos := mk_CI`TokenSpan(l_st,l_st,l_end)
    )
  );

end J2V

\end{vdm_al}

\begin{rtinfo}
{rtinfo.ast}[J2V]
\end{rtinfo}


