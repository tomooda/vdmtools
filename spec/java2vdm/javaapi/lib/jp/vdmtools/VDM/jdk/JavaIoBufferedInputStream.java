//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Tue 30-Oct-2001 by the VDM++ JAVA Code Generator
// (v6.7.19 - Mon 29-Oct-2001)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package jp.vdmtools.VDM.jdk;

// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.CGException;
import jp.vdmtools.VDM.Tuple;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.VDMSpecException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Vector;

// ***** VDMTOOLS END Name=imports


public class JavaIoBufferedInputStream extends JavaIoFilterInputStream {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
    static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=defaultBufferSize KEEP=NO
    private static Integer defaultBufferSize = new Integer(80);
// ***** VDMTOOLS END Name=defaultBufferSize

// ***** VDMTOOLS START Name=buf KEEP=NO
    protected HashMap buf = new HashMap();
// ***** VDMTOOLS END Name=buf

// ***** VDMTOOLS START Name=count KEEP=NO
    protected Integer count = null;
// ***** VDMTOOLS END Name=count

// ***** VDMTOOLS START Name=pos KEEP=NO
    protected Integer pos = null;
// ***** VDMTOOLS END Name=pos

// ***** VDMTOOLS START Name=markpos KEEP=NO
    protected Integer markpos = null;
// ***** VDMTOOLS END Name=markpos

// ***** VDMTOOLS START Name=marklimit KEEP=NO
    protected Integer marklimit = null;
// ***** VDMTOOLS END Name=marklimit

// ***** VDMTOOLS START Name=CLASS KEEP=NO
    private static final JavaLangClass CLASS = (JavaLangClass) new JavaLangClass(new String("JavaIoBufferedInputStream"), new quotes.CLASS(), new Boolean(false));
// ***** VDMTOOLS END Name=CLASS


// ***** VDMTOOLS START Name=JavaIoBufferedInputStream KEEP=NO
    public JavaIoBufferedInputStream() throws CGException {
        try {
            defaultBufferSize = new Integer(80);
            markpos = new Integer(-new Integer(1).intValue());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
// ***** VDMTOOLS END Name=JavaIoBufferedInputStream


// ***** VDMTOOLS START Name=fill KEEP=NO
    private void fill() throws CGException {
        if (new Boolean((markpos.intValue()) < (new Integer(0).intValue())).booleanValue())
            pos = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
        else {
            Boolean cond_4 = null;
            Integer var2_6 = null;
            HashSet unArg_7 = new HashSet();
            unArg_7.clear();
            unArg_7.addAll(buf.keySet());
            var2_6 = new Integer(unArg_7.size());
            cond_4 = new Boolean((pos.intValue()) >= (var2_6.intValue()));
            if (cond_4.booleanValue()) {
                if (new Boolean((markpos.intValue()) > (new Integer(0).intValue())).booleanValue()) {
                    Integer sz = new Integer(pos.intValue() - markpos.intValue());
                    for (int ilb_56 = 0; ilb_56 <= new Integer(sz.intValue() - new Integer(1).intValue()).intValue(); ilb_56++) {
                        Integer i = new Integer(ilb_56);
                        buf.put(i, UTIL.NumberToInt(buf.get(new Integer(i.intValue() + markpos.intValue()))));
                    }
                    pos = UTIL.NumberToInt(UTIL.clone(sz));
                    markpos = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
                } else {
                    Boolean cond_12 = null;
                    Integer var1_13 = null;
                    HashSet unArg_14 = new HashSet();
                    unArg_14.clear();
                    unArg_14.addAll(buf.keySet());
                    var1_13 = new Integer(unArg_14.size());
                    cond_12 = new Boolean((var1_13.intValue()) >= (marklimit.intValue()));
                    if (cond_12.booleanValue()) {
                        markpos = UTIL.NumberToInt(UTIL.clone(new Integer(-new Integer(1).intValue())));
                        pos = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
                    } else {
                        Integer nsz = new Integer(pos.intValue() * new Integer(2).intValue());
                        if (new Boolean((nsz.intValue()) > (marklimit.intValue())).booleanValue())
                            nsz = UTIL.NumberToInt(UTIL.clone(marklimit));
                        {
                            HashMap nbuf = new HashMap();
                            HashMap res_m_23 = new HashMap();
                            {
                                boolean succ_26 = true;
                                HashSet e_set_27 = new HashSet();
                                e_set_27 = new HashSet();
                                int ubi_32 = new Integer(nsz.intValue() - new Integer(1).intValue()).intValue();
                                for (int count_33 = new Integer(0).intValue(); count_33 <= ubi_32; count_33++)
                                    e_set_27.add(new Integer(count_33));
                                Integer l_u7 = null;
                                {
                                    for (Iterator enum_35 = e_set_27.iterator(); enum_35.hasNext();) {
                                        Integer elem_34 = UTIL.NumberToInt(enum_35.next());
                                        succ_26 = true;
                                        l_u7 = elem_34;
                                        if (succ_26)
                                            res_m_23.put(l_u7, new Integer(0));
                                    }
                                }
                            }
                            nbuf = res_m_23;
                            for (int ilb_40 = 0; ilb_40 <= new Integer(pos.intValue() - new Integer(1).intValue()).intValue(); ilb_40++) {
                                Integer i = new Integer(ilb_40);
                                nbuf.put(i, UTIL.NumberToInt(buf.get(i)));
                            }
                            buf = (HashMap) UTIL.clone(nbuf);
                        }
                    }
                }
            }
        }
        count = UTIL.NumberToInt(UTIL.clone(pos));
        {
            Integer n = null;
            {
                boolean succ_68;
                Tuple tmpVal_69 = new Tuple(2);
                Integer par_72 = null;
                Integer var1_73 = null;
                HashSet unArg_74 = new HashSet();
                unArg_74.clear();
                unArg_74.addAll(buf.keySet());
                var1_73 = new Integer(unArg_74.size());
                par_72 = new Integer(var1_73.intValue() - pos.intValue());
                tmpVal_69 = in_u_u.readMIIIntInt_q(buf, pos, par_72);
                Integer l_un = null;
                HashMap l_ubuf = new HashMap();
                succ_68 = true;
                {
                    Vector e_l_77 = new Vector();
                    for (int i_78 = 1; i_78 <= tmpVal_69.Length(); i_78++)
                        e_l_77.add(tmpVal_69.GetField(i_78));
                    if (succ_68 = 2 == e_l_77.size()) {
                        l_un = UTIL.NumberToInt(e_l_77.get(0));
                        l_ubuf = (HashMap) e_l_77.get(2 - 1);
                    }
                }
                if (!succ_68)
                    UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
                {
                    n = UTIL.NumberToInt(UTIL.clone(l_un));
                    buf = (HashMap) UTIL.clone(l_ubuf);
                }
            }
            if (new Boolean((n.intValue()) > (new Integer(0).intValue())).booleanValue())
                count = UTIL.NumberToInt(UTIL.clone(new Integer(n.intValue() + pos.intValue())));
        }
        ;
    }
// ***** VDMTOOLS END Name=fill


// ***** VDMTOOLS START Name=read KEEP=NO
    public Integer read() throws CGException {
        ensureOpen();
        if (new Boolean((pos.intValue()) >= (count.intValue())).booleanValue()) {
            fill();
            if (new Boolean((pos.intValue()) >= (count.intValue())).booleanValue())
                return new Integer(-new Integer(1).intValue());
        }
        {
            Integer l_u6 = pos;
            Integer l_u5 = l_u6;
            {
                pos = UTIL.NumberToInt(UTIL.clone(new Integer(l_u6.intValue() + new Integer(1).intValue())));
                {
                    Integer l_u3 = UTIL.NumberToInt(buf.get(l_u5));
                    Integer l_u2 = null;
                    l_u2 = J2VUTIL.BitOp(l_u3, new quotes.AND(), new Integer(255));
                    return l_u2;
                }
            }
        }
    }
// ***** VDMTOOLS END Name=read


// ***** VDMTOOLS START Name=close KEEP=NO
    public void close() throws CGException {
        Boolean cond_1 = null;
        cond_1 = in_u_u.IsNil();
        if (cond_1.booleanValue())
            return;
        in_u_u.close();
        in_u_u = (JavaIoInputStream) new JavaLangObject(new quotes.NIL());
        buf = (HashMap) UTIL.clone(new HashMap());
        ;
    }
// ***** VDMTOOLS END Name=close


// ***** VDMTOOLS START Name=mark KEEP=NO
    public void mark(final Integer readlimit) throws CGException {
        marklimit = UTIL.NumberToInt(UTIL.clone(readlimit));
        markpos = UTIL.NumberToInt(UTIL.clone(pos));
        ;
    }
// ***** VDMTOOLS END Name=mark


// ***** VDMTOOLS START Name=reset KEEP=NO
    public void reset() throws CGException {
        ensureOpen();
        if (new Boolean((markpos.intValue()) < (new Integer(0).intValue())).booleanValue())
            throw new VDMSpecException(new JavaIoIOException(new JavaLangString(new String("Resetting to invalid mark"))));
        pos = UTIL.NumberToInt(UTIL.clone(markpos));
        ;
    }
// ***** VDMTOOLS END Name=reset


// ***** VDMTOOLS START Name=skip_u_u KEEP=NO
    public Integer skip_u_u(final Integer n) throws CGException {
        ensureOpen();
        if (new Boolean((n.intValue()) <= (new Integer(0).intValue())).booleanValue())
            return new Integer(0);
        {
            Integer avail = new Integer(count.intValue() - pos.intValue());
            if (new Boolean((avail.intValue()) <= (new Integer(0).intValue())).booleanValue()) {
                if (new Boolean((markpos.intValue()) < (new Integer(0).intValue())).booleanValue()) {
                    Integer rexpr_15 = null;
                    rexpr_15 = in_u_u.skip_u_u(n);
                    return rexpr_15;
                }
                fill();
                avail = UTIL.NumberToInt(UTIL.clone(new Integer(count.intValue() - pos.intValue())));
                if (new Boolean((avail.intValue()) <= (new Integer(0).intValue())).booleanValue())
                    return new Integer(0);
            }
            {
                Integer skipped = null;
                if (new Boolean((avail.intValue()) < (n.intValue())).booleanValue())
                    skipped = avail;
                else
                    skipped = n;
                {
                    Integer l_u3 = pos;
                    pos = UTIL.NumberToInt(UTIL.clone(new Integer(l_u3.intValue() + skipped.intValue())));
                }
                return skipped;
            }
        }
    }
// ***** VDMTOOLS END Name=skip_u_u


// ***** VDMTOOLS START Name=getClass KEEP=NO
    public JavaLangClass getJClass() throws CGException {
        return (JavaLangClass) CLASS;
    }
// ***** VDMTOOLS END Name=getClass


// ***** VDMTOOLS START Name=available KEEP=NO
    public Integer available() throws CGException {
        ensureOpen();
        Integer rexpr_2 = null;
        Integer var2_6 = null;
        var2_6 = in_u_u.available();
        rexpr_2 = new Integer(new Integer(count.intValue() - pos.intValue()).intValue() + var2_6.intValue());
        return rexpr_2;
    }
// ***** VDMTOOLS END Name=available


// ***** VDMTOOLS START Name=ensureOpen KEEP=NO
    private void ensureOpen() throws CGException {
        Boolean cond_1 = null;
        cond_1 = in_u_u.IsNil();
        if (cond_1.booleanValue())
            throw new VDMSpecException(new JavaIoIOException(new JavaLangString(new String("Stream closed"))));
        ;
    }
// ***** VDMTOOLS END Name=ensureOpen


// ***** VDMTOOLS START Name=markSupported KEEP=NO
    public Boolean markSupported() throws CGException {
        return new Boolean(true);
    }
// ***** VDMTOOLS END Name=markSupported


// ***** VDMTOOLS START Name=read KEEP=NO
    public Integer read(final HashMap b_u, final Integer off, final Integer len_u_u) throws CGException {
        Object rexpr_4 = null;
        UTIL.RunTime("Run-Time Error:Can not evaluate an undefined expression");
        return UTIL.NumberToInt(rexpr_4);
    }
// ***** VDMTOOLS END Name=read


// ***** VDMTOOLS START Name=readMIIIntInt_q KEEP=NO
    public Tuple readMIIIntInt_q(final HashMap b_u, final Integer off, final Integer len_u_u) throws CGException {
        HashMap b = b_u;
        ensureOpen();
        Boolean cond_5 = null;
        Boolean var1_6 = null;
        Boolean var1_7 = null;
        Boolean var1_8 = null;
        {
            if (!(var1_8 = new Boolean((off.intValue()) < (new Integer(0).intValue()))).booleanValue()) {
                Boolean var2_12 = null;
                Integer var2_14 = null;
                HashSet unArg_15 = new HashSet();
                unArg_15.clear();
                unArg_15.addAll(b.keySet());
                var2_14 = new Integer(unArg_15.size());
                var2_12 = new Boolean((off.intValue()) > (var2_14.intValue()));
                var1_8 = var2_12;
            }
        }
        {
            if (!(var1_7 = var1_8).booleanValue())
                var1_7 = new Boolean((len_u_u.intValue()) < (new Integer(0).intValue()));
        }
        {
            if (!(var1_6 = var1_7).booleanValue()) {
                Boolean var2_20 = null;
                Integer var2_24 = null;
                HashSet unArg_25 = new HashSet();
                unArg_25.clear();
                unArg_25.addAll(b.keySet());
                var2_24 = new Integer(unArg_25.size());
                var2_20 = new Boolean((new Integer(off.intValue() + len_u_u.intValue()).intValue()) > (var2_24.intValue()));
                var1_6 = var2_20;
            }
        }
        {
            if (!(cond_5 = var1_6).booleanValue())
                cond_5 = new Boolean((new Integer(off.intValue() + len_u_u.intValue()).intValue()) < (new Integer(0).intValue()));
        }
        if (cond_5.booleanValue())
            throw new VDMSpecException(new JavaLangIndexOutOfBoundsException());
        else if (new Boolean(len_u_u.intValue() == new Integer(0).intValue()).booleanValue()) {
            Tuple rexpr_35 = new Tuple(2);
            rexpr_35 = new Tuple(2);
            rexpr_35.SetField(1, new Integer(0));
            rexpr_35.SetField(2, new HashMap());
            return rexpr_35;
        }
        {
            Integer n = null;
            {
                boolean succ_39;
                Tuple tmpVal_40 = new Tuple(2);
                tmpVal_40 = read1(b, off, len_u_u);
                HashMap l_ub = new HashMap();
                Integer l_un = null;
                succ_39 = true;
                {
                    Vector e_l_44 = new Vector();
                    for (int i_45 = 1; i_45 <= tmpVal_40.Length(); i_45++)
                        e_l_44.add(tmpVal_40.GetField(i_45));
                    if (succ_39 = 2 == e_l_44.size()) {
                        l_un = UTIL.NumberToInt(e_l_44.get(0));
                        l_ub = (HashMap) e_l_44.get(2 - 1);
                    }
                }
                if (!succ_39)
                    UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
                {
                    n = UTIL.NumberToInt(UTIL.clone(l_un));
                    b = (HashMap) UTIL.clone(l_ub);
                }
            }
            if (new Boolean((n.intValue()) <= (new Integer(0).intValue())).booleanValue()) {
                Tuple rexpr_51 = new Tuple(2);
                rexpr_51 = new Tuple(2);
                rexpr_51.SetField(1, n);
                rexpr_51.SetField(2, b);
                return rexpr_51;
            }
            UTIL.NotSupported("The construct is not supported: Non-type binds in trap statement");
            return new Tuple();
        }
    }
// ***** VDMTOOLS END Name=readMIIIntInt_q


// ***** VDMTOOLS START Name=read1 KEEP=NO
    private Tuple read1(final HashMap b_u, final Integer off, final Integer len_u_u) throws CGException {
        HashMap b = b_u;
        Integer avail = new Integer(count.intValue() - pos.intValue());
        if (new Boolean((avail.intValue()) <= (new Integer(0).intValue())).booleanValue()) {
            Boolean cond_9 = null;
            Boolean var1_10 = null;
            Integer var2_12 = null;
            HashSet unArg_13 = new HashSet();
            unArg_13.clear();
            unArg_13.addAll(buf.keySet());
            var2_12 = new Integer(unArg_13.size());
            var1_10 = new Boolean((len_u_u.intValue()) >= (var2_12.intValue()));
            {
                if ((cond_9 = var1_10).booleanValue())
                    cond_9 = new Boolean((markpos.intValue()) < (new Integer(0).intValue()));
            }
            if (cond_9.booleanValue()) {
                Tuple rexpr_18 = new Tuple(2);
                rexpr_18 = in_u_u.readMIIIntInt_q(b, off, len_u_u);
                return rexpr_18;
            }
            fill();
            avail = UTIL.NumberToInt(UTIL.clone(new Integer(count.intValue() - pos.intValue())));
            if (new Boolean((avail.intValue()) <= (new Integer(0).intValue())).booleanValue()) {
                Tuple rexpr_29 = new Tuple(2);
                rexpr_29 = new Tuple(2);
                rexpr_29.SetField(1, new Integer(-new Integer(1).intValue()));
                rexpr_29.SetField(2, new HashMap());
                return rexpr_29;
            }
        }
        {
            Integer cnt = null;
            if (new Boolean((avail.intValue()) < (len_u_u.intValue())).booleanValue())
                cnt = avail;
            else
                cnt = len_u_u;
            for (int ilb_43 = off.intValue(); ilb_43 <= new Integer(new Integer(off.intValue() + cnt.intValue()).intValue() - new Integer(1).intValue()).intValue(); ilb_43++) {
                Integer i = new Integer(ilb_43);
                b.put(i, UTIL.NumberToInt(buf.get(new Integer(new Integer(pos.intValue() + i.intValue()).intValue() - off.intValue()))));
            }
            {
                Integer l_u3 = pos;
                pos = UTIL.NumberToInt(UTIL.clone(new Integer(l_u3.intValue() + cnt.intValue())));
            }
            Tuple rexpr_58 = new Tuple(2);
            rexpr_58 = new Tuple(2);
            rexpr_58.SetField(1, cnt);
            rexpr_58.SetField(2, b);
            return rexpr_58;
        }
    }
// ***** VDMTOOLS END Name=read1


// ***** VDMTOOLS START Name=JavaIoBufferedInputStream KEEP=NO
    public JavaIoBufferedInputStream(final quotes.NIL var_1_1) throws CGException {
        this();
        isNil = (Boolean) UTIL.clone(new Boolean(true));
    }
// ***** VDMTOOLS END Name=JavaIoBufferedInputStream


// ***** VDMTOOLS START Name=JavaIoBufferedInputStream KEEP=NO
    public JavaIoBufferedInputStream(final JavaIoInputStream in_u_u) 
	throws CGException 
    {
        this(in_u_u, defaultBufferSize);
    }
// ***** VDMTOOLS END Name=JavaIoBufferedInputStream


// ***** VDMTOOLS START Name=JavaIoBufferedInputStream KEEP=NO
    public JavaIoBufferedInputStream(final JavaIoInputStream in_u_u, final Integer size) throws CGException {
        super(in_u_u);
        if (new Boolean((size.intValue()) <= (new Integer(0).intValue())).booleanValue())
            throw new VDMSpecException(new JavaLangIllegalArgumentException(new JavaLangString(new String("Buffer size <= 0"))));
        HashMap rhs_15 = new HashMap();
        HashMap res_m_16 = new HashMap();
        {
            boolean succ_19 = true;
            HashSet e_set_20 = new HashSet();
            e_set_20 = new HashSet();
            int ubi_25 = new Integer(size.intValue() - new Integer(1).intValue()).intValue();
            for (int count_26 = new Integer(0).intValue(); count_26 <= ubi_25; count_26++)
                e_set_20.add(new Integer(count_26));
            Integer l_u3 = null;
            {
                for (Iterator enum_28 = e_set_20.iterator(); enum_28.hasNext();) {
                    Integer elem_27 = UTIL.NumberToInt(enum_28.next());
                    succ_19 = true;
                    l_u3 = elem_27;
                    if (succ_19)
                        res_m_16.put(l_u3, new Integer(0));
                }
            }
        }
        rhs_15 = res_m_16;
        buf = (HashMap) UTIL.clone(rhs_15);
        count = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
        pos = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
    }
// ***** VDMTOOLS END Name=JavaIoBufferedInputStream

}

;
