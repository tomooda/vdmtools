//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Tue 30-Oct-2001 by the VDM++ JAVA Code Generator
// (v6.7.19 - Mon 29-Oct-2001)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package jp.vdmtools.VDM.jdk;

// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.CGException;
import jp.vdmtools.VDM.Tuple;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.VDMSpecException;

import java.util.HashMap;
import java.util.HashSet;

// ***** VDMTOOLS END Name=imports


public class JavaIoByteArrayInputStream extends JavaIoInputStream {

    public java.io.InputStream getWrappedObject(){
        return null;
    }

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
    static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=isClosed KEEP=NO
    private Boolean isClosed = null;
// ***** VDMTOOLS END Name=isClosed

// ***** VDMTOOLS START Name=buf KEEP=NO
    protected HashMap buf = new HashMap();
// ***** VDMTOOLS END Name=buf

// ***** VDMTOOLS START Name=pos KEEP=NO
    protected Integer pos = null;
// ***** VDMTOOLS END Name=pos

// ***** VDMTOOLS START Name=mark_u KEEP=NO
    protected Integer mark_u = null;
// ***** VDMTOOLS END Name=mark_u

// ***** VDMTOOLS START Name=count KEEP=NO
    protected Integer count = null;
// ***** VDMTOOLS END Name=count

// ***** VDMTOOLS START Name=CLASS KEEP=NO
    private static final JavaLangClass CLASS = (JavaLangClass) new JavaLangClass(new String("JavaIoByteArrayInputStream"), new quotes.CLASS(), new Boolean(false));
// ***** VDMTOOLS END Name=CLASS


// ***** VDMTOOLS START Name=JavaIoByteArrayInputStream KEEP=NO
    public JavaIoByteArrayInputStream() throws CGException {
        isClosed = new Boolean(false);
        mark_u = new Integer(0);
    }
// ***** VDMTOOLS END Name=JavaIoByteArrayInputStream


// ***** VDMTOOLS START Name=read KEEP=NO
    public Integer read() throws CGException {
        ensureOpen();
        {
            Boolean l_u15 = new Boolean((pos.intValue()) < (count.intValue()));
            Integer l_u11 = pos;
            Integer l_u10 = l_u11;
            {
                if (l_u15.booleanValue())
                    pos = UTIL.NumberToInt(UTIL.clone(new Integer(l_u11.intValue() + new Integer(1).intValue())));
                {
                    Integer l_u8 = UTIL.NumberToInt(buf.get(l_u10));
                    {
                        if (l_u15.booleanValue())
                            pos = UTIL.NumberToInt(UTIL.clone(new Integer(l_u11.intValue() + new Integer(1).intValue())));
                        {
                            Integer l_u7 = null;
                            l_u7 = J2VUTIL.BitOp(l_u8, new quotes.AND(), new Integer(0));
                            {
                                if (l_u15.booleanValue())
                                    pos = UTIL.NumberToInt(UTIL.clone(new Integer(l_u11.intValue() + new Integer(1).intValue())));
                                {
                                    Integer l_u6 = l_u7;
                                    Integer l_u1 = null;
                                    if (l_u15.booleanValue())
                                        l_u1 = l_u6;
                                    else
                                        l_u1 = new Integer(-new Integer(1).intValue());
                                    return l_u1;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
// ***** VDMTOOLS END Name=read


// ***** VDMTOOLS START Name=close KEEP=NO
    public void close() throws CGException {
        isClosed = (Boolean) UTIL.clone(new Boolean(true));
        ;
    }
// ***** VDMTOOLS END Name=close


// ***** VDMTOOLS START Name=mark KEEP=NO
    public void mark(final Integer readAheadLimit) throws CGException {
        ensureOpen();
        mark_u = UTIL.NumberToInt(UTIL.clone(pos));
    }
// ***** VDMTOOLS END Name=mark


// ***** VDMTOOLS START Name=reset KEEP=NO
    public void reset() throws CGException {
        ensureOpen();
        pos = UTIL.NumberToInt(UTIL.clone(mark_u));
        ;
    }
// ***** VDMTOOLS END Name=reset


// ***** VDMTOOLS START Name=skip_u_u KEEP=NO
    public Integer skip_u_u(final Integer n_u) throws CGException {
        Integer n = n_u;
        ensureOpen();
        if (new Boolean((new Integer(pos.intValue() + n.intValue()).intValue()) > (count.intValue())).booleanValue())
            n = UTIL.NumberToInt(UTIL.clone(new Integer(count.intValue() - pos.intValue())));
        if (new Boolean((n.intValue()) < (new Integer(0).intValue())).booleanValue())
            return new Integer(0);
        {
            Integer l_u3 = pos;
            pos = UTIL.NumberToInt(UTIL.clone(new Integer(l_u3.intValue() + n.intValue())));
        }
        return n;
    }
// ***** VDMTOOLS END Name=skip_u_u


// ***** VDMTOOLS START Name=getClass KEEP=NO
    public JavaLangClass getJClass() throws CGException {
        return (JavaLangClass) CLASS;
    }
// ***** VDMTOOLS END Name=getClass


// ***** VDMTOOLS START Name=available KEEP=NO
    public Integer available() throws CGException {
        ensureOpen();
        return new Integer(count.intValue() - pos.intValue());
    }
// ***** VDMTOOLS END Name=available


// ***** VDMTOOLS START Name=ensureOpen KEEP=NO
    private void ensureOpen() throws CGException {
        ;
    }
// ***** VDMTOOLS END Name=ensureOpen


// ***** VDMTOOLS START Name=markSupported KEEP=NO
    public Boolean markSupported() throws CGException {
        return new Boolean(true);
    }
// ***** VDMTOOLS END Name=markSupported


// ***** VDMTOOLS START Name=read KEEP=NO
    public Integer read(final HashMap b, final Integer off, final Integer len_u_u) throws CGException {
        Object rexpr_4 = null;
        UTIL.RunTime("Run-Time Error:Can not evaluate an undefined expression");
        return UTIL.NumberToInt(rexpr_4);
    }
// ***** VDMTOOLS END Name=read


// ***** VDMTOOLS START Name=readMIIIntInt_q KEEP=NO
    public Tuple readMIIIntInt_q(final HashMap b_u, final Integer off, final Integer len_u_u_u) throws CGException {
        HashMap b = b_u;
        Integer len_u_u = len_u_u_u;
        ensureOpen();
        if (new Boolean(UTIL.equals(b, new HashMap())).booleanValue())
            throw new VDMSpecException(new JavaLangNullPointerException());
        else {
            Boolean cond_8 = null;
            Boolean var1_9 = null;
            Boolean var1_10 = null;
            Boolean var1_11 = null;
            {
                if (!(var1_11 = new Boolean((off.intValue()) < (new Integer(0).intValue()))).booleanValue()) {
                    Boolean var2_15 = null;
                    Integer var2_17 = null;
                    HashSet unArg_18 = new HashSet();
                    unArg_18.clear();
                    unArg_18.addAll(b.keySet());
                    var2_17 = new Integer(unArg_18.size());
                    var2_15 = new Boolean((off.intValue()) > (var2_17.intValue()));
                    var1_11 = var2_15;
                }
            }
            {
                if (!(var1_10 = var1_11).booleanValue())
                    var1_10 = new Boolean((len_u_u.intValue()) < (new Integer(0).intValue()));
            }
            {
                if (!(var1_9 = var1_10).booleanValue()) {
                    Boolean var2_23 = null;
                    Integer var2_27 = null;
                    HashSet unArg_28 = new HashSet();
                    unArg_28.clear();
                    unArg_28.addAll(b.keySet());
                    var2_27 = new Integer(unArg_28.size());
                    var2_23 = new Boolean((new Integer(off.intValue() + len_u_u.intValue()).intValue()) > (var2_27.intValue()));
                    var1_9 = var2_23;
                }
            }
            {
                if (!(cond_8 = var1_9).booleanValue())
                    cond_8 = new Boolean((new Integer(off.intValue() + len_u_u.intValue()).intValue()) < (new Integer(0).intValue()));
            }
            if (cond_8.booleanValue())
                throw new VDMSpecException(new JavaLangIndexOutOfBoundsException());
        }
        if (new Boolean((pos.intValue()) >= (count.intValue())).booleanValue()) {
            Tuple rexpr_40 = new Tuple(2);
            rexpr_40 = new Tuple(2);
            rexpr_40.SetField(1, new Integer(-new Integer(1).intValue()));
            rexpr_40.SetField(2, new HashMap());
            return rexpr_40;
        }
        if (new Boolean((new Integer(pos.intValue() + len_u_u.intValue()).intValue()) > (count.intValue())).booleanValue())
            len_u_u = UTIL.NumberToInt(UTIL.clone(new Integer(count.intValue() - pos.intValue())));
        if (new Boolean((len_u_u.intValue()) <= (new Integer(0).intValue())).booleanValue()) {
            Tuple rexpr_55 = new Tuple(2);
            rexpr_55 = new Tuple(2);
            rexpr_55.SetField(1, new Integer(0));
            rexpr_55.SetField(2, new HashMap());
            return rexpr_55;
        }
        for (int ilb_64 = off.intValue(); ilb_64 <= new Integer(new Integer(off.intValue() + len_u_u.intValue()).intValue() - new Integer(1).intValue()).intValue(); ilb_64++) {
            Integer i = new Integer(ilb_64);
            b.put(i, UTIL.NumberToInt(buf.get(new Integer(new Integer(pos.intValue() + i.intValue()).intValue() - off.intValue()))));
        }
        {
            Integer l_u3 = pos;
            pos = UTIL.NumberToInt(UTIL.clone(new Integer(l_u3.intValue() + len_u_u.intValue())));
        }
        Tuple rexpr_79 = new Tuple(2);
        rexpr_79 = new Tuple(2);
        rexpr_79.SetField(1, len_u_u);
        rexpr_79.SetField(2, b);
        return rexpr_79;
    }
// ***** VDMTOOLS END Name=readMIIIntInt_q


// ***** VDMTOOLS START Name=JavaIoByteArrayInputStream KEEP=NO
    public JavaIoByteArrayInputStream(final HashMap buf_1) throws CGException {
        this();
        {
            ((JavaIoByteArrayInputStream) this).buf = (HashMap) UTIL.clone(buf_1);
            ((JavaIoByteArrayInputStream) this).pos = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
            Integer rhs_4 = null;
            HashSet unArg_5 = new HashSet();
            unArg_5.clear();
            unArg_5.addAll(buf_1.keySet());
            rhs_4 = new Integer(unArg_5.size());
            ((JavaIoByteArrayInputStream) this).count = UTIL.NumberToInt(UTIL.clone(rhs_4));
        }
    }
// ***** VDMTOOLS END Name=JavaIoByteArrayInputStream


// ***** VDMTOOLS START Name=JavaIoByteArrayInputStream KEEP=NO
    public JavaIoByteArrayInputStream(final quotes.NIL var_1_1) throws CGException {
        this();
        isNil = (Boolean) UTIL.clone(new Boolean(true));
    }
// ***** VDMTOOLS END Name=JavaIoByteArrayInputStream


// ***** VDMTOOLS START Name=JavaIoByteArrayInputStream KEEP=NO
    public JavaIoByteArrayInputStream(final HashMap buf_1, final Integer offset, final Integer length) throws CGException {
        this();
        {
            ((JavaIoByteArrayInputStream) this).buf = (HashMap) UTIL.clone(buf_1);
            ((JavaIoByteArrayInputStream) this).pos = UTIL.NumberToInt(UTIL.clone(offset));
            Integer rhs_6 = null;
            Boolean cond_8 = null;
            Integer var2_12 = null;
            HashSet unArg_13 = new HashSet();
            unArg_13.clear();
            unArg_13.addAll(buf_1.keySet());
            var2_12 = new Integer(unArg_13.size());
            cond_8 = new Boolean((new Integer(offset.intValue() + length.intValue()).intValue()) < (var2_12.intValue()));
            if (cond_8.booleanValue())
                rhs_6 = new Integer(offset.intValue() + length.intValue());
            else {
                HashSet unArg_15 = new HashSet();
                unArg_15.clear();
                unArg_15.addAll(buf_1.keySet());
                rhs_6 = new Integer(unArg_15.size());
            }
            ((JavaIoByteArrayInputStream) this).count = UTIL.NumberToInt(UTIL.clone(rhs_6));
            ((JavaIoByteArrayInputStream) this).mark_u = UTIL.NumberToInt(UTIL.clone(offset));
        }
    }
// ***** VDMTOOLS END Name=JavaIoByteArrayInputStream

}

;
