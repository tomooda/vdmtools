//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Tue 30-Oct-2001 by the VDM++ JAVA Code Generator
// (v6.7.19 - Mon 29-Oct-2001)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package jp.vdmtools.VDM.jdk;

// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.CGException;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.VDMSpecException;

import java.util.HashMap;
import java.util.HashSet;

// ***** VDMTOOLS END Name=imports


public class JavaIoFilterOutputStream extends JavaIoOutputStream {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
    static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=out KEEP=NO
    protected JavaIoOutputStream out = null;
// ***** VDMTOOLS END Name=out


// ***** VDMTOOLS START Name=JavaIoFilterOutputStream KEEP=NO
    public JavaIoFilterOutputStream() throws CGException {
    }
// ***** VDMTOOLS END Name=JavaIoFilterOutputStream


// ***** VDMTOOLS START Name=close KEEP=NO
    public void close() throws CGException {
        flush();
        out.close();
    }
// ***** VDMTOOLS END Name=close


// ***** VDMTOOLS START Name=flush KEEP=NO
    public void flush() throws CGException {
        out.flush();
    }
// ***** VDMTOOLS END Name=flush


// ***** VDMTOOLS START Name=write KEEP=NO
    public void write(final Integer b) throws CGException {
        out.write(b);
    }
// ***** VDMTOOLS END Name=write


// ***** VDMTOOLS START Name=write1 KEEP=NO
    public void write1(final HashMap b) throws CGException {
        Integer tmpArg_v_5 = null;
        HashSet unArg_6 = new HashSet();
        unArg_6.clear();
        unArg_6.addAll(b.keySet());
        tmpArg_v_5 = Integer.valueOf(unArg_6.size());
        write2(b, Integer.valueOf(0), tmpArg_v_5);
    }
// ***** VDMTOOLS END Name=write1


// ***** VDMTOOLS START Name=write2 KEEP=NO
    public void write2(final HashMap b, final Integer off, final Integer len_u_u) throws CGException {
        Integer i = null;
        HashSet unArg_4 = new HashSet();
        unArg_4.clear();
        unArg_4.addAll(b.keySet());
        i = Integer.valueOf(unArg_4.size());
        Integer j = Integer.valueOf(i.intValue() - (Integer.valueOf(len_u_u.intValue() + off.intValue())).intValue());
        Boolean cond_10 = null;
        Boolean var1_11 = null;
        Boolean var1_12 = null;
        {
            if (!(var1_12 = Boolean.valueOf((off.intValue()) < (Integer.valueOf(0).intValue()))).booleanValue())
                var1_12 = Boolean.valueOf((off.intValue()) >= (i.intValue()));
        }
        {
            if (!(var1_11 = var1_12).booleanValue())
                var1_11 = Boolean.valueOf((j.intValue()) < (Integer.valueOf(0).intValue()));
        }
        {
            if (!(cond_10 = var1_11).booleanValue())
                cond_10 = Boolean.valueOf((j.intValue()) > (i.intValue()));
        }
        if (cond_10.booleanValue())
            throw new VDMSpecException(new JavaLangIndexOutOfBoundsException());
        {
            Integer i_1 = Integer.valueOf(0);
            while (Boolean.valueOf((i_1.intValue()) < (len_u_u.intValue())).booleanValue()) {
                write(UTIL.NumberToInt(b.get(Integer.valueOf(off.intValue() + i_1.intValue()))));
                i_1 = UTIL.NumberToInt(UTIL.clone(Integer.valueOf(i_1.intValue() + Integer.valueOf(1).intValue())));
            }
        }
    }
// ***** VDMTOOLS END Name=write2


// ***** VDMTOOLS START Name=JavaIoFilterOutputStream KEEP=NO
    public JavaIoFilterOutputStream(final JavaIoOutputStream out_1) throws CGException {
        this();
        {
            ((JavaIoFilterOutputStream) this).out = (JavaIoOutputStream) UTIL.clone(out_1);
            ;
        }
    }
// ***** VDMTOOLS END Name=JavaIoFilterOutputStream

}

;
