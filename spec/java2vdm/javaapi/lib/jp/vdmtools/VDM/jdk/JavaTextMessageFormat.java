//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Tue 30-Oct-2001 by the VDM++ JAVA Code Generator
// (v6.7.19 - Mon 29-Oct-2001)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package jp.vdmtools.VDM.jdk;

// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.CGException;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.VDMSpecException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Vector;

// ***** VDMTOOLS END Name=imports


public abstract class JavaTextMessageFormat extends JavaTextFormat {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
    static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=locale KEEP=NO
    private JavaUtilLocale locale = null;
// ***** VDMTOOLS END Name=locale

// ***** VDMTOOLS START Name=pattern KEEP=NO
    private JavaLangString pattern = null;
// ***** VDMTOOLS END Name=pattern

// ***** VDMTOOLS START Name=MAX_uARGUMENTS KEEP=NO
    private static Integer MAX_uARGUMENTS = new Integer(10);
// ***** VDMTOOLS END Name=MAX_uARGUMENTS

// ***** VDMTOOLS START Name=formats KEEP=NO
    private HashMap formats = new HashMap();
// ***** VDMTOOLS END Name=formats

// ***** VDMTOOLS START Name=offsets KEEP=NO
    private HashMap offsets = new HashMap();
// ***** VDMTOOLS END Name=offsets

// ***** VDMTOOLS START Name=argumentNumbers KEEP=NO
    private HashMap argumentNumbers = new HashMap();
// ***** VDMTOOLS END Name=argumentNumbers

// ***** VDMTOOLS START Name=maxOffset KEEP=NO
    private Integer maxOffset = null;
// ***** VDMTOOLS END Name=maxOffset

// ***** VDMTOOLS START Name=typeList KEEP=NO
    private static HashMap typeList = new HashMap();
// ***** VDMTOOLS END Name=typeList

// ***** VDMTOOLS START Name=modifierList KEEP=NO
    private static HashMap modifierList = new HashMap();
// ***** VDMTOOLS END Name=modifierList

// ***** VDMTOOLS START Name=dateModifierList KEEP=NO
    private static HashMap dateModifierList = new HashMap();
// ***** VDMTOOLS END Name=dateModifierList

// ***** VDMTOOLS START Name=CLASS KEEP=NO
    private static final JavaLangClass CLASS = (JavaLangClass) new JavaLangClass(new String("JavaTextMessageFormat"), new quotes.CLASS(), new Boolean(false));
// ***** VDMTOOLS END Name=CLASS


// ***** VDMTOOLS START Name=JavaTextMessageFormat KEEP=NO
    public JavaTextMessageFormat() throws CGException {
        try {
            locale = (JavaUtilLocale) new JavaUtilLocale(new quotes.NIL());
            pattern = (JavaLangString) new JavaLangString("");
            MAX_uARGUMENTS = new Integer(10);
            HashMap res_m_7 = new HashMap();
            {
                boolean succ_10 = true;
                HashSet e_set_11 = new HashSet();
                e_set_11 = new HashSet();
                int ubi_16 = new Integer(MAX_uARGUMENTS.intValue() - new Integer(1).intValue()).intValue();
                for (int count_17 = new Integer(0).intValue(); count_17 <= ubi_16; count_17++)
                    e_set_11.add(new Integer(count_17));
                Integer l_u3 = null;
                {
                    for (Iterator enum_19 = e_set_11.iterator(); enum_19.hasNext();) {
                        Integer elem_18 = UTIL.NumberToInt(enum_19.next());
                        succ_10 = true;
                        l_u3 = elem_18;
                        if (succ_10)
                            res_m_7.put(l_u3, null);
                    }
                }
            }
            formats = res_m_7;
            HashMap res_m_20 = new HashMap();
            {
                boolean succ_23 = true;
                HashSet e_set_24 = new HashSet();
                e_set_24 = new HashSet();
                int ubi_29 = new Integer(MAX_uARGUMENTS.intValue() - new Integer(1).intValue()).intValue();
                for (int count_30 = new Integer(0).intValue(); count_30 <= ubi_29; count_30++)
                    e_set_24.add(new Integer(count_30));
                Integer l_u3 = null;
                {
                    for (Iterator enum_32 = e_set_24.iterator(); enum_32.hasNext();) {
                        Integer elem_31 = UTIL.NumberToInt(enum_32.next());
                        succ_23 = true;
                        l_u3 = elem_31;
                        if (succ_23)
                            res_m_20.put(l_u3, new Integer(0));
                    }
                }
            }
            offsets = res_m_20;
            HashMap res_m_33 = new HashMap();
            {
                boolean succ_36 = true;
                HashSet e_set_37 = new HashSet();
                e_set_37 = new HashSet();
                int ubi_42 = new Integer(MAX_uARGUMENTS.intValue() - new Integer(1).intValue()).intValue();
                for (int count_43 = new Integer(0).intValue(); count_43 <= ubi_42; count_43++)
                    e_set_37.add(new Integer(count_43));
                Integer l_u3 = null;
                {
                    for (Iterator enum_45 = e_set_37.iterator(); enum_45.hasNext();) {
                        Integer elem_44 = UTIL.NumberToInt(enum_45.next());
                        succ_36 = true;
                        l_u3 = elem_44;
                        if (succ_36)
                            res_m_33.put(l_u3, new Integer(0));
                    }
                }
            }
            argumentNumbers = res_m_33;
            maxOffset = new Integer(-new Integer(1).intValue());
            typeList = new HashMap();
            typeList.put(new Integer(8), new JavaLangString(new String("choice")));
            typeList.put(new Integer(7), new JavaLangString(""));
            typeList.put(new Integer(6), new JavaLangString(new String("time")));
            typeList.put(new Integer(5), new JavaLangString(""));
            typeList.put(new Integer(4), new JavaLangString(new String("date")));
            typeList.put(new Integer(3), new JavaLangString(""));
            typeList.put(new Integer(2), new JavaLangString(new String("number")));
            typeList.put(new Integer(1), new JavaLangString(""));
            typeList.put(new Integer(0), new JavaLangString(""));
            modifierList = new HashMap();
            modifierList.put(new Integer(6), new JavaLangString(new String("integer")));
            modifierList.put(new Integer(5), new JavaLangString(""));
            modifierList.put(new Integer(4), new JavaLangString(new String("percent")));
            modifierList.put(new Integer(3), new JavaLangString(""));
            modifierList.put(new Integer(2), new JavaLangString(new String("currency")));
            modifierList.put(new Integer(1), new JavaLangString(""));
            modifierList.put(new Integer(0), new JavaLangString(""));
            dateModifierList = new HashMap();
            dateModifierList.put(new Integer(8), new JavaLangString(new String("full")));
            dateModifierList.put(new Integer(7), new JavaLangString(""));
            dateModifierList.put(new Integer(6), new JavaLangString(new String("long")));
            dateModifierList.put(new Integer(5), new JavaLangString(""));
            dateModifierList.put(new Integer(4), new JavaLangString(new String("medium")));
            dateModifierList.put(new Integer(3), new JavaLangString(""));
            dateModifierList.put(new Integer(2), new JavaLangString(new String("short")));
            dateModifierList.put(new Integer(1), new JavaLangString(""));
            dateModifierList.put(new Integer(0), new JavaLangString(""));
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
// ***** VDMTOOLS END Name=JavaTextMessageFormat




// ***** VDMTOOLS START Name=getClass KEEP=NO
    public JavaLangClass getJClass() throws CGException {
        return (JavaLangClass) CLASS;
    }
// ***** VDMTOOLS END Name=getClass


// ***** VDMTOOLS START Name=hashCode KEEP=NO
    public Integer jHashCode() throws CGException {
        Integer rexpr_1 = null;
        rexpr_1 = new Integer(pattern.hashCode());
        return rexpr_1;
    }
// ***** VDMTOOLS END Name=hashCode


// ***** VDMTOOLS START Name=getLocale KEEP=NO
    public JavaUtilLocale getLocale() throws CGException {
        return (JavaUtilLocale) locale;
    }
// ***** VDMTOOLS END Name=getLocale




// ***** VDMTOOLS START Name=setLocale KEEP=NO
    public void setLocale(final JavaUtilLocale theLocale) throws CGException {
        locale = (JavaUtilLocale) UTIL.clone(theLocale);
    }
// ***** VDMTOOLS END Name=setLocale


// ***** VDMTOOLS START Name=JavaTextMessageFormat KEEP=NO
    public JavaTextMessageFormat(final quotes.NIL var_1_1) throws CGException {
        this();
        isNil = (Boolean) UTIL.clone(new Boolean(true));
    }
// ***** VDMTOOLS END Name=JavaTextMessageFormat


// ***** VDMTOOLS START Name=setFormat KEEP=NO
    public void setFormat(final Integer variable, final JavaTextFormat newFormat) throws CGException {
        formats.put(variable, newFormat);
    }
// ***** VDMTOOLS END Name=setFormat


// ***** VDMTOOLS START Name=applyPattern KEEP=NO
    public void applyPattern(final JavaLangString newPattern) throws CGException {
        HashMap segments = new HashMap();
        HashMap res_m_2 = new HashMap();
        {
            boolean succ_6 = true;
            HashSet e_set_7 = new HashSet();
            e_set_7 = new HashSet();
            int ubi_12 = new Integer(new Integer(4).intValue() - new Integer(1).intValue()).intValue();
            for (int count_13 = new Integer(0).intValue(); count_13 <= ubi_12; count_13++)
                e_set_7.add(new Integer(count_13));
            Integer l_u3 = null;
            {
                for (Iterator enum_15 = e_set_7.iterator(); enum_15.hasNext();) {
                    Integer elem_14 = UTIL.NumberToInt(enum_15.next());
                    succ_6 = true;
                    l_u3 = elem_14;
                    if (succ_6)
                        res_m_2.put(l_u3, new JavaLangStringBuffer(new quotes.NIL()));
                }
            }
        }
        segments = res_m_2;
        {
            Integer i = new Integer(0);
            while (true) {
                Boolean whCrtl_16 = null;
                Integer var2_18 = null;
                HashSet unArg_19 = new HashSet();
                unArg_19.clear();
                unArg_19.addAll(segments.keySet());
                var2_18 = new Integer(unArg_19.size());
                whCrtl_16 = new Boolean((i.intValue()) < (var2_18.intValue()));
                if (whCrtl_16.booleanValue()) {
                    segments.put(i, new JavaLangStringBuffer());
                    {
                        Integer l_u1 = i;
                        i = UTIL.NumberToInt(UTIL.clone(new Integer(l_u1.intValue() + new Integer(1).intValue())));
                    }
                } else
                    break;
            }
        }
        {
            Integer part = new Integer(0);
            Integer formatNumber = new Integer(0);
            Boolean inQuote = new Boolean(false);
            Integer braceStack = new Integer(0);
            maxOffset = UTIL.NumberToInt(UTIL.clone(new Integer(-new Integer(1).intValue())));
            {
                Integer i = new Integer(0);
                while (true) {
                    Boolean whCrtl_31 = null;
                    Integer var2_33 = null;
                    var2_33 = newPattern.length();
                    whCrtl_31 = new Boolean((i.intValue()) < (var2_33.intValue()));
                    if (whCrtl_31.booleanValue()) {
                        Character ch = null;
                        ch = newPattern.charAt(i);
                        if (new Boolean(part.intValue() == new Integer(0).intValue()).booleanValue()) {
                            if (new Boolean(UTIL.equals(ch, new Character('\''))).booleanValue()) {
                                Boolean cond_65 = null;
                                Boolean var1_66 = null;
                                Integer var2_70 = null;
                                var2_70 = newPattern.length();
                                var1_66 = new Boolean((new Integer(i.intValue() + new Integer(1).intValue()).intValue()) < (var2_70.intValue()));
                                {
                                    if ((cond_65 = var1_66).booleanValue()) {
                                        Boolean var2_71 = null;
                                        Character var1_72 = null;
                                        var1_72 = newPattern.charAt(new Integer(i.intValue() + new Integer(1).intValue()));
                                        var2_71 = new Boolean(UTIL.equals(var1_72, new Character('\'')));
                                        cond_65 = var2_71;
                                    }
                                }
                                if (cond_65.booleanValue()) {
                                    {
                                        JavaLangStringBuffer tmpVal_80 = null;
                                        JavaLangStringBuffer obj_81 = null;
                                        obj_81 = (JavaLangStringBuffer) (JavaLangStringBuffer) segments.get(part);
                                        tmpVal_80 = (JavaLangStringBuffer) obj_81.append(ch);
                                        ;
                                    }
                                    {
                                        Integer l_u1 = i;
                                        i = UTIL.NumberToInt(UTIL.clone(new Integer(l_u1.intValue() + new Integer(1).intValue())));
                                    }
                                } else
                                    inQuote = (Boolean) UTIL.clone(new Boolean(!inQuote.booleanValue()));
                            } else {
                                Boolean cond_52 = null;
                                {
                                    if ((cond_52 = new Boolean(UTIL.equals(ch, new Character('{')))).booleanValue())
                                        cond_52 = new Boolean(!inQuote.booleanValue());
                                }
                                if (cond_52.booleanValue())
                                    part = UTIL.NumberToInt(UTIL.clone(new Integer(1)));
                                else {
                                    JavaLangStringBuffer tmpVal_59 = null;
                                    JavaLangStringBuffer obj_60 = null;
                                    obj_60 = (JavaLangStringBuffer) (JavaLangStringBuffer) segments.get(part);
                                    tmpVal_59 = (JavaLangStringBuffer) obj_60.append(ch);
                                    ;
                                }
                            }
                        } else if (inQuote.booleanValue()) {
                            {
                                JavaLangStringBuffer tmpVal_40 = null;
                                JavaLangStringBuffer obj_41 = null;
                                obj_41 = (JavaLangStringBuffer) (JavaLangStringBuffer) segments.get(part);
                                tmpVal_40 = (JavaLangStringBuffer) obj_41.append(ch);
                                ;
                            }
                            if (new Boolean(UTIL.equals(ch, new Character('\''))).booleanValue())
                                inQuote = (Boolean) UTIL.clone(new Boolean(false));
                        } else {
                            UTIL.NotSupported("The construct is not supported: Non-type binds in trap statement");
                            return;
                        }
                        {
                            Integer l_u1 = i;
                            i = UTIL.NumberToInt(UTIL.clone(new Integer(l_u1.intValue() + new Integer(1).intValue())));
                        }
                    } else
                        break;
                }
            }
            Boolean cond_95 = null;
            {
                if ((cond_95 = new Boolean(braceStack.intValue() == new Integer(0).intValue())).booleanValue())
                    cond_95 = new Boolean(!(part.intValue() == new Integer(0).intValue()));
            }
            if (cond_95.booleanValue()) {
                maxOffset = UTIL.NumberToInt(UTIL.clone(new Integer(-new Integer(1).intValue())));
                throw new VDMSpecException(new JavaLangIllegalArgumentException(new JavaLangString(new String("Unmatched braces in the pattern."))));
            }
            JavaLangString rhs_107 = null;
            JavaLangStringBuffer obj_108 = null;
            obj_108 = (JavaLangStringBuffer) (JavaLangStringBuffer) segments.get(new Integer(0));
            rhs_107 = new JavaLangString(obj_108.toString());
            pattern = (JavaLangString) UTIL.clone(rhs_107);
        }
    }
// ***** VDMTOOLS END Name=applyPattern


// ***** VDMTOOLS START Name=JavaTextMessageFormat KEEP=NO
    public JavaTextMessageFormat(final JavaLangString pattern_1) throws CGException {
        this();
        applyPattern((JavaLangString) pattern_1);
    }
// ***** VDMTOOLS END Name=JavaTextMessageFormat




//// ***** VDMTOOLS START Name=format KEEP=NO
//    static public JavaLangString format(final JavaLangString pattern_1, final HashMap arguments) throws CGException {
//        JavaTextMessageFormat temp = null;
//        JavaLangStringBuffer sb = null;
//        sb = (JavaLangStringBuffer) temp.formatObjects(arguments, (JavaLangStringBuffer) new JavaLangStringBuffer(), (JavaTextFieldPosition) new JavaTextFieldPosition(new Integer(0)));
//        JavaLangString s = null;
//        s = new JavaLangString(sb.toString());
//        return (JavaLangString) s;
//    }
//// ***** VDMTOOLS END Name=format




// ***** VDMTOOLS START Name=JavaTextMessageFormat KEEP=NO
    public JavaTextMessageFormat(final JavaLangString pattern_1, final JavaUtilLocale loc) throws CGException {
        this();
        applyPattern((JavaLangString) pattern_1);
    }
// ***** VDMTOOLS END Name=JavaTextMessageFormat


// ***** VDMTOOLS START Name=findKeyword KEEP=NO
    static private Integer findKeyword(final JavaLangString s_u, final HashMap list) throws CGException {
        JavaLangString s = s_u;
        JavaLangString rhs_3 = null;
        JavaLangString obj_4 = null;
        obj_4 = (JavaLangString) s.trim();
        rhs_3 = (JavaLangString) obj_4.toLowerCase();
        s = (JavaLangString) UTIL.clone(rhs_3);
        {
            Integer i = new Integer(0);
            while (true) {
                Boolean whCrtl_5 = null;
                Integer var2_7 = null;
                HashSet unArg_8 = new HashSet();
                unArg_8.clear();
                unArg_8.addAll(list.keySet());
                var2_7 = new Integer(unArg_8.size());
                whCrtl_5 = new Boolean((i.intValue()) < (var2_7.intValue()));
                if (whCrtl_5.booleanValue()) {
                    Boolean cond_10 = null;
                    cond_10 = s.equals((JavaLangObject) (JavaLangString) list.get(i));
                    if (cond_10.booleanValue())
                        return i;
                    {
                        Integer l_u1 = i;
                        i = UTIL.NumberToInt(UTIL.clone(new Integer(l_u1.intValue() + new Integer(1).intValue())));
                    }
                } else
                    break;
            }
        }
        return new Integer(-new Integer(1).intValue());
    }
// ***** VDMTOOLS END Name=findKeyword


// ***** VDMTOOLS START Name=makeFormat KEEP=NO
    private HashMap makeFormat(final Integer position, final Integer offsetNumber, final HashMap segments_u) throws CGException {
        Integer argumentNumber = null;
        HashMap segments = segments_u;
        Integer oldMaxOffset = maxOffset;
        try {
            Integer rhs_16 = null;
            JavaLangString par_17 = null;
            JavaLangStringBuffer obj_18 = null;
            obj_18 = (JavaLangStringBuffer) (JavaLangStringBuffer) segments.get(new Integer(1));
            par_17 = new JavaLangString(obj_18.toString());
            rhs_16 = JavaLangInteger.parseInt((JavaLangString) par_17);
            argumentNumber = UTIL.NumberToInt(UTIL.clone(rhs_16));
            Boolean cond_21 = null;
            {
                if (!(cond_21 = new Boolean((argumentNumber.intValue()) < (new Integer(0).intValue()))).booleanValue())
                    cond_21 = new Boolean((argumentNumber.intValue()) > (new Integer(9).intValue()));
            }
            if (cond_21.booleanValue())
                throw new VDMSpecException(new JavaLangNumberFormatException());
            maxOffset = UTIL.NumberToInt(UTIL.clone(offsetNumber));
            Integer mr_32 = null;
            JavaLangStringBuffer obj_33 = null;
            obj_33 = (JavaLangStringBuffer) (JavaLangStringBuffer) segments.get(new Integer(0));
            mr_32 = obj_33.length();
            offsets.put(offsetNumber, mr_32);
            argumentNumbers.put(offsetNumber, argumentNumber);
        } catch (VDMSpecException exc_4) {
            if (exc_4.getValue() instanceof JavaLangException) {
                JavaLangException j2v_uexception = (JavaLangException) exc_4.getValue();
                boolean succ_5 = true;
                {
                    succ_5 = true;
                    Boolean tmpVal_v_9 = null;
                    {
                        if (!(tmpVal_v_9 = new Boolean(j2v_uexception instanceof JavaLangException)).booleanValue()) {
                            Boolean var2_12 = null;
                            var2_12 = j2v_uexception.IsNil();
                            tmpVal_v_9 = var2_12;
                        }
                    }
                    if (!UTIL.equals(new Boolean(true), tmpVal_v_9))
                        succ_5 = false;
                    if (succ_5) {
                        JavaLangException e = j2v_uexception;
                        throw new VDMSpecException(new JavaLangIllegalArgumentException(new JavaLangString(new String("argument number too large at "))));
                    } else
                        throw new VDMSpecException(j2v_uexception);
                }
            } else {
                UTIL.RunTime("Run-Time Error:Pattern match failed on exception value");
                return new HashMap();
            }
        }
        {
            JavaTextFormat newFormat = null;
            Integer selRes_40 = null;
            JavaLangString par_41 = null;
            JavaLangStringBuffer obj_42 = null;
            obj_42 = (JavaLangStringBuffer) (JavaLangStringBuffer) segments.get(new Integer(2));
            par_41 = new JavaLangString(obj_42.toString());
            selRes_40 = findKeyword((JavaLangString) par_41, typeList);
            boolean succ_39 = true;
            {
                succ_39 = true;
                if (!UTIL.equals(selRes_40, new Integer(0)))
                    succ_39 = false;
                if (succ_39)
                    ;
                else {
                    succ_39 = true;
                    if (!UTIL.equals(selRes_40, new Integer(2)))
                        succ_39 = false;
                    if (!succ_39) {
                        succ_39 = true;
                        if (!UTIL.equals(selRes_40, new Integer(1)))
                            succ_39 = false;
                    }
                    if (succ_39) {
                        Integer selRes_54 = null;
                        JavaLangString par_55 = null;
                        JavaLangStringBuffer obj_56 = null;
                        obj_56 = (JavaLangStringBuffer) (JavaLangStringBuffer) segments.get(new Integer(3));
                        par_55 = new JavaLangString(obj_56.toString());
                        selRes_54 = findKeyword((JavaLangString) par_55, modifierList);
                        boolean succ_53 = true;
                        {
                            succ_53 = true;
                            if (!UTIL.equals(selRes_54, new Integer(0)))
                                succ_53 = false;
                            if (succ_53) {
                                JavaTextNumberFormat rhs_84 = null;
                                rhs_84 = (JavaTextNumberFormat) JavaTextNumberFormat.getInstance((JavaUtilLocale) locale);
                                newFormat = (JavaTextFormat) UTIL.clone(rhs_84);
                            } else {
                                JavaTextNumberFormat rhs_61 = null;
                                rhs_61 = (JavaTextNumberFormat) JavaTextNumberFormat.getInstance((JavaUtilLocale) locale);
                                newFormat = (JavaTextFormat) UTIL.clone(rhs_61);
                                try {
                                    JavaTextDecimalFormat df = (JavaTextDecimalFormat) newFormat;
                                    JavaLangString par_79 = null;
                                    JavaLangStringBuffer obj_80 = null;
                                    obj_80 = (JavaLangStringBuffer) (JavaLangStringBuffer) segments.get(new Integer(3));
                                    par_79 = new JavaLangString(obj_80.toString());
                                    df.applyPattern((JavaLangString) par_79);
                                } catch (VDMSpecException exc_63) {
                                    if (exc_63.getValue() instanceof JavaLangException) {
                                        JavaLangException j2v_uexception = (JavaLangException) exc_63.getValue();
                                        boolean succ_64 = true;
                                        {
                                            succ_64 = true;
                                            Boolean tmpVal_v_68 = null;
                                            {
                                                if (!(tmpVal_v_68 = new Boolean(j2v_uexception instanceof JavaLangException)).booleanValue()) {
                                                    Boolean var2_71 = null;
                                                    var2_71 = j2v_uexception.IsNil();
                                                    tmpVal_v_68 = var2_71;
                                                }
                                            }
                                            if (!UTIL.equals(new Boolean(true), tmpVal_v_68))
                                                succ_64 = false;
                                            if (succ_64) {
                                                JavaLangException e = j2v_uexception;
                                                maxOffset = UTIL.NumberToInt(UTIL.clone(oldMaxOffset));
                                                throw new VDMSpecException(new JavaLangIllegalArgumentException(new JavaLangString(new String("Pattern incorrect or locale does not support formats, error at "))));
                                            } else
                                                throw new VDMSpecException(j2v_uexception);
                                        }
                                    } else {
                                        UTIL.RunTime("Run-Time Error:Pattern match failed on exception value");
                                        return new HashMap();
                                    }
                                }
                            }
                        }
                    } else {
                        maxOffset = UTIL.NumberToInt(UTIL.clone(oldMaxOffset));
                        throw new VDMSpecException(new JavaLangIllegalArgumentException(new JavaLangString(new String("unknown format type at "))));
                    }
                }
            }
            formats.put(offsetNumber, newFormat);
            segments.put(new Integer(1), new JavaLangStringBuffer());
            segments.put(new Integer(2), new JavaLangStringBuffer());
            segments.put(new Integer(3), new JavaLangStringBuffer());
            return segments;
        }
    }
// ***** VDMTOOLS END Name=makeFormat


//// ***** VDMTOOLS START Name=formatObjects KEEP=NO
//    public JavaLangStringBuffer formatObjects(final HashMap source, final JavaLangStringBuffer result, final JavaTextFieldPosition ignore) throws CGException {
//        return (JavaLangStringBuffer) (JavaLangStringBuffer) formatObjects_q(source, (JavaLangStringBuffer) result, (JavaTextFieldPosition) ignore, new Integer(0));
//    }
//// ***** VDMTOOLS END Name=formatObjects
//
//
//// ***** VDMTOOLS START Name=formatObjects_q KEEP=NO
//    private JavaLangStringBuffer formatObjects_q(final HashMap arguments, final JavaLangStringBuffer result, final JavaTextFieldPosition status, final Integer recursionProtection) throws CGException {
//        JavaLangString s = null;
//        Integer lastOffset = new Integer(0);
//        {
//            Integer i = new Integer(0);
//            while (new Boolean((i.intValue()) <= (maxOffset.intValue())).booleanValue()) {
//                JavaLangString rhs_8 = null;
//                Object tmpGen_9 = null;
//                UTIL.RunTime("Run-Time Error:The argument could not be applied");
//                s = (JavaLangString) UTIL.clone(rhs_8);
//                {
//                    JavaLangStringBuffer tmpVal_13 = null;
//                    tmpVal_13 = (JavaLangStringBuffer) result.append(s);
//                    ;
//                }
//                lastOffset = UTIL.NumberToInt(UTIL.clone(UTIL.NumberToInt(offsets.get(i))));
//                {
//                    Integer argumentNumber = UTIL.NumberToInt(argumentNumbers.get(i));
//                    Boolean cond_20 = null;
//                    {
//                        if (!(cond_20 = new Boolean(UTIL.equals(arguments, new HashMap()))).booleanValue()) {
//                            Boolean var2_24 = null;
//                            Integer var2_26 = null;
//                            HashSet unArg_27 = new HashSet();
//                            unArg_27.clear();
//                            unArg_27.addAll(arguments.keySet());
//                            var2_26 = new Integer(unArg_27.size());
//                            var2_24 = new Boolean((argumentNumber.intValue()) >= (var2_26.intValue()));
//                            cond_20 = var2_24;
//                        }
//                    }
//                    if (cond_20.booleanValue()) {
//                        JavaLangString s_1 = new JavaLangString(new String("{"));
//                        JavaLangString rhs_30 = null;
//                        JavaLangString par_31 = null;
//                        par_31 = (JavaLangString) JavaLangString.valueOf(argumentNumber);
//                        rhs_30 = (JavaLangString) s_1.concat((JavaLangString) par_31);
//                        s_1 = (JavaLangString) UTIL.clone(rhs_30);
//                        JavaLangString rhs_36 = null;
//                        rhs_36 = (JavaLangString) s_1.concat((JavaLangString) new JavaLangString(new String("{")));
//                        s_1 = (JavaLangString) UTIL.clone(rhs_36);
//                        {
//                            JavaLangStringBuffer tmpVal_40 = null;
//                            tmpVal_40 = (JavaLangStringBuffer) result.append(s_1);
//                            ;
//                        }
//                    }
//                    if (new Boolean(false).booleanValue()) {
//                        JavaLangStringBuffer tmpVal_88 = null;
//                        tmpVal_88 = (JavaLangStringBuffer) result.append(new Character('D'));
//                        ;
//                    } else {
//                        JavaLangObject obj = (JavaLangObject) arguments.get(argumentNumber);
//                        JavaLangString arg = null;
//                        Boolean tryRecursion = new Boolean(false);
//                        Boolean cond_45 = null;
//                        cond_45 = obj.IsNil();
//                        if (cond_45.booleanValue())
//                            arg = (JavaLangString) UTIL.clone(new JavaLangString(new String("null")));
//                        else {
//                            Boolean cond_46 = null;
//                            Boolean unArg_47 = null;
//                            JavaTextFormat obj_48 = null;
//                            obj_48 = (JavaTextFormat) (JavaTextFormat) formats.get(i);
//                            unArg_47 = obj_48.IsNil();
//                            cond_46 = new Boolean(!unArg_47.booleanValue());
//                            if (cond_46.booleanValue()) {
//                                JavaLangString rhs_61 = null;
//                                JavaTextFormat obj_62 = null;
//                                obj_62 = (JavaTextFormat) (JavaTextFormat) formats.get(i);
//                                rhs_61 = (JavaLangString) obj_62.formatObject((JavaLangObject) obj);
//                                arg = (JavaLangString) UTIL.clone(rhs_61);
//                            } else if (new Boolean(obj instanceof JavaLangNumber).booleanValue()) {
//                                JavaLangString rhs_60 = null;
//                                rhs_60 = (JavaLangString) obj.toString();
//                                arg = (JavaLangString) UTIL.clone(rhs_60);
//                            } else if (new Boolean(obj instanceof JavaLangString).booleanValue())
//                                arg = (JavaLangString) UTIL.clone(obj);
//                            else {
//                                JavaLangString rhs_55 = null;
//                                rhs_55 = (JavaLangString) obj.toString();
//                                arg = (JavaLangString) UTIL.clone(rhs_55);
//                                Boolean cond_56 = null;
//                                cond_56 = arg.IsNil();
//                                if (cond_56.booleanValue())
//                                    arg = (JavaLangString) UTIL.clone(new JavaLangString(new String("null")));
//                            }
//                        }
//                        Boolean cond_68 = null;
//                        {
//                            if ((cond_68 = tryRecursion).booleanValue()) {
//                                Boolean var2_70 = null;
//                                Integer var1_71 = null;
//                                Object tmpGen_72 = null;
//                                var1_71 = UTIL.NumberToInt(arg.indexOf(new Character('{')));
//                                var2_70 = new Boolean((var1_71.intValue()) >= (new Integer(0).intValue()));
//                                cond_68 = var2_70;
//                            }
//                        }
//                        if (cond_68.booleanValue()) {
//                            JavaTextMessageFormat temp = null;
//                            {
//                                JavaLangStringBuffer tmpVal_82 = null;
//                                tmpVal_82 = (JavaLangStringBuffer) temp.formatObjects_q(arguments, (JavaLangStringBuffer) result, (JavaTextFieldPosition) status, recursionProtection);
//                                ;
//                            }
//                        } else {
//                            JavaLangStringBuffer tmpVal_79 = null;
//                            tmpVal_79 = (JavaLangStringBuffer) result.append(arg);
//                            ;
//                        }
//                    }
//                }
//                {
//                    Integer l_u1 = i;
//                    i = UTIL.NumberToInt(UTIL.clone(new Integer(l_u1.intValue() + new Integer(1).intValue())));
//                }
//            }
//        }
//        JavaLangString rhs_95 = null;
//        Object tmpGen_96 = null;
//        UTIL.RunTime("Run-Time Error:The argument could not be applied");
//        s = (JavaLangString) UTIL.clone(rhs_95);
//        {
//            JavaLangStringBuffer tmpVal_100 = null;
//            tmpVal_100 = (JavaLangStringBuffer) result.append(s);
//            ;
//        }
//        return (JavaLangStringBuffer) result;
//    }
//// ***** VDMTOOLS END Name=formatObjects_q

}

;
