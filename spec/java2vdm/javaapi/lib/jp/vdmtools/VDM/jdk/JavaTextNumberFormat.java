//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Tue 30-Oct-2001 by the VDM++ JAVA Code Generator
// (v6.7.19 - Mon 29-Oct-2001)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package jp.vdmtools.VDM.jdk;

// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.CGException;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.VDMSpecException;

import java.util.HashMap;

// ***** VDMTOOLS END Name=imports


public class JavaTextNumberFormat extends JavaTextFormat {

    public static Integer INTEGER_uFIELD = new Integer(0);
    public static Integer FRACTION_uFIELD = new Integer(1);
    public static JavaUtilHashtable cachedLocaleData = null;
    public static Integer NUMBERSTYLE = new Integer(0);
    public static Integer CURRENCYSTYLE = new Integer(1);
    public static Integer PERCENTSTYLE = new Integer(2);
    public static Integer SCIENTIFICSTYLE = new Integer(3);
    private Boolean groupingUsed = null;
    private Integer maxIntegerDigits = null;
    private Integer minIntegerDigits = null;
    private Integer maxFractionDigits = null;
    private Integer minFractionDigits = null;
    private Boolean parseIntegerOnly = null;
    private Integer maximumIntegerDigits = null;
    private Integer minimumIntegerDigits = null;
    private Integer maximumFractionDigits = null;
    private Integer minimumFractionDigits = null;
    private static Integer currentSerialVersion = new Integer(1);
    private Integer serialVersionOnStream = null;
    private static Integer serialVersionUID = new Integer(-new Integer(0).intValue());
    private static final JavaLangClass CLASS = (JavaLangClass) new JavaLangClass(new String("JavaTextNumberFormat"), new quotes.CLASS(), new Boolean(false));

    public JavaTextNumberFormat() throws CGException {
        try {
            INTEGER_uFIELD = new Integer(0);
            FRACTION_uFIELD = new Integer(1);
            cachedLocaleData = (JavaUtilHashtable) new JavaUtilHashtable(new Integer(3));
            NUMBERSTYLE = new Integer(0);
            CURRENCYSTYLE = new Integer(1);
            PERCENTSTYLE = new Integer(2);
            SCIENTIFICSTYLE = new Integer(3);
            groupingUsed = new Boolean(true);
            maxIntegerDigits = new Integer(40);
            minIntegerDigits = new Integer(1);
            maxFractionDigits = new Integer(3);
            minFractionDigits = new Integer(0);
            parseIntegerOnly = new Boolean(false);
            maximumIntegerDigits = new Integer(40);
            minimumIntegerDigits = new Integer(1);
            maximumFractionDigits = new Integer(3);
            minimumFractionDigits = new Integer(0);
            currentSerialVersion = new Integer(1);
            serialVersionOnStream = currentSerialVersion;
            serialVersionUID = new Integer(-new Integer(0).intValue());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    public Object clone()  {
        JavaLangObject other = null;
        try {
            other = (JavaLangObject) super.clone();
        } catch (CloneNotSupportedException e) {
        }
        return (JavaLangObject) other;
    }

    public JavaLangClass vdm_getClass() throws CGException {
        return (JavaLangClass) CLASS;
    }

    public Integer jHashCode() throws CGException {
        return new Integer(new Integer(maximumIntegerDigits.intValue() * new Integer(37).intValue()).intValue() + maxFractionDigits.intValue());
    }



// ***** VDMTOOLS START Name=equals KEEP=NO
    public Boolean equals(final JavaLangObject obj) throws CGException {
        Boolean cond_2 = null;
        cond_2 = obj.IsNil();
        if (cond_2.booleanValue())
            return new Boolean(false);
        if (new Boolean(UTIL.equals(this, obj)).booleanValue())
            return new Boolean(true);
        Boolean cond_8 = null;
        JavaLangClass var2_10 = null;
        var2_10 = (JavaLangClass) obj.vdm_getClass();
        cond_8 = new Boolean(!UTIL.equals(vdm_getClass(), var2_10));
        if (cond_8.booleanValue())
            return new Boolean(false);
        {
            JavaTextNumberFormat other = (JavaTextNumberFormat) obj;
            Boolean rexpr_12 = null;
            Boolean var1_13 = null;
            Boolean var1_14 = null;
            Boolean var1_15 = null;
            Boolean var1_16 = null;
            Boolean var1_17 = null;
            Integer var2_19 = null;
            var2_19 = other.maximumIntegerDigits;
            var1_17 = new Boolean(maximumIntegerDigits.intValue() == var2_19.intValue());
            {
                if ((var1_16 = var1_17).booleanValue()) {
                    Boolean var2_21 = null;
                    Integer var2_23 = null;
                    var2_23 = other.minimumIntegerDigits;
                    var2_21 = new Boolean(minimumIntegerDigits.intValue() == var2_23.intValue());
                    var1_16 = var2_21;
                }
            }
            {
                if ((var1_15 = var1_16).booleanValue()) {
                    Boolean var2_25 = null;
                    Integer var2_27 = null;
                    var2_27 = other.maximumFractionDigits;
                    var2_25 = new Boolean(maximumFractionDigits.intValue() == var2_27.intValue());
                    var1_15 = var2_25;
                }
            }
            {
                if ((var1_14 = var1_15).booleanValue()) {
                    Boolean var2_29 = null;
                    Integer var2_31 = null;
                    var2_31 = other.minimumFractionDigits;
                    var2_29 = new Boolean(minimumFractionDigits.intValue() == var2_31.intValue());
                    var1_14 = var2_29;
                }
            }
            {
                if ((var1_13 = var1_14).booleanValue()) {
                    Boolean var2_33 = null;
                    Boolean var2_35 = null;
                    var2_35 = other.groupingUsed;
                    var2_33 = new Boolean(UTIL.equals(groupingUsed, var2_35));
                    var1_13 = var2_33;
                }
            }
            {
                if ((rexpr_12 = var1_13).booleanValue()) {
                    Boolean var2_37 = null;
                    Boolean var2_39 = null;
                    var2_39 = other.parseIntegerOnly;
                    var2_37 = new Boolean(UTIL.equals(parseIntegerOnly, var2_39));
                    rexpr_12 = var2_37;
                }
            }
            return rexpr_12;
        }
    }

    public Boolean isGroupingUsed() throws CGException {
        return groupingUsed;
    }

    public void setGroupingUsed(final Boolean newValue) throws CGException {
        groupingUsed = (Boolean) UTIL.clone(newValue);
    }

    public JavaTextNumberFormat(final quotes.NIL var_1_1) throws CGException {
        this();
        isNil = (Boolean) UTIL.clone(new Boolean(true));
    }

    public Boolean isParseIntegerOnly() throws CGException {
        return parseIntegerOnly;
    }

    static public JavaTextNumberFormat getInstance(final JavaUtilLocale inLocale) throws CGException {
        return new JavaTextNumberFormat().getInstance(inLocale, NUMBERSTYLE);
    }

    public void setParseIntegerOnly(final Boolean value_u_u) throws CGException {
        parseIntegerOnly = (Boolean) UTIL.clone(value_u_u);
    }

    static public JavaTextNumberFormat getInstance(final JavaUtilLocale desiredLocale, final Integer choice) throws CGException {
        return null;
    }

    public Integer getMaximumIntegerDigits() throws CGException {
        return maximumIntegerDigits;
    }

    public Integer getMinimumIntegerDigits() throws CGException {
        return minimumIntegerDigits;
    }

    public Integer getMaximumFractionDigits() throws CGException {
        return maximumFractionDigits;
    }

    public Integer getMinimumFractionDigits() throws CGException {
        return minimumFractionDigits;
    }

    public void setMaximumIntegerDigits(final Integer newValue) throws CGException {
        Integer rhs_2 = null;
        if (new Boolean((newValue.intValue()) > (new Integer(0).intValue())).booleanValue())
            rhs_2 = newValue;
        else
            rhs_2 = new Integer(0);
        maximumIntegerDigits = UTIL.NumberToInt(UTIL.clone(rhs_2));
        if (new Boolean((minimumIntegerDigits.intValue()) > (maximumIntegerDigits.intValue())).booleanValue())
            minimumIntegerDigits = UTIL.NumberToInt(UTIL.clone(maximumIntegerDigits));
        ;
    }

    public void setMinimumIntegerDigits(final Integer newValue) throws CGException {
        Integer rhs_2 = null;
        if (new Boolean((newValue.intValue()) > (new Integer(0).intValue())).booleanValue())
            rhs_2 = newValue;
        else
            rhs_2 = new Integer(0);
        minimumIntegerDigits = UTIL.NumberToInt(UTIL.clone(rhs_2));
        if (new Boolean((minimumIntegerDigits.intValue()) > (maximumIntegerDigits.intValue())).booleanValue())
            maximumIntegerDigits = UTIL.NumberToInt(UTIL.clone(minimumIntegerDigits));
        ;
    }
// ***** VDMTOOLS END Name=setMinimumIntegerDigits


// ***** VDMTOOLS START Name=getNumberInstance KEEP=NO
    static public JavaTextNumberFormat getNumberInstance(final JavaUtilLocale inLocale) throws CGException {
        return new JavaTextNumberFormat().getInstance(JavaUtilLocale.getDefault(),
						      JavaTextNumberFormat.NUMBERSTYLE);
    }
// ***** VDMTOOLS END Name=getNumberInstance


// ***** VDMTOOLS START Name=setMaximumFractionDigits KEEP=NO
    public void setMaximumFractionDigits(final Integer newValue) throws CGException {
        Integer rhs_2 = null;
        if (new Boolean((newValue.intValue()) > (new Integer(0).intValue())).booleanValue())
            rhs_2 = newValue;
        else
            rhs_2 = new Integer(0);
        maximumFractionDigits = UTIL.NumberToInt(UTIL.clone(rhs_2));
        if (new Boolean((maximumFractionDigits.intValue()) < (minimumFractionDigits.intValue())).booleanValue())
            minimumFractionDigits = UTIL.NumberToInt(UTIL.clone(maximumFractionDigits));
        ;
    }
// ***** VDMTOOLS END Name=setMaximumFractionDigits


// ***** VDMTOOLS START Name=setMinimumFractionDigits KEEP=NO
    public void setMinimumFractionDigits(final Integer newValue) throws CGException {
        Integer rhs_2 = null;
        if (new Boolean((newValue.intValue()) > (new Integer(0).intValue())).booleanValue())
            rhs_2 = newValue;
        else
            rhs_2 = new Integer(0);
        minimumFractionDigits = UTIL.NumberToInt(UTIL.clone(rhs_2));
        if (new Boolean((maximumFractionDigits.intValue()) < (minimumFractionDigits.intValue())).booleanValue())
            maximumFractionDigits = UTIL.NumberToInt(UTIL.clone(minimumFractionDigits));
        ;
    }
// ***** VDMTOOLS END Name=setMinimumFractionDigits


// ***** VDMTOOLS START Name=getPercentInstance KEEP=NO
    static public JavaTextNumberFormat getPercentInstance(final JavaUtilLocale inLocale) throws CGException {
	return new JavaTextNumberFormat().getInstance(JavaUtilLocale.getDefault(),
						      PERCENTSTYLE);
    }
// ***** VDMTOOLS END Name=getPercentInstance


// ***** VDMTOOLS START Name=getCurrencyInstance KEEP=NO
    static public JavaTextNumberFormat getCurrencyInstance(final JavaUtilLocale inLocale) throws CGException {
	return new JavaTextNumberFormat().getInstance(JavaUtilLocale.getDefault(),
						      CURRENCYSTYLE);
    }
// ***** VDMTOOLS END Name=getCurrencyInstance


// ***** VDMTOOLS START Name=getScientificInstance KEEP=NO
    static private JavaTextNumberFormat getScientificInstance(final JavaUtilLocale inLocale) throws CGException {
	return new JavaTextNumberFormat().getInstance(JavaUtilLocale.getDefault(),
						      SCIENTIFICSTYLE);
    }
// ***** VDMTOOLS END Name=getScientificInstance



// ***** VDMTOOLS START Name=parseObject KEEP=NO
    public JavaLangObject parseObject(final JavaLangString source, final JavaTextParsePosition parsePosition) throws CGException {
	UTIL.RunTime("JavaTextNumberFormat.parseObject not defined");
	return null;
    }
// ***** VDMTOOLS END Name=parseObject


}

