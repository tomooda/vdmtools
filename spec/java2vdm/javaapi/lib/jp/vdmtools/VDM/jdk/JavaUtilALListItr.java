//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Tue 30-Oct-2001 by the VDM++ JAVA Code Generator
// (v6.7.19 - Mon 29-Oct-2001)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package jp.vdmtools.VDM.jdk;

// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.CGException;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.VDMSpecException;

// ***** VDMTOOLS END Name=imports


public abstract class JavaUtilALListItr extends JavaUtilALItr implements JavaUtilListIterator {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
    static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=JavaUtilALListItr KEEP=NO
    public JavaUtilALListItr() throws CGException {
    }
// ***** VDMTOOLS END Name=JavaUtilALListItr


// ***** VDMTOOLS START Name=JavaUtilALListItr KEEP=NO
    public JavaUtilALListItr(final JavaUtilAbstractList al, final Integer idx)
            throws CGException
    {
        super((JavaUtilAbstractList) al);
        cursor = UTIL.NumberToInt(UTIL.clone(idx));
    }
// ***** VDMTOOLS END Name=JavaUtilALListItr


// ***** VDMTOOLS START Name=hasPrevious KEEP=NO
    public Boolean hasPrevious() throws CGException {
        return new Boolean(!(cursor.intValue() == new Integer(0).intValue()));
    }
// ***** VDMTOOLS END Name=hasPrevious


// ***** VDMTOOLS START Name=previous KEEP=NO
    public JavaLangObject previous() throws CGException {
        cursor = UTIL.NumberToInt(UTIL.clone(new Integer(cursor.intValue() - new Integer(1).intValue())));
        {
            JavaLangObject previous_1 = null;
            previous_1 = (JavaLangObject) al.get(cursor);
            lastRet = UTIL.NumberToInt(UTIL.clone(cursor));
            return (JavaLangObject) previous_1;
        }
    }
// ***** VDMTOOLS END Name=previous


// ***** VDMTOOLS START Name=nextIndex KEEP=NO
    public Integer nextIndex() throws CGException {
        return cursor;
    }
// ***** VDMTOOLS END Name=nextIndex


// ***** VDMTOOLS START Name=previousIndex KEEP=NO
    public Integer previousIndex() throws CGException {
        return new Integer(cursor.intValue() - new Integer(1).intValue());
    }
// ***** VDMTOOLS END Name=previousIndex


// ***** VDMTOOLS START Name=set_u_u KEEP=NO
    public void set_u_u(final JavaLangObject o) throws CGException {
        if (new Boolean(lastRet.intValue() == new Integer(-new Integer(1).intValue()).intValue()).booleanValue())
            throw new VDMSpecException(new JavaLangIllegalStateException());
        JavaLangObject tmpObj_8 = null;
        tmpObj_8 = (JavaLangObject) al.set_u_u(lastRet, (JavaLangObject) o);
        Integer rhs_11 = null;
        rhs_11 = al.modCount;
        expectedModCount = UTIL.NumberToInt(UTIL.clone(rhs_11));
    }
// ***** VDMTOOLS END Name=set_u_u

}

;
