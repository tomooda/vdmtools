//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Tue 30-Oct-2001 by the VDM++ JAVA Code Generator
// (v6.7.19 - Mon 29-Oct-2001)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package jp.vdmtools.VDM.jdk;

// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.CGException;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.VDMSpecException;

import java.util.HashMap;
import java.util.HashSet;

// ***** VDMTOOLS END Name=imports


public class JavaUtilEnumerator extends JavaLangObject implements JavaUtilEnumeration, JavaUtilIterator {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
    static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=htable KEEP=NO
    private JavaUtilHashtable htable = null;
// ***** VDMTOOLS END Name=htable

// ***** VDMTOOLS START Name=index KEEP=NO
    private Integer index = null;
// ***** VDMTOOLS END Name=index

// ***** VDMTOOLS START Name=entry KEEP=NO
    private JavaUtilHTEntry entry = null;
// ***** VDMTOOLS END Name=entry

// ***** VDMTOOLS START Name=lastReturned KEEP=NO
    private JavaUtilHTEntry lastReturned = null;
// ***** VDMTOOLS END Name=lastReturned

// ***** VDMTOOLS START Name=type KEEP=NO
    private Integer type = null;
// ***** VDMTOOLS END Name=type

// ***** VDMTOOLS START Name=iterator KEEP=NO
    private Boolean iterator = null;
// ***** VDMTOOLS END Name=iterator

// ***** VDMTOOLS START Name=expectedModCount KEEP=NO
    protected Integer expectedModCount = null;
// ***** VDMTOOLS END Name=expectedModCount


// ***** VDMTOOLS START Name=JavaUtilEnumerator KEEP=NO
    public JavaUtilEnumerator() throws CGException {
    }
// ***** VDMTOOLS END Name=JavaUtilEnumerator


// ***** VDMTOOLS START Name=next KEEP=NO
    public JavaLangObject next() throws CGException {
        Boolean cond_1 = null;
        Integer var1_2 = null;
        var1_2 = htable.modCount;
        cond_1 = new Boolean(!(var1_2.intValue() == expectedModCount.intValue()));
        if (cond_1.booleanValue())
            throw new VDMSpecException(new JavaUtilConcurrentModificationException());
        return (JavaLangObject) nextElement();
    }
// ***** VDMTOOLS END Name=next


// ***** VDMTOOLS START Name=remove KEEP=NO
    public void remove() throws CGException {
        if (new Boolean(!iterator.booleanValue()).booleanValue())
            throw new VDMSpecException(new JavaLangUnsupportedOperationException());
        Boolean cond_4 = null;
        cond_4 = lastReturned.IsNil();
        if (cond_4.booleanValue())
            throw new VDMSpecException(new JavaLangIllegalStateException(new JavaLangString(new String("JavaUtilHashtable JavaUtilEnumerator"))));
        Boolean cond_8 = null;
        Integer var1_9 = null;
        var1_9 = htable.modCount;
        cond_8 = new Boolean(!(var1_9.intValue() == expectedModCount.intValue()));
        if (cond_8.booleanValue())
            throw new VDMSpecException(new JavaUtilConcurrentModificationException());
        {
            Integer idx = null;
            Integer var1_13 = null;
            {
                Integer i = null;
                i = lastReturned.hash;
                if (new Boolean((i.intValue()) < (new Integer(0).intValue())).booleanValue())
                    var1_13 = new Integer(-i.intValue());
                else
                    var1_13 = i;
            }
            Integer var2_22 = null;
            HashSet unArg_23 = new HashSet();
            HashMap unArg_24 = new HashMap();
            unArg_24 = htable.table;
            unArg_23.clear();
            unArg_23.addAll(unArg_24.keySet());
            var2_22 = new Integer(unArg_23.size());
            idx = new Integer((int) (var1_13.doubleValue() - var2_22.doubleValue() * Math.floor(var1_13.doubleValue() / var2_22.doubleValue())));
            {
                JavaUtilHTEntry e = null;
                HashMap tmp_m_26 = new HashMap();
                tmp_m_26 = htable.table;
                e = (JavaUtilHTEntry) tmp_m_26.get(idx);
                JavaUtilHTEntry prev = new JavaUtilHTEntry(new quotes.NIL());
                while (true) {
                    Boolean whCrtl_30 = null;
                    Boolean unArg_31 = null;
                    unArg_31 = e.IsNil();
                    whCrtl_30 = new Boolean(!unArg_31.booleanValue());
                    if (whCrtl_30.booleanValue()) {
                        if (new Boolean(UTIL.equals(e, lastReturned)).booleanValue()) {
                            Integer rhs_35 = null;
                            Integer var1_36 = null;
                            var1_36 = htable.modCount;
                            rhs_35 = new Integer(var1_36.intValue() + new Integer(1).intValue());
                            htable.modCount = UTIL.NumberToInt(rhs_35);
                            expectedModCount = UTIL.NumberToInt(UTIL.clone(new Integer(expectedModCount.intValue() + new Integer(1).intValue())));
                            Boolean cond_43 = null;
                            cond_43 = prev.IsNil();
                            if (cond_43.booleanValue()) {
                                HashMap rhs_47 = new HashMap();
                                HashMap seqmap_50 = new HashMap();
                                seqmap_50 = htable.table;
                                HashMap modmap_48 = new HashMap();
                                JavaUtilHTEntry tmpVar2_53 = null;
                                tmpVar2_53 = e.next;
                                modmap_48 = new HashMap();
                                modmap_48.put(idx, tmpVar2_53);
                                rhs_47 = new HashMap(seqmap_50);
                                rhs_47.putAll(modmap_48);
                                htable.table = (HashMap) rhs_47;
                            } else {
                                JavaUtilHTEntry rhs_44 = null;
                                rhs_44 = e.next;
                                prev.next = (JavaUtilHTEntry) rhs_44;
                            }
                            Integer rhs_56 = null;
                            Integer var1_57 = null;
                            var1_57 = htable.count;
                            rhs_56 = new Integer(var1_57.intValue() - new Integer(1).intValue());
                            htable.count = UTIL.NumberToInt(rhs_56);
                            lastReturned = (JavaUtilHTEntry) UTIL.clone(new JavaUtilHTEntry(new quotes.NIL()));
                            return;
                        }
                        prev = (JavaUtilHTEntry) UTIL.clone(e);
                        JavaUtilHTEntry rhs_64 = null;
                        rhs_64 = e.next;
                        e = (JavaUtilHTEntry) UTIL.clone(rhs_64);
                    } else
                        break;
                }
            }
            throw new VDMSpecException(new JavaUtilConcurrentModificationException());
        }
   }
// ***** VDMTOOLS END Name=remove


// ***** VDMTOOLS START Name=hasNext KEEP=NO
    public Boolean hasNext() throws CGException {
        return hasMoreElements();
    }
// ***** VDMTOOLS END Name=hasNext


// ***** VDMTOOLS START Name=nextElement KEEP=NO
    public JavaLangObject nextElement() throws jp.vdmtools.VDM.CGException {
        JavaUtilHTEntry et = entry;
        Integer i = index;
        while (true) {
            Boolean whCrtl_1 = null;
            Boolean var1_2 = null;
            var1_2 = et.IsNil();
            {
                if ((whCrtl_1 = var1_2).booleanValue())
                    whCrtl_1 = new Boolean((i.intValue()) > (new Integer(0).intValue()));
            }
            if (whCrtl_1.booleanValue()) {
                Integer l_u4 = i;
                Integer l_u5 = new Integer(l_u4.intValue() - new Integer(1).intValue());
                {
                    i = UTIL.NumberToInt(UTIL.clone(l_u5));
                    {
                        Integer l_u3 = i;
                        JavaUtilHTEntry l_u1 = null;
                        HashMap tmp_m_15 = new HashMap();
                        tmp_m_15 = htable.table;
                        l_u1 = (JavaUtilHTEntry) tmp_m_15.get(l_u3);
                        et = (JavaUtilHTEntry) UTIL.clone(l_u1);
                    }
                }
            } else
                break;
        }
        entry = (JavaUtilHTEntry) UTIL.clone(et);
        index = UTIL.NumberToInt(UTIL.clone(i));
        Boolean cond_21 = null;
        Boolean unArg_22 = null;
        unArg_22 = et.IsNil();
        cond_21 = new Boolean(!unArg_22.booleanValue());
        if (cond_21.booleanValue()) {
            lastReturned = (JavaUtilHTEntry) UTIL.clone(entry);
            {
                JavaUtilHTEntry l_u1 = (JavaUtilHTEntry) lastReturned;
                {
                    JavaUtilHTEntry e = l_u1;
                    JavaUtilHTEntry rhs_26 = null;
                    rhs_26 = e.next;
                    entry = (JavaUtilHTEntry) UTIL.clone(rhs_26);
                    Object rexpr_28 = null;
                    if (new Boolean(type.intValue() == new Integer(0).intValue()).booleanValue())
                        rexpr_28 = e.key;
                    else if (new Boolean(type.intValue() == new Integer(1).intValue()).booleanValue())
                        rexpr_28 = e.value_u_u;
                    else
                        rexpr_28 = e;
                    return (JavaLangObject) rexpr_28;
                }
            }
        }
        throw new VDMSpecException(new JavaUtilNoSuchElementException(new JavaLangString(new String("JavaUtilHashtable JavaUtilEnumerator"))));
    }
// ***** VDMTOOLS END Name=nextElement


// ***** VDMTOOLS START Name=JavaUtilEnumerator KEEP=NO
    public JavaUtilEnumerator(final Integer type_1, final Boolean iterator_1, final JavaUtilHashtable htable_1) throws CGException {
        this();
        {
            ((JavaUtilEnumerator) this).type = UTIL.NumberToInt(UTIL.clone(type_1));
            ((JavaUtilEnumerator) this).iterator = (Boolean) UTIL.clone(iterator_1);
            ((JavaUtilEnumerator) this).htable = (JavaUtilHashtable) UTIL.clone(htable_1);
            Integer rhs_7 = null;
            HashSet unArg_8 = new HashSet();
            HashMap unArg_9 = new HashMap();
            unArg_9 = htable_1.table;
            unArg_8.clear();
            unArg_8.addAll(unArg_9.keySet());
            rhs_7 = new Integer(unArg_8.size());
            index = UTIL.NumberToInt(UTIL.clone(rhs_7));
            entry = (JavaUtilHTEntry) UTIL.clone(new JavaUtilHTEntry(new quotes.NIL()));
            lastReturned = (JavaUtilHTEntry) UTIL.clone(new JavaUtilHTEntry(new quotes.NIL()));
            Integer rhs_15 = null;
            rhs_15 = htable_1.modCount;
            expectedModCount = UTIL.NumberToInt(UTIL.clone(rhs_15));
        }
    }
// ***** VDMTOOLS END Name=JavaUtilEnumerator


// ***** VDMTOOLS START Name=JavaUtilEnumerator KEEP=NO
    public JavaUtilEnumerator(final quotes.NIL var_1_1) throws CGException {
        this();
        isNil = (Boolean) UTIL.clone(new Boolean(true));
    }
// ***** VDMTOOLS END Name=JavaUtilEnumerator


// ***** VDMTOOLS START Name=hasMoreElements KEEP=NO
    public Boolean hasMoreElements() throws CGException {
        JavaUtilHTEntry e = entry;
        Integer i = index;
        while (true) {
            Boolean whCrtl_1 = null;
            Boolean var1_2 = null;
            var1_2 = e.IsNil();
            {
                if ((whCrtl_1 = var1_2).booleanValue())
                    whCrtl_1 = new Boolean((i.intValue()) > (new Integer(0).intValue()));
            }
            if (whCrtl_1.booleanValue()) {
                Integer l_u4 = i;
                Integer l_u5 = new Integer(l_u4.intValue() - new Integer(1).intValue());
                {
                    i = UTIL.NumberToInt(UTIL.clone(l_u5));
                    {
                        Integer l_u3 = i;
                        JavaUtilHTEntry l_u1 = null;
                        HashMap tmp_m_15 = new HashMap();
                        tmp_m_15 = htable.table;
                        l_u1 = (JavaUtilHTEntry) tmp_m_15.get(l_u3);
                        e = (JavaUtilHTEntry) UTIL.clone(l_u1);
                    }
                }
            } else
                break;
        }
        entry = (JavaUtilHTEntry) UTIL.clone(e);
        index = UTIL.NumberToInt(UTIL.clone(i));
        Boolean rexpr_21 = null;
        Boolean unArg_22 = null;
        unArg_22 = e.IsNil();
        rexpr_21 = new Boolean(!unArg_22.booleanValue());
        return rexpr_21;
    }
// ***** VDMTOOLS END Name=hasMoreElements

}

;
