//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Tue 30-Oct-2001 by the VDM++ JAVA Code Generator
// (v6.7.19 - Mon 29-Oct-2001)
//
// Supported compilers:
// jdk1.3
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO

// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package jp.vdmtools.VDM.jdk;

// ***** VDMTOOLS END Name=package


// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.vdmtools.VDM.CGException;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.VDMSpecException;

import java.util.HashMap;
import java.util.Vector;
import java.util.Properties;
import java.util.Enumeration;
import java.io.IOException;

// ***** VDMTOOLS END Name=imports


public class JavaUtilProperties extends JavaUtilHashtable {

    private Properties wrappedObject;



// ***** VDMTOOLS START Name=defaults KEEP=NO
    protected JavaUtilProperties defaults = null;
// ***** VDMTOOLS END Name=defaults

// ***** VDMTOOLS START Name=keyValueSeparators KEEP=NO
    private JavaLangString keyValueSeparators = null;
// ***** VDMTOOLS END Name=keyValueSeparators

// ***** VDMTOOLS START Name=strictKeyValueSeparators KEEP=NO
    private JavaLangString strictKeyValueSeparators = null;
// ***** VDMTOOLS END Name=strictKeyValueSeparators

// ***** VDMTOOLS START Name=specialSaveChars KEEP=NO
    private JavaLangString specialSaveChars = null;
// ***** VDMTOOLS END Name=specialSaveChars

// ***** VDMTOOLS START Name=whiteSpaceChars KEEP=NO
    private JavaLangString whiteSpaceChars = null;
// ***** VDMTOOLS END Name=whiteSpaceChars

// ***** VDMTOOLS START Name=hexDigit KEEP=NO
    private HashMap hexDigit = new HashMap();
// ***** VDMTOOLS END Name=hexDigit


// ***** VDMTOOLS START Name=toHex KEEP=NO
    private Character toHex(final Integer nibble) throws CGException {
        return (Character) hexDigit.get(new Integer((int) (nibble.doubleValue() - new Integer(16).doubleValue() * Math.floor(nibble.doubleValue() / new Integer(16).doubleValue()))));
    }
// ***** VDMTOOLS END Name=toHex


// ***** VDMTOOLS START Name=JavaUtilProperties KEEP=NO
    public JavaUtilProperties() throws CGException {
        wrappedObject = new Properties();
    }
// ***** VDMTOOLS END Name=JavaUtilProperties

    public class PropertiesEnumeration implements JavaUtilEnumeration {
        private Enumeration wrappedObject;

        public JavaLangObject nextElement(){
            return (JavaLangObject) wrappedObject.nextElement();
        }

        public Boolean hasMoreElements(){
            return new Boolean(wrappedObject.hasMoreElements());
        }

        public PropertiesEnumeration(Enumeration e){
            wrappedObject = e;
        }

        public Boolean IsNil()
        {
            return new Boolean(false);
        }
    }


    public JavaUtilEnumeration propertyNames() throws CGException {
      return new PropertiesEnumeration(wrappedObject.propertyNames());
    }


    public JavaUtilProperties(final quotes.NIL var_1_1) throws CGException {
        this();
        isNil = new Boolean(true);
    }


//// ***** VDMTOOLS START Name=list KEEP=NO
//    public void list(final JavaIoPrintStream out) throws CGException {
//        out.println(new JavaLangString(new String("-- listing properties --")));
//        {
//            JavaUtilHashtable h = new JavaUtilHashtable();
//            enumerate((JavaUtilHashtable) h);
//            {
//                JavaUtilEnumeration e = null;
//                e = (JavaUtilEnumeration) h.keys();
//                while (true) {
//                    Boolean whCrtl_7 = null;
//                    whCrtl_7 = e.hasMoreElements();
//                    if (whCrtl_7.booleanValue()) {
//                        JavaLangString key = null;
//                        key = (JavaLangString) e.nextElement();
//                        JavaLangString val = null;
//                        val = (JavaLangString) h.get((JavaLangObject) key);
//                        Boolean cond_9 = null;
//                        Integer var1_10 = null;
//                        var1_10 = val.length();
//                        cond_9 = new Boolean((var1_10.intValue()) > (new Integer(40).intValue()));
//                        if (cond_9.booleanValue()) {
//                            JavaLangString rhs_12 = null;
//                            JavaLangString obj_13 = null;
//                            Object tmpGen_14 = null;
//                            UTIL.RunTime("Run-Time Error:The argument could not be applied");
//                            rhs_12 = (JavaLangString) obj_13.concat((JavaLangString) new JavaLangString(new String("...")));
//                            val = (JavaLangString) UTIL.clone(rhs_12);
//                        }
//                        JavaLangString rhs_19 = null;
//                        rhs_19 = (JavaLangString) key.concat((JavaLangString) new JavaLangString(new String("=")));
//                        key = (JavaLangString) UTIL.clone(rhs_19);
//                        JavaLangString rhs_22 = null;
//                        rhs_22 = (JavaLangString) key.concat((JavaLangString) val);
//                        key = (JavaLangString) UTIL.clone(rhs_22);
//                        out.println(key);
//                    } else
//                        break;
//                }
//            }
//        }
//    }
//// ***** VDMTOOLS END Name=list


// ***** VDMTOOLS START Name=load KEEP=NO
    public void load(final JavaIoInputStream inStream) throws CGException {
        try {
            wrappedObject.load(inStream.getWrappedObject());
        }
        catch (IOException e){
            throw new VDMSpecException(new JavaIoIOException());
        }
    }
// ***** VDMTOOLS END Name=load


// ***** VDMTOOLS START Name=getProperty KEEP=NO
    public JavaLangString getProperty(final JavaLangString key) throws CGException {
	String value = wrappedObject.getProperty(key.toSeqOfChar());
	if (value == null)
	    return new JavaLangString(new quotes.NIL());
	else
	    return new JavaLangString(value);
    }
// ***** VDMTOOLS END Name=getProperty


    public JavaUtilProperties(final JavaUtilProperties defaults_1) throws CGException {
        this();
        ((JavaUtilProperties) this).defaults = (JavaUtilProperties) UTIL.clone(defaults_1);
    }

//    public void save(final JavaIoOutputStream out, final JavaLangString header) throws CGException {
//        store((JavaIoOutputStream) out, (JavaLangString) header);
//    }



// ***** VDMTOOLS START Name=getProperty KEEP=NO
    public JavaLangString getProperty(final JavaLangString key, final JavaLangString defaultValue) throws CGException {
        return new JavaLangString(wrappedObject.getProperty(key.toSeqOfChar(), defaultValue.toSeqOfChar()));
    }
// ***** VDMTOOLS END Name=getProperty


//// ***** VDMTOOLS START Name=setProperty KEEP=NO
//    public JavaLangObject setProperty(final JavaLangString key, final JavaLangString value_u_u) throws CGException {
//        return (JavaLangObject) (JavaLangObject) put((JavaLangObject) key, (JavaLangObject) value_u_u);
//    }
//// ***** VDMTOOLS END Name=setProperty
//
//
//// ***** VDMTOOLS START Name=store KEEP=NO
//    public void store(final JavaIoOutputStream out, final JavaLangString header) throws CGException {
//        JavaIoBufferedWriter awriter = null;
//        JavaLangString s = null;
//        awriter = (JavaIoBufferedWriter) UTIL.clone(new JavaIoBufferedWriter(new JavaIoOutputStreamWriter(out, new JavaLangString(new String("8859_1")))));
//        Boolean cond_8 = null;
//        Boolean unArg_9 = null;
//        unArg_9 = header.IsNil();
//        cond_8 = new Boolean(!unArg_9.booleanValue());
//        if (cond_8.booleanValue()) {
//            s = (JavaLangString) UTIL.clone(new JavaLangString(new String("#")));
//            JavaLangString rhs_12 = null;
//            rhs_12 = (JavaLangString) s.concat((JavaLangString) header);
//            s = (JavaLangString) UTIL.clone(rhs_12);
//            writeln((JavaIoBufferedWriter) awriter, (JavaLangString) s);
//        }
//        writeln((JavaIoBufferedWriter) awriter, (JavaLangString) new JavaLangString(new String("#30.05.2001")));
//        {
//            JavaUtilEnumeration e = keys();
//            while (true) {
//                Boolean whCrtl_21 = null;
//                whCrtl_21 = e.hasMoreElements();
//                if (whCrtl_21.booleanValue()) {
//                    JavaLangString key = null;
//                    key = (JavaLangString) e.nextElement();
//                    JavaLangString val = (JavaLangString) (JavaLangString) get((JavaLangObject) key);
//                    key = (JavaLangString) UTIL.clone((JavaLangString) saveConvert((JavaLangString) key, new Boolean(true)));
//                    val = (JavaLangString) UTIL.clone((JavaLangString) saveConvert((JavaLangString) val, new Boolean(false)));
//                    s = (JavaLangString) UTIL.clone(key);
//                    JavaLangString rhs_30 = null;
//                    rhs_30 = (JavaLangString) s.concat((JavaLangString) new JavaLangString(new String("=")));
//                    s = (JavaLangString) UTIL.clone(rhs_30);
//                    JavaLangString rhs_33 = null;
//                    rhs_33 = (JavaLangString) s.concat((JavaLangString) val);
//                    s = (JavaLangString) UTIL.clone(rhs_33);
//                    writeln((JavaIoBufferedWriter) awriter, (JavaLangString) s);
//                } else
//                    break;
//            }
//        }
//        awriter.flush();
//    }
//// ***** VDMTOOLS END Name=store


}

;
