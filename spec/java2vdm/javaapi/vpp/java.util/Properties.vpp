class JavaUtilProperties is subclass of JavaUtilHashtable
--values 
--  CLASS : JavaLangClass = new  JavaLangClass("JavaUtilProperties" , <CLASS> , false  )
instance variables 
--  private  static serialVersionUID : int  := 0;
  protected  defaults : JavaUtilProperties;
--static
  private  keyValueSeparators : JavaLangString := new  JavaLangString("=: \t\r\n\f");
  private  strictKeyValueSeparators : JavaLangString := new  JavaLangString("=:");
  private  specialSaveChars : JavaLangString := new  JavaLangString("=: \t\r\n\f#!");
  private  whiteSpaceChars : JavaLangString := new  JavaLangString(" \t\r\n\f");
  private  hexDigit : map  int  to  char  := {15 |-> 'F' , 14 |-> 'E' , 13 |-> 'D' , 12 |-> 'C' , 11 |-> 'B' , 10 |-> 'A' , 9 |-> '9' , 8 |-> '8' , 7 |-> '7' , 6 |-> '6' , 5 |-> '5' , 4 |-> '4' , 3 |-> '3' , 2 |-> '2' , 1 |-> '1' , 0 |-> '0'}
operations 
-- static 
private toHex : int  ==> char 
toHex(nibble) == 
( return  hexDigit(nibble mod 16)
) ;

--public  getClass : () ==> JavaLangClass
--getClass() == 
--return  CLASS;

public  JavaUtilProperties : () ==> JavaUtilProperties
JavaUtilProperties() == 
( let - = JavaUtilProperties(new  JavaUtilProperties(<NIL>))
  in 
    skip 
) ;

public  propertyNames : () ==> JavaUtilEnumeration
propertyNames() == 
( dcl   h : JavaUtilHashtable := new  JavaUtilHashtable();
  enumerate(h);
  return  h.keys()
) ;

public  JavaUtilProperties : <NIL> ==> JavaUtilProperties
JavaUtilProperties(-) == 
isNil := true  ;

public  list : JavaIoPrintStream ==> ()
list(out) == 
( out.println(new  JavaLangString("-- listing properties --"));
  ( dcl   h : JavaUtilHashtable := new  JavaUtilHashtable();
    enumerate(h);
    ( dcl   e : JavaUtilEnumeration := h.keys();
      while  e.hasMoreElements() do  
      ( dcl   key : JavaLangString := e.nextElement(),
              val : JavaLangString := h.get(key);
        if  val.length() > 40
        then  
--        ( val := J2VUTIL`ConcatStr(val.substring(0 , 37) , new  JavaLangString("..."))
          ( val := val.substring(0 , 37).concat(new  JavaLangString("..."))
          ) ;
--      out.println(J2VUTIL`ConcatStr(J2VUTIL`ConcatStr(key , new  JavaLangString("=")) , val))
        key := key.concat(new  JavaLangString("="));
        key := key.concat(val);
        out.println(key)
      ) 
    ) 
  ) ;
) ;

--public  list1 : JavaIoPrintWriter ==> ()
--list1(out) == 
--( out.println(new  JavaLangString("-- listing properties --"));
--  ( dcl   h : JavaUtilHashtable := new  JavaUtilHashtable();
--    enumerate(h);
--    ( dcl   e : JavaUtilEnumeration := h.keys();
--      while  e.hasMoreElements() do  
--      ( dcl   key : JavaLangString := e.nextElement(),
--             val : JavaLangString := h.get(key);
--        if  val.length() > 40
--        then  
----        ( val := J2VUTIL`ConcatStr(val.substring(0 , 37) , new  JavaLangString("..."))
--          ( val := val.substring(0 , 37).concat(new  JavaLangString("..."))
--          ) ;
----      out.println(J2VUTIL`ConcatStr(J2VUTIL`ConcatStr(key , new  JavaLangString("=")) , val))
--        key := key.concat(new  JavaLangString("="));
--        key := key.concat(val);
--        out.println(key)
--      ) 
--   ) 
--  ) ;
--) ;

public  load : JavaIoInputStream ==> ()
load(inStream) == 
( dcl   in__ : JavaIoBufferedReader := new  JavaIoBufferedReader(new  JavaIoInputStreamReader(inStream , new  JavaLangString("8859_1")));
  while  true   do  
  ( dcl   line : JavaLangString := in__.readLine();
    if  line.IsNil()
    then  
      return  ;
    if  line.length() > 0
    then  
      ( dcl   firstChar : char  := line.charAt(0);
        if  (firstChar <> '#') and  (firstChar <> '!')
        then  
          ( while  continueLine(line) do  
            ( dcl   nextLine : JavaLangString := in__.readLine();
              if  nextLine.IsNil()
              then  
                nextLine := new  JavaLangString([  ]);
              ( dcl   loppedLine : JavaLangString := line.substring(0 , line.length()-1),
                      startIndex : int  := 0;
                trap  j2v_break with  
                  cases  true  : 
                    (isofclass  (J2V_Break,j2v_break)) -> 
                      skip ,
                    others  -> 
                      exit  j2v_break
                  end  
                in  
                  ( startIndex := 0;
                    while  startIndex < nextLine.length() do  
                    ( if  whiteSpaceChars.indexOf(nextLine.charAt(startIndex)) = -1
                      then  
                        exit  new  J2V_Break();
                      startIndex := startIndex+1
                    ) 
                  ) ;
                nextLine := nextLine.substring(startIndex , nextLine.length());
--                line := new  JavaLangString(J2VUTIL`ConcatStr(loppedLine , nextLine))
                line := loppedLine.concat(nextLine)
              ) 
            ) ;
            ( dcl   len__ : int  := line.length(),
                    keyStart : int ;
              trap  j2v_break with  
                cases  true  : 
                  (isofclass  (J2V_Break,j2v_break)) -> 
                    skip ,
                  others  -> 
                    exit  j2v_break
                end  
              in  
                ( keyStart := 0;
                  while  keyStart < len__ do  
                  ( if  whiteSpaceChars.indexOf(line.charAt(keyStart)) = -1
                    then  
                      exit  new  J2V_Break();
                    keyStart := keyStart+1
                  ) 
                ) ;
              if  keyStart <> len__
              then  
                ( dcl   separatorIndex : int ;
                  trap  j2v_break with  
                    cases  true  : 
                      (isofclass  (J2V_Break,j2v_break)) -> 
                        skip ,
                      others  -> 
                        exit  j2v_break
                    end  
                  in  
                    ( separatorIndex := keyStart;
                      while  separatorIndex < len__ do  
                      ( dcl   currentChar : char  := line.charAt(separatorIndex);
                        if  currentChar = '\\'
                        then  
                          separatorIndex := separatorIndex+1
                        else  
                          if  keyValueSeparators.indexOf(currentChar) <> -1
                          then  
                            exit  new  J2V_Break();
                        separatorIndex := separatorIndex+1
                      ) 
                    ) ;
                  ( dcl   valueIndex : int ;
                    trap  j2v_break with  
                      cases  true  : 
                        (isofclass  (J2V_Break,j2v_break)) -> 
                          skip ,
                        others  -> 
                          exit  j2v_break
                      end  
                    in  
                      ( valueIndex := separatorIndex;
                        while  valueIndex < len__ do  
                        ( if  whiteSpaceChars.indexOf(line.charAt(valueIndex)) = -1
                          then  
                            exit  new  J2V_Break();
                          valueIndex := valueIndex+1
                        ) 
                      ) ;
                    if  valueIndex < len__
                    then  
                      if  strictKeyValueSeparators.indexOf(line.charAt(valueIndex)) <> -1
                      then  
                        valueIndex := valueIndex+1;
                    trap  j2v_break with  
                      cases  true  : 
                        (isofclass  (J2V_Break,j2v_break)) -> 
                          skip ,
                        others  -> 
                          exit  j2v_break
                      end  
                    in  
                      while  valueIndex < len__ do  
                      ( if  whiteSpaceChars.indexOf(line.charAt(valueIndex)) = -1
                        then  
                          exit  new  J2V_Break();
                        valueIndex := valueIndex+1
                      ) ;
                    ( dcl   key : JavaLangString := line.substring(keyStart , separatorIndex),
                            value__ : JavaLangString := if  (separatorIndex < len__) then  line.substring(valueIndex , len__) else  new  JavaLangString([  ]);
                      key := loadConvert(key);
                      value__ := loadConvert(value__);
                      let - = put(key , value__)
                      in 
                        skip 
                    ) 
                  ) 
                ) 
            ) 
          ) 
      ) 
  ) ;
  skip 
) ;

public  getProperty : JavaLangString ==> JavaLangString
getProperty(key) == 
( dcl   oval : JavaLangObject := JavaUtilHashtable`get(key),
        sval : JavaLangString := if  (isofclass  (JavaLangString,oval)) then  oval else  new  JavaLangString(<NIL>);
  return  if  ((sval.IsNil()) and  (not  defaults.IsNil())) then  defaults.getProperty(key) else  sval
) ;

private  loadConvert : JavaLangString ==> JavaLangString
loadConvert(theString) == 
( dcl   aChar : char ,
        len__ : int  := theString.length(),
        outBuffer : JavaLangStringBuffer := new  JavaLangStringBuffer(len__);
  ( dcl   x : int  := 0;
    while  x < len__ do  
    ( def l_4 = x;
      l_3 = l_4
      in ( x := l_4+1;
        def l_1 = theString.charAt(l_3)
        in aChar := l_1
      ) ;
      if  aChar = '\\'
      then  
        ( def l_4 = x;
          l_3 = l_4
          in ( x := l_4+1;
            def l_1 = theString.charAt(l_3)
            in aChar := l_1
          ) ;
          if  aChar = 'u'
          then  
            ( dcl   value__ : int  := 0;
              ( dcl   i : int  := 0;
                while  i < 4 do  
                ( def l_4 = x;
                  l_3 = l_4
                  in ( x := l_4+1;
                    def l_1 = theString.charAt(l_3)
                    in aChar := l_1
                  ) ;
                  trap  j2v_break with  
                    cases  true  : 
                      (isofclass  (J2V_Break,j2v_break)) -> 
                        skip 
                      
                    end  
                  in  
--                    ( dcl iChar: int := new JavaLangInteger(aChar).intValue();
                    ( dcl iChar: int := J2VUTIL`toInt(aChar);
                      cases  aChar: 
                        '9', '8', '7', '6', '5', '4', '3', '2', '1', '0' -> 
                          ( value__ := (value__ * 2**4)+iChar-(new JavaLangInteger('0')).intValue();
                            exit  new  J2V_Break()
                          ) ,
                        'f', 'e', 'd', 'c', 'b', 'a' -> 
                          ( value__ := (value__ * 2**4)+10+iChar-(new JavaLangInteger('a')).intValue();
                            exit  new  J2V_Break()
                          ) ,
                        'F', 'E', 'D', 'C', 'B', 'A' -> 
                          ( value__ := (value__ * 2**4)+10+iChar-(new JavaLangInteger('A')).intValue();
                            exit  new  J2V_Break()
                          ) ,
                        others  -> 
                          ( exit  new  JavaLangIllegalArgumentException(new  JavaLangString("Malformed backslashU encoding."))
                          ) 
                      end  
                    ) ;
                  i := i+1
                ) 
              ) ;
              let - = outBuffer.append( (new JavaLangInteger(value__)).charValue() )
              in 
                skip 
            ) 
          else  
            ( if  aChar = 't'
              then  
                aChar := '\t'
              else  
                if  aChar = 'r'
                then  
                  aChar := '\r'
                else  
                  if  aChar = 'n'
                  then  
                    aChar := '\n'
                  else  
                    if  aChar = 'f'
                    then  
                      aChar := '\f';
              let - = outBuffer.append(aChar)
              in 
                skip 
            ) 
        ) 
      else  
        let - = outBuffer.append(aChar)
        in 
          skip 
    ) 
  ) ;
  return  new JavaLangString(outBuffer.toSeqOfChar())
) ;

private  continueLine : JavaLangString ==> bool 
continueLine(line) == 
( dcl   slashCount : int  := 0,
        index : int  := line.length()-1;
  ( dcl   l_6 : bool ;
    def l_13 = (index >= 0);
    l_11 = index;
    l_10 = l_11
    in ( index := l_11-1;
      def l_8 = line.charAt(l_10);
      l_7 = l_8 = '\\';
      l_6 = l_7;
      l_1 = l_13 and  l_6
      in l_6 := l_1
    ) ;
    while  l_6 do  
    ( slashCount := slashCount+1;
      def l_13 = (index >= 0);
      l_11 = index;
      l_10 = l_11
      in ( index := l_11-1;
        def l_8 = line.charAt(l_10);
        l_7 = l_8 = '\\';
        l_6 = l_7;
        l_1 = l_13 and  l_6
        in l_6 := l_1
      ) 
    ) 
  ) ;
  return  (slashCount mod  2 = 1)
) ;

private  enumerate : JavaUtilHashtable ==> ()
enumerate(h) == 
( if  not  defaults.IsNil()
  then  
    ( defaults.enumerate(h)
    ) ;
  ( dcl   e : JavaUtilEnumeration := keys();
    while  e.hasMoreElements() do  
    ( dcl   key : JavaLangString := e.nextElement();
      let - = h.put(key , get(key))
      in 
        skip 
    ) 
  ) ;
  skip 
) ;

private  saveConvert : JavaLangString * bool  ==> JavaLangString
saveConvert(theString, escapeSpace) == 
( dcl   len__ : int  := theString.length(),
        outBuffer : JavaLangStringBuffer := new  JavaLangStringBuffer(len__*2);
  ( dcl   x : int  := 0;
    while  x < len__ do  
    ( dcl   aChar : char  := theString.charAt(x);
      trap  j2v_break with  
        cases  true  : 
          (isofclass  (J2V_Break,j2v_break)) -> 
            skip 
          
        end  
      in  
        ( cases  aChar: 
            ' ' -> 
              ( if  x = 0 or  escapeSpace
                then  
                  let - = outBuffer.append('\\')
                  in 
                    skip ;
                let - = outBuffer.append(' ')
                in 
                  skip ;
                exit  new  J2V_Break()
              ) ,
            '\\' -> 
              ( let - = outBuffer.append('\\')
                in 
                  skip ;
                let - = outBuffer.append('\\')
                in 
                  skip ;
                exit  new  J2V_Break()
              ) ,
            '\t' -> 
              ( let - = outBuffer.append('\\')
                in 
                  skip ;
                let - = outBuffer.append('t')
                in 
                  skip ;
                exit  new  J2V_Break()
              ) ,
            '\n' -> 
              ( let - = outBuffer.append('\\')
                in 
                  skip ;
                let - = outBuffer.append('n')
                in 
                  skip ;
                exit  new  J2V_Break()
              ) ,
            '\r' -> 
              ( let - = outBuffer.append('\\')
                in 
                  skip ;
                let - = outBuffer.append('r')
                in 
                  skip ;
                exit  new  J2V_Break()
              ) ,
            '\f' -> 
              ( let - = outBuffer.append('\\')
                in 
                  skip ;
                let - = outBuffer.append('f')
                in 
                  skip ;
                exit  new  J2V_Break()
              ) ,
            others  ->
              ( dcl iChar : int := J2VUTIL`toInt(aChar);
                if  iChar<0 or iChar>127
                then  
                  ( let - = outBuffer.append('\\')
                    in 
                      skip ;
                    let - = outBuffer.append('u')
                    in 
                      skip ;
                    let - = outBuffer.append(toHex(floor(iChar/2**12) mod  16 ))
                    in 
                      skip ;
                    let - = outBuffer.append(toHex(floor(iChar/2**8) mod  16 ))
                    in 
                      skip ;
                    let - = outBuffer.append(toHex(floor(iChar/2**4)  mod 16 ))
                    in 
                      skip ;
                    let - = outBuffer.append(toHex(iChar mod 16 ))
                    in 
                      skip 
                  ) 
                else  
                  ( if  specialSaveChars.indexOf(aChar) <> -1
                    then  
                      let - = outBuffer.append('\\')
                      in 
                        skip ;
                    let - = outBuffer.append(aChar)
                    in 
                      skip 
                  ) 
              ) 
          end  
        ) ;
      x := x+1
    ) 
  ) ;
  return  outBuffer.toString()
) ;

public  JavaUtilProperties : JavaUtilProperties ==> JavaUtilProperties
JavaUtilProperties(defaults) == 
( JavaUtilProperties`defaults := defaults
) ;

public  save : JavaIoOutputStream * JavaLangString ==> ()
save(out, header) == 
( --trap  j2v_exception with  
  --  cases  true  : 
  --    (isofclass  (JavaIoIOException,j2v_exception) and  not  j2v_exception.IsNil()) -> 
  --      ( dcl   e : JavaIoIOException := j2v_exception;
  --        skip 
  --      ) ,
  --    others  -> 
  --      exit  j2v_exception
  --  end  
  --in  
    ( store(out , header)
    ) ;
) ;

public  getProperty : JavaLangString * JavaLangString ==> JavaLangString
getProperty(key, defaultValue) == 
( dcl   val : JavaLangString := getProperty(key);
  return  if  (val.IsNil()) then  defaultValue else  val
) ;

public  setProperty : JavaLangString * JavaLangString ==> JavaLangObject
setProperty(key, value__) == 
( return  put(key , value__)
) ;

public  store : JavaIoOutputStream * JavaLangString ==> ()
store(out, header) == 
( dcl   awriter : JavaIoBufferedWriter, s : JavaLangString;
  awriter := new  JavaIoBufferedWriter(new  JavaIoOutputStreamWriter(out , new  JavaLangString("8859_1")));
  if  not  header.IsNil()
  then  
    ( s:=new  JavaLangString("#"); s:=s.concat(header);
      writeln(awriter , s);
    );
--  writeln(awriter , J2VUTIL`ConcatStr(new  JavaLangString("#") , new  JavaUtilDate().toString()));
  writeln(awriter , new  JavaLangString("#30.05.2001"));
  ( dcl   e : JavaUtilEnumeration := keys();
    while  e.hasMoreElements() do  
    ( dcl   key : JavaLangString := e.nextElement(),
            val : JavaLangString := get(key);
      key := saveConvert(key , true  );
      val := saveConvert(val , false  );
--    writeln(awriter , J2VUTIL`ConcatStr(J2VUTIL`ConcatStr(key , new  JavaLangString("=")) , val))
      s:=key; s:=s.concat(new  JavaLangString("=")); s:=s.concat(val);
      writeln(awriter , s)
    ) 
  ) ;
  awriter.flush();
) ;

-- static
private  writeln : JavaIoBufferedWriter * JavaLangString ==> ()
writeln(bw, s) == 
( bw.writeStr(s);
  bw.newLine();
) ;


end  JavaUtilProperties
