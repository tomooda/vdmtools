
\section{The JSSAUX Module}

\begin{vdm_al}
module JSSAUX

imports
  from AS all,
  from REP all,

  from CPP all,
  from CI all,
  from JSSREP all

exports operations
  PackageName2Name: CPP`PackageName ==> AS`Name;
  Identifier2Name: CPP`Identifier ==> AS`Name;
  PackageName2SeqOfName: CPP`PackageName ==> seq of AS`Name;
  ExtractClassName: CPP`IdentDeclaration ==> AS`Name;
  PrintName: AS`Name ==> seq of char
functions
  IsVDMKeyword: seq1 of char +> bool;
  IsVDMPrefix: seq1 of char +> bool;
  ExtractType: JSSREP`TypeRep -> JSSREP`TypeRep;
  ExtractTypeName: JSSREP`TypeRep -> AS`Name

definitions

values

  v_vdmKeywords: set of (seq1 of char)
    = { "a_",
        "abs",
        "all",
        "allsuper",
        "always",
        "and",
        "answer",
        "assumption",
        "atomic",
        "be",
        "bool",
        "by",
        "card",
        "cases",
        "char",
        "class",
        "comp",
        "compose",
        "conc",
        "dcl",
        "def",
        "del",
        "dinter",
        "div",
        "do",
        "dom",
        "dunion",
        "effect",
        "elems",
        "else",
        "elseif",
        "end",
        "error",
        "errs",
        "exists",
        "exsist1",
        "exit",
        "ext",
        "false",
        "floor",
        "for",
        "forall",
        "from",
        "functions",
        "general",
        "hd",
        "if",
        "in",
        "inds",
        "init",
        "inmap",
        "input",
        "instance",
        "int",
        "inter",
        "inv",
        "inverse",
        "iota",
        "is",
        "is_",
        "isofbaseclass",
        "isofclass",
        "lambda",
        "len",
        "let",
        "map",
        "merge",
        "mod",
        "mu",
        "munion",
        "mutex",
        "nat",
        "nat1",
        "new",
        "nil",
        "not",
        "of",
        "operations",
        "of",
        "or",
        "others",
        "per",
        "periodic",
        "post",
        "power",
        "pre",
        "pref",
        "private",
        "protected",
        "ppsubset",
        "public",
        "qsync",
        "rat",
        "rd",
        "real",
        "rem",
        "responsibility",
        "return",
        "reverse",
        "rng",
        "samebaseclass",
        "sameclass",
        "sel",
        "self",
        "seq",
        "seq1",
        "set",
        "skip",
        "specified",
        "st",
        "start",
        "startlist",
        "subclass",
        "subset",
        "subtrace",
        "sync",
        "synomym",
        "t_",
        "then",
        "thread",
        "threadid",
        "tixe",
        "tl",
        "to",
        "token",
        "trap",
        "true",
        "types",
        "undefined",
        "union",
        "using",
        "values",
        "value",
        "variables",
        "w_",
        "while",
        "with",
        "wr",
        "yet",
        "RESULT"}

functions

IsVDMKeyword: seq1 of char +> bool
IsVDMKeyword(p_name) ==
  p_name in set v_vdmKeywords;

IsVDMPrefix: seq1 of char +> bool
IsVDMPrefix(p_name) ==
  len p_name > 3 and
  p_name(1,...,3) in set {"mk_","is_"} or
  len p_name > 4 and
  p_name(1,...,4) in set {"pre_", "inv_"} or
  len p_name > 5 and
  p_name(1,...,5) = "post_";

operations
ExtractClassName: CPP`IdentDeclaration ==> AS`Name
ExtractClassName(p_decl) ==
  let l_ts = hd (p_decl.ds),
      l_tp = l_ts.tp
  in
    if is_CPP`InterfaceSpecifier(l_tp)
    then Identifier2Name(l_tp.ih.name)
    else Identifier2Name(l_tp.ch.name);

functions
ExtractType: JSSREP`TypeRep -> JSSREP`TypeRep
ExtractType(p_tr) ==
  if is_JSSREP`FieldTypeRep(p_tr) 
  then p_tr.type
  else p_tr;
  
ExtractTypeName: JSSREP`TypeRep -> AS`Name
ExtractTypeName(p_tr) ==
  if is_JSSREP`ClassTypeRep(p_tr)
  or is_JSSREP`IntrfcTypeRep(p_tr) 
  then p_tr.name
  elseif is_JSSREP`FieldTypeRep(p_tr)
     and (is_JSSREP`ClassTypeRep(p_tr.type)
       or is_JSSREP`IntrfcTypeRep(p_tr.type))
  then p_tr.type.name
  else mk_AS`Name(["?"],-1);

operations

  PackageName2Name: CPP`PackageName ==> AS`Name
  PackageName2Name(p_pn) == (
    dcl l_pn : seq of seq of char := [],
        l_pno : CPP`PackageName := p_pn;
    while is_CPP`QualifiedPackageName(l_pno) do
    let mk_CPP`QualifiedPackageName(l_qpn,l_id,-) = l_pno,
        mk_CPP`Identifier(l_s1oc,-) = l_id
    in (
      l_pn := [Seq1toSeqOfChar(l_s1oc)]^l_pn;
      l_pno := l_qpn
    );
    let mk_CPP`SimplePackageName(l_id,-) = l_pno,
        mk_CPP`Identifier(l_s1oc,-) = l_id
    in
      l_pn := [Seq1toSeqOfChar(l_s1oc)] ^ l_pn;
    return mk_AS`Name(l_pn,p_pn.cid)
  );

  PackageName2SeqOfName: CPP`PackageName ==> seq of AS`Name
  PackageName2SeqOfName(p_pn) == (
    dcl l_pn : seq of AS`Name := [],
        l_pno : CPP`PackageName := p_pn;
    while is_CPP`QualifiedPackageName(l_pno) do
    let mk_CPP`QualifiedPackageName(l_qpn,l_id,-) = l_pno
    in (
      l_pn := [Identifier2Name(l_id)]^l_pn;
      l_pno := l_qpn
    );
    let mk_CPP`SimplePackageName(l_id,-) = l_pno
    in
      l_pn := [Identifier2Name(l_id)] ^ l_pn;
    return l_pn
  );

  PrintName: AS`Name ==> seq of char
  PrintName(p_name) ==
  ( dcl l_res : seq of char := [];
    for l_soc in p_name.ids do
      l_res := l_res ^ "." ^ l_soc;
    return
      if len l_res = 0
      then l_res
      else tl l_res
  );

  Identifier2Name: CPP`Identifier ==> AS`Name
  Identifier2Name(p_i) ==
    let mk_CPP`Identifier(l_id,-) = p_i
    in
      return mk_AS`Name([l_id],p_i.cid);

  Seq1toSeqOfChar: seq1 of char ==> seq of char
  Seq1toSeqOfChar(p_s1oc) == (
    dcl l_tmp : seq of char := [];
    for l_c in p_s1oc do
      l_tmp := l_tmp^[l_c];
    return l_tmp
  );

--  PrintInfo : seq of char * [AS`Name] ==> seq of char
--  PrintInfo(p_text,p_name) ==
--    return
--      if p_name = nil
--      then p_text
--      else p_text ^ PrintName(p_name);
--
--  PrintJSSVCMSt: () ==> seq of char
--  PrintJSSVCMSt() == (
--    dcl l_res : seq of char := "\n  ParseTypeInfo:\n----------------",
--        l_parseEnvDom: set of AS`Name := JSSVCM1`GetParseEnvDom();
--    for all l_name in set l_parseEnvDom do
--    let l_pti = JSSVCM1`GetJSSTypeInfo(l_name),
--                 mk_JSSENV`ParseTypeInfo
--                 ( l_package,
--                   l_nesting,
--                   l_name,
--                   l_type,
--                   l_extends,
--                   l_implements,
--                   l_fields,
--                   l_methods) = l_pti
--    in
--    ( l_res := l_res
--             ^ PrintInfo("\n    package = ",l_package)
--             ^ PrintInfo("\n    nesting = ",l_nesting)
---- type
--             ^ PrintInfo("\n    name    = ",l_name)
--             ^ "\n    extends = ";
--      for l_e in l_extends do
--        l_res := l_res ^ PrintInfo(" ",l_e);
--      l_res := l_res
--             ^ "\n implements = ";
--      for all l_e in set l_implements do
--        l_res := l_res ^ PrintInfo(" ",l_e);
--      l_res := l_res
--             ^ "\n    fields  = "
--             ^ PrintFields(l_fields)
--             ^ "\n    methods = "
--             ^ PrintMethods(l_methods);
--
----      if not JSSENV`GetFirstRun()
----      then
---- inherited fields
--      l_res := l_res^"\n----------------"
--    );
--    return l_res
--  );
--
--  PrintFields: map AS`Name to JSSREP`FieldTypeRep ==> seq of char
--  PrintFields(p_fields) == (
--    dcl l_res : seq of char := [];
--    for all l_name in set dom p_fields do
--    let l_field : JSSREP`FieldTypeRep = p_fields(l_name),
--        l_tr = l_field.type
--    in
--      l_res := l_res 
--             ^ PrintType(l_tr)
--             ^ PrintInfo(" ",l_name)
--             ^ PrintArray(l_field.array);
--    return l_res
--  );
--
--  PrintMethods: map AS`Name to set of JSSREP`MethodTypeRep ==> seq of char
--  PrintMethods(p_methods) == (
--    dcl l_res : seq of char := [];
--    for all l_name in set dom p_methods do
--      for all l_overload in set p_methods(l_name) do
--      ( if is_JSSREP`ClassTypeRep(l_overload.rangeType)
--        then
--        ( l_res := l_res
--                 ^ "\n         constructor: "
--                 ^ PrintType(l_overload.rangeType)
--                 ^ PrintInfo(" ",l_name)
--                 ^ "\n              parameters: ";
--        )
--        else
--        ( l_res := l_res^ "\n              method: "
--                 ^ PrintType(l_overload.rangeType.type)
--               ^ PrintInfo(" ",l_name)
--               ^ PrintArray(l_overload.rangeType.array)
--               ^ "\n              parameters: ";
--        );
--        for i=1 to len l_overload.domainTypes do
--        ( l_res := l_res
--                 ^ PrintType(l_overload.domainTypes(i).type)
--                 ^ PrintInfo(" ",l_overload.domainNames(i))
--                 ^ PrintArray(l_overload.domainTypes(i).array);
--        )
--      );
--    return l_res
--  );
--
--  PrintType: [JSSREP`TypeRep] ==> seq of char
--  PrintType(p_tr) ==
--    return
--      cases true:
--        (is_JSSREP`BoolTypeRep(p_tr))   -> "boolean",
--        (is_JSSREP`CharTypeRep(p_tr))   -> "char",
--        (is_JSSREP`ByteTypeRep(p_tr))   -> "byte",
--        (is_JSSREP`ShortTypeRep(p_tr))  -> "short",
--        (is_JSSREP`IntTypeRep(p_tr))    -> "int",
--        (is_JSSREP`LongTypeRep(p_tr))   -> "long",
--        (is_JSSREP`FloatTypeRep(p_tr))  -> "float",
--        (is_JSSREP`DoubleTypeRep(p_tr)) -> "double",
--        (is_JSSREP`ClassTypeRep(p_tr))  -> PrintName(p_tr.name),
--        (is_JSSREP`IntrfcTypeRep(p_tr)) -> PrintName(p_tr.name),
--        (is_JSSREP`VoidTypeRep(p_tr))   -> "void",
--	others                          ->"no type"
--      end;
--
--  PrintArray: nat ==> seq of char
--  PrintArray(p_nat) ==
--    let l_n = "0123456789"
--    in
--    return " ["^[l_n(p_nat+1)]^"]  ";

end JSSAUX
\end{vdm_al}

\subsection{Test Coverage}

\begin{rtinfo}{rtinfo.ast}[JSSAUX]
\end{rtinfo}
