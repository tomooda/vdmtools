Extern_References DEFINITIONS ::= BEGIN
END

Entities_Definitions DEFINITIONS ::= BEGIN
base ::= SEQUENCE OF {
	SEQUENCE {
		items_count integer,
		default_status bits,
		page_width real,
		page_heigth real,
		no_frame boolean,
		portrait boolean,
		margin real,
		languages SEQUENCE OF integer,
		version string
	}
}
meta_property ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		name string
	}
}
template ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		name string,
		language integer,
		kind meta_entity,
		content string
	}
}
module ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		name string,
		range integer,
		status bits
	}
}
class ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		name string,
		derived boolean,
		abstract boolean,
		pixmap string,
		constraint string,
		status bits
	}
}
association ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		name string,
		derived boolean,
		described_by oid,
		status bits
	}
}
role ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		name string,
		agregate boolean,
		i_multiplicity integer,
		s_multiplicity string,
		meta boolean,
		key boolean,
		class oid,
		association oid,
		status bits
	}
}
qualifier ::= SEQUENCE OF {
	SEQUENCE {
		entity oid,
		name string,
		type oid
	}
}
operation ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		name string,
		abstract boolean,
		meta boolean,
		owner oid,
		type oid,
		range integer,
		status bits
	}
}
parameter ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		name string,
		owner oid,
		type oid,
		range integer,
		status bits
	}
}
attribute ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		name string,
		derived boolean,
		meta boolean,
		key boolean,
		owner oid,
		type oid,
		range integer,
		status bits
	}
}
type ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		name string,
		kind integer,
		status bits
	}
}
inheritance ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		ancestor oid,
		discriminator oid,
		repeated boolean,
		subclasses SEQUENCE OF oid,
		status bits
	}
}
instance ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		name string,
		range integer
	}
}
id_class ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		class oid,
		meta boolean
	}
}
id_association ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		association oid,
		described_by oid,
		roles SEQUENCE OF oid
	}
}
id_attribute ::= SEQUENCE OF {
	SEQUENCE {
		identity oid,
		owner oid,
		attribute oid,
		value string
	}
}
entity_position ::= SEQUENCE OF {
	SEQUENCE {
		entity oid,
		module oid,
		position SEQUENCE OF real
	}
}
agregation_position ::= SEQUENCE OF {
	SEQUENCE {
		module oid,
		roles SEQUENCE OF oid,
		position SEQUENCE OF real
	}
}
inheritance_position ::= SEQUENCE OF {
	SEQUENCE {
		inheritance oid,
		module oid,
		class oid,
		position SEQUENCE OF real
	}
}
template_link ::= SEQUENCE OF {
	SEQUENCE {
		entity oid,
		templates SEQUENCE OF oid
	}
}
module_layout ::= SEQUENCE OF {
	SEQUENCE {
		entity oid,
		portrait boolean,
		nb_w_pages integer,
		nb_h_pages integer,
		layout integer
	}
}
note ::= SEQUENCE OF {
	SEQUENCE {
		entity oid,
		name string,
		content string
	}
}
base ::= {
{754, -1, 7.6, 11, t, f, 0, NULL, "
%W%
"}
}
meta_property ::= {
{"750", "module"}
}
module ::= {
{"716", "Inheritance View : 1", 1, -1},
{"717", "Class FileStatus View", 2, -1},
{"718", "Class ErrorState View", 3, -1},
{"719", "Class Errors View", 4, -1},
{"720", "Class ToolColleague View", 5, -1},
{"721", "Class CGRepository View", 6, -1},
{"722", "Class BatchErr View", 7, -1},
{"723", "Class Dependency View", 8, -1},
{"724", "Class SABaseTools View", 9, -1},
{"725", "Class BaseTools View", 10, -1},
{"726", "Class RepDatabase View", 11, -1},
{"727", "Class StatusInfo View", 12, -1},
{"728", "Class UpdateProject View", 13, -1},
{"729", "Class StructSes View", 14, -1},
{"730", "Class FlatSes View", 15, -1},
{"731", "Class UpdateSes View", 16, -1},
{"732", "Class NoneSes View", 17, -1},
{"733", "Class UnitStatus View", 18, -1},
{"734", "Class VDMUnitElem View", 19, -1},
{"735", "Class TypeInfo View", 20, -1},
{"736", "Class AstInfo View", 21, -1},
{"737", "Class ToolKit View", 22, -1},
{"738", "Class StateStore View", 23, -1},
{"739", "Class ScriptErr View", 24, -1},
{"740", "Class Repository View", 25, -1},
{"741", "Class ProjectTypes View", 26, -1},
{"742", "Class PromptErr View", 27, -1},
{"743", "Class Options View", 28, -1},
{"744", "Class NonPrintErr View", 29, -1},
{"745", "Class ToolMediator View", 30, -1},
{"746", "Class Interface View", 31, -1},
{"747", "Class AST View", 32, -1},
{"754", "Repository Interface", 33, -1}
}
class ::= {
{"9", "AST", f, f, "", "", -1},
{"11", "Interface", f, f, "", "", -1},
{"12", "ToolMediator", f, f, "", "", -1},
{"13", "NonPrintErr", f, f, "", "", -1},
{"14", "Options", f, f, "", "", -1},
{"15", "PromptErr", f, f, "", "", -1},
{"16", "ProjectTypes", f, f, "", "", -1},
{"59", "Repository", f, f, "", "", -1},
{"60", "ScriptErr", f, f, "", "", -1},
{"61", "StateStore", f, t, "", "", -1},
{"62", "ToolKit", f, f, "", "", -1},
{"63", "AstInfo", f, f, "", "", -1},
{"64", "TypeInfo", f, f, "", "", -1},
{"65", "VDMUnitElem", f, f, "", "", -1},
{"66", "UnitStatus", f, f, "", "", -1},
{"67", "NoneSes", f, f, "", "", -1},
{"68", "UpdateSes", f, f, "", "", -1},
{"69", "FlatSes", f, f, "", "", -1},
{"70", "StructSes", f, f, "", "", -1},
{"71", "UpdateProject", f, f, "", "", -1},
{"72", "StatusInfo", f, f, "", "", -1},
{"73", "RepDatabase", f, f, "", "", -1},
{"74", "BaseTools", f, f, "", "", -1},
{"75", "SABaseTools", f, f, "", "", -1},
{"76", "Dependency", f, t, "", "", -1},
{"77", "BatchErr", f, f, "", "", -1},
{"78", "CGRepository", f, f, "", "", -1},
{"79", "ToolColleague", f, f, "", "", -1},
{"80", "Errors", f, f, "", "", -1},
{"81", "ErrorState", f, f, "", "", -1},
{"82", "FileStatus", f, f, "", "", -1}
}
type ::= {
{"1", "integer", 4, -1},
{"2", "boolean", 4, -1},
{"3", "string", 4, -1},
{"4", "void", 1, -1},
{"5", "real", 4, -1},
{"6", "character", 4, -1},
{"7", "char", 4, -1},
{"8", "unknown", 2, -1},
{"10", "AST`LocationType", 8, -1},
{"17", "ProjectTypes`ModuleName", 8, -1},
{"18", "ProjectTypes`FileName", 8, -1},
{"19", "ProjectTypes`Name", 8, -1},
{"20", "ProjectTypes`InfoString", 8, -1},
{"21", "ProjectTypes`String", 8, -1},
{"22", "ProjectTypes`FileId", 8, -1},
{"23", "ProjectTypes`AstVal", 8, -1},
{"24", "ProjectTypes`DepGraph", 8, -1},
{"25", "ProjectTypes`Message", 8, -1},
{"26", "ProjectTypes`ErrMsg", 8, -1},
{"27", "ProjectTypes`WarnMsg", 8, -1},
{"28", "ProjectTypes`InfoMsg", 8, -1},
{"29", "ProjectTypes`Action", 8, -1},
{"30", "ProjectTypes`FileAction", 8, -1},
{"31", "ProjectTypes`UnitAction", 8, -1},
{"32", "ProjectTypes`Status", 8, -1},
{"33", "ProjectTypes`Succes", 8, -1},
{"34", "ProjectTypes`UnitStat", 8, -1},
{"35", "ProjectTypes`FileStat", 8, -1},
{"36", "ProjectTypes`SessionType", 8, -1},
{"37", "ProjectTypes`Module", 8, -1},
{"38", "ProjectTypes`FlatSpec", 8, -1},
{"39", "ProjectTypes`CGInfo", 8, -1},
{"40", "ProjectTypes`ToolCommand", 8, -1},
{"41", "ProjectTypes`CallBackCommand", 8, -1},
{"42", "ProjectTypes`BreakSet", 8, -1},
{"43", "ProjectTypes`BreakRemove", 8, -1},
{"44", "ProjectTypes`BackTrace", 8, -1},
{"45", "ProjectTypes`AddFiles", 8, -1},
{"46", "ProjectTypes`RemoveFiles", 8, -1},
{"47", "ProjectTypes`AddModules", 8, -1},
{"48", "ProjectTypes`RemoveModules", 8, -1},
{"49", "ProjectTypes`ChangedFileStatus", 8, -1},
{"50", "ProjectTypes`ChangedModuleStatus", 8, -1},
{"51", "ProjectTypes`FlowMap", 8, -1},
{"52", "ProjectTypes`SemVal", 8, -1},
{"53", "ProjectTypes`FunctionSet", 8, -1},
{"54", "ProjectTypes`UnitState", 8, -1},
{"55", "ProjectTypes`FileState", 8, -1},
{"56", "ProjectTypes`FileInfo", 8, -1},
{"57", "ProjectTypes`ModuleNames", 8, -1},
{"58", "ProjectTypes`StateType", 8, -1},
{"84", "LocationType", 8, -1},
{"86", "[AstVal]", 8, -1},
{"88", "AstVal", 8, -1},
{"101", "String", 8, -1},
{"107", "CallBackCommand", 8, -1},
{"147", "seq of String", 8, -1},
{"154", "FileId", 8, -1},
{"155", "[FileName]", 8, -1},
{"162", "FileName", 8, -1},
{"194", "CGInfo", 8, -1},
{"198", "ModuleName|FileName", 8, -1},
{"200", "Action", 8, -1},
{"203", "SessionType", 8, -1},
{"209", "[UnitStat] * FileStat", 8, -1},
{"215", "seq of AstVal", 8, -1},
{"218", "ModuleName", 8, -1},
{"220", "FlatSpec", 8, -1},
{"224", "(seq of Module)|FlatSpec", 8, -1},
{"229", "[<POS>|<DEF>]", 8, -1},
{"233", "Succes", 8, -1},
{"246", "set of ModuleName", 8, -1},
{"248", "set of FileName", 8, -1},
{"282", "", 8, -1},
{"286", "<READ>|<WRITE>", 8, -1},
{"290", "AstVal|<NONE>", 8, -1},
{"293", "FileName|ModuleName", 8, -1},
{"296", "set of (FileName|ModuleName)", 8, -1},
{"301", "integer|boolean", 8, -1},
{"304", "Status", 8, -1},
{"307", "DepGraph", 8, -1},
{"309", "[AstVal|<NONE>]", 8, -1},
{"311", "[FileName|ModuleName]", 8, -1},
{"313", "[set of (FileName|ModuleName)]", 8, -1},
{"315", "[SessionType]", 8, -1},
{"317", "[integer|boolean]", 8, -1},
{"319", "[Status]", 8, -1},
{"321", "[DepGraph]", 8, -1},
{"368", "UnitStat", 8, -1},
{"371", "UnitAction", 8, -1},
{"389", "Status|<POS>|<DEF>", 8, -1},
{"456", "map ModuleName to AstVal", 8, -1},
{"512", "set of Status", 8, -1},
{"515", "UnitState", 8, -1},
{"517", "FileState", 8, -1},
{"519", "StateType", 8, -1},
{"564", "FileInfo", 8, -1},
{"573", "seq of FileName", 8, -1},
{"576", "seq of ModuleName", 8, -1},
{"583", "ToolCommand|FileName", 8, -1},
{"584", "boolean * seq of [token]", 8, -1},
{"588", "ToolCommand", 8, -1},
{"594", "Name", 8, -1},
{"596", "FlowMap", 8, -1},
{"597", "boolean * FlowMap", 8, -1},
{"602", "SemVal", 8, -1},
{"603", "InfoString", 8, -1},
{"607", "FunctionSet", 8, -1},
{"620", "seq of Module", 8, -1},
{"650", "seq of Message", 8, -1},
{"653", "integer * integer", 8, -1},
{"665", "ErrMsg|WarnMsg", 8, -1},
{"670", "Message", 8, -1},
{"677", "<FORW>|<BACKW>", 8, -1},
{"703", "FileStat", 8, -1},
{"707", "FileAction", 8, -1},
{"709", "boolean * boolean", 8, -1}
}
attribute ::= {
{"83", "location", f, f, f, "9", "84", 1, -1},
{"85", "ast", f, f, f, "9", "86", 2, -1},
{"281", "version", f, t, f, "61", "282", 1, -1},
{"363", "enabled", f, f, f, "65", "2", 1, -1},
{"384", "status", f, f, f, "66", "368", 1, -1},
{"406", "stateSaved", f, f, f, "68", "2", 1, -1},
{"464", "projectname", f, f, f, "71", "155", 1, -1},
{"514", "unit_m", f, f, f, "73", "515", 1, -1},
{"516", "file_m", f, f, f, "73", "517", 2, -1},
{"518", "storeState", f, f, f, "73", "519", 3, -1},
{"649", "msgs", f, f, f, "80", "650", 1, -1},
{"651", "msgPtr", f, f, f, "80", "1", 2, -1},
{"652", "msgStatus", f, f, f, "80", "653", 3, -1},
{"702", "status", f, f, f, "82", "703", 1, -1}
}
operation ::= {
{"87", "Get", f, f, "9", "88", 1, -1},
{"89", "DeleteAST", f, f, "9", "4", 2, -1},
{"90", "Set", f, f, "9", "4", 3, -1},
{"92", "Same", f, f, "9", "2", 4, -1},
{"94", "Save", f, f, "9", "2", 5, -1},
{"96", "Load", f, f, "9", "2", 6, -1},
{"99", "Log", f, f, "11", "4", 1, -1},
{"102", "Error", f, f, "11", "4", 2, -1},
{"104", "ExecuteMainLoop", f, f, "11", "4", 3, -1},
{"105", "CallBack", f, f, "11", "4", 4, -1},
{"127", "Init", f, f, "12", "4", 1, -1},
{"131", "InitSpecAnim", f, f, "12", "4", 2, -1},
{"135", "LocalInit", f, f, "12", "4", 3, -1},
{"139", "GetErrors", f, f, "12", "80", 4, -1},
{"140", "GetExprErrors", f, f, "12", "80", 5, -1},
{"141", "GetOptions", f, f, "12", "14", 6, -1},
{"142", "GetInterface", f, f, "12", "11", 7, -1},
{"143", "GetBaseTools", f, f, "12", "74", 8, -1},
{"144", "GetRepository", f, f, "12", "59", 9, -1},
{"145", "Version", f, f, "12", "101", 10, -1},
{"146", "Features", f, f, "12", "147", 11, -1},
{"148", "Log", f, f, "12", "4", 12, -1},
{"150", "CallBack", f, f, "12", "4", 13, -1},
{"152", "GetFileName", f, f, "12", "155", 14, -1},
{"157", "AllDone", f, f, "13", "4", 1, -1},
{"160", "Read", f, f, "14", "4", 1, -1},
{"163", "Save", f, f, "14", "4", 2, -1},
{"166", "AddMsg", f, f, "15", "4", 1, -1},
{"168", "ChangeState", f, f, "15", "4", 2, -1},
{"189", "SetMediator", f, f, "59", "4", 1, -1},
{"191", "GetDependency", f, f, "59", "76", 2, -1},
{"192", "WriteCGInfo", f, f, "59", "4", 3, -1},
{"195", "GetCGInfo", f, f, "59", "194", 4, -1},
{"196", "Allowed", f, f, "59", "2", 5, -1},
{"201", "IsSession", f, f, "59", "2", 6, -1},
{"204", "SesType", f, f, "59", "203", 7, -1},
{"205", "SetSession", f, f, "59", "4", 8, -1},
{"207", "Status", f, f, "59", "209", 9, -1},
{"210", "GetFileId", f, f, "59", "154", 10, -1},
{"212", "GetFileName", f, f, "59", "155", 11, -1},
{"214", "GetAllAsts", f, f, "59", "215", 12, -1},
{"216", "GetAST", f, f, "59", "86", 13, -1},
{"219", "GetFlatSpec", f, f, "59", "220", 14, -1},
{"221", "UpdateSC", f, f, "59", "4", 15, -1},
{"225", "UpdateTC", f, f, "59", "4", 16, -1},
{"230", "UpdateCG", f, f, "59", "4", 17, -1},
{"234", "UpdatePP", f, f, "59", "4", 18, -1},
{"237", "StateIsSaved", f, f, "59", "2", 19, -1},
{"238", "SetSavedState", f, f, "59", "4", 20, -1},
{"240", "AddFile", f, f, "59", "4", 21, -1},
{"242", "RemoveFile", f, f, "59", "4", 22, -1},
{"244", "ClearAll", f, f, "59", "4", 23, -1},
{"245", "Modules", f, f, "59", "246", 24, -1},
{"247", "Files", f, f, "59", "248", 25, -1},
{"249", "ModulesInFile", f, f, "59", "246", 26, -1},
{"251", "FileOfModule", f, f, "59", "248", 27, -1},
{"253", "GetSub", f, f, "59", "246", 28, -1},
{"255", "GetSuper", f, f, "59", "246", 29, -1},
{"257", "GetUsedBy", f, f, "59", "246", 30, -1},
{"259", "GetUses", f, f, "59", "246", 31, -1},
{"261", "GetProjectName", f, f, "59", "155", 32, -1},
{"262", "SaveAs", f, f, "59", "2", 33, -1},
{"264", "Open", f, f, "59", "2", 34, -1},
{"266", "Close", f, f, "59", "2", 35, -1},
{"267", "NewProject", f, f, "59", "2", 36, -1},
{"269", "NewUnnamedProject", f, f, "59", "2", 37, -1},
{"270", "SaveObjState", f, f, "59", "2", 38, -1},
{"272", "LoadObjState", f, f, "59", "2", 39, -1},
{"274", "GetStatus", f, f, "59", "72", 40, -1},
{"276", "AllDone", f, f, "60", "4", 1, -1},
{"278", "AddMsg", f, f, "60", "4", 2, -1},
{"283", "Open", t, f, "61", "2", 1, -1},
{"287", "Close", t, f, "61", "4", 2, -1},
{"288", "WriteASTVal", t, f, "61", "2", 3, -1},
{"291", "WriteName", t, f, "61", "2", 4, -1},
{"294", "WriteNames", f, f, "61", "2", 5, -1},
{"297", "WriteSession", t, f, "61", "2", 6, -1},
{"299", "WriteVal", t, f, "61", "2", 7, -1},
{"302", "WriteStatus", t, f, "61", "2", 8, -1},
{"305", "WriteDep", t, f, "61", "2", 9, -1},
{"308", "ReadASTVal", t, f, "61", "309", 10, -1},
{"310", "ReadName", t, f, "61", "311", 11, -1},
{"312", "ReadNames", f, f, "61", "313", 12, -1},
{"314", "ReadSession", t, f, "61", "315", 13, -1},
{"316", "ReadVal", t, f, "61", "317", 14, -1},
{"318", "ReadStatus", t, f, "61", "319", 15, -1},
{"320", "ReadDep", t, f, "61", "321", 16, -1},
{"326", "Init", f, f, "62", "4", 1, -1},
{"330", "InitSpecAnim", f, f, "62", "4", 2, -1},
{"334", "GetErrors", f, f, "62", "80", 3, -1},
{"335", "GetExprErrors", f, f, "62", "80", 4, -1},
{"336", "GetOptions", f, f, "62", "14", 5, -1},
{"337", "GetInterface", f, f, "62", "11", 6, -1},
{"338", "GetBaseTools", f, f, "62", "74", 7, -1},
{"339", "GetRepository", f, f, "62", "59", 8, -1},
{"340", "Version", f, f, "62", "101", 9, -1},
{"341", "Features", f, f, "62", "147", 10, -1},
{"343", "GiveFileName", f, f, "63", "162", 1, -1},
{"345", "ReadAST", f, f, "63", "88", 2, -1},
{"346", "WriteAST", f, f, "63", "4", 3, -1},
{"348", "DeleteAST", f, f, "63", "4", 4, -1},
{"350", "GiveFileName", f, f, "64", "162", 1, -1},
{"352", "ReadAST", f, f, "64", "88", 2, -1},
{"353", "WriteAST", f, f, "64", "4", 3, -1},
{"355", "DeleteAST", f, f, "64", "4", 4, -1},
{"364", "Enable", f, f, "65", "2", 1, -1},
{"365", "Disable", f, f, "65", "2", 2, -1},
{"366", "IsEnabled", f, f, "65", "2", 3, -1},
{"367", "GetStatus", f, f, "65", "368", 4, -1},
{"369", "SetStatus", f, f, "65", "2", 5, -1},
{"373", "Allowed", f, f, "65", "2", 6, -1},
{"375", "Get", f, f, "65", "88", 7, -1},
{"376", "Set", f, f, "65", "2", 8, -1},
{"378", "Delete", f, f, "65", "4", 9, -1},
{"379", "Save", f, f, "65", "2", 10, -1},
{"381", "Load", f, f, "65", "2", 11, -1},
{"385", "GetStatus", f, f, "66", "368", 1, -1},
{"386", "SetStatus", f, f, "66", "2", 2, -1},
{"390", "Allowed", f, f, "66", "2", 3, -1},
{"392", "Save", f, f, "66", "2", 4, -1},
{"394", "Load", f, f, "66", "2", 5, -1},
{"396", "tcOk", f, t, "66", "2", 6, -1},
{"399", "Type", f, f, "67", "203", 1, -1},
{"400", "UpdateSC", f, f, "67", "4", 2, -1},
{"407", "Type", f, f, "68", "203", 1, -1},
{"408", "UpdateSC", f, f, "68", "4", 2, -1},
{"413", "UpdateTC", f, f, "68", "4", 3, -1},
{"418", "UpdateCG", f, f, "68", "4", 4, -1},
{"422", "UpdatePP", f, f, "68", "4", 5, -1},
{"426", "StateIsSaved", f, f, "68", "2", 6, -1},
{"427", "SetSavedState", f, f, "68", "4", 7, -1},
{"429", "DisableUnits", f, f, "68", "246", 8, -1},
{"432", "UpdateUnit", f, f, "68", "65", 9, -1},
{"436", "Type", f, f, "69", "203", 1, -1},
{"437", "UpdateSC", f, f, "69", "4", 2, -1},
{"442", "EnableFlat", f, f, "69", "246", 3, -1},
{"447", "Type", f, f, "70", "203", 1, -1},
{"448", "UpdateSC", f, f, "70", "4", 2, -1},
{"453", "EnableUnits", f, f, "70", "246", 3, -1},
{"457", "MultDefMod", f, f, "70", "4", 4, -1},
{"460", "DependantUnits", f, f, "70", "246", 5, -1},
{"474", "Init", f, f, "71", "4", 1, -1},
{"479", "GetProjectName", f, f, "71", "155", 2, -1},
{"480", "SaveAs", f, f, "71", "2", 3, -1},
{"482", "Open", f, f, "71", "2", 4, -1},
{"484", "NewProject", f, f, "71", "2", 5, -1},
{"486", "NewUnnamedProject", f, f, "71", "2", 6, -1},
{"487", "Close", f, f, "71", "2", 7, -1},
{"488", "SaveObjState", f, f, "71", "2", 8, -1},
{"490", "LoadObjState", f, f, "71", "2", 9, -1},
{"499", "Init", f, f, "72", "4", 1, -1},
{"503", "Allowed", f, f, "72", "2", 2, -1},
{"506", "nameIsDefined", f, f, "72", "2", 3, -1},
{"508", "Status", f, f, "72", "209", 4, -1},
{"510", "StatusPrio", f, t, "72", "304", 5, -1},
{"520", "SetMediator", f, f, "73", "4", 1, -1},
{"522", "ClearAll", f, f, "73", "4", 2, -1},
{"523", "GetFileId", f, f, "73", "154", 3, -1},
{"525", "GetFileName", f, f, "73", "155", 4, -1},
{"527", "GetAllAsts", f, f, "73", "215", 5, -1},
{"528", "GetAST", f, f, "73", "86", 6, -1},
{"531", "GetFlatSpec", f, f, "73", "220", 7, -1},
{"532", "AddFile", f, f, "73", "4", 8, -1},
{"534", "RemoveFile", f, f, "73", "2", 9, -1},
{"537", "Modules", f, f, "73", "246", 10, -1},
{"538", "Files", f, f, "73", "248", 11, -1},
{"539", "ModulesInFile", f, f, "73", "246", 12, -1},
{"541", "FileOfModule", f, f, "73", "248", 13, -1},
{"543", "StoreState", f, f, "73", "4", 14, -1},
{"544", "GenCallBack", f, f, "73", "4", 15, -1},
{"546", "UnitMerge", f, f, "73", "4", 16, -1},
{"548", "UnitDomResBy", f, f, "73", "4", 17, -1},
{"550", "FileMerge", f, f, "73", "4", 18, -1},
{"552", "FileOverride", f, f, "73", "4", 19, -1},
{"554", "GetFileState", f, f, "73", "517", 20, -1},
{"555", "GetUnitState", f, f, "73", "515", 21, -1},
{"556", "UpdateFileState", f, f, "73", "4", 22, -1},
{"558", "UpdateUnitState", f, f, "73", "4", 23, -1},
{"560", "DomFile", f, f, "73", "248", 24, -1},
{"561", "DomUnit", f, f, "73", "246", 25, -1},
{"562", "GetFileElem", f, f, "73", "564", 26, -1},
{"565", "GetUnitElem", f, f, "73", "65", 27, -1},
{"567", "GetMediator", f, f, "73", "12", 28, -1},
{"569", "SetMediator", f, f, "74", "4", 1, -1},
{"571", "SyntaxCheck", f, f, "74", "2", 2, -1},
{"574", "TypeCheck", f, f, "74", "2", 3, -1},
{"577", "CodeGenerate", f, f, "74", "2", 4, -1},
{"579", "PrettyPrint", f, f, "74", "2", 5, -1},
{"581", "ParseAndEvalExprs", f, f, "74", "584", 6, -1},
{"585", "InitInterpreter", f, f, "74", "2", 7, -1},
{"586", "ExecuteCommand", f, f, "74", "2", 8, -1},
{"589", "InitToolbox", f, f, "74", "4", 9, -1},
{"590", "UpdateToolbox", f, f, "74", "4", 10, -1},
{"592", "EvalProcess", f, f, "75", "597", 1, -1},
{"598", "ParseExprs", f, f, "75", "584", 2, -1},
{"600", "SemVal2String", f, f, "75", "603", 3, -1},
{"604", "ParseAndEvalValue", f, f, "75", "584", 4, -1},
{"606", "EvalFunctions", f, f, "75", "607", 5, -1},
{"612", "Init", t, f, "76", "4", 1, -1},
{"614", "GetAllSubClasses", t, f, "76", "246", 2, -1},
{"616", "GetAllUsedBy", t, f, "76", "246", 3, -1},
{"618", "UpdateGraph", t, f, "76", "4", 4, -1},
{"621", "GetSub", t, f, "76", "246", 5, -1},
{"623", "GetSuper", t, f, "76", "246", 6, -1},
{"625", "GetUsedBy", t, f, "76", "246", 7, -1},
{"627", "GetUses", t, f, "76", "246", 8, -1},
{"629", "UpdateIncompSubClasses", t, f, "76", "4", 9, -1},
{"631", "Save", t, f, "76", "2", 10, -1},
{"633", "Load", t, f, "76", "2", 11, -1},
{"636", "AddMsg", f, f, "77", "4", 1, -1},
{"639", "WriteCGInfo", f, f, "78", "4", 1, -1},
{"641", "GetCGInfo", f, f, "78", "194", 2, -1},
{"646", "SetMediator", f, f, "79", "4", 1, -1},
{"657", "InitState", f, f, "80", "4", 1, -1},
{"659", "ChangeState", f, f, "80", "4", 2, -1},
{"660", "SetNextState", f, f, "80", "4", 3, -1},
{"662", "ShowMsg", f, f, "80", "4", 4, -1},
{"663", "SetFilePosition", f, f, "80", "4", 5, -1},
{"666", "ClearAll", f, f, "80", "4", 6, -1},
{"667", "Reset", f, f, "80", "4", 7, -1},
{"668", "AddMsg", f, f, "80", "4", 8, -1},
{"671", "AllDone", f, f, "80", "4", 9, -1},
{"672", "Done", f, f, "80", "4", 10, -1},
{"673", "MakeStatus", f, f, "80", "4", 11, -1},
{"675", "SkipInfoMsg", f, f, "80", "4", 12, -1},
{"678", "Next", f, f, "80", "4", 13, -1},
{"679", "Prev", f, f, "80", "4", 14, -1},
{"680", "First", f, f, "80", "4", 15, -1},
{"681", "Last", f, f, "80", "4", 16, -1},
{"682", "EventClearAll", f, f, "80", "4", 17, -1},
{"683", "EventAllDone", f, f, "80", "4", 18, -1},
{"684", "EventAddMsg", f, f, "80", "4", 19, -1},
{"687", "EventNext", f, f, "80", "4", 20, -1},
{"688", "EventPrev", f, f, "80", "4", 21, -1},
{"689", "EventFirst", f, f, "80", "4", 22, -1},
{"690", "EventLast", f, f, "80", "4", 23, -1},
{"692", "ChangeState", f, f, "81", "4", 1, -1},
{"694", "SetNextState", f, f, "81", "4", 2, -1},
{"697", "AddMsg", f, f, "81", "4", 3, -1},
{"699", "AllDone", f, f, "81", "4", 4, -1},
{"704", "GetStatus", f, f, "82", "703", 1, -1},
{"705", "SetStatus", f, f, "82", "709", 2, -1},
{"710", "Allowed", f, f, "82", "2", 3, -1},
{"712", "Save", f, f, "82", "2", 4, -1},
{"714", "Load", f, f, "82", "2", 5, -1}
}
parameter ::= {
{"91", "ast'", "90", "88", 1, -1},
{"93", "ast'", "92", "88", 1, -1},
{"95", "store", "94", "61", 1, -1},
{"97", "store", "96", "61", 1, -1},
{"100", "msg", "99", "101", 1, -1},
{"103", "msg", "102", "101", 1, -1},
{"106", "cmd", "105", "107", 1, -1},
{"128", "interface", "127", "11", 1, -1},
{"129", "e", "127", "80", 2, -1},
{"130", "expr_e", "127", "80", 3, -1},
{"132", "interface", "131", "11", 1, -1},
{"133", "e", "131", "80", 2, -1},
{"134", "expr_e", "131", "80", 3, -1},
{"136", "interface", "135", "11", 1, -1},
{"137", "e", "135", "80", 2, -1},
{"138", "expr_e", "135", "80", 3, -1},
{"149", "msg", "148", "101", 1, -1},
{"151", "cmd", "150", "107", 1, -1},
{"153", "id", "152", "154", 1, -1},
{"158", "err", "157", "80", 1, -1},
{"161", "project", "160", "162", 1, -1},
{"164", "project", "163", "162", 1, -1},
{"167", "err", "166", "80", 1, -1},
{"169", "err", "168", "80", 1, -1},
{"190", "m", "189", "12", 1, -1},
{"193", "info", "192", "194", 1, -1},
{"197", "nm", "196", "198", 1, -1},
{"199", "kind", "196", "200", 2, -1},
{"202", "q", "201", "203", 1, -1},
{"206", "sp", "205", "68", 1, -1},
{"208", "nm", "207", "198", 1, -1},
{"211", "nm", "210", "162", 1, -1},
{"213", "fileid", "212", "154", 1, -1},
{"217", "nm", "216", "218", 1, -1},
{"222", "nm", "221", "162", 1, -1},
{"223", "spec", "221", "224", 2, -1},
{"226", "nm", "225", "218", 1, -1},
{"227", "ast", "225", "86", 2, -1},
{"228", "tcType", "225", "229", 3, -1},
{"231", "nm", "230", "218", 1, -1},
{"232", "suc", "230", "233", 2, -1},
{"235", "nm", "234", "162", 1, -1},
{"236", "suc", "234", "233", 2, -1},
{"239", "v", "238", "2", 1, -1},
{"241", "file", "240", "162", 1, -1},
{"243", "file", "242", "162", 1, -1},
{"250", "file", "249", "162", 1, -1},
{"252", "mnm", "251", "218", 1, -1},
{"254", "nm", "253", "218", 1, -1},
{"256", "nm", "255", "218", 1, -1},
{"258", "nm", "257", "218", 1, -1},
{"260", "nm", "259", "218", 1, -1},
{"263", "f", "262", "162", 1, -1},
{"265", "pnm", "264", "162", 1, -1},
{"268", "pnm", "267", "162", 1, -1},
{"271", "file", "270", "162", 1, -1},
{"273", "file", "272", "162", 1, -1},
{"277", "err", "276", "80", 1, -1},
{"279", "err", "278", "80", 1, -1},
{"284", "fnm", "283", "162", 1, -1},
{"285", "tp", "283", "286", 2, -1},
{"289", "val", "288", "290", 1, -1},
{"292", "nm", "291", "293", 1, -1},
{"295", "nm_s", "294", "296", 1, -1},
{"298", "session", "297", "203", 1, -1},
{"300", "val", "299", "301", 1, -1},
{"303", "status", "302", "304", 1, -1},
{"306", "g", "305", "307", 1, -1},
{"327", "interface", "326", "11", 1, -1},
{"328", "err", "326", "80", 2, -1},
{"329", "exprerr", "326", "80", 3, -1},
{"331", "interface", "330", "11", 1, -1},
{"332", "err", "330", "80", 2, -1},
{"333", "exprerr", "330", "80", 3, -1},
{"344", "ast", "343", "88", 1, -1},
{"347", "ast", "346", "88", 1, -1},
{"351", "ast", "350", "88", 1, -1},
{"354", "ast", "353", "88", 1, -1},
{"370", "action", "369", "371", 1, -1},
{"372", "tp", "369", "304", 2, -1},
{"374", "kind", "373", "371", 1, -1},
{"377", "ast'", "376", "88", 1, -1},
{"380", "store", "379", "61", 1, -1},
{"382", "store", "381", "61", 1, -1},
{"387", "action", "386", "371", 1, -1},
{"388", "tp", "386", "389", 2, -1},
{"391", "kind", "390", "371", 1, -1},
{"393", "store", "392", "61", 1, -1},
{"395", "store", "394", "61", 1, -1},
{"397", "t", "396", "389", 1, -1},
{"401", "rep", "400", "59", 1, -1},
{"402", "rdb", "400", "73", 2, -1},
{"403", "nm", "400", "162", 3, -1},
{"404", "spec", "400", "224", 4, -1},
{"409", "rep", "408", "59", 1, -1},
{"410", "repdb", "408", "73", 2, -1},
{"411", "nm", "408", "162", 3, -1},
{"412", "spec", "408", "224", 4, -1},
{"414", "repdb", "413", "73", 1, -1},
{"415", "nm", "413", "218", 2, -1},
{"416", "ast", "413", "86", 3, -1},
{"417", "tcType", "413", "229", 4, -1},
{"419", "rep", "418", "73", 1, -1},
{"420", "nm", "418", "218", 2, -1},
{"421", "suc", "418", "233", 3, -1},
{"423", "rep", "422", "73", 1, -1},
{"424", "nm", "422", "162", 2, -1},
{"425", "suc", "422", "233", 3, -1},
{"428", "val", "427", "2", 1, -1},
{"430", "rep", "429", "73", 1, -1},
{"431", "un_s", "429", "246", 2, -1},
{"433", "rep", "432", "73", 1, -1},
{"434", "un", "432", "218", 2, -1},
{"438", "rep", "437", "59", 1, -1},
{"439", "repdb", "437", "73", 2, -1},
{"440", "nm", "437", "162", 3, -1},
{"441", "spec", "437", "224", 4, -1},
{"443", "rep", "442", "59", 1, -1},
{"444", "repdb", "442", "73", 2, -1},
{"445", "sp", "442", "220", 3, -1},
{"449", "rep", "448", "59", 1, -1},
{"450", "repdb", "448", "73", 2, -1},
{"451", "nm", "448", "162", 3, -1},
{"452", "spec", "448", "224", 4, -1},
{"454", "repdb", "453", "73", 1, -1},
{"455", "ast_m", "453", "456", 2, -1},
{"458", "repdb", "457", "73", 1, -1},
{"459", "md_s", "457", "246", 2, -1},
{"461", "repdb", "460", "73", 1, -1},
{"462", "cl_s", "460", "246", 2, -1},
{"475", "r", "474", "59", 1, -1},
{"476", "db", "474", "73", 2, -1},
{"477", "m", "474", "12", 3, -1},
{"478", "d", "474", "76", 4, -1},
{"481", "newname", "480", "162", 1, -1},
{"483", "pnm", "482", "162", 1, -1},
{"485", "pnm", "484", "162", 1, -1},
{"489", "file", "488", "162", 1, -1},
{"491", "file", "490", "162", 1, -1},
{"500", "r", "499", "59", 1, -1},
{"501", "db", "499", "73", 2, -1},
{"502", "m", "499", "12", 3, -1},
{"504", "nm", "503", "198", 1, -1},
{"505", "kind", "503", "200", 2, -1},
{"507", "nm", "506", "198", 1, -1},
{"509", "nm", "508", "198", 1, -1},
{"511", "st_s", "510", "512", 1, -1},
{"521", "m", "520", "12", 1, -1},
{"524", "nm", "523", "162", 1, -1},
{"526", "fileid", "525", "154", 1, -1},
{"529", "status", "528", "72", 1, -1},
{"530", "nm", "528", "218", 2, -1},
{"533", "file", "532", "162", 1, -1},
{"535", "file", "534", "162", 1, -1},
{"536", "isflatses", "534", "2", 2, -1},
{"540", "file", "539", "162", 1, -1},
{"542", "mnm", "541", "218", 1, -1},
{"545", "chModSt", "544", "246", 1, -1},
{"547", "el", "546", "515", 1, -1},
{"549", "els", "548", "246", 1, -1},
{"551", "el", "550", "517", 1, -1},
{"553", "el", "552", "517", 1, -1},
{"557", "fs", "556", "517", 1, -1},
{"559", "us", "558", "515", 1, -1},
{"563", "fn", "562", "162", 1, -1},
{"566", "mn", "565", "218", 1, -1},
{"570", "m", "569", "12", 1, -1},
{"572", "fnm_l", "571", "573", 1, -1},
{"575", "mnm_l", "574", "576", 1, -1},
{"578", "mnm_l", "577", "576", 1, -1},
{"580", "fnm_l", "579", "573", 1, -1},
{"582", "expr", "581", "583", 1, -1},
{"587", "command", "586", "588", 1, -1},
{"593", "process", "592", "594", 1, -1},
{"595", "inflow", "592", "596", 2, -1},
{"599", "expr", "598", "583", 1, -1},
{"601", "val", "600", "602", 1, -1},
{"605", "expr", "604", "583", 1, -1},
{"613", "r", "612", "59", 1, -1},
{"615", "nm_s", "614", "246", 1, -1},
{"617", "nm_s", "616", "246", 1, -1},
{"619", "nm_l", "618", "620", 1, -1},
{"622", "nm", "621", "218", 1, -1},
{"624", "nm", "623", "218", 1, -1},
{"626", "nm", "625", "218", 1, -1},
{"628", "nm", "627", "218", 1, -1},
{"630", "nm", "629", "218", 1, -1},
{"632", "store", "631", "61", 1, -1},
{"634", "store", "633", "61", 1, -1},
{"637", "err", "636", "80", 1, -1},
{"640", "info", "639", "194", 1, -1},
{"647", "m", "646", "12", 1, -1},
{"658", "instate", "657", "81", 1, -1},
{"661", "newstate", "660", "81", 1, -1},
{"664", "msg", "663", "665", 1, -1},
{"669", "ms", "668", "670", 1, -1},
{"674", "noErr, noWrn", "673", "1", 1, -1},
{"676", "dir", "675", "677", 1, -1},
{"685", "msgPtr", "684", "1", 1, -1},
{"686", "ms", "684", "670", 2, -1},
{"693", "err", "692", "80", 1, -1},
{"695", "err", "694", "80", 1, -1},
{"696", "estate", "694", "81", 2, -1},
{"698", "err", "697", "80", 1, -1},
{"700", "err", "699", "80", 1, -1},
{"706", "action", "705", "707", 1, -1},
{"708", "tp", "705", "304", 2, -1},
{"711", "kind", "710", "200", 1, -1},
{"713", "store", "712", "61", 1, -1},
{"715", "store", "714", "61", 1, -1}
}
association ::= {
{"109", "", f, NULL, -1},
{"112", "", f, NULL, -1},
{"115", "", f, NULL, -1},
{"118", "", f, NULL, -1},
{"121", "", f, NULL, -1},
{"124", "", f, NULL, -1},
{"171", "", f, NULL, -1},
{"174", "", f, NULL, -1},
{"177", "", f, NULL, -1},
{"180", "", f, NULL, -1},
{"183", "", f, NULL, -1},
{"186", "", f, NULL, -1},
{"323", "", f, NULL, -1},
{"357", "", f, NULL, -1},
{"360", "", f, NULL, -1},
{"465", "", f, NULL, -1},
{"468", "", f, NULL, -1},
{"471", "", f, NULL, -1},
{"493", "", f, NULL, -1},
{"496", "", f, NULL, -1},
{"609", "", f, NULL, -1},
{"643", "", f, NULL, -1},
{"654", "", f, NULL, -1},
{"751", "", f, NULL, -1}
}
role ::= {
{"110", "inf", f, 0, "1", f, f, "11", "109", -1},
{"111", "", f, 0, "1", f, f, "12", "109", -1},
{"113", "bt", f, 0, "1", f, f, "74", "112", -1},
{"114", "", f, 0, "1", f, f, "12", "112", -1},
{"116", "rep", f, 0, "1", f, f, "59", "115", -1},
{"117", "", f, 0, "1", f, f, "12", "115", -1},
{"119", "opt", f, 0, "1", f, f, "14", "118", -1},
{"120", "", f, 0, "1", f, f, "12", "118", -1},
{"122", "err", f, 0, "1", f, f, "80", "121", -1},
{"123", "", f, 0, "1", f, f, "12", "121", -1},
{"125", "exprerr", f, 0, "1", f, f, "80", "124", -1},
{"126", "", f, 0, "1", f, f, "12", "124", -1},
{"172", "repdb", f, 0, "1", f, f, "73", "171", -1},
{"173", "", f, 0, "1", f, f, "59", "171", -1},
{"175", "cgrepos", f, 0, "1", f, f, "78", "174", -1},
{"176", "", f, 0, "1", f, f, "59", "174", -1},
{"178", "session", f, 0, "1", f, f, "68", "177", -1},
{"179", "", f, 0, "1", f, f, "59", "177", -1},
{"181", "status", f, 0, "1", f, f, "72", "180", -1},
{"182", "", f, 0, "1", f, f, "59", "180", -1},
{"184", "project", f, 0, "1", f, f, "71", "183", -1},
{"185", "", f, 0, "1", f, f, "59", "183", -1},
{"187", "depend", f, 0, "1", f, f, "76", "186", -1},
{"188", "", f, 0, "1", f, f, "59", "186", -1},
{"324", "mediator", f, 0, "1", f, f, "12", "323", -1},
{"325", "", f, 0, "1", f, f, "62", "323", -1},
{"358", "ast", f, 0, "1", f, f, "9", "357", -1},
{"359", "", f, 0, "1", f, f, "65", "357", -1},
{"361", "status", f, 0, "1", f, f, "66", "360", -1},
{"362", "", f, 0, "1", f, f, "65", "360", -1},
{"466", "rep", f, 0, "1", f, f, "59", "465", -1},
{"467", "", f, 0, "1", f, f, "71", "465", -1},
{"469", "repdb", f, 0, "1", f, f, "73", "468", -1},
{"470", "", f, 0, "1", f, f, "71", "468", -1},
{"472", "dep", f, 0, "1", f, f, "76", "471", -1},
{"473", "", f, 0, "1", f, f, "71", "471", -1},
{"494", "rep", f, 0, "1", f, f, "59", "493", -1},
{"495", "", f, 0, "1", f, f, "72", "493", -1},
{"497", "repdb", f, 0, "1", f, f, "73", "496", -1},
{"498", "", f, 0, "1", f, f, "72", "496", -1},
{"610", "rep", f, 0, "1", f, f, "59", "609", -1},
{"611", "", f, 0, "1", f, f, "76", "609", -1},
{"644", "mediator", f, 0, "1", f, f, "12", "643", -1},
{"645", "", f, 0, "1", f, f, "79", "643", -1},
{"655", "state", f, 0, "1", f, f, "81", "654", -1},
{"656", "", f, 0, "1", f, f, "80", "654", -1},
{"752", "", f, 0, "1", f, f, "71", "751", -1},
{"753", "", f, 0, "1", f, f, "61", "751", -1}
}
inheritance ::= {
{"98", "16", NULL, f, {"9"}, -1},
{"108", "16", NULL, f, {"11"}, -1},
{"156", "16", NULL, f, {"12"}, -1},
{"159", "81", NULL, f, {"13"}, -1},
{"165", "79", NULL, f, {"14"}, -1},
{"170", "81", NULL, f, {"15"}, -1},
{"275", "79", NULL, f, {"59"}, -1},
{"280", "81", NULL, f, {"60"}, -1},
{"322", "16", NULL, f, {"61"}, -1},
{"342", "16", NULL, f, {"62"}, -1},
{"349", "9", NULL, f, {"63"}, -1},
{"356", "9", NULL, f, {"64"}, -1},
{"383", "16", NULL, f, {"65"}, -1},
{"398", "16", NULL, f, {"66"}, -1},
{"405", "68", NULL, f, {"67"}, -1},
{"435", "16", NULL, f, {"68"}, -1},
{"446", "68", NULL, f, {"69"}, -1},
{"463", "68", NULL, f, {"70"}, -1},
{"492", "79", NULL, f, {"71"}, -1},
{"513", "79", NULL, f, {"72"}, -1},
{"568", "79", NULL, f, {"73"}, -1},
{"591", "79", NULL, f, {"74"}, -1},
{"608", "74", NULL, f, {"75"}, -1},
{"635", "16", NULL, f, {"76"}, -1},
{"638", "81", NULL, f, {"77"}, -1},
{"642", "16", NULL, f, {"78"}, -1},
{"648", "16", NULL, f, {"79"}, -1},
{"691", "79", NULL, f, {"80"}, -1},
{"701", "16", NULL, f, {"81"}, -1},
{"716", "16", NULL, f, {"82"}, -1}
}
entity_position ::= {
{"82", "716", {400, 60, 520, 80}},
{"81", "716", {400, 102, 520, 122}},
{"80", "716", {680, 270, 800, 290}},
{"79", "716", {400, 270, 520, 290}},
{"78", "716", {400, 564, 520, 584}},
{"77", "716", {680, 102, 800, 122}},
{"76", "716", {400, 606, 520, 626}},
{"75", "716", {960, 312, 1080, 332}},
{"74", "716", {680, 312, 800, 332}},
{"73", "716", {680, 354, 800, 374}},
{"72", "716", {680, 396, 800, 416}},
{"71", "716", {680, 438, 800, 458}},
{"70", "716", {680, 648, 800, 668}},
{"69", "716", {680, 690, 800, 710}},
{"68", "716", {400, 648, 520, 668}},
{"67", "716", {680, 732, 800, 752}},
{"66", "716", {400, 774, 520, 794}},
{"65", "716", {400, 816, 520, 836}},
{"64", "716", {680, 1026, 800, 1046}},
{"63", "716", {680, 1068, 800, 1088}},
{"62", "716", {400, 858, 520, 878}},
{"61", "716", {400, 900, 520, 920}},
{"60", "716", {680, 144, 800, 164}},
{"59", "716", {680, 480, 800, 500}},
{"16", "716", {120, 60, 240, 80}},
{"15", "716", {680, 186, 800, 206}},
{"14", "716", {680, 522, 800, 542}},
{"13", "716", {680, 228, 800, 248}},
{"12", "716", {400, 942, 520, 962}},
{"11", "716", {400, 984, 520, 1004}},
{"9", "716", {400, 1026, 520, 1046}},
{"82", "717", {120, 60, 420, 175}},
{"81", "718", {120, 60, 420, 145}},
{"80", "718", {720, 60, 840, 95}},
{"654", "718", {420, 70, 570, 70, 570, 70, 720, 70}},
{"80", "719", {120, 60, 420, 475}},
{"81", "719", {720, 60, 840, 95}},
{"12", "719", {720, 105, 840, 170}},
{"654", "719", {720, 70, 570, 70, 570, 70, 420, 70}},
{"124", "719", {420, 115, 570, 115, 570, 115, 720, 115}},
{"121", "719", {420, 145, 570, 145, 570, 145, 720, 145}},
{"79", "720", {120, 60, 420, 145}},
{"12", "720", {720, 60, 840, 95}},
{"643", "720", {720, 70, 570, 70, 570, 70, 420, 70}},
{"78", "721", {120, 60, 420, 145}},
{"59", "721", {720, 60, 840, 95}},
{"174", "721", {420, 70, 570, 70, 570, 70, 720, 70}},
{"77", "722", {120, 60, 420, 100}},
{"76", "723", {120, 60, 510, 230}},
{"59", "723", {610, 60, 730, 100}},
{"71", "723", {610, 135, 730, 170}},
{"609", "723", {610, 80, 560, 80, 560, 80, 510, 80}},
{"186", "723", {510, 80, 615, 80, 615, 80, 610, 80}},
{"471", "723", {510, 152.5, 560, 152.5, 560, 152.5, 610, 152.5}},
{"75", "724", {120, 60, 420, 160}},
{"74", "725", {120, 60, 420, 235}},
{"12", "725", {720, 60, 840, 95}},
{"112", "725", {420, 70, 570, 70, 570, 70, 720, 70}},
{"73", "726", {120, 60, 420, 550}},
{"72", "726", {720, 60, 840, 95}},
{"71", "726", {720, 105, 840, 140}},
{"59", "726", {720, 150, 840, 185}},
{"496", "726", {420, 70, 570, 70, 570, 70, 720, 70}},
{"468", "726", {420, 115, 570, 115, 570, 115, 720, 115}},
{"171", "726", {420, 160, 570, 160, 570, 160, 720, 160}},
{"72", "727", {120, 60, 420, 265}},
{"73", "727", {720, 60, 840, 95}},
{"59", "727", {720, 105, 840, 170}},
{"496", "727", {720, 70, 570, 70, 570, 70, 420, 70}},
{"493", "727", {720, 115, 570, 115, 570, 115, 420, 115}},
{"180", "727", {420, 145, 570, 145, 570, 145, 720, 145}},
{"71", "728", {120, 60, 570, 220}},
{"76", "728", {650, 60, 770, 95}},
{"73", "728", {650, 105, 770, 140}},
{"59", "728", {650, 150, 770, 190}},
{"61", "728", {120, 310, 480, 540}},
{"471", "728", {650, 77.5, 645, 77.5, 645, 77.5, 570, 77.5}},
{"468", "728", {650, 122.5, 645, 122.5, 645, 122.5, 570, 122.5}},
{"465", "728", {650, 170, 645, 170, 645, 170, 570, 170}},
{"183", "728", {570, 170, 645, 170, 645, 170, 650, 170}},
{"751", "728", {216, 220, 216, 265, 216, 265, 216, 310}},
{"70", "729", {120, 60, 420, 160}},
{"69", "730", {120, 60, 420, 130}},
{"68", "731", {120, 60, 690, 220}},
{"67", "731", {120, 270, 690, 360}},
{"69", "731", {120, 410, 690, 500}},
{"70", "731", {120, 560, 690, 650}},
{"67", "732", {120, 60, 420, 115}},
{"66", "733", {120, 60, 420, 190}},
{"65", "733", {720, 60, 840, 95}},
{"360", "733", {420, 70, 570, 70, 570, 70, 720, 70}},
{"65", "734", {120, 60, 420, 265}},
{"66", "734", {720, 60, 840, 95}},
{"9", "734", {720, 105, 840, 140}},
{"360", "734", {720, 70, 570, 70, 570, 70, 420, 70}},
{"357", "734", {720, 115, 570, 115, 570, 115, 420, 115}},
{"64", "735", {120, 60, 420, 145}},
{"63", "736", {120, 60, 420, 145}},
{"62", "737", {120, 60, 420, 235}},
{"12", "737", {720, 60, 840, 95}},
{"323", "737", {720, 70, 570, 70, 570, 70, 420, 70}},
{"61", "738", {120, 60, 420, 340}},
{"60", "739", {120, 60, 420, 115}},
{"59", "740", {120, 60, 240, 530}},
{"76", "740", {340, 10, 480, 160}},
{"72", "740", {660, 140, 780, 240}},
{"71", "740", {340, 180, 480, 320}},
{"68", "740", {660, 300, 780, 440}},
{"78", "740", {340, 340, 480, 390}},
{"73", "740", {340, 400, 480, 780}},
{"12", "740", {120, 560, 240, 750}},
{"67", "740", {540, 510, 610, 600}},
{"70", "740", {670, 510, 770, 600}},
{"69", "740", {830, 510, 900, 600}},
{"609", "740", {240, 110, 290, 110, 290, 110, 340, 110}},
{"186", "740", {340, 110, 290, 110, 290, 110, 240, 110}},
{"493", "740", {240, 167.5, 480, 167.5, 480, 167.5, 660, 167.5}},
{"180", "740", {660, 167.5, 480, 167.5, 480, 167.5, 240, 167.5}},
{"465", "740", {240, 250, 290, 250, 290, 250, 340, 250}},
{"183", "740", {340, 250, 290, 250, 290, 250, 240, 250}},
{"177", "740", {660, 326, 570, 326, 570, 326, 240, 326}},
{"174", "740", {340, 367.5, 290, 367.5, 290, 367.5, 240, 367.5}},
{"171", "740", {340, 507.5, 290, 507.5, 290, 507.5, 240, 507.5}},
{"115", "740", {180, 530, 180, 545, 180, 545, 180, 560}},
{"16", "741", {120, 60, 420, 85}},
{"15", "742", {120, 60, 420, 115}},
{"14", "743", {120, 60, 420, 145}},
{"12", "743", {720, 60, 840, 95}},
{"118", "743", {420, 70, 570, 70, 570, 70, 720, 70}},
{"13", "744", {120, 60, 420, 100}},
{"12", "745", {120, 60, 420, 565}},
{"79", "745", {720, 60, 840, 95}},
{"62", "745", {720, 105, 840, 140}},
{"80", "745", {720, 150, 840, 215}},
{"14", "745", {720, 225, 840, 260}},
{"59", "745", {720, 270, 840, 305}},
{"74", "745", {720, 315, 840, 350}},
{"11", "745", {720, 360, 840, 395}},
{"643", "745", {420, 70, 570, 70, 570, 70, 720, 70}},
{"323", "745", {420, 115, 570, 115, 570, 115, 720, 115}},
{"124", "745", {720, 160, 570, 160, 570, 160, 420, 160}},
{"121", "745", {720, 190, 570, 190, 570, 190, 420, 190}},
{"118", "745", {720, 235, 570, 235, 570, 235, 420, 235}},
{"115", "745", {720, 280, 570, 280, 570, 280, 420, 280}},
{"112", "745", {720, 325, 570, 325, 570, 325, 420, 325}},
{"109", "745", {720, 370, 570, 370, 570, 370, 420, 370}},
{"11", "746", {120, 60, 420, 145}},
{"12", "746", {720, 60, 840, 95}},
{"109", "746", {420, 70, 570, 70, 570, 70, 720, 70}},
{"9", "747", {120, 60, 420, 205}},
{"65", "747", {720, 60, 840, 95}},
{"357", "747", {420, 70, 570, 70, 570, 70, 720, 70}},
{"59", "754", {120, 60, 560, 530}}
}
inheritance_position ::= {
{"638", "716", "81", {520, 112, 590, 112}},
{"638", "716", "77", {590, 112, 590, 112, 680, 112}},
{"280", "716", "81", {520, 112, 590, 112}},
{"280", "716", "60", {590, 112, 590, 154, 680, 154}},
{"170", "716", "81", {520, 112, 590, 112}},
{"170", "716", "15", {590, 112, 590, 196, 680, 196}},
{"159", "716", "81", {520, 112, 590, 112}},
{"159", "716", "13", {590, 112, 590, 238, 680, 238}},
{"691", "716", "79", {520, 280, 590, 280}},
{"691", "716", "80", {590, 280, 590, 280, 680, 280}},
{"591", "716", "79", {520, 280, 590, 280}},
{"591", "716", "74", {590, 280, 590, 322, 680, 322}},
{"568", "716", "79", {520, 280, 590, 280}},
{"568", "716", "73", {590, 280, 590, 364, 680, 364}},
{"513", "716", "79", {520, 280, 590, 280}},
{"513", "716", "72", {590, 280, 590, 406, 680, 406}},
{"492", "716", "79", {520, 280, 590, 280}},
{"492", "716", "71", {590, 280, 590, 448, 680, 448}},
{"275", "716", "79", {520, 280, 590, 280}},
{"275", "716", "59", {590, 280, 590, 490, 680, 490}},
{"165", "716", "79", {520, 280, 590, 280}},
{"165", "716", "14", {590, 280, 590, 532, 680, 532}},
{"608", "716", "74", {800, 322, 870, 322}},
{"608", "716", "75", {870, 322, 870, 322, 960, 322}},
{"463", "716", "68", {520, 658, 590, 658}},
{"463", "716", "70", {590, 658, 590, 658, 680, 658}},
{"446", "716", "68", {520, 658, 590, 658}},
{"446", "716", "69", {590, 658, 590, 700, 680, 700}},
{"405", "716", "68", {520, 658, 590, 658}},
{"405", "716", "67", {590, 658, 590, 742, 680, 742}},
{"716", "716", "16", {240, 70, 310, 70}},
{"716", "716", "82", {310, 70, 310, 70, 400, 70}},
{"701", "716", "16", {240, 70, 310, 70}},
{"701", "716", "81", {310, 70, 310, 112, 400, 112}},
{"648", "716", "16", {240, 70, 310, 70}},
{"648", "716", "79", {310, 70, 310, 280, 400, 280}},
{"642", "716", "16", {240, 70, 310, 70}},
{"642", "716", "78", {310, 70, 310, 574, 400, 574}},
{"635", "716", "16", {240, 70, 310, 70}},
{"635", "716", "76", {310, 70, 310, 616, 400, 616}},
{"435", "716", "16", {240, 70, 310, 70}},
{"435", "716", "68", {310, 70, 310, 658, 400, 658}},
{"398", "716", "16", {240, 70, 310, 70}},
{"398", "716", "66", {310, 70, 310, 784, 400, 784}},
{"383", "716", "16", {240, 70, 310, 70}},
{"383", "716", "65", {310, 70, 310, 826, 400, 826}},
{"342", "716", "16", {240, 70, 310, 70}},
{"342", "716", "62", {310, 70, 310, 868, 400, 868}},
{"322", "716", "16", {240, 70, 310, 70}},
{"322", "716", "61", {310, 70, 310, 910, 400, 910}},
{"156", "716", "16", {240, 70, 310, 70}},
{"156", "716", "12", {310, 70, 310, 952, 400, 952}},
{"108", "716", "16", {240, 70, 310, 70}},
{"108", "716", "11", {310, 70, 310, 994, 400, 994}},
{"98", "716", "16", {240, 70, 310, 70}},
{"98", "716", "9", {310, 70, 310, 1036, 400, 1036}},
{"356", "716", "9", {520, 1036, 590, 1036}},
{"356", "716", "64", {590, 1036, 590, 1036, 680, 1036}},
{"349", "716", "9", {520, 1036, 590, 1036}},
{"349", "716", "63", {590, 1036, 590, 1078, 680, 1078}},
{"446", "731", "68", {120, 136, 80, 136}},
{"446", "731", "69", {80, 136, 80, 435, 120, 435}},
{"405", "731", "68", {120, 135, 80, 135}},
{"405", "731", "67", {80, 135, 80, 294, 120, 294}},
{"463", "731", "68", {120, 136, 80, 136}},
{"463", "731", "70", {80, 136, 80, 591, 120, 591}},
{"405", "740", "68", {717, 440, 717, 480}},
{"405", "740", "67", {717, 480, 574, 480, 574, 510}},
{"463", "740", "68", {718, 440, 718, 480}},
{"463", "740", "70", {718, 480, 719, 480, 719, 510}},
{"446", "740", "68", {718, 440, 718, 480}},
{"446", "740", "69", {718, 480, 866, 480, 866, 510}}
}
module_layout ::= {
{"750", f, 1, 1, 0},
{"723", f, 1, 1, 5},
{"728", f, 1, 1, 5},
{"731", f, 1, 1, 5},
{"754", f, 1, 1, 5}
}
note ::= {
{"9", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"9", "Initializations", "init objectstate == (  location := <NONE>;
   ast := nil
)"},
{"9", "Invariants", "inv objectstate == location = <MEMORY> => ast <> nil and location = <NONE> => ast = nil"},
{"11", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"12", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"12", "Initializations", "init objectstate == (  bt := BaseTools!new;
   rep := Repository!new;
   opt := Options!new
)"},
{"13", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"14", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"15", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"16", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"59", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"59", "Initializations", "init objectstate == (  repdb := RepDatabase!new;
   cgrepos := CGRepository!new;
   session := NoneSes!new;
   status := StatusInfo!new;
   project := UpdateProject!new;
   depend := Dependency!new
)"},
{"60", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"61", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"62", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"62", "Initializations", "init objectstate == (  mediator := ToolMediator!new
)"},
{"63", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"64", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"65", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"65", "Initializations", "init objectstate == (  ast := AST!new;
   status := UnitStatus!new;
   enabled := true
)"},
{"66", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"66", "Initializations", "init objectstate == status := mk_UnitStat(<NONE>, <NONE>)"},
{"67", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"68", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"68", "Initializations", "init objectstate == stateSaved := true"},
{"69", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"70", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"71", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"71", "Initializations", "init objectstate == projectname := nil"},
{"72", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"73", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"73", "Initializations", "init objectstate == (  unit_m := {|->};
   file_m := {|->};
   storeState := mk_({|->}, {|->})
)"},
{"74", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"75", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"76", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"77", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"78", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"79", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"80", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"80", "Initializations", "init objectstate == (  msgs := [];
   msgPtr := 0;
   msgStatus := mk_(0, 0)
)"},
{"81", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"82", "Created", "-- Created by The VDM++ Toolbox's pretty-printer V1.2
-- (C)1994 Afrodite consortium."},
{"82", "Initializations", "init objectstate == status := mk_FileStat(<NONE>, <NONE>)"},
{"10", "Type-definition", "<MEMORY>|<NONE>"},
{"17", "Composite-type", "compose ModuleName of
   nm: String
end"},
{"18", "Composite-type", "compose FileName of
   nm: String
end"},
{"19", "Composite-type", "compose Name of
   nm: String
end"},
{"20", "Composite-type", "compose InfoString of
   nm: String
end"},
{"21", "Type-definition", "seq of char"},
{"22", "Type-definition", "nat"},
{"23", "Composite-type", "compose AstVal of
   val: token
end"},
{"24", "Composite-type", "compose DepGraph of
   g: token
end"},
{"25", "Type-definition", "ErrMsg|WarnMsg|InfoMsg"},
{"26", "Composite-type", "compose ErrMsg of
   fid: integer
   line: integer
   col: integer
   msg: seq of token
end"},
{"27", "Composite-type", "compose WarnMsg of
   fid: integer
   line: integer
   col: integer
   msg: seq of token
end"},
{"28", "Composite-type", "compose InfoMsg of
   msg: seq of token
end"},
{"29", "Type-definition", "FileAction|UnitAction"},
{"30", "Type-definition", "<EDIT>|<SYNTAXCHECK>|<PP>"},
{"31", "Type-definition", "<TYPECHECK>|<CG>"},
{"32", "Type-definition", "<NONE>|<ERROR>|<OK>"},
{"33", "Type-definition", "boolean"},
{"34", "Composite-type", "compose UnitStat of
   type: Status|<POS>|<DEF>
   cg: Status
end"},
{"35", "Composite-type", "compose FileStat of
   syntax: Status
   pp: Status
end"},
{"36", "Type-definition", "<NONE>|<STRUCTURED>|<FLAT>"},
{"37", "Composite-type", "compose Module of
   nm: ModuleName
   ast: AstVal
end"},
{"38", "Composite-type", "compose FlatSpec of
   nm: ModuleName
   ast: AstVal
end"},
{"39", "Composite-type", "compose CGInfo of
   repos: token
end"},
{"40", "Composite-type", "compose ToolCommand of
   command: token
end"},
{"41", "Type-definition", "BreakSet|BreakRemove|BackTrace|AddFiles|RemoveFiles|AddModules|RemoveModules|ChangedFileStatus|ChangedModuleStatus"},
{"42", "Composite-type", "compose BreakSet of
   bp: token
end"},
{"43", "Composite-type", "compose BreakRemove of
   bp: token
end"},
{"44", "Composite-type", "compose BackTrace of
   info: seq of (token * seq of token)
end"},
{"45", "Composite-type", "compose AddFiles of
   nms: set of FileName
end"},
{"46", "Composite-type", "compose RemoveFiles of
   nms: set of FileName
end"},
{"47", "Composite-type", "compose AddModules of
   nms: set of ModuleName
end"},
{"48", "Composite-type", "compose RemoveModules of
   nms: set of ModuleName
end"},
{"49", "Composite-type", "compose ChangedFileStatus of
   nm: FileName
end"},
{"50", "Composite-type", "compose ChangedModuleStatus of
   nms: set of ModuleName
end"},
{"51", "Composite-type", "compose FlowMap of
   flows: map token to token
end"},
{"52", "Composite-type", "compose SemVal of
   v: token
end"},
{"53", "Composite-type", "compose FunctionSet of
   nms: set of token
end"},
{"54", "Type-definition", "map ModuleName to @VDMUnitElem"},
{"55", "Type-definition", "map FileName to FileInfo"},
{"56", "Type-definition", "ModuleNames * @FileStatus * FileId"},
{"57", "Type-definition", "set of ModuleName"},
{"58", "Type-definition", "UnitState * FileState"},
{"281", "Value-expression", "2"},
{"87", "Precondition", "pre location <> <NONE>"},
{"87", "Body", "return ast"},
{"89", "Body", "(  location := <NONE>;
   ast := nil
)"},
{"90", "Body", "cases location:
   <MEMORY> -> ast := ast',
   <NONE> -> (  ast := ast';
      location := <MEMORY>
   )
end"},
{"92", "Body", "return false"},
{"94", "Body", "if location = <NONE>
then store!WriteASTVal (location)
else store!WriteASTVal (ast)"},
{"96", "Body", "def val = store!ReadASTVal () in
   (  if is_AstVal(val)
      then (  ast := val;
              location := <MEMORY>
           )
      else (  ast := nil;
              location := <NONE>
           );
      return val <> nil
   )"},
{"127", "Body", "self!LocalInit (interface, e, expr_e)"},
{"131", "Body", "(  bt := SABaseTools!new;
   self!LocalInit (interface, e, expr_e)
)"},
{"135", "Body", "(  inf := interface;
   err := e;
   exprerr := expr_e;
   bt!SetMediator (self);
   rep!SetMediator (self);
   opt!SetMediator (self);
   err!SetMediator (self);
   exprerr!SetMediator (self)
)"},
{"139", "Body", "return err"},
{"140", "Body", "return exprerr"},
{"141", "Body", "return opt"},
{"142", "Body", "return inf"},
{"143", "Body", "return bt"},
{"144", "Body", "return rep"},
{"148", "Body", "inf!Log (msg)"},
{"150", "Body", "inf!CallBack (cmd)"},
{"152", "Body", "rep!GetFileName (id)"},
{"157", "Body", "def newstate = PromptErr!new in
   self!SetNextState (err, newstate)"},
{"166", "Body", "def newstate = NonPrintErr!new in
   (  err!ShowMsg ();
      self!SetNextState (err, newstate)
   )"},
{"168", "Body", "def newstate = ScriptErr!new in
   self!SetNextState (err, newstate)"},
{"189", "Body", "(  mediator := m;
   repdb!SetMediator (m);
   status!Init (self, repdb, m);
   depend!Init (self);
   project!Init (self, repdb, m, depend)
)"},
{"191", "Body", "return depend"},
{"192", "Body", "cgrepos!WriteCGInfo (info)"},
{"195", "Body", "cgrepos!GetCGInfo ()"},
{"196", "Body", "def rt = status!Allowed (nm, kind) in
   return rt"},
{"201", "Body", "def sestype = session!Type () in
   return q = sestype"},
{"204", "Body", "def stp = session!Type () in
   return stp"},
{"205", "Body", "session := sp"},
{"207", "Body", "def rt = status!Status (nm) in
   return rt"},
{"210", "Body", "repdb!GetFileId (nm)"},
{"212", "Body", "repdb!GetFileName (fileid)"},
{"214", "Body", "repdb!GetAllAsts ()"},
{"216", "Body", "repdb!GetAST (status, nm)"},
{"219", "Body", "repdb!GetFlatSpec ()"},
{"221", "Body", "session!UpdateSC (self, repdb, nm, spec)"},
{"225", "Body", "session!UpdateTC (repdb, nm, ast, tcType)"},
{"230", "Body", "session!UpdateCG (repdb, nm, suc)"},
{"234", "Body", "session!UpdatePP (repdb, nm, suc)"},
{"237", "Body", "session!StateIsSaved ()"},
{"238", "Body", "session!SetSavedState (v)"},
{"240", "Body", "repdb!AddFile (file)"},
{"242", "Body", "def isflatses = self!IsSession (<FLAT>) in
   def nofiles = repdb!RemoveFile (file, isflatses) in
      if nofiles
      then def newses = NoneSes!new in
              session := newses
      else skip"},
{"244", "Body", "def baseTool = mediator!GetBaseTools () in
   (  baseTool!InitToolbox ();
      cgrepos := CGRepository!new;
      session := NoneSes!new;
      repdb!ClearAll ();
      depend!Init (self)
   )"},
{"245", "Body", "repdb!Modules ()"},
{"247", "Body", "repdb!Files ()"},
{"249", "Body", "repdb!ModulesInFile (file)"},
{"251", "Body", "repdb!FileOfModule (mnm)"},
{"253", "Body", "depend!GetSub (nm)"},
{"255", "Body", "depend!GetSuper (nm)"},
{"257", "Body", "depend!GetUsedBy (nm)"},
{"259", "Body", "depend!GetUses (nm)"},
{"261", "Body", "project!GetProjectName ()"},
{"262", "Body", "project!SaveAs (f)"},
{"264", "Body", "project!Open (pnm)"},
{"266", "Body", "project!Close ()"},
{"267", "Body", "project!NewProject (pnm)"},
{"269", "Body", "project!NewUnnamedProject ()"},
{"270", "Body", "project!SaveObjState (file)"},
{"272", "Body", "project!LoadObjState (file)"},
{"274", "Body", "return status"},
{"276", "Body", "def newstate = PromptErr!new in
   self!SetNextState (err, newstate)"},
{"278", "Body", "err!ShowMsg ()"},
{"294", "Body", "(  dcl ok: boolean := self!WriteVal (card nm_s);
   for all nm in set nm_s do
      def ok' = self!WriteName (nm) in
         ok := ok and ok';
   return ok
)"},
{"312", "Body", "(  dcl nm_s: set of (FileName|ModuleName) := {};
   def size = self!ReadVal () in
      if is_nat(size)
      then for i = 1 to size by 1 do
              def nm = self!ReadName () in
                 if is_FileName(nm) or is_ModuleName(nm)
                 then nm_s := nm_s union {nm}
                 else return nil
      else return nil;
   return nm_s
)"},
{"326", "Body", "mediator!Init (interface, err, exprerr)"},
{"330", "Body", "mediator!InitSpecAnim (interface, err, exprerr)"},
{"334", "Body", "mediator!GetErrors ()"},
{"335", "Body", "mediator!GetExprErrors ()"},
{"336", "Body", "mediator!GetOptions ()"},
{"337", "Body", "mediator!GetInterface ()"},
{"338", "Body", "mediator!GetBaseTools ()"},
{"339", "Body", "mediator!GetRepository ()"},
{"340", "Body", "mediator!Version ()"},
{"341", "Body", "mediator!Features ()"},
{"364", "Body", "def changedEnable = not enabled in
   (  enabled := true;
      if changedEnable
      then def stat = status!GetStatus () in
              return stat <> mk_UnitStat(<NONE>, <NONE>)
      else return false
   )"},
{"365", "Body", "def changedEnable = enabled in
   (  enabled := false;
      if changedEnable
      then def stat = status!GetStatus () in
              return stat <> mk_UnitStat(<NONE>, <NONE>)
      else return false
   )"},
{"366", "Body", "return enabled"},
{"367", "Body", "if enabled
then status!GetStatus ()
else return mk_UnitStat(<NONE>, <NONE>)"},
{"369", "Body", "def changed = status!SetStatus (action, tp) in
   return enabled and changed"},
{"373", "Body", "if enabled
then status!Allowed (kind)
else return false"},
{"375", "Precondition", "pre enabled"},
{"375", "Body", "ast!Get ()"},
{"376", "Body", "def changed = self!SetStatus (<TYPECHECK>, <NONE>) in
   (  ast!Set (ast');
      return changed
   )"},
{"378", "Body", "ast!DeleteAST ()"},
{"379", "Body", "def ast_ok = ast!Save (store);
    status_ok = status!Save (store);
    ena_ok = store!WriteVal (enabled) in
   return ast_ok and status_ok and ena_ok"},
{"381", "Body", "def ast_ok = ast!Load (store);
    status_ok = status!Load (store);
    ena = store!ReadVal () in
   if ast_ok and status_ok and is_boolean(ena)
   then (  enabled := ena;
           return true
        )
   else (  ast := AST!new;
           status := UnitStatus!new;
           enabled := false;
           return true
        )"},
{"385", "Body", "return status"},
{"386", "Body", "def oldstat = status in
   (  cases action:
         <TYPECHECK> -> (  status := mk_UnitStat(tp, <NONE>);
            return oldstat <> status
         ),
         <CG> -> def mk_UnitStat(curTC, curCG) = status in
            let newCG = if not tcOk (curTC)
                then <NONE>
                else tp in
               (  status := mk_UnitStat(curTC, newCG);
                  return oldstat <> status
               )
      end;
      return false
   )"},
{"390", "Body", "(  cases kind:
      <TYPECHECK> -> return true,
      <CG> -> return status.type = <POS>,
      others -> return false
   end;
   return false
)"},
{"392", "Body", "def ok1 = store!WriteStatus (status.type);
    ok2 = store!WriteStatus (status.cg) in
   return ok1 and ok2"},
{"394", "Body", "def type = store!ReadStatus ();
    cg = store!ReadStatus () in
   if type <> nil and cg <> nil
   then (  status := mk_UnitStat(type, cg);
           return true
        )
   else (  status := mk_UnitStat(<NONE>, <NONE>);
           return false
        )"},
{"396", "Body", "t = <OK> or t = <POS> or t = <DEF>"},
{"399", "Body", "return <NONE>"},
{"400", "Body", "if spec <> []
then (  dcl nextses: @FlatSes|@StructSes;
        if is_FlatSpec(spec)
        then nextses := FlatSes!new
        else nextses := StructSes!new;
        rep!SetSession (nextses);
        rep!UpdateSC (nm, spec)
     )
else skip"},
{"413", "Body", "(  dcl changed: boolean := false;
   stateSaved := false;
   def modules = repdb!Modules () in
      if nm in set modules
      then def unit: @VDMUnitElem = repdb!GetUnitElem (nm) in
              let stt = if ast <> nil
                  then tcType
                  else <ERROR> in
                 (  if ast <> nil
                    then changed := unit!Set (ast)
                    else skip;
                    def chSet = unit!SetStatus (<TYPECHECK>, stt) in
                       changed := changed or chSet
                 )
      else skip;
   repdb!GetMediator ()GetRepository ()GetDependency ()UpdateIncompSubClasses (nm);
   if changed
   then repdb!GetMediator ()CallBack (mk_ChangedModuleStatus({nm}))
   else skip
)"},
{"418", "Body", "def modules = rep!Modules () in
   if nm in set modules
   then let stt = if suc
            then <OK>
            else <ERROR> in
           def unit: @VDMUnitElem = rep!GetUnitElem (nm) in
              def changed = unit!SetStatus (<CG>, stt) in
                 if changed
                 then (  stateSaved := false;
                         rep!GetMediator ()CallBack (mk_ChangedModuleStatus({nm}))
                      )
                 else skip
   else skip"},
{"422", "Body", "def files = rep!Files () in
   if nm in set files
   then let stt = if suc
            then <OK>
            else <ERROR> in
           def mk_(-, stat, -) = rep!GetFileElem (nm) in
              def filest: @FileStatus = stat in
                 def mk_(-, changedStatus) = filest!SetStatus (<PP>, stt) in
                    if changedStatus
                    then (  stateSaved := false;
                            rep!GetMediator ()CallBack (mk_ChangedFileStatus(nm))
                         )
                    else skip
   else skip"},
{"426", "Body", "return stateSaved"},
{"427", "Body", "stateSaved := val"},
{"429", "Body", "(  dcl changedMod_s: set of ModuleName := {};
   for all un in set un_s do
      def unm = rep!GetUnitElem (un) in
         def changed = unm!Disable () in
            if changed
            then changedMod_s := changedMod_s union {un}
            else skip;
   return changedMod_s
)"},
{"432", "Body", "(  dcl unit: @VDMUnitElem;
   def modules = rep!Modules () in
      if un in set modules
      then unit := rep!GetUnitElem (un)
      else (  unit := VDMUnitElem!new;
              rep!UnitMerge ({un |-> unit})
           );
   return unit
)"},
{"436", "Body", "return <FLAT>"},
{"437", "Body", "(  dcl changedModStat: set of ModuleName := {};
   stateSaved := false;
   def files = repdb!Files () in
      let suc = if spec = []
          then <ERROR>
          else <OK>,
          fileexist = nm in set files in
         (  dcl fileran: FileInfo;
            if not fileexist
            then repdb!AddFile (nm)
            else skip;
            repdb!StoreState ();
            fileran := repdb!GetFileElem (nm);
            def mk_(old_s, stat, file_id) = fileran in
               def mk_(disable, changedStatus) = stat!SetStatus (<SYNTAXCHECK>, suc) in
                  (  if is_FlatSpec(spec)
                     then repdb!FileOverride ({nm |-> mk_({spec.nm}, stat, file_id)})
                     else skip;
                     if disable
                     then changedModStat := self!DisableUnits (repdb, old_s)
                     else changedModStat := self!EnableFlat (rep, repdb, spec);
                     repdb!GenCallBack (changedModStat);
                     if changedStatus
                     then repdb!GetMediator ()CallBack (mk_ChangedFileStatus(nm))
                     else skip
                  )
         )
)"},
{"442", "Body", "let mk_FlatSpec(un, ast) = sp in
   (  dcl unit: @VDMUnitElem := self!UpdateUnit (repdb, un);
      def changedSet = unit!Set (ast);
          mk_(-, mk_FileStat(sc, -)) = rep!GetStatus ()Status (un) in
         if sc = <OK>
         then def changedEnab = unit!Enable () in
                 return if changedSet or changedEnab
                 then {un}
                 else {}
         else return {}
   )"},
{"447", "Body", "return <STRUCTURED>"},
{"448", "Body", "(  dcl changedModStat: set of ModuleName := {};
   stateSaved := false;
   def files = repdb!Files () in
      let suc = if spec = []
          then <ERROR>
          else <OK>,
          fileexist = nm in set files in
         (  dcl fileran: FileInfo;
            if not fileexist
            then repdb!AddFile (nm)
            else skip;
            repdb!StoreState ();
            fileran := repdb!GetFileElem (nm);
            def mk_(old_s, stat, file_id) = fileran in
               def mk_(disable, changedStatus) = stat!SetStatus (<SYNTAXCHECK>, suc) in
                  (  let ast_m: map ModuleName to AstVal = {mnm |-> ast | mk_Module(mnm, ast) in set elems spec & true} in
                        let new_s = dom ast_m in
                           (  if disable
                              then changedModStat := self!DisableUnits (repdb, old_s)
                              else (  def modules = repdb!Modules () in
                                         let multdefs = (new_s\\old_s) inter modules in
                                            if multdefs <> {}
                                            then self!MultDefMod (repdb, multdefs)
                                            else skip;
                                      changedModStat := self!EnableUnits (repdb, ast_m);
                                      repdb!UnitDomResBy (old_s\\new_s);
                                      repdb!FileOverride ({nm |-> mk_(new_s, stat, file_id)})
                                   );
                              rep!GetDependency ()UpdateGraph (spec);
                              def subc = rep!GetDependency ()GetAllSubClasses (new_s);
                                  usedby = rep!GetDependency ()GetAllUsedBy (new_s) in
                                 def changedDepUnits = self!DependantUnits (repdb, (subc union usedby)\\new_s) in
                                    changedModStat := changedModStat union changedDepUnits
                           );
                     repdb!GenCallBack (changedModStat);
                     if changedStatus
                     then repdb!GetMediator ()CallBack (mk_ChangedFileStatus(nm))
                     else skip
                  )
         )
)"},
{"453", "Body", "(  dcl changedMod_s: set of ModuleName := {};
   for all un in set dom ast_m do
      (  dcl unit: @VDMUnitElem := self!UpdateUnit (repdb, un);
         def changeSet = unit!Set (ast_m (un));
             changeEnab = unit!Enable () in
            if changeSet or changeEnab
            then changedMod_s := changedMod_s union {un}
            else skip
      );
   return changedMod_s
)"},
{"457", "Body", "for all md in set md_s do
   def fnm_s = repdb!FileOfModule (md) in
      (  let fnm = cases fnm_s:
                {nm} -> \"in file \" ^ nm.nm,
                others -> \"(no file information)\"
             end in
            repdb!GetMediator ()Log (\"Module \" ^ md.nm ^ \" \" ^ fnm ^ \" overwritten\");
         for all nm in set fnm_s do
            def mk_(mod_s, stat, id) = repdb!GetFileElem (nm) in
               repdb!FileOverride ({nm |-> mk_(mod_s\\{md}, stat, id)})
      )"},
{"460", "Body", "(  dcl changed: set of ModuleName := {};
   for all cl in set cl_s do
      def unit = repdb!GetUnitElem (cl) in
         def statusChanged = unit!SetStatus (<TYPECHECK>, <NONE>) in
            if statusChanged
            then changed := changed union {cl}
            else skip;
   return changed
)"},
{"474", "Body", "(  rep := r;
   repdb := db;
   mediator := m;
   dep := d
)"},
{"479", "Body", "return projectname"},
{"480", "Body", "def ok = self!SaveObjState (newname) in
   (  if ok
      then projectname := newname
      else skip;
      return ok
   )"},
{"482", "Body", "def close_ok = self!Close () in
   (  if not close_ok
      then return false
      else skip;
      def open_ok = self!LoadObjState (pnm) in
         (  if open_ok
            then (  projectname := pnm;
                    mediator!GetBaseTools ()UpdateToolbox ()
                 )
            else skip;
            return open_ok
         )
   )"},
{"484", "Body", "def ok = self!Close () in
   (  if ok
      then (  projectname := pnm;
              mediator!GetBaseTools ()UpdateToolbox ()
           )
      else skip;
      return ok
   )"},
{"486", "Body", "def ok = self!Close () in
   (  if ok
      then (  projectname := nil;
              mediator!GetBaseTools ()UpdateToolbox ()
           )
      else skip;
      return ok
   )"},
{"487", "Body", "if projectname = nil
then return true
else def ok = self!SaveObjState (projectname) in
        (  if ok
           then (  rep!ClearAll ();
                   projectname := nil
                )
           else skip;
           return ok
        )"},
{"488", "Body", "(  dcl store: @StateStore := StateStore!new;
   dcl ok: boolean;
   ok := store!Open (file, <WRITE>);
   if not ok
   then return false
   else skip;
   def modules = repdb!Modules () in
      (  def ok' = store!WriteVal (card modules) in
            ok := ok and ok';
         for all modnm in set modules do
            (  def ok' = store!WriteName (modnm) in
                  ok := ok and ok';
               def unit = repdb!GetUnitElem (modnm) in
                  def ok' = unit!Save (store) in
                     ok := ok and ok'
            )
      );
   def files = repdb!Files () in
      (  def ok' = store!WriteVal (card files) in
            ok := ok and ok';
         for all fnm in set files do
            (  def ok' = store!WriteName (fnm) in
                  ok := ok and ok';
               def mk_(mod_s, status, fileid) = repdb!GetFileElem (fnm) in
                  def ok' = store!WriteNames (mod_s);
                      ok'' = status!Save (store);
                      ok''' = store!WriteVal (fileid) in
                     ok := ok and ok' and ok'' and ok'''
            )
      );
   def sestype: SessionType = rep!SesType () in
      def ok' = store!WriteSession (sestype) in
         ok := ok and ok';
   def ok' = dep!Save (store) in
      ok := ok and ok';
   store!Close ();
   rep!SetSavedState (ok);
   return ok
)"},
{"490", "Body", "(  dcl store: @StateStore := StateStore!new;
   dcl ok: boolean;
   ok := store!Open (file, <READ>);
   if not ok
   then return false
   else skip;
   def size = store!ReadVal () in
      if size <> nil
      then for i = 1 to size by 1 do
              def nm = store!ReadName ();
                  unit = VDMUnitElem!new;
                  ok' = unit!Load (store) in
                 def ok'' = nm <> nil and ok' in
                    if ok''
                    then repdb!UnitMerge ({nm |-> unit})
                    else ok := false
      else ok := false;
   def size = store!ReadVal () in
      if is_nat(size)
      then for i = 1 to size by 1 do
              def nm = store!ReadName () in
                 (  def mod_s = store!ReadNames ();
                        status = FileStatus!new;
                        ok' = status!Load (store);
                        fileid = store!ReadVal () in
                       def ok'' = nm <> nil and mod_s <> nil and ok' and is_nat(fileid) in
                          if ok''
                          then repdb!FileMerge ({nm |-> mk_(mod_s, status, fileid)})
                          else ok := false
                 )
      else ok := false;
   def session' = store!ReadSession () in
      if session' <> nil
      then cases session':
              <NONE> -> def ns = NoneSes!new in
                 rep!SetSession (ns),
              <FLAT> -> def ns = FlatSes!new in
                 rep!SetSession (ns),
              <STRUCTURED> -> def ns = StructSes!new in
                 rep!SetSession (ns)
           end
      else ok := false;
   def ok' = dep!Load (store) in
      ok := ok and ok';
   store!Close ();
   rep!SetSavedState (ok);
   return ok
)"},
{"499", "Body", "(  rep := r;
   repdb := db;
   mediator := m
)"},
{"503", "Body", "(  dcl nm': ModuleName;
   def nameDef = self!nameIsDefined (nm) in
      if is_FileName(nm) and nameDef
      then def felem = repdb!GetFileElem (nm) in
              let mk_(-, stt, -) = felem in
                 stt!Allowed (kind)
      elseif is_ModuleName(nm) and nameDef
          then def unit = repdb!GetUnitElem (nm) in
                  unit!Allowed (kind)
      else return false
)"},
{"506", "Body", "def filedom = repdb!Files ();
    unitdom = repdb!Modules () in
   let errmsg = \" not defined in repository\",
       isFile = nm in set filedom,
       isMod = nm in set unitdom in
      (  cases true:
            is_FileName(nm) -> if not isFile
            then mediator!Log (\"File \" ^ nm.nm ^ errmsg)
            else skip,
            is_ModuleName(nm) -> if not isMod
            then mediator!Log (\"Module \" ^ nm.nm ^ errmsg)
            else skip,
            others -> mediator!Log (\"Name not FileName or ModuleName\")
         end;
         return isFile or isMod
      )"},
{"508", "Body", "(  dcl sc_s: set of Status := {};
   dcl pp_s: set of Status := {};
   def nameDef = self!nameIsDefined (nm) in
      if is_ModuleName(nm) and nameDef
      then def fnm_s: set of FileName = repdb!FileOfModule (nm);
               file_m = repdb!GetFileState ();
               unit: @VDMUnitElem = repdb!GetUnitElem (nm) in
              def filest_s = {let mk_(-, ref, -) = file_m (fl) in
                     ref | fl in set fnm_s & true};
                  us: UnitStat = unit!GetStatus () in
                 (  for all fs in set filest_s do
                       def mk_FileStat(sc, pp) = fs!GetStatus () in
                          (  sc_s := sc_s union {sc};
                             pp_s := pp_s union {pp}
                          );
                    let sum_sc = StatusPrio (sc_s) in
                       let sum_pp = if sum_sc = <OK>
                           then StatusPrio (pp_s)
                           else <NONE> in
                          return mk_(us, mk_FileStat(sum_sc, sum_pp))
                 )
      elseif is_FileName(nm) and nameDef
          then def mk_(-, fst, -) = repdb!GetFileElem (nm) in
                  def fs: FileStat = fst!GetStatus () in
                     return mk_(nil, fs)
      else return mk_(nil, mk_FileStat(<ERROR>, <ERROR>))
)"},
{"510", "Body", "if <NONE> in set st_s
then <NONE>
else if <ERROR> in set st_s
     then <ERROR>
     else <OK>"},
{"520", "Body", "mediator := m"},
{"522", "Body", "(  mediator!CallBack (mk_RemoveFiles(dom file_m));
   mediator!CallBack (mk_RemoveModules(dom unit_m));
   unit_m := {|->};
   file_m := {|->};
   storeState := mk_({|->}, {|->})
)"},
{"523", "Body", "if nm in set dom file_m
then let mk_(-, -, fileid) = file_m (nm) in
        return fileid
else return 0"},
{"525", "Body", "(  for all fnm in set dom file_m do
      cases file_m (fnm):
         mk_(-, -, fileid) -> return fnm,
         others -> skip
      end;
   return nil
)"},
{"527", "Body", "(  dcl asts: seq of AstVal := [];
   for all un in set rng unit_m do
      def ena = un!IsEnabled () in
         if ena
         then def unAst = un!Get () in
                 asts := asts ^ [unAst]
         else skip;
   return asts
)"},
{"528", "Precondition", "pre nm in set dom unit_m"},
{"528", "Body", "def nameDef = status!nameIsDefined (nm) in
   if nameDef
   then let unit: @VDMUnitElem = unit_m (nm) in
           unit!Get ()
   else return nil"},
{"531", "Precondition", "pre card dom unit_m = 1"},
{"531", "Body", "let {defmodname} = dom unit_m,
    {defmodunit} = rng unit_m in
   def ast = defmodunit!Get () in
      return mk_FlatSpec(defmodname, ast)"},
{"532", "Body", "if not file in set dom file_m
then def fstat: @FileStatus = FileStatus!new in
        (  dcl fileid: nat1 := 1;
           let fileid_s = {id | mk_(-, -, id) in set rng file_m & true} in
              while fileid in set fileid_s do
                 fileid := fileid+1;
           file_m := file_m munion {file |-> mk_({}, fstat, fileid)};
           mediator!CallBack (mk_AddFiles({file}))
        )
else skip"},
{"534", "Body", "(  if file in set dom file_m
   then let mk_(unitnm_s, -, -) = file_m (file) in
           (  file_m := {file} :> file_m;
              if not (isflatses and card dom file_m > 0)
              then unit_m := unitnm_s :> unit_m
              else skip;
              mediator!CallBack (mk_RemoveFiles({file}));
              mediator!CallBack (mk_RemoveModules(unitnm_s))
           )
   else skip;
   return dom file_m = {}
)"},
{"537", "Body", "return dom unit_m"},
{"538", "Body", "return dom file_m"},
{"539", "Body", "let mk_(mod_s, -, -) = file_m (file) in
   return mod_s"},
{"541", "Body", "(  dcl file_s: set of FileName := {};
   for all fnm in set dom file_m do
      let mk_(mod_s, -, -) = file_m (fnm) in
         if mnm in set mod_s
         then file_s := file_s union {fnm}
         else skip;
   return file_s
)"},
{"543", "Body", "storeState := mk_(unit_m, file_m)"},
{"544", "Body", "(  def mk_(oldUnit_m, oldFile_m) = storeState in
      let domOldUnit = dom oldUnit_m,
          domOldFile = dom oldFile_m,
          domUnit = dom unit_m,
          domFile = dom file_m in
         let eqUnit = domOldUnit = domUnit,
             eqFile = domOldFile = domFile in
            if not (eqUnit and eqFile)
            then if eqFile
                 then def newMod = domUnit\\domOldUnit;
                          delMod = domOldUnit\\domUnit in
                         (  if newMod <> {}
                            then mediator!CallBack (mk_AddModules(newMod))
                            else skip;
                            if delMod <> {}
                            then mediator!CallBack (mk_RemoveModules(delMod))
                            else skip
                         )
                 else if eqUnit
                      then def newFile = domFile\\domOldFile;
                               delFile = domOldFile\\domFile in
                              (  if newFile <> {}
                                 then mediator!CallBack (mk_AddFiles(newFile))
                                 else skip;
                                 if delFile <> {}
                                 then mediator!CallBack (mk_RemoveFiles(delFile))
                                 else skip
                              )
                      else skip
            else skip;
   if chModSt <> {}
   then mediator!CallBack (mk_ChangedModuleStatus(chModSt))
   else skip
)"},
{"546", "Body", "unit_m := unit_m munion el"},
{"548", "Body", "unit_m := (els) :> unit_m"},
{"550", "Body", "file_m := file_m munion el"},
{"552", "Body", "file_m := file_m ++ el"},
{"554", "Body", "return file_m"},
{"555", "Body", "return unit_m"},
{"556", "Body", "file_m := fs"},
{"558", "Body", "unit_m := us"},
{"560", "Body", "return dom file_m"},
{"561", "Body", "return dom unit_m"},
{"562", "Body", "return file_m (fn)"},
{"565", "Body", "return unit_m (mn)"},
{"567", "Body", "return mediator"},
{"571", "Return-value", "ok"},
{"574", "Return-value", "ok"},
{"577", "Return-value", "ok"},
{"579", "Return-value", "ok"},
{"585", "Return-value", "ok"},
{"636", "Body", "err!ShowMsg ()"},
{"646", "Body", "mediator := m"},
{"657", "Body", "state := instate"},
{"659", "Body", "state!ChangeState (self)"},
{"660", "Body", "state := newstate"},
{"666", "Body", "(  msgs := [];
   msgPtr := 0;
   msgStatus := mk_(0, 0);
   self!EventClearAll ()
)"},
{"667", "Body", "skip"},
{"668", "Body", "def mk_(noErr, noWrn) = msgStatus in
   (  msgs := msgs ^ [ms];
      msgPtr := msgPtr+1;
      if is_ErrMsg(ms)
      then msgStatus := mk_(noErr+1, noWrn)
      elseif is_WarnMsg(ms)
          then msgStatus := mk_(noErr, noWrn+1)
      else skip;
      state!AddMsg (self);
      self!EventAddMsg (msgPtr, ms)
   )"},
{"671", "Body", "(  if msgPtr > 0
   then msgPtr := 1
   else skip;
   state!AllDone (self);
   self!EventAllDone ()
)"},
{"672", "Body", "def mk_(noErr, noWrn) = msgStatus in
   (  self!MakeStatus (noErr, noWrn);
      msgStatus := mk_(0, 0)
   )"},
{"675", "Body", "let step = if dir = <FORW>
    then 1
    else -1,
    lenMsgs = len msgs in
   while def ms = msgs (msgPtr) in
      is_InfoMsg(ms) do
      def nextMsgPtr = msgPtr+step in
         if nextMsgPtr <= lenMsgs or nextMsgPtr >= 1
         then msgPtr := nextMsgPtr
         else skip"},
{"678", "Body", "if msgPtr < len msgs
then (  msgPtr := msgPtr+1;
        self!SkipInfoMsg (<FORW>);
        self!ShowMsg ();
        self!EventNext ()
     )
else skip"},
{"679", "Body", "if msgPtr > 1
then (  msgPtr := msgPtr-1;
        self!SkipInfoMsg (<BACKW>);
        self!ShowMsg ();
        self!EventPrev ()
     )
else skip"},
{"680", "Body", "if len msgs > 0
then (  msgPtr := 1;
        self!SkipInfoMsg (<FORW>);
        self!ShowMsg ();
        self!EventFirst ()
     )
else skip"},
{"681", "Body", "if len msgs > 0
then (  msgPtr := len msgs;
        self!SkipInfoMsg (<BACKW>);
        self!ShowMsg ();
        self!EventLast ()
     )
else skip"},
{"682", "Body", "skip"},
{"683", "Body", "skip"},
{"684", "Body", "skip"},
{"687", "Body", "skip"},
{"688", "Body", "skip"},
{"689", "Body", "skip"},
{"690", "Body", "skip"},
{"692", "Body", "skip"},
{"694", "Body", "err!SetNextState (estate)"},
{"697", "Body", "skip"},
{"699", "Body", "skip"},
{"704", "Body", "return status"},
{"705", "Body", "def oldstat = status in
   (  cases action:
         <EDIT> -> (  status := mk_FileStat(<NONE>, <NONE>);
            let changedStatus = oldstat <> status in
               return mk_(true, changedStatus)
         ),
         <SYNTAXCHECK> -> (  status := mk_FileStat(tp, <NONE>);
            let changedStatus = oldstat <> status in
               return mk_((tp <> <OK>), changedStatus)
         ),
         <PP> -> (  status := mk_FileStat(<OK>, tp);
            let changedStatus = oldstat <> status in
               return mk_(false, changedStatus)
         )
      end;
      return mk_(false, false)
   )"},
{"710", "Body", "(  cases kind:
      <EDIT>, <SYNTAXCHECK> -> return true,
      <PP> -> return status.syntax = <OK>,
      others -> return false
   end;
   return false
)"},
{"712", "Body", "def ok1 = store!WriteStatus (status.syntax);
    ok2 = store!WriteStatus (status.pp) in
   return ok1 and ok2"},
{"714", "Body", "def syntax = store!ReadStatus ();
    pp = store!ReadStatus () in
   if syntax <> nil and pp <> nil
   then (  status := mk_FileStat(syntax, pp);
           return true
        )
   else (  status := mk_FileStat(<NONE>, <NONE>);
           return false
        )"}
}
END
