/*
$Id: BL_NewAccountT.vpp,v 1.1 2005/11/25 07:05:37 vdmtools Exp $
テストグループ
	普通預金口座開設のテスト
関連 UC
	なし
作成者
	佐原伸
*/
class  『普通預金口座開設』T is subclass of TestDriver
functions
public tests : () -> seq of TestCase
tests () == 
	[
	new  『普通預金口座開設』T01(),
	new  『普通預金口座開設』T02(),
	new  『普通預金口座開設』T03(),
	new  『普通預金口座開設』T04()
	];
end 『普通預金口座開設』T
-------------------------------------------------------------
/*
シナリオID
	普通預金口座開設。
内容
	普通預金口座開設成功。
*/
class 『普通預金口座開設』T01 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	暦 = new JapaneseCalendar(),
		-- - = new Time(暦, 2003, 4, 11, 18, 5, 5, 1),
		--顧客準備
		ある顧客帳簿 = new 『顧客帳簿』(new Gofo_DB()),
		ある顧客ID = "007",
		- = ある顧客帳簿.create(ある顧客ID, nil, {}),
		--入出力記録準備
		ある入出金記録帳簿 =
			new 『入出金記録帳簿』(new Gofo_DB()),
		--普通預金口座開設準備
		ある伝票ID = "00000001",
		ある発行時刻 = new Time(暦, 2003, 4, 11, 17, 40, 0,0),
		ある担当営業店ID = "001",
		ある登録パスワード = "cryfree",
		ある普通預金ID = "12340001",
		ある普通預金口座開設 = new  『普通預金口座開設』(),
		ある伝票 = new 『普通預金口座開設伝票』(
			ある伝票ID, ある発行時刻, ある顧客ID, ある担当営業店ID, ある登録パスワード, ある普通預金ID),
		ある普通預金口座開設カートン = new 『普通預金口座開設_Carton』(),
		ある普通預金口座帳簿 = ある普通預金口座開設カートン.book()
		in
	(
	dcl 返値 : GofoBizLogicReturn := new GofoBizLogicReturn();
	ある普通預金口座開設カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある普通預金口座開設カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある普通預金口座開設カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	返値 := ある普通預金口座開設.check(ある伝票, ある普通預金口座開設カートン);
	if 返値.getExceptionList() = [] then
		返値 := ある普通預金口座開設.apply(ある伝票, ある普通預金口座開設カートン);
	
	let	ある普通預金口座Entry = 
			ある普通預金口座開設カートン.環境を得る("普通預金口座帳簿").findByKeyValues("12340001")
	in
	return
		let	ある明細 = ある普通預金口座Entry.明細記録を得る()	
		in
		ある明細.記録時刻 = ある発行時刻 and
		ある明細.担当営業店ID = ある担当営業店ID and
		ある明細.登録パスワード = ある登録パスワード and
		ある明細.キー = ある普通預金ID  and
		返値.getExceptionList() = []
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "『普通預金口座開設』T01:\t普通預金口座開設成功。";
protected 後始末する: () ==> ()
後始末する() == return;
end 『普通預金口座開設』T01
-------------------------------------------------------------
/*
シナリオID
	普通預金口座開設。
内容
	伝票項目エラー。
*/
class 『普通預金口座開設』T02 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	暦 = new JapaneseCalendar(),
		-- - = new Time(暦, 2003, 4, 11, 18, 5, 5, 1),
		--顧客準備
		ある顧客帳簿 = new 『顧客帳簿』(new Gofo_DB()),
		ある顧客ID = "007",
		- = ある顧客帳簿.create(ある顧客ID, nil, {}),
		--入出力記録準備
		ある入出金記録帳簿 =
			new 『入出金記録帳簿』(new Gofo_DB()),
		--普通預金口座開設準備
		ある伝票ID = "001",
		ある発行時刻 = new Time(暦, 2003, 4, 11, 17, 40, 0,0),
		ある顧客ID2 = "123456789",
		ある担当営業店ID = "01",
		ある登録パスワード = "abcdefghi",
		ある普通預金ID = "123456789",
		ある普通預金口座開設 = new  『普通預金口座開設』(),
		ある伝票 = new 『普通預金口座開設伝票』(
			ある伝票ID, ある発行時刻, ある顧客ID2, ある担当営業店ID, ある登録パスワード, ある普通預金ID),
		ある普通預金口座開設カートン = new 『普通預金口座開設_Carton』(),
		ある普通預金口座帳簿 = ある普通預金口座開設カートン.book()
		in
	(
	dcl 返値 : GofoBizLogicReturn := new GofoBizLogicReturn();
	ある普通預金口座開設カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある普通預金口座開設カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある普通預金口座開設カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	返値 := ある普通預金口座開設.check(ある伝票, ある普通預金口座開設カートン);
	return
		返値.getExceptionList()(1).getMessage() = "最小桁数より小さい" and		--伝票ID
		返値.getExceptionList()(2).getMessage() = "最大桁数より大きい" and		--顧客ID
		返値.getExceptionList()(3).getMessage() = "最小桁数より小さい" and		--担当営業店ID
		返値.getExceptionList()(4).getMessage() = "最大桁数より大きい" and		--登録パスワード
		返値.getExceptionList()(4).getMessage() = "最大桁数より大きい"		--普通預金ID
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "『普通預金口座開設』T02:\t伝票項目エラー。";
protected 後始末する: () ==> ()
後始末する() == return;
end 『普通預金口座開設』T02
-------------------------------------------------------------
/*
シナリオID
	普通預金口座開設。
内容
	マスターチェックエラー。
*/
class 『普通預金口座開設』T03 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	暦 = new JapaneseCalendar(),
		-- - = new Time(暦, 2003, 4, 11, 18, 5, 5, 1),
		--顧客準備
		ある顧客帳簿 = new 『顧客帳簿』(new Gofo_DB()),
		ある顧客ID = "007",
		- = ある顧客帳簿.create(ある顧客ID, nil, {}),
		--入出力記録準備
		ある入出金記録帳簿 =
			new 『入出金記録帳簿』(new Gofo_DB()),
		--普通預金口座開設準備
		ある伝票ID = "00001",
		ある発行時刻 = new Time(暦, 2003, 4, 11, 17, 40, 0,0),
		ある顧客ID2 = "12345678",
		ある担当営業店ID = "001",
		ある登録パスワード = "abcdefgh",
		ある普通預金ID = "12345678",
		ある普通預金口座開設 = new  『普通預金口座開設』(),
		ある伝票 = new 『普通預金口座開設伝票』(
			ある伝票ID, ある発行時刻, ある顧客ID2, ある担当営業店ID, ある登録パスワード, ある普通預金ID),
		ある普通預金口座開設カートン = new 『普通預金口座開設_Carton』(),
		ある普通預金口座帳簿 = ある普通預金口座開設カートン.book()
		in
	(
	dcl 返値 : GofoBizLogicReturn := new GofoBizLogicReturn();
	ある普通預金口座開設カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある普通預金口座開設カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある普通預金口座開設カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	返値 := ある普通預金口座開設.check(ある伝票, ある普通預金口座開設カートン);
	return
		返値.getExceptionList()(1).getMessage() = "該当顧客が存在しない。" 
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "『普通預金口座開設』T03:\tマスターチェックエラー(該当顧客が存在しない)。";
protected 後始末する: () ==> ()
後始末する() == return;
end 『普通預金口座開設』T03
-------------------------------------------------------------
/*
シナリオID
	普通預金口座開設。
内容
	普通預金口座開設成功。
*/
class 『普通預金口座開設』T04 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	暦 = new JapaneseCalendar(),
		- = new Time(暦, 2003, 4, 11, 18, 5, 5, 1),
		--顧客準備
		ある顧客帳簿 = new 『顧客帳簿』(new Gofo_DB()),
		ある顧客ID = "007",
		- = ある顧客帳簿.create(ある顧客ID, nil, {}),
		--入出力記録準備
		ある入出金記録帳簿 =
			new 『入出金記録帳簿』(new Gofo_DB()),
		--普通預金口座開設準備
		ある伝票ID = "00000001",
		ある発行時刻 = new Time(暦, 2003, 4, 11, 17, 40, 0,0),
		ある担当営業店ID = "001",
		ある登録パスワード = "cryfreed",
		ある普通預金ID = "12340001",
		ある普通預金口座開設 = new  『普通預金口座開設』(),
		ある伝票 = new 『普通預金口座開設伝票』(
			ある伝票ID, ある発行時刻, ある顧客ID, ある担当営業店ID, ある登録パスワード, ある普通預金ID),
		ある普通預金口座開設カートン = new 『普通預金口座開設_Carton』(),
		ある普通預金口座帳簿 = ある普通預金口座開設カートン.book()
		in
	(
	dcl 返値 : GofoBizLogicReturn := new GofoBizLogicReturn();

	ある普通預金口座開設カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある普通預金口座開設カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある普通預金口座開設カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	返値 := ある普通預金口座開設.check(ある伝票, ある普通預金口座開設カートン);
	if 返値.getExceptionList() = [] then
		--重複エラーを発生するため、一旦口座を開設する。
		返値 := ある普通預金口座開設.apply(ある伝票, ある普通預金口座開設カートン)
	else
		exit("普通預金口座が正しく開設されない。");
	
	if 返値.getExceptionList() = [] then
		返値 := ある普通預金口座開設.check(ある伝票, ある普通預金口座開設カートン)
	else
		exit("普通預金口座のcheckが一度うまくいっているのに、エラーが発生した。");

	return
		let	例外列 = 返値.getExceptionList()
		in
		len 例外列 = 1 and
		例外列(1).getMessage() = "普通預金口座がすでに存在する。" 	
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "『普通預金口座開設』T04:\tマスターチェックエラー(普通預金口座がすでに存在する)。";
protected 後始末する: () ==> ()
後始末する() == return;
end 『普通預金口座開設』T04
-------------------------------------------------------------
