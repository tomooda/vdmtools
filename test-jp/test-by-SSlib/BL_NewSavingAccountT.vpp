/*
$Id: BL_NewSavingAccountT.vpp,v 1.1 2005/11/25 07:05:37 vdmtools Exp $
テストグループ
	普通預金口座開設のテスト
関連 UC
	なし
作成者
	佐原伸
*/
class  『定期預金設定』T is subclass of TestDriver
functions
public tests : () -> seq of TestCase
tests () == 
	[
	new  『定期預金設定』T01(),
	new  『定期預金設定』T02(),
	new  『定期預金設定』T03(),
	new  『定期預金設定』T04()
	];
end 『定期預金設定』T
-------------------------------------------------------------
/*
シナリオID
	定期預金設定。
内容
	定期預金設定成功。
*/
class 『定期預金設定』T01 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	暦 = new JapaneseCalendar(),
		--ある普通預金時刻 = new Time(暦, 2003, 4, 11, 18, 5, 5, 1),
		--顧客準備
		ある顧客帳簿 = new 『顧客帳簿』(new Gofo_DB()),
		ある顧客ID = "007",
		- = ある顧客帳簿.create(ある顧客ID, nil, {}),
		--入出金記録準備
		ある入出金記録帳簿 = new 『入出金記録帳簿』(new Gofo_DB()),
		ある入出金記録ID = "22000001",
		ある残高 = 2000000,
		--他行口座準備（テスト用）
		ある他行口座帳簿 = new 『他行口座帳簿』(new Gofo_DB()),
		ある他行口座ID = "1919",
		--普通預金口座開設準備
		ある普通預金口座開設伝票ID = "00000001",
		ある発行時刻 = new Time(暦, 2003, 4, 11, 17, 40, 0,0),
		ある担当営業店ID = "001",
		ある登録パスワード = "cryfree",
		ある普通預金ID = "12340001",
		ある普通預金口座開設 = new  『普通預金口座開設』(),
		ある普通預金口座開設伝票 = new 『普通預金口座開設伝票』(
			ある普通預金口座開設伝票ID, ある発行時刻, ある顧客ID, ある担当営業店ID, ある登録パスワード, ある普通預金ID),
		ある普通預金口座開設カートン = new 『普通預金口座開設_Carton』(),
		ある普通預金口座帳簿 = ある普通預金口座開設カートン.book(),
		--定期預金設定準備
		--ある定期預金時刻 = new Time(暦, 2003, 5, 11, 18, 5, 5, 1),
		ある定期預金設定伝票ID = "00000002",
		ある定期預金ID = "88880001",
		ある設定額 = 1000000,
		ある設定日 = 暦.整数三つ組から日付を得る(2003, 5, 1),
		ある日数 = 90,
		ある自動継続区分 = <自動継続>,
		ある定期預金設定 = new  『定期預金設定』(),
		ある定期預金設定伝票 = new 『定期預金設定伝票』(
			ある定期預金設定伝票ID, ある発行時刻, ある顧客ID, ある担当営業店ID, ある登録パスワード, 
			ある定期預金ID, ある普通預金ID, ある設定額, ある設定日, ある日数, ある自動継続区分),
		ある定期預金設定カートン = new 『定期預金設定_Carton』(),
		ある定期預金帳簿 = ある定期預金設定カートン.book()
		in
	(
	dcl 返値 : GofoBizLogicReturn := new GofoBizLogicReturn();
	--dcl ある定期預金設定帳簿列 : seq of 『帳簿』 ;
	dcl ある入出金記録 : GofoBook;
	dcl ある他行口座 : GofoBook;
	dcl ある普通預金口座 : GofoBook;
	--普通預金口座開設
	ある普通預金口座開設カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある普通預金口座開設カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある普通預金口座開設カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	返値 := ある普通預金口座開設.check(ある普通預金口座開設伝票, ある普通預金口座開設カートン);
	if 返値.getExceptionList() = [] then
		返値 := ある普通預金口座開設.apply(ある普通預金口座開設伝票, ある普通預金口座開設カートン)
	else
		exit(返値);
	ある普通預金口座 := ある普通預金口座帳簿.findByKeyValues(ある普通預金ID);
	--他行口座設定
	ある他行口座 := ある他行口座帳簿.create(ある他行口座ID, ある発行時刻, ある登録パスワード);
	--入出金記録帳簿へテスト用に入金を記録
	ある入出金記録 :=
		ある入出金記録帳簿.create(ある入出金記録ID, ある発行時刻, ある残高, ある他行口座, ある普通預金口座);
	--定期預金設定
	ある定期預金設定カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある定期預金設定カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある定期預金設定カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	ある定期預金設定カートン.環境を設定する({"定期預金帳簿" |-> ある定期預金帳簿});
	返値 := ある定期預金設定.check(ある定期預金設定伝票, ある定期預金設定カートン);
	if 返値.getExceptionList() = [] then
		返値 := ある定期預金設定.apply(ある定期預金設定伝票, ある定期預金設定カートン)
	else
		exit(返値);
	let	ある定期預金設定Entry = ある定期預金帳簿.findByKeyValues("88880001")
	in
	return
		let	ある明細 = ある定期預金設定Entry.明細記録を得る()	
		in
		ある明細.記録時刻 = ある発行時刻 and
		ある明細.顧客ID = ある顧客ID  and
		ある明細.担当営業店ID = ある担当営業店ID and
		ある明細.登録パスワード = ある登録パスワード and
		ある明細.キー = ある定期預金ID  and
		ある明細.普通預金ID = ある普通預金ID  and
		ある明細.設定額 = ある設定額 and
		ある明細.日数 = ある日数 and
		ある明細.自動継続区分 = ある自動継続区分 and
		返値.getExceptionList() = [] and
		ある入出金記録帳簿.口座残高(ある普通預金ID, ある発行時刻) = 1000000 and
		ある顧客帳簿.残高(ある普通預金口座帳簿, ある定期預金帳簿, ある入出金記録帳簿, ある顧客ID, ある発行時刻) = 2000000
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "『定期預金設定』T01:\t定期預金設定成功。";
protected 後始末する: () ==> ()
後始末する() == return;
end 『定期預金設定』T01
-------------------------------------------------------------
/*
シナリオID
	定期預金設定。
内容
	定期預金設定check。
	"該当顧客が存在しない。" and
	"振込可能でない。" and
	"最低設定額より少ない。"
*/
class 『定期預金設定』T02 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	暦 = new JapaneseCalendar(),
		--ある普通預金時刻 = new Time(暦, 2003, 4, 11, 18, 5, 5, 1),
		--顧客準備
		ある顧客帳簿 = new 『顧客帳簿』(new Gofo_DB()),
		ある顧客ID = "007",
		ある顧客 = ある顧客帳簿.create(ある顧客ID, nil, {}),
		--入出金記録準備
		ある入出金記録帳簿 = new 『入出金記録帳簿』(new Gofo_DB()),
		ある入出金記録ID = "22000001",
		ある残高 = 2000000,
		--他行口座準備（テスト用）
		ある他行口座帳簿 = new 『他行口座帳簿』(new Gofo_DB()),
		ある他行口座ID = "1919",
		--普通預金口座開設準備
		ある普通預金口座開設伝票ID = "00000001",
		ある発行時刻 = new Time(暦, 2003, 4, 11, 17, 40, 0,0),
		ある担当営業店ID = "001",
		ある登録パスワード = "cryfree",
		ある普通預金ID = "12340001",
		ある普通預金口座開設 = new  『普通預金口座開設』(),
		ある普通預金口座開設伝票 = new 『普通預金口座開設伝票』(
			ある普通預金口座開設伝票ID, ある発行時刻, ある顧客ID, ある担当営業店ID, ある登録パスワード, ある普通預金ID),
		ある普通預金口座開設カートン = new 『普通預金口座開設_Carton』(),
		ある普通預金口座帳簿 = ある普通預金口座開設カートン.book(),
		--定期預金設定準備
		--ある定期預金時刻 = new Time(暦, 2003, 5, 11, 18, 5, 5, 1),
		ある定期預金設定伝票ID = "00000002",
		ある定期預金ID = "88880001",
		ある入力パスワード = "cryBoosh",
		ある設定額 = 10000,
		ある設定日 = 暦.整数三つ組から日付を得る(2003, 5, 1),
		ある日数 = 90,
		ある自動継続区分 = <自動継続>,
		ある定期預金設定 = new  『定期預金設定』(),
		ある定期預金設定伝票 = new 『定期預金設定伝票』(
			ある定期預金設定伝票ID,  ある発行時刻, ある顧客ID, ある担当営業店ID, ある入力パスワード, 
			ある定期預金ID, ある普通預金ID, ある設定額, ある設定日, ある日数, ある自動継続区分),
		ある定期預金設定カートン = new 『定期預金設定_Carton』(),
		ある定期預金帳簿 = ある定期預金設定カートン.book()
		in
	(
	dcl 返値 : GofoBizLogicReturn := new GofoBizLogicReturn();
	--dcl ある定期預金設定帳簿列 : seq of 『帳簿』 ;
	dcl ある入出金記録 : GofoBook;
	dcl ある他行口座 : GofoBook;
	dcl ある普通預金口座 : GofoBook;
	--普通預金口座開設
	ある普通預金口座開設カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある普通預金口座開設カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある普通預金口座開設カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	返値 := ある普通預金口座開設.check(ある普通預金口座開設伝票, ある普通預金口座開設カートン);
	if 返値.getExceptionList() = [] then
		返値 := ある普通預金口座開設.apply(ある普通預金口座開設伝票, ある普通預金口座開設カートン)
	else
		exit(999);
	ある普通預金口座 := ある普通預金口座帳簿.findByKeyValues(ある普通預金ID);
	--他行口座設定
	ある他行口座 := ある他行口座帳簿.create(ある他行口座ID, ある発行時刻, ある登録パスワード);
	--入出金記録帳簿へテスト用に入金を記録
	ある入出金記録 :=
		ある入出金記録帳簿.create(ある入出金記録ID, ある発行時刻, ある残高, ある他行口座, ある普通預金口座);
	--定期預金設定
	ある定期預金設定カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある定期預金設定カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある定期預金設定カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	ある定期預金設定カートン.環境を設定する({"定期預金帳簿" |-> ある定期預金帳簿});
	ある顧客.delete();		--エラーを発生させるため、顧客を削除。
	返値 := ある定期預金設定.check(ある定期預金設定伝票, ある定期預金設定カートン);
	return
		返値.getExceptionList()(1).getMessage() = "該当顧客が存在しない。" and
		返値.getExceptionList()(2).getMessage() = "振込可能でない。" and	
		返値.getExceptionList()(3).getMessage() = "最低設定額より少ない。"	
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "『定期預金設定』T02:\t定期預金設定check。（該当顧客が存在しない。振込可能でない。最低設定額より少ない。）";
protected 後始末する: () ==> ()
後始末する() == return;
end 『定期預金設定』T02
-------------------------------------------------------------
/*
シナリオID
	定期預金設定。
内容
	定期預金設定check。
	普通預金口座が存在しない。
*/
class 『定期預金設定』T03 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	暦 = new JapaneseCalendar(),
		--ある普通預金時刻 = new Time(暦, 2003, 4, 11, 18, 5, 5, 1),
		--顧客準備
		ある顧客帳簿 = new 『顧客帳簿』(new Gofo_DB()),
		ある顧客ID = "007",
		- = ある顧客帳簿.create(ある顧客ID, nil, {}),
		--入出金記録準備
		ある入出金記録帳簿 = new 『入出金記録帳簿』(new Gofo_DB()),
		ある入出金記録ID = "22000001",
		ある残高 = 2000000,
		--他行口座準備（テスト用）
		ある他行口座帳簿 = new 『他行口座帳簿』(new Gofo_DB()),
		ある他行口座ID = "1919",
		--普通預金口座開設準備
		ある普通預金口座開設伝票ID = "00000001",
		ある発行時刻 = new Time(暦, 2003, 4, 11, 17, 40, 0,0),
		ある担当営業店ID = "001",
		ある登録パスワード = "cryfree",
		ある普通預金ID = "12340001",
		ある普通預金口座開設 = new  『普通預金口座開設』(),
		ある普通預金口座開設伝票 = new 『普通預金口座開設伝票』(
			ある普通預金口座開設伝票ID, ある発行時刻, ある顧客ID, ある担当営業店ID, ある登録パスワード, ある普通預金ID),
		ある普通預金口座開設カートン = new 『普通預金口座開設_Carton』(),
		ある普通預金口座帳簿 = ある普通預金口座開設カートン.book(),
		--定期預金設定準備
		--ある定期預金時刻 = new Time(暦, 2003, 5, 11, 18, 5, 5, 1),
		ある定期預金設定伝票ID = "00000002",
		ある定期預金ID = "88880001",
		ある入力パスワード = "cryfree",
		ある設定額 = 1000000,
		ある設定日 = 暦.整数三つ組から日付を得る(2003, 5, 1),
		ある日数 = 90,
		ある自動継続区分 = <自動継続>,
		ある定期預金設定 = new  『定期預金設定』(),
		ある定期預金設定伝票 = new 『定期預金設定伝票』(
			ある定期預金設定伝票ID, ある発行時刻, ある顧客ID, ある担当営業店ID, ある入力パスワード, 
			ある定期預金ID, ある普通預金ID, ある設定額, ある設定日, ある日数, ある自動継続区分),
		ある定期預金設定カートン = new 『定期預金設定_Carton』(),
		ある定期預金帳簿 = ある定期預金設定カートン.book()
		in
	(
	dcl 返値 : GofoBizLogicReturn := new GofoBizLogicReturn();
	--dcl ある定期預金設定帳簿列 : seq of 『帳簿』 ;
	dcl ある入出金記録 : GofoBook;
	dcl ある他行口座 : GofoBook;
	dcl ある普通預金口座 : GofoBook;
	--普通預金口座開設
	ある普通預金口座開設カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある普通預金口座開設カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある普通預金口座開設カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	返値 := ある普通預金口座開設.check(ある普通預金口座開設伝票, ある普通預金口座開設カートン);
	if 返値.getExceptionList() = [] then
		返値 := ある普通預金口座開設.apply(ある普通預金口座開設伝票, ある普通預金口座開設カートン)
	else
		exit(999);
	ある普通預金口座 := ある普通預金口座帳簿.findByKeyValues(ある普通預金ID);
	--他行口座設定
	ある他行口座 := ある他行口座帳簿.create(ある他行口座ID, ある発行時刻, ある登録パスワード);
	--入出金記録帳簿へテスト用に入金を記録
	ある入出金記録 :=
		ある入出金記録帳簿.create(ある入出金記録ID, ある発行時刻, ある残高, ある他行口座, ある普通預金口座);
	--定期預金設定
	ある定期預金設定カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある定期預金設定カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある定期預金設定カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	ある定期預金設定カートン.環境を設定する({"定期預金帳簿" |-> ある定期預金帳簿});
	ある普通預金口座.delete();		--エラーを発生させるため、普通預金口座を削除。
	返値 := ある定期預金設定.check(ある定期預金設定伝票, ある定期預金設定カートン);
	return
		返値.getExceptionList()(1).getMessage() = "普通預金口座が存在しない。"
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "『定期預金設定』T03:\t定期預金設定check。（普通預金口座が存在しない。）";
protected 後始末する: () ==> ()
後始末する() == return;
end 『定期預金設定』T03
-------------------------------------------------------------
/*
シナリオID
	定期預金設定。
内容
	定期預金設定check。
	項目チェック。
*/
class 『定期預金設定』T04 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	暦 = new JapaneseCalendar(),
		--ある普通預金時刻 = new Time(暦, 2003, 4, 11, 18, 5, 5, 1),
		--顧客準備
		ある顧客帳簿 = new 『顧客帳簿』(new Gofo_DB()),
		ある顧客ID = "007",
		- = ある顧客帳簿.create(ある顧客ID, nil, {}),
		--入出金記録準備
		ある入出金記録帳簿 = new 『入出金記録帳簿』(new Gofo_DB()),
		ある入出金記録ID = "22000001",
		ある残高 = 2000000,
		--他行口座準備（テスト用）
		ある他行口座帳簿 = new 『他行口座帳簿』(new Gofo_DB()),
		ある他行口座ID = "1919",
		--普通預金口座開設準備
		ある普通預金口座開設伝票ID = "00000001",
		ある発行時刻 = new Time(暦, 2003, 4, 11, 17, 40, 0,0),
		ある担当営業店ID = "001",
		ある登録パスワード = "cryfree",
		ある普通預金ID = "12340001",
		ある普通預金口座開設 = new  『普通預金口座開設』(),
		ある普通預金口座開設伝票 = new 『普通預金口座開設伝票』(
			ある普通預金口座開設伝票ID, ある発行時刻, ある顧客ID, ある担当営業店ID, ある登録パスワード, ある普通預金ID),
		ある普通預金口座開設カートン = new 『普通預金口座開設_Carton』(),
		ある普通預金口座帳簿 = ある普通預金口座開設カートン.book(),
		--定期預金設定準備
		--ある定期預金時刻 = new Time(暦, 2003, 5, 11, 18, 5, 5, 1),
		ある定期預金設定伝票ID = "12345678901",
		ある定期預金顧客ID = "",
		ある定期預金担当営業店ID = "12345",
		ある定期預金ID = "",
		ある入力パスワード = "12345",
		ある設定額 = 10 ** 15,
		ある設定日 = 暦.整数三つ組から日付を得る(2003, 5, 1),
		ある日数 = 10 ** 15,
		ある自動継続区分 = <変な自動継続区分>,
		/*
		<変な自動継続区分>が型定義されていないと、下記のような型チェックエラーが起こるが、インタープリターでそのままテストしてよい。
		C:/CVSServer/ShinProgram/Shin@VDM/pp_examples_for_Japanese/BankAccountForGofo/test/BL_NewSavingAccountT.vpp, l. 370, c. 70:
  Error[388] : No unique matching constructor could be found in this class or its super classes
		  */
		ある定期預金設定 = new  『定期預金設定』(),
		ある定期預金設定伝票 = new 『定期預金設定伝票』(
			ある定期預金設定伝票ID, ある発行時刻, ある定期預金顧客ID, ある定期預金担当営業店ID, ある入力パスワード, 
			ある定期預金ID, ある普通預金ID, ある設定額, ある設定日, ある日数, ある自動継続区分),
		ある定期預金設定カートン = new 『定期預金設定_Carton』(),
		ある定期預金帳簿 = ある定期預金設定カートン.book()
		in
	(
	dcl 返値 : GofoBizLogicReturn := new GofoBizLogicReturn();
	--dcl ある定期預金設定帳簿列 : seq of 『帳簿』 ;
	dcl ある入出金記録 : GofoBook;
	dcl ある他行口座 : GofoBook;
	dcl ある普通預金口座 : GofoBook;
	--普通預金口座開設
	ある普通預金口座開設カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある普通預金口座開設カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある普通預金口座開設カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	返値 := ある普通預金口座開設.check(ある普通預金口座開設伝票, ある普通預金口座開設カートン);
	if 返値.getExceptionList() = [] then
		返値 := ある普通預金口座開設.apply(ある普通預金口座開設伝票, ある普通預金口座開設カートン)
	else
		exit(返値);
	ある普通預金口座 := ある普通預金口座帳簿.findByKeyValues(ある普通預金ID);
	--他行口座設定
	ある他行口座 := ある他行口座帳簿.create(ある他行口座ID, ある発行時刻, ある登録パスワード);
	--入出金記録帳簿へテスト用に入金を記録
	ある入出金記録 :=
		ある入出金記録帳簿.create(ある入出金記録ID, ある発行時刻, ある残高, ある他行口座, ある普通預金口座);
	--定期預金設定
	ある定期預金設定カートン.環境を設定する({"普通預金口座帳簿" |-> ある普通預金口座帳簿});
	ある定期預金設定カートン.環境を設定する({"顧客帳簿" |-> ある顧客帳簿});
	ある定期預金設定カートン.環境を設定する({"入出金記録帳簿" |-> ある入出金記録帳簿});
	ある定期預金設定カートン.環境を設定する({"定期預金帳簿" |-> ある定期預金帳簿});
	返値 := ある定期預金設定.check(ある定期預金設定伝票, ある定期預金設定カートン);
	return
		返値.getExceptionList()(1).getMessage() = "最大桁数より大きい" and			--伝票ID
		返値.getExceptionList()(2).getMessage() = "最小桁数より小さい" and			--顧客ID
		返値.getExceptionList()(3).getMessage() = "最大桁数より大きい" and			--担当営業店ID
		返値.getExceptionList()(4).getMessage() = "最小桁数より小さい" and			--登録パスワード
		返値.getExceptionList()(5).getMessage() = "最小桁数より小さい" and			--定期預金ID
		返値.getExceptionList()(6).getMessage() = "最大値より大きい" and			--設定額
		返値.getExceptionList()(7).getMessage() = "最大値より大きい" and			--日数
		返値.getExceptionList()(8).getMessage() = "該当する区分値がありません"and 	--自動継続区分
		返値.getExceptionList()(9).getMessage() = "該当顧客が存在しない。" and 		--顧客IDの桁数が範囲外のため
		返値.getExceptionList()(10).getMessage() = "振込可能でない。" 			--登録パスワード合わないため
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "『定期預金設定』T04:\t定期預金設定check。（項目チェック）";
protected 後始末する: () ==> ()
後始末する() == return;
end 『定期預金設定』T04
