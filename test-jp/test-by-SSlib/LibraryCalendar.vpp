class LibraryCalendar is subclass of JapaneseCalendar -- 日付
/*
責任
	図書館システムの暦クラス。
概要
	国・図書館・休日ベース区分を考慮した暦処理のスタブである。
	土曜日や年末年始を休日として扱う。
*/

values
	Rcsid = "$Id: LibraryCalendar.vpp,v 1.1 2005/11/25 07:05:38 vdmtools Exp $";
	io = new IO();
	暦 = new LibraryCalendar();

instance variables

public 基準日という日 : [Date] := nil;	--初期値は単体テスト用
public 図書館基準日写像 : [map seq of char to Date] := { |-> };		--図書館コードから基準日への写像
public システムの時刻 : [Time] := nil;

operations
public 暦を得る :  () ==> Calendar
暦を得る() == return self;

functions
static public 限月が正当: seq of char -> bool
限月が正当(限月) ==
	暦.文字列から日付を得る(限月 ^ "01") <> false;

static public 権利行使日を得る :  seq of char -> Date
権利行使日を得る(限月) ==
	let	限月の月初日 = 暦.文字列から日付を得る(限月 ^ "01"),
		指定年 = 限月の月初日.年(),
		指定月 =限月の月初日.月()	in
	暦.第n指定曜日を得る(指定年,指定月,2,<金>).過去の平日を得る()
pre
	限月が正当(限月);

/*
信用取引の決済日（期日）を得る。
　弁済期限とは、信用建玉に対して当社がお客様に信用を供与する期限をいいます。弁済期限は、現在のところ6ヶ月のみを取扱っています。
弁済期限が6ヶ月であるということは、信用建玉の建日（信用建玉が約定した日）の6ヶ月目応答日が信用期日となり、この日を超えて建玉を保有することは法律で禁じられています。信用期日が休日の場合には、直近の前営業日が信用期日となります。
*/
static public 信用期日を得る : Date -> Date 
信用期日を得る(aDate) == 	
	let	暦 = new SBCalendar(),
		mk_(年, 月) = 暦.正則月を得る(aDate.年(), aDate.月()+6),
		月末日 = 暦.月末日を求める(年, 月) ,
		日 = aDate.日(),
		期日候補 = 
			if 月末日.日() < 日 then
				月末日
			else
				暦.整数三つ組から日付を得る(年, 月, 日)
	in
	期日候補.過去の平日を得る()	--前月の日付になることがある。
pre
	aDate.平日か？()
post	
	let	暦 = new SBCalendar(),
		mk_(年, 月) = 暦.正則月を得る(aDate.年(), aDate.月()+6),
		月末日 = 暦.月末日を求める(年, 月) ,
		日 = aDate.日(),
		期日候補 = 
			if 月末日.日() < 日 then
				月末日
			else
				暦.整数三つ組から日付を得る(年, 月, 日)
	in
	RESULT.＝(期日候補.過去の平日を得る()) and
	if forall day in set {1, ..., 期日候補.日()} & 
		暦.お休みか？(暦.整数三つ組から日付を得る(年, 月, day))
	then
		let	mk_(-, 前月) = 暦.正則月を得る(年, 月-1)
		in
		RESULT.月() = 前月
	else
		RESULT.月() = 月;

--日付が空？
static public 日付が空か？: [Date] -> bool
日付が空か？(日付) ==  日付 = nil; --or 日付 = 最大日付();

static public システム日付 : () -> Date
システム日付() == 暦.今日();

operations

/*
let c = new TR1Calendar(), d = c.休日列を得る(2001) in [d(i).日付文字列を得る() | i in set inds d] =
[
"20010101",  "20010102",  "20010103",  "20010106",  "20010108",  "20010113",  "20010120",  "20010127",  "20010203",  "20010210",  "20010211",  "20010212",  "20010217",  "20010224",  "20010303",  "20010310",  "20010317",  "20010320",  "20010324",  "20010331",  "20010407",  "20010414",  "20010421",  "20010428",  "20010429",  "20010430",  "20010503",  "20010504",  "20010505",  "20010512",  "20010519",  "20010526",  "20010602",  "20010609",  "20010616",  "20010623",  "20010630",  "20010707",  "20010714",  "20010720",  "20010721",  "20010728",  "20010804",  "20010811",  "20010818",  "20010825",  "20010901",  "20010908",  "20010915",  "20010922",  "20010922",  "20010929",  "20011006",  "20011008",  "20011013",  "20011020",  "20011027",  "20011103",  "20011110",  "20011117",  "20011123",  "20011124",  "20011201",  "20011208",  "20011215",  "20011222",  "20011223",  "20011224",  "20011229",  "20011230",  "20011231" ]
 */
public 休日集合を設定する: int ==> () 	--日曜日を含まないTR1の休日集合を得る。2000年以後の休日のみ考えている。
休日集合を設定する(年) ==
	let	日本の暦 = new JapaneseCalendar(),
		日本の休日集合 = 日本の暦.休日集合を得る(年),
		TR1の休日集合 = {
			日本の暦.整数三つ組から日付を得る(年,1,2), 
			日本の暦.整数三つ組から日付を得る(年,1,3), 
			日本の暦.整数三つ組から日付を得る(年,12,29), 
			日本の暦.整数三つ組から日付を得る(年,12,30), 
			日本の暦.整数三つ組から日付を得る(年,12,31)
		},
		土曜日集合 = 日本の暦.ある年の指定曜日集合を得る(年,<土>) 	in
	休日集合写像 := 休日集合写像 munion { 年 |-> 日本の休日集合 union TR1の休日集合 union 土曜日集合};

--基準日をファイルから読み込む
public 基準日を読み込む : seq of char ==> [Date]
基準日を読み込む(ファイル名) ==
	let	mk_(結果, mk_(y,m,d)) = io.freadval[int * int * int](ファイル名)
	in
	if 結果 then
		return 整数三つ組から日付を得る(y,m,d)
	else
		let	- = io.echo("Can't read BaseDay's data file.")
		in
		return nil;

--業務上の今日の日付を求めるスタブ関数。
public 基準日: () ==> Date
基準日() == 
	if 基準日という日 = nil then
		return 基準日を読み込む(homedir ^ "/temp/BaseDay.txt")
	else
		return 基準日という日;

--基準日を指定したファイルから読み込む。
public ファイルから読み込む基準日: seq of char ==> Date
ファイルから読み込む基準日(ファイル名) == 
	if 基準日という日 = nil then
		return 基準日を読み込む(ファイル名)	--単体テスト用
	else
		return 基準日という日;

public 基準日を設定する : Date ==> ()
基準日を設定する(日付) == 基準日という日 := 日付;

--図書館毎の基準日を求めるスタブ関数。
public 図書館基準日: seq of char ==> Date
図書館基準日(図書館コード) == 
	(
	if 図書館基準日写像 = nil then
		図書館基準日を設定する(図書館コード,基準日());	--単体テスト用
	return 図書館基準日写像(図書館コード)
	);

public 図書館基準日を設定する : seq of char * Date ==> ()
図書館基準日を設定する(図書館コード,日付) == 図書館基準日写像 := 図書館基準日写像 ++ { 図書館コード |-> 日付 };

public システム時刻を読み込む : () ==> [Time]
システム時刻を読み込む() ==
	let	mk_(結果, now) = io.freadval[Time](homedir ^ "/temp/SystemTime.txt")
	in
	if 結果 then
		return now
	else
		let	- = io.echo("Can't read System Time data file.")
		in
		return nil;

public システム時刻 : () ==> Time
システム時刻() == 
	if システムの時刻 = nil then
		システム時刻を読み込む()
	else
		return システムの時刻;

public システム時刻を設定する : Time ==> ()
システム時刻を設定する(時刻) ==  システムの時刻 := 時刻;

public LibraryCalendar : () ==> LibraryCalendar
LibraryCalendar() ==
	(
	グリニッジ標準時との差を設定する(日本標準時とグリニッジ標準時との差); 
	return self
	);
	
end LibraryCalendar