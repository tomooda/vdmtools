/*
$Header: /home/vdmtools/cvsroot/toolbox/examples-jp/SSlib/test/SBCalendarT.vpp,v 1.2 2006/01/10 10:45:02 vdmtools Exp $
テストグループ
	SBCalendarのテスト
関連 UC
	なし

*/
class SBCalendarT is subclass of TestDriver
functions
public tests : () -> seq of TestCase
tests () == 
	[
	new SBCalendarT06(),
	new SBCalendarT05(),
	new SBCalendarT04(),
	new SBCalendarT03(),
	new SBCalendarT02(),
	new SBCalendarT01()
	];
end SBCalendarT

/*
シナリオID
	SBCalendar単体の全機能テスト
内容
	最大日付、日付が空かの判定などをテストする。
*/
class SBCalendarT01 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	c = new SBCalendar()	in
	(
	c.基準日を設定する(c.整数三つ組から日付を得る(2001,9,12));
	c.システム時刻を設定する(new Time(c, 2003, 10, 23, 13, 12, 34, 567));
	return
		(
		--c.最大日付().＝(c.整数三つ組から日付を得る(9999,12,31)) and
		--c.最大日付().日付文字列を得る() = c.日付の最大値 and
		c.基準日().＝(c.整数三つ組から日付を得る(2001,9,12)) and
		c.日付が空か？(nil) = true and
		--c.日付が空か？(c.最大日付()) = true and
		c.日付が空か？(c.基準日()) = false and
		c.システム日付().＝(c.今日()) and
		c.システム時刻().＝(new Time(c, 2003, 10, 23, 13, 12, 34, 567))
		)
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "SBCalendarT01:\t最大日付、日付が空かの判定などをテストする。";
protected 後始末する: () ==> ()
後始末する() == return;
end SBCalendarT01

/*
シナリオID
	SBCalendar単体の全機能テスト。
親UseCase
	なし
内容
	休日群を得る。
*/
class SBCalendarT02 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	jc = new SBCalendar(),
		休日集合 = jc.休日集合を得る(2001),
		休日集合2006 = jc.休日集合を得る(2006),
		d0401 = jc.文字列から日付を得る("20010401"),
		d0408 = jc.文字列から日付を得る("20010408"),
		d0430 = jc.文字列から日付を得る("20010430"),
		整数三つ組休日集合 =  {jc.年月日の整数組を得る(休日) | 休日 in set 休日集合}	,
		整数三つ組休日集合2006 =  {jc.年月日の整数組を得る(休日) | 休日 in set 休日集合2006}	in
	return
		整数三つ組休日集合 = 
			{ mk_( 2001,1,1 ),
			  mk_( 2001,1,2 ),
			  mk_( 2001,1,3 ),
			  mk_( 2001,1,6 ),
			  mk_( 2001,1,8 ),
			  mk_( 2001,1,13 ),
			  mk_( 2001,1,20 ),
			  mk_( 2001,1,27 ),
			  mk_( 2001,2,3 ),
			  mk_( 2001,2,10 ),
			  mk_( 2001,2,11 ),
			  mk_( 2001,2,12 ),
			  mk_( 2001,2,17 ),
			  mk_( 2001,2,24 ),
			  mk_( 2001,3,3 ),
			  mk_( 2001,3,10 ),
			  mk_( 2001,3,17 ),
			  mk_( 2001,3,20 ),
			  mk_( 2001,3,24 ),
			  mk_( 2001,3,31 ),
			  mk_( 2001,4,7 ),
			  mk_( 2001,4,14 ),
			  mk_( 2001,4,21 ),
			  mk_( 2001,4,28 ),
			  mk_( 2001,4,29 ),
			  mk_( 2001,4,30 ),
			  mk_( 2001,5,3 ),
			  mk_( 2001,5,4 ),
			  mk_( 2001,5,5 ),
			  mk_( 2001,5,12 ),
			  mk_( 2001,5,19 ),
			  mk_( 2001,5,26 ),
			  mk_( 2001,6,2 ),
			  mk_( 2001,6,9 ),
			  mk_( 2001,6,16 ),
			  mk_( 2001,6,23 ),
			  mk_( 2001,6,30 ),
			  mk_( 2001,7,7 ),
			  mk_( 2001,7,14 ),
			  mk_( 2001,7,20 ),
			  mk_( 2001,7,21 ),
			  mk_( 2001,7,28 ),
			  mk_( 2001,8,4 ),
			  mk_( 2001,8,11 ),
			  mk_( 2001,8,18 ),
			  mk_( 2001,8,25 ),
			  mk_( 2001,9,1 ),
			  mk_( 2001,9,8 ),
			  mk_( 2001,9,15 ),
			  mk_( 2001,9,22 ),
			  mk_( 2001,9,23 ),
			  mk_( 2001,9,24 ),
			  mk_( 2001,9,29 ),
			  mk_( 2001,10,6 ),
			  mk_( 2001,10,8 ),
			  mk_( 2001,10,13 ),
			  mk_( 2001,10,20 ),
			  mk_( 2001,10,27 ),
			  mk_( 2001,11,3 ),
			  mk_( 2001,11,10 ),
			  mk_( 2001,11,17 ),
			  mk_( 2001,11,23 ),
			  mk_( 2001,11,24 ),
			  mk_( 2001,12,1 ),
			  mk_( 2001,12,8 ),
			  mk_( 2001,12,15 ),
			  mk_( 2001,12,22 ),
			  mk_( 2001,12,23 ),
			  mk_( 2001,12,24 ),
			  mk_( 2001,12,29 ),
			  mk_( 2001,12,30 ),
			 mk_( 2001,12,31 ) } and
  		整数三つ組休日集合2006 =
			{ mk_( 2006,1,1 ),
			  mk_( 2006,1,2 ),
			  mk_( 2006,1,3 ),
			  mk_( 2006,1,7 ),
			  mk_( 2006,1,9 ),
			  mk_( 2006,1,14 ),
			  mk_( 2006,1,21 ),
			  mk_( 2006,1,28 ),
			  mk_( 2006,2,4 ),
			  mk_( 2006,2,11 ),
			  mk_( 2006,2,18 ),
			  mk_( 2006,2,25 ),
			  mk_( 2006,3,4 ),
			  mk_( 2006,3,11 ),
			  mk_( 2006,3,18 ),
			  mk_( 2006,3,21 ),
			  mk_( 2006,3,25 ),
			  mk_( 2006,4,1 ),
			  mk_( 2006,4,8 ),
			  mk_( 2006,4,15 ),
			  mk_( 2006,4,22 ),
			  mk_( 2006,4,29 ),
			  mk_( 2006,5,3 ),
			  mk_( 2006,5,4 ),
			  mk_( 2006,5,5 ),
			  mk_( 2006,5,6 ),
			  mk_( 2006,5,13 ),
			  mk_( 2006,5,20 ),
			  mk_( 2006,5,27 ),
			  mk_( 2006,6,3 ),
			  mk_( 2006,6,10 ),
			  mk_( 2006,6,17 ),
			  mk_( 2006,6,24 ),
			  mk_( 2006,7,1 ),
			  mk_( 2006,7,8 ),
			  mk_( 2006,7,15 ),
			  mk_( 2006,7,17 ),
			  mk_( 2006,7,22 ),
			  mk_( 2006,7,29 ),
			  mk_( 2006,8,5 ),
			  mk_( 2006,8,12 ),
			  mk_( 2006,8,19 ),
			  mk_( 2006,8,26 ),
			  mk_( 2006,9,2 ),
			  mk_( 2006,9,9 ),
			  mk_( 2006,9,16 ),
			  mk_( 2006,9,18 ),
			  mk_( 2006,9,23 ),
			  mk_( 2006,9,30 ),
			  mk_( 2006,10,7 ),
			  mk_( 2006,10,9 ),
			  mk_( 2006,10,14 ),
			  mk_( 2006,10,21 ),
			  mk_( 2006,10,28 ),
			  mk_( 2006,11,3 ),
			  mk_( 2006,11,4 ),
			  mk_( 2006,11,11 ),
			  mk_( 2006,11,18 ),
			  mk_( 2006,11,23 ),
			  mk_( 2006,11,25 ),
			  mk_( 2006,12,2 ),
			  mk_( 2006,12,9 ),
			  mk_( 2006,12,16 ),
			  mk_( 2006,12,23 ),
			  mk_( 2006,12,29 ),
			  mk_( 2006,12,30 ),
			  mk_( 2006,12,31 ) } and
  		jc.日曜日を除く休日数を得る(d0401,d0430)  = 6 and
  		card jc.日曜日である休日の集合を得る(d0401,d0430) = 1 and
  		jc.日曜日である休日の集合を得る(d0401,d0408) = {}
	;
protected 準備する: () ==> ()
準備する() == テスト名 := "SBCalendarT02:\t休日群を得る。";
protected 後始末する: () ==> ()
後始末する() == return;
end SBCalendarT02

/*
シナリオID
	SBCalendar単体の全機能テスト
内容
	限月の正当性チェックと権利行使日獲得を検査する 。
*/
class SBCalendarT03 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	c = new SBCalendar()	in
	(
	c.基準日を設定する(c.整数三つ組から日付を得る(2001,9,12));
	return
		(
		c.権利行使日を得る("200111").＝(c.整数三つ組から日付を得る(2001,11,9))  and
		c.権利行使日を得る("200109").＝(c.整数三つ組から日付を得る(2001,9,14))  and
		c.限月が正当("200206") = true and
		c.限月が正当("200206.01") = false and
		c.限月が正当("佐原伸") = false 
		)
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "SBCalendarT03:\t限月の正当性チェックと権利行使日獲得を検査する。";
protected 後始末する: () ==> ()
後始末する() == return;
end SBCalendarT03

/*
シナリオID
	SBCalendar単体の全機能テスト
内容
	会社基準日機能を検査する 。
*/
class SBCalendarT04 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	c = new SBCalendar(),
		d0929 = c.整数三つ組から日付を得る(2001, 9, 29),
		d0104 = c.整数三つ組から日付を得る(20021, 1, 4)	in
	(
	c.会社基準日を設定する("007",d0104);
	c.会社基準日を設定する("009",d0929);
	return
		(
		c.会社基準日("007") = d0104 and
		c.会社基準日("009") = d0929 
		)
	)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "SBCalendarT04:\t会社基準日機能を検査する 。";
protected 後始末する: () ==> ()
後始末する() == return;
end SBCalendarT04

/*
シナリオID
	基準日をファイルから読み込む
内容
	基準日をファイルから読み込む。
*/
class SBCalendarT05 is subclass of TestCase, CalendarDefinition
operations 
public test: () ==> bool
test() == 
	let	c = new SBCalendar()
	in
	return
		c.基準日().＝(c.整数三つ組から日付を得る(2003, 10, 24)) and
		c.ファイルから読み込む基準日(homedir ^ "/temp/Today.txt").＝(c.整数三つ組から日付を得る(2001, 3, 1))
;
protected 準備する: () ==> ()
準備する() == テスト名 := "SBCalendarT05:\t基準日をファイルから読み込む。";
protected 後始末する: () ==> ()
後始末する() == return;
end SBCalendarT05

/*
シナリオID
	信用取引の決済日（期日）を得る
内容
	信用取引の決済日（期日）を得る。
*/
class SBCalendarT06 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	c = new SBCalendar(),
		sDate = SBCalendar`信用期日を得る
	in
	return
		sDate(c.整数三つ組から日付を得る(2004, 1, 5)).＝(c.整数三つ組から日付を得る(2004, 7, 5)) and
		sDate(c.整数三つ組から日付を得る(2004, 1, 31)).＝(c.整数三つ組から日付を得る(2004, 7, 30)) and
		sDate(c.整数三つ組から日付を得る(2004, 2, 1)).＝(c.整数三つ組から日付を得る(2004, 7, 30)) and
		sDate(c.整数三つ組から日付を得る(2004, 2, 2)).＝(c.整数三つ組から日付を得る(2004, 8, 2)) and
		sDate(c.整数三つ組から日付を得る(2004, 2, 27)).＝(c.整数三つ組から日付を得る(2004, 8, 27)) and
		sDate(c.整数三つ組から日付を得る(2004, 3, 1)).＝(c.整数三つ組から日付を得る(2004, 9, 1)) and
		sDate(c.整数三つ組から日付を得る(2004, 3, 30)).＝(c.整数三つ組から日付を得る(2004, 9, 30)) and
		sDate(c.整数三つ組から日付を得る(2004, 3, 31)).＝(c.整数三つ組から日付を得る(2004, 9, 30)) and
		sDate(c.整数三つ組から日付を得る(2004, 4, 1)).＝(c.整数三つ組から日付を得る(2004, 10, 1)) and
		sDate(c.整数三つ組から日付を得る(2004, 4, 30)).＝(c.整数三つ組から日付を得る(2004, 10, 29)) and
		sDate(c.整数三つ組から日付を得る(2004, 5, 6)).＝(c.整数三つ組から日付を得る(2004, 11, 5)) and
		sDate(c.整数三つ組から日付を得る(2004, 5, 7)).＝(c.整数三つ組から日付を得る(2004, 11, 5)) and
		sDate(c.整数三つ組から日付を得る(2004, 5, 10)).＝(c.整数三つ組から日付を得る(2004, 11, 10)) and
		sDate(c.整数三つ組から日付を得る(2004, 6, 1)).＝(c.整数三つ組から日付を得る(2004, 12, 1)) and
		sDate(c.整数三つ組から日付を得る(2004, 6, 28)).＝(c.整数三つ組から日付を得る(2004, 12, 28)) and
		sDate(c.整数三つ組から日付を得る(2004, 6, 29)).＝(c.整数三つ組から日付を得る(2004, 12, 28)) and
		sDate(c.整数三つ組から日付を得る(2004, 6, 30)).＝(c.整数三つ組から日付を得る(2004, 12, 28)) and
		sDate(c.整数三つ組から日付を得る(2004, 7, 1)).＝(c.整数三つ組から日付を得る(2004, 12, 28)) and
		sDate(c.整数三つ組から日付を得る(2004, 7, 2)).＝(c.整数三つ組から日付を得る(2004, 12, 28)) and
		sDate(c.整数三つ組から日付を得る(2004, 7, 5)).＝(c.整数三つ組から日付を得る(2005, 1, 5)) and
		sDate(c.整数三つ組から日付を得る(2004, 7, 30)).＝(c.整数三つ組から日付を得る(2005, 1, 28)) and
		sDate(c.整数三つ組から日付を得る(2003, 8, 2)).＝(c.整数三つ組から日付を得る(2004, 2, 2)) and
		sDate(c.整数三つ組から日付を得る(2003, 8, 28)).＝(c.整数三つ組から日付を得る(2004, 2, 27)) and
		sDate(c.整数三つ組から日付を得る(2003, 8, 29)).＝(c.整数三つ組から日付を得る(2004, 2, 27)) and
		sDate(c.整数三つ組から日付を得る(2003, 9, 1)).＝(c.整数三つ組から日付を得る(2004, 3, 1)) and
		sDate(c.整数三つ組から日付を得る(2003, 9, 30)).＝(c.整数三つ組から日付を得る(2004, 3, 30)) and
		sDate(c.整数三つ組から日付を得る(2003, 10, 1)).＝(c.整数三つ組から日付を得る(2004, 4, 1)) and
		sDate(c.整数三つ組から日付を得る(2003, 10, 29)).＝(c.整数三つ組から日付を得る(2004, 4, 28))  and
		sDate(c.整数三つ組から日付を得る(2003, 11, 1)).＝(c.整数三つ組から日付を得る(2004, 4, 30)) and
		sDate(c.整数三つ組から日付を得る(2003, 11, 30)).＝(c.整数三つ組から日付を得る(2004, 5, 28)) and
		sDate(c.整数三つ組から日付を得る(2003, 12, 1)).＝(c.整数三つ組から日付を得る(2004, 6, 1)) and
		sDate(c.整数三つ組から日付を得る(2003, 12, 26)).＝(c.整数三つ組から日付を得る(2004, 6, 25))
;
protected 準備する: () ==> ()
準備する() == テスト名 := "SBCalendarT06:\t信用取引の決済日（期日）を得る。";
protected 後始末する: () ==> ()
後始末する() == return;
end SBCalendarT06
