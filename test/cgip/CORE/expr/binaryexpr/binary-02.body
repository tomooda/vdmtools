-- This file has been automatically updated wrt. VDM++ Lang.Adjust, 1th iteration
public Test : () ==> seq of ( int | nat | real | bool)  
Test () ==
return [ 1 + 2,
         1.3 + 1,
         3 + 2.3,
         3.3 + 4,
         ( if true
           then 3
           else let a in set {"a",3} in a ) + 9.3,
         3.1 + ( if true 
                 then 1.3
                 else let a in set {3,false} in a ),
         ( let a = 3.3 in a ) + if 3=4
                                then 9.0
                                else 2.0, 
         ( 3 + g(1)) + 3,
         g(1) + g(2),
         f(1) + g(6),
         let a : nat1 = f(5) + 6 in a,

         1 - 3,
         2 - 5.3,
         5.6 - 2,
         3.56 - 23.3,
         ( let a = 3.3 in a) - if true 
                               then 9
                               else 1.09,
         ( 3 + 4) - ( 3- 56),
         3 * 6,
         3.4 * 6,
         4.6 * 6.9,
         ( let a = 1.3 in a ) * if is_int(9)
                                then 3.2
                                else 9.9,
         -3/2,
         3 / 4,
         ( let a = 23  in a) / ( if 4 > 3.9
                                            then 3.3
                                            else 3 ),

         3 ** 4,
         3.2 ** 2,
         3 ** 1.7,
         2.6 ** 0.69,
         f(3) ** (f(4)),
         2.6 ** (f(4)),
         f(3) ** 3,
         g(3) ** 2.6,
         3 ** (f(4)),
         ( if 3 <> 6 
           then 1.5
           else 2.5 ) ** ( let a = 2.6 in a ),


        (if true 
         then 2
         else let a in set {"a",3} in a ) - (if false 
                                            then let a in set {'a', 3} in a
                                             else 2),

        
        (if true 
         then 2
         else let a in set {"a",3} in a) * (if false 
                                            then let a in set {"a",3} in a
                                            else 2),
        
        
        (if true 
         then 2
         else let a in set {"a",3} in a) div (if false 
                      then let a in set {"a",3} in a
                      else 2),

        (if true 
         then 2
         else let a in set {"a",3} in a) / (if false 
                                            then let a in set {"a",3} in a
                                            else 2) ]

functions
f: nat -> real | map nat to nat
f(n) ==
  cases n:
    0 -> {1 |-> 2, 2 |-> 1},
    others -> n
  end;

g: nat -> nat | <ERR>
g(n) ==
  if n = 0 then 
    <ERR>
  else
    n
