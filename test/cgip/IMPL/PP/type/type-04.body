end A

class C

types 
  
  T1 = seq of nat;
  T2 :: a: int
        b: T3;
  T3 = <A> | <B> | <C>;
  T4 = nat

end C

class D is subclass of C

end D

class B is subclass of A,D

functions

  f1: C`T1 -> A`T1
  f1(s) ==
    if len s = 1 then
      hd s
    else
      hd s + f1( tl s )

operations

public  Test: () ==> [(A`T2 | nat) | nat1] * nat * C`T3 * T17 * C`T3 * T17
  Test() ==
  ( dcl n: C`T4 := f1([1,2,3,4,5,6,7,8,9,10]);
    let t1 = mk_C`T2(20,<C>),
        t2 = mk_D`T2(30,<A>) in 
    return mk_(n, t1.a, t1.b, t2.a, t2.b, 'a') )
