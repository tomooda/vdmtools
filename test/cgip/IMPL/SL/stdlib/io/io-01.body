module A
imports from IO all
exports all
definitions
operations

  Test: () ==> seq of (real|seq of char|bool)
  Test () ==
  let fout = "io-01.testout" in
  return [
    IO`writeval[seq of real]([1,2.3456789]),
    IO`fwriteval[seq of char](fout,"Hello World",<start>),
    let mk_(b,s) = IO`freadval[seq of char](fout)  in
    if b then s else IO`ferror(),
    IO`echo("IFAD VDM tools"),
    IO`fecho(fout,"IFAD VDM tools",<start>)
    ]

end A