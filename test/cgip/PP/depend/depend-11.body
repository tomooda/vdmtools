class A is subclass of C

instance variables
  state        : [B] := new B();
  a : (int*real) | int := 2;   
  pid : PathId := mk_PathId(1,2);

operations
  public Test : () ==> real
  Test() ==
    return evalExpr();
   operations
   

addPath:  () ==> PathId
        addPath() == return pid;

  getState: () ==> B
  getState() == return state
  pre state <> nil;

  evalExpr: () ==> [ItemId] 
  evalExpr() ==
   (cases a:
    2 -> let a=1 in
         getState().getVarVal(),
    mk_(a,b) -> newNumVal(a),
    others-> error
    end
    );
 
newNumVal : real ==> ItemId
newNumVal(v) ==
(
 getState().getVarVal()
);

end A

class B is subclass of C

instance variables
   id : ItemId := 4;
   pid : PathId := mk_PathId(1,2);
operations

addPath: () ==> PathId
addPath() ==
(
  addNewItem()
);

public getVarVal:() ==> ItemId
getVarVal()==return id

end B

class C

instance variables
pid : PathId := mk_PathId(1,2)

types
public ItemId = nat | int | PathId;

public PathId :: 
  tid : nat
  id : nat

operations
protected addNewItem : () ==> ItemId
addNewItem() ==
(
return pid;
);

 
end C
