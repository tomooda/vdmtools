class MainSort

values
  arr1 = [3,5,2,23,1,42,98,31];
  arr2 = [3,1,2]
  

operations
 
public  Test: () ==> seq of ((seq of int) | bool) 
  Test () ==
  ( dcl smach   : SortMachine := new SortMachine(),
        dos     : Sorter := new DoSort(),
        expls   : Sorter := new ExplSort(),
        imps    : ImplSort := new ImplSort(),
        mergs    : Sorter := new MergeSort (),
        res : seq of int := [],     
        res3 : seq of int := [],     
        res2 : seq of int := [],  
        res4 : seq of int := [],  
        postcond : bool;
    --smach.SetSort(mergs);
    let --res4 = smach.GoSorting(arr2),
    res = smach.SetAndSort(dos,arr1),
    res2 = smach.SetAndSort(expls,arr2),        
    --res3 = smach.SetAndSort(imps,arr2),
    postcond = imps.post_ImplSorter(arr2,res3)            

    in    

    return [res,res2,res3,postcond]
  );

end MainSort
class Sorter

--  The Sorter class is the behavioral pattern "Strategy". This class is the
--  abstract class for all specifications of sorting operations. 

operations

public  Sort: seq of int ==> seq of int
  Sort(arr)  ==
    return arr

end Sorter

class ExplSort is subclass of Sorter

operations

public  Sort: seq of int ==> seq of int
  Sort(l) ==
    let r in set Permutations(l) be st IsOrdered(r) in 
    return r

functions

  Permutations: seq of int -> set of seq of int
  Permutations(l) ==
    cases l:
      [],[-] -> {l},
      others -> dunion {{[l(i)]^j | 
                         j in set Permutations(RestSeq(l,i))} | 
                         i in set inds l}
    end;

  RestSeq: seq of int * nat -> seq of int
  RestSeq(l,i) ==
    [l(j) | j in set (inds l \ {i})];

  IsOrdered: seq of int -> bool
  IsOrdered(l) ==
    forall i,j in set inds l & i > j => l(i) >= l(j)

end ExplSort

class MergeSort is subclass of Sorter

operations
public  Sort: seq of int ==> seq of int
  Sort(l) ==
    return MergeSorter(l)

functions

  MergeSorter: seq of real -> seq of real
  MergeSorter(l) ==
    cases l:
      []      -> l,
      [e]     -> l,
      others  -> let l1^l2 in set {l} be st abs (len l1 - len l2) < 2
                 in
                   let l_l = MergeSorter(l1),
                       l_r = MergeSorter(l2) in
                    Merge(l_l, l_r)
    end;

  Merge: seq of int * seq of int -> seq of int
  Merge(l1,l2) ==
    cases mk_(l1,l2):
      mk_([],l),mk_(l,[]) -> l,
      others              -> if hd l1 <= hd l2 then 
                               [hd l1] ^ Merge(tl l1, l2)
                             else
                               [hd l2] ^ Merge(l1, tl l2)
    end



end MergeSort

class DoSort is subclass of Sorter

operations
public  Sort: seq of int ==> seq of int
  Sort(l) ==
    return DoSorting(l)

functions

  DoSorting: seq of int -> seq of int
  DoSorting(l) ==
    if l = [] then
      []
    else
      let sorted = DoSorting (tl l) in
        InsertSorted (hd l, sorted);

  InsertSorted: int * seq of int -> seq of int
  InsertSorted(i,l) ==
    cases true :
      (l = [])    -> [i],
      (i <= hd l) -> [i] ^ l,
      others      -> [hd l] ^ InsertSorted(i,tl l)
    end



end DoSort

class SortMachine

instance variables
  srt: Sorter := new Sorter();


 operations

public  SetSort: Sorter ==> ()
  SetSort(s) ==
    srt := s;

public  GoSorting: seq of int ==> seq of int
  GoSorting(arr) == 
    def r = srt.Sort(arr) in
    return r;


public  SetAndSort: Sorter * seq of int ==> seq of int
  SetAndSort(s, arr) ==
  ( srt := s;
    def r = srt.Sort(arr) in
    return r
  )

end SortMachine

class ImplSort is subclass of Sorter

operations

public  Sort: seq of int ==> seq of int
  Sort(l) ==
    return ImplSorter(l);

functions

public  ImplSorter(l: seq of int) r: seq of int
  post IsPermutation(r,l) and IsOrdered(r);

  IsPermutation: seq of int * seq of int -> bool
  IsPermutation(l1,l2) ==    
    forall e in set (elems l1 union elems l2) &
      card {i | i in set inds l1 & l1(i) = e} =
      card {i | i in set inds l2 & l2(i) = e};

  IsOrdered: seq of int -> bool
  IsOrdered(l) ==
    forall i,j in set inds l & i > j => l(i) >= l(j)

end ImplSort
