\begin{vdm_al}
class Environment is subclass of GLOBAL

types

public InputTP   = (Time * seq of inline);

public inline  = EventId * MissileType * Angle * nat;
public outline = EventId * FlareType * Angle * nat * nat

instance variables

-- access to the VDMTools stdio
--io : IO := new IO();

-- the input file to process
inlines : seq of inline := [];

-- the output file to print
outlines : seq of outline := [];

-- maintain a link to all sensors
ranges : map nat to (Angle * Angle) := {|->};
sensors : map nat to Sensor := {|->};
inv dom ranges = dom sensors;

busy : bool := true;

-- Amount of time we want to simulate
simtime : Time := 10000;

operations

public Environment: seq of char ==> Environment
Environment (fname) ==
  def mk_(timeval,input) = mk_(10000,[mk_(1,<MissileA>,50,100)])
--io.freadval[InputTP](fname) 
  in
    (inlines := input;
     simtime := timeval);

public addSensor: Sensor ==> ()
addSensor (psens) ==
  (dcl id : nat := card dom ranges + 1;
   atomic (
    ranges := ranges munion {id |-> psens.getAperture()};
    sensors := sensors munion {id |-> psens} 
   )
  );

private createSignal: () ==> () 
createSignal () ==
  (if len inlines > 0
   then (dcl curtime : nat := World`timerRef.GetTime(), 
             done : bool := false;
         while not done do
           def mk_ (eventid, pmt, pa, pt) = hd inlines in
             if pt <= curtime
             then (for all id in set dom ranges do
                     def mk_(papplhs,pappsize) = ranges(id) in
                       if canObserve(pa,papplhs,pappsize)
                       then sensors(id).trip(eventid,pmt,pa);
                   inlines := tl inlines;
                   done := len inlines = 0;
                   return) 
             else (done := true;
                   return))
   else (busy := false;
         return));

public handleEvent: EventId * FlareType * Angle * nat * nat ==> ()
handleEvent (evid,pfltp,angle,pt1,pt2) ==
  (outlines := outlines ^ [mk_ (evid,pfltp,angle,pt1,pt2)] );

public showResult: () ==> seq of outline
showResult () ==
  return outlines;
--def - = io.writeval[seq of outline](outlines) in skip;

public isFinished : () ==> ()
isFinished () == skip;

sync

mutex (handleEvent);
per isFinished => not busy;

thread
 (
  start(new ClockTick(threadid));
  while World`timerRef.GetTime() < simtime do
   (if busy
    then createSignal();
    World`timerRef.NotifyAndIncTime();
    World`timerRef.WaitRelative(0);
   );
  busy := false
 )

end Environment
\end{vdm_al}
\begin{vdm_al}
class CM

instance variables

  -- maintain a link to the detector
  public static detector : MissileDetector := new MissileDetector();

  public static sensor0 : Sensor := new Sensor(detector,0);
  public static sensor1 : Sensor := new Sensor(detector,90);
  public static sensor2 : Sensor := new Sensor(detector,180);
  public static sensor3 : Sensor := new Sensor(detector,270);

  public static controller0 : FlareController := new FlareController(0);
  public static controller1 : FlareController := new FlareController(120);
  public static controller2 : FlareController := new FlareController(240);

  public static dispenser0 : FlareDispenser := new FlareDispenser(0);
  public static dispenser1 : FlareDispenser := new FlareDispenser(30);
  public static dispenser2 : FlareDispenser := new FlareDispenser(60);
  public static dispenser3 : FlareDispenser := new FlareDispenser(90);

  public static dispenser4 : FlareDispenser := new FlareDispenser(0);
  public static dispenser5 : FlareDispenser := new FlareDispenser(30);
  public static dispenser6 : FlareDispenser := new FlareDispenser(60);
  public static dispenser7 : FlareDispenser := new FlareDispenser(90);

  public static dispenser8 : FlareDispenser := new FlareDispenser(0);
  public static dispenser9 : FlareDispenser := new FlareDispenser(30);
  public static dispenser10 : FlareDispenser := new FlareDispenser(60);
  public static dispenser11 : FlareDispenser := new FlareDispenser(90);

end CM
\end{vdm_al}
\section{ClockTick class}

ClockTick is a class containing a thread that its used as a spark plug for the Environment. Each time increment the Environment sleeps and gives a running chance to the other threads. So if all the other threads are blocked this Clock tick will be allways ready to wake up the Environment.

The class is created maintains as an instance variable the thread id \textbf{tid} of the thread that it's suposed to be notified each clock tick.

\begin{vdm_al}
class ClockTick is subclass of GLOBAL

instance variables

tid : int := -1;
\end{vdm_al}

The constructor recieves the thread id.

\begin{vdm_al}
operations

public 
ClockTick : nat ==> ClockTick
ClockTick (t) == tid := t;
\end{vdm_al}

And the thread definition follows first the thread in this case the Environment is notified and then ClockTick blocks itself until the time is incremented.

\begin{vdm_al}
thread

 while true do
   (
    World`timerRef.NotifyThread(tid);
    World`timerRef.WaitRelative(1);
   )

end ClockTick
\end{vdm_al}

\begin{vdm_al}
class FlareController is subclass of GLOBAL

instance variables

-- the left hand-side of the working angle
private aperture : Angle;

-- maintain a link to each dispenser
ranges : map nat to (Angle * Angle) := {|->};
dispensers : map nat to FlareDispenser := {|->};
inv dom ranges = dom dispensers;

-- the relevant events to be treated by this controller
threats : seq of (EventId * MissileType * Angle * nat) := [];

-- the status of the controller
busy : bool := false

operations

public FlareController: Angle ==> FlareController
FlareController (papp) == aperture := papp;

public addDispenser: FlareDispenser ==> ()
addDispenser (pfldisp) ==
  let angle = aperture + pfldisp.GetAngle() in
    (dcl id : nat := card dom ranges + 1;
     atomic
      (ranges := ranges munion 
                 {id |-> mk_(angle, DISPENSER_APERTURE)};
       dispensers := dispensers munion {id |-> pfldisp}
      );
     start (pfldisp) );

-- get the left hand-side start point and opening angle
public getAperture: () ==> GLOBAL`Angle * GLOBAL`Angle
getAperture () == return mk_(aperture, FLARE_APERTURE);

-- addThreat is a helper operation to modify the event
-- list. currently events are stored first come first served.
-- one could imagine using a different ordering instead
public addThreat: EventId * MissileType * Angle * nat ==> ()
addThreat (evid,pmt,pa,pt) ==
  (threats := threats ^ [mk_ (evid,pmt,pa,pt)];
   busy := true );

-- getThreat is a local helper operation to modify the event list
private getThreat: () ==> EventId * MissileType * Angle * nat
getThreat () ==
  (dcl res : EventId * MissileType * Angle * nat := hd threats;
   threats := tl threats;
   return res );

public isFinished: () ==> ()
isFinished () ==
  for all id in set dom dispensers do
    dispensers(id).isFinished();

processThreat: () ==> ()
processThreat() ==
  (def mk_ (evid,pmt, pa, pt) = getThreat() in
      for all id in set dom ranges do
        def mk_(papplhs, pappsize) = ranges(id) in
          if canObserve(pa, papplhs, pappsize)
          then dispensers(id).addThreat(evid,pmt,pt);
    busy := len threats > 0 );

sync

-- addThreat and getThreat modify the same instance variables
-- therefore they need to be declared mutual exclusive
mutex (addThreat,getThreat);

-- getThreat is used as a 'blocking read' from the main
-- thread of control of the missile detector
per getThreat => len threats > 0;
per isFinished => len threats = 0 --not busy

thread

-- the flare controller continuously processes sensor
-- events. getThread is automatically blocked if there
-- are no threats available
( -- first start the dispenser threads
 for all id in set dom dispensers do
   start (dispensers(id));
 -- now enter the event handling loop
 while true do
   processThreat();
)

end FlareController
\end{vdm_al}

\begin{rtinfo}[FlareController`FlareController]
{vdm.tc}[FlareController]
\end{rtinfo}

\begin{vdm_al}
class FlareDispenser is subclass of GLOBAL

values

responseDB : map MissileType to Plan =
  {<MissileA> |-> [mk_(<FlareOneA>,900),
                   mk_(<FlareTwoA>,500),
                   mk_(<DoNothingA>,100),
                   mk_(<FlareOneA>,500)],
   <MissileB> |-> [mk_(<FlareTwoB>,500),
                   mk_(<FlareTwoB>,700)],
   <MissileC> |-> [mk_(<FlareOneC>,400),
                   mk_(<DoNothingC>,100),
                   mk_(<FlareTwoC>,400),
                   mk_(<FlareOneC>,500)] };

missilePriority : map MissileType to nat =
  {<None>     |-> 0,
   <MissileA> |-> 1,
   <MissileB> |-> 2,
   <MissileC> |-> 3 }

types

public Plan = seq of PlanStep;

public PlanStep = FlareType * nat;

instance variables

public curplan : Plan := [];
curprio        : nat := 0;
busy           : bool := false;
aperture       : Angle;
eventid        : [EventId];

operations

public FlareDispenser: Angle ==> FlareDispenser
FlareDispenser(ang) ==
  aperture := ang;

public GetAngle: () ==> nat
GetAngle() ==
  return aperture;

public addThreat: EventId * MissileType * nat ==> ()
addThreat (evid, pmt, ptime) ==
  if missilePriority(pmt) > curprio
  then (dcl newplan : Plan :=  [],
            newtime : nat := ptime;
        -- construct an absolute time plan
        for mk_(fltp, fltime) in responseDB(pmt) do
          (newplan := newplan ^ [mk_ (fltp, newtime)];
           newtime := newtime + fltime );
        -- immediately release the first action
        def mk_(fltp, fltime) = hd newplan;
            t = World`timerRef.GetTime() in
          releaseFlare(evid,fltp,fltime,t);
         -- store the rest of the plan
         curplan := tl newplan;
         eventid := evid;
         curprio := missilePriority(pmt);
         busy := true );

private evalQueue: () ==> ()
evalQueue () ==
  (if len curplan > 0
   then (dcl curtime : nat := World`timerRef.GetTime(),
             done : bool := false;
         while not done do
           (dcl first : PlanStep := hd curplan,
                next : Plan := tl curplan;
            let mk_(fltp, fltime) = first in
              if fltime <= curtime
              then (releaseFlare(eventid,fltp,fltime,curtime);
                    curplan := next;
                    if len next = 0
                    then (curprio := 0; 
                          done := true; 
                          busy := false ) )
              else done := true ) ) );

private releaseFlare: EventId * FlareType * nat * nat==> ()
releaseFlare (evid, pfltp, pt1, pt2) == 
  World`env.handleEvent(evid,pfltp,aperture,pt1,pt2);

public isFinished: () ==> ()
isFinished () == skip

sync

mutex (addThreat,evalQueue);
per isFinished => not busy

thread
  while true do
    (World`timerRef.WaitRelative(TimeStamp`stepLength);
     evalQueue());
     
end FlareDispenser
\end{vdm_al}

\begin{rtinfo}[FlareDispenser`FlareDispenser]
{vdm.tc}[FlareDispenser]
\end{rtinfo}

\begin{vdm_al}
class GLOBAL

values

public SENSOR_APERTURE = 90;
public FLARE_APERTURE = 120;
public DISPENSER_APERTURE = 30

types

-- there are three different types of missiles
public MissileType = <MissileA> | <MissileB> | <MissileC> | <None>;

-- there are nine different flare types, three per missile
public FlareType =
    <FlareOneA> | <FlareTwoA> | <DoNothingA> | 
    <FlareOneB> | <FlareTwoB> | <DoNothingB> | 
    <FlareOneC> | <FlareTwoC> | <DoNothingC>;

-- the angle at which the missile is incoming
public Angle = nat
inv num == num < 360;

public EventId = nat;

public Time = nat;

operations

public canObserve: Angle * Angle * Angle ==> bool
canObserve (pangle, pleft, psize) ==
  def pright = (pleft + psize) mod 360 in
    if pright < pleft
    -- check between [0,pright> and [pleft,360>
    then return (pangle < pright or pangle >= pleft)
    -- check between [pleft, pright>
    else return (pangle >= pleft and pangle < pright);
       
public getAperture: () ==> Angle * Angle
getAperture () == is subclass responsibility;

end GLOBAL
\end{vdm_al}

\begin{rtinfo}[GLOBAL`canObserve]
{vdm.tc}[GLOBAL]
\end{rtinfo}
\begin{vdm_al}
class MissileDetector is subclass of GLOBAL

-- the primary task of the MissileDetector is to
-- collect all sensor data and dispatch each event
-- to the appropriate FlareController

instance variables

-- maintain a link to each controller
ranges : map nat to (Angle * Angle) := {|->};
controllers : map nat to FlareController := {|->};
inv dom ranges = dom controllers;

-- collects the observations from all attached sensors
threats : seq of (EventId * MissileType * Angle * nat) := [];

-- status of the missile detector
busy : bool := false

operations

-- addController is only used to instantiate the model
public addController: FlareController ==> ()
addController (pctrl) ==
  (dcl nid : nat := card dom ranges + 1;
   atomic
    (ranges := ranges munion {nid |-> pctrl.getAperture()};
     controllers := controllers munion {nid |-> pctrl}
    );
   start (pctrl) );

-- addThreat is a helper operation to modify the event
-- list. currently events are stored first come first served.
-- one could imagine using a different ordering instead.
public addThreat: EventId * MissileType * Angle * nat ==> ()
addThreat (evid,pmt,pa,pt) == 
  (threats := threats ^ [mk_ (evid,pmt,pa,pt)];
   busy := true );

-- getThreat is a local helper operation to modify the event list
private getThreat: () ==> EventId * MissileType * Angle * nat
getThreat () ==
  (dcl res : EventId * MissileType * Angle * nat := hd threats;
   threats := tl threats;
   return res );

public isFinished: () ==> ()
isFinished () ==
  for all id in set dom controllers do
    controllers(id).isFinished();

processSensor: () ==> ()
processSensor() ==
( def mk_ (evid,pmt, pa, pt) = getThreat() in
     for all id in set dom ranges do
       def mk_(papplhs, pappsize) = ranges(id) in
         if canObserve(pa, papplhs, pappsize)
         then controllers(id).addThreat(evid,pmt,pa,pt);
   busy := len threats > 0);
 
sync

-- addThreat and getThreat modify the same instance variables
-- therefore they need to be declared mutual exclusive
mutex (addThreat,getThreat);

-- getThreat is used as a 'blocking read' from the main
-- thread of control of the missile detector
per getThreat => len threats > 0;
per isFinished => not busy

thread

-- the missile detector continuously processes sensor
-- events. getThread is automatically blocked if there
-- are no threats available
while true do
  processSensor();

end MissileDetector
\end{vdm_al}

\begin{rtinfo}[MissileDetector`addController]
{vdm.tc}[MissileDetector]
\end{rtinfo}
\begin{vdm_al}
class Sensor is subclass of GLOBAL

instance variables

-- the missile detector this sensor is connected to
private detector : MissileDetector;

-- the left hand-side of the viewing angle of the sensor
private aperture : Angle;

operations

public Sensor: MissileDetector * Angle ==> Sensor
Sensor (pmd, psa) == ( detector := pmd; aperture := psa);

-- get the left hand-side start point and opening angle
public getAperture: () ==> GLOBAL`Angle * GLOBAL`Angle
getAperture () == return mk_ (aperture, SENSOR_APERTURE);

-- trip is called asynchronously from the environment to
-- signal an event. the sensor triggers if the event is
-- in the field of view. the event is stored in the
-- missile detector for further processing
public trip: EventId * MissileType * Angle ==> ()
trip (evid, pmt, pa) ==
  -- log and time stamp the observed threat
  detector.addThreat(evid, pmt,pa,World`timerRef.GetTime())
pre canObserve(pa, aperture, SENSOR_APERTURE)

end Sensor
\end{vdm_al}

\begin{rtinfo}[Sensor`getAperture]
{vdm.tc}[Sensor]
\end{rtinfo}
\begin{vdm_al}
class Timer

instance variables

currentTime  : nat   := 0;
finished     : bool  := false;
subscribers  : set of nat := {};
users        : set of nat := {}

operations

public Finished : () ==> ()
Finished() == finished := true;

sync

  mutex(StepTime, GetTime);
  per StepTime => subscribers = users

operations

public Subscribe: nat ==> ()
Subscribe(tid) ==
  subscribers := subscribers union {tid};

public UnSubscribe: nat ==> ()
UnSubscribe(tid) ==
  subscribers := subscribers \ {tid};

public StepTime : () ==> ()
StepTime() ==
  (users := {};
   currentTime := currentTime + stepLength);

public GetTime : [nat] ==> nat
GetTime(tid) ==
  (if tid <> nil
   then users := users union {tid};
   return currentTime);

values

  stepLength : nat = 100;

end Timer
\end{vdm_al}

\begin{rtinfo}[Timer`StepTime]
{vdm.tc}[Timer]
\end{rtinfo}
\begin{vdm_al}
class TimeStamp is subclass of WaitNotify

values

  public stepLength : nat = 10;

instance variables

currentTime  : nat   := 0;
wakeUpMap    : map nat to nat := {|->};

operations

public WaitRelative : nat ==> ()
WaitRelative(val) ==
( AddToWakeUpMap(threadid, currentTime + val);
  WaitNotify`Wait();
);

public WaitAbsolute : nat ==> ()
WaitAbsolute(val) ==
( AddToWakeUpMap(threadid, val);
  WaitNotify`Wait();
);

AddToWakeUpMap : nat * nat ==> ()
AddToWakeUpMap(tId, val) ==
  wakeUpMap := wakeUpMap ++ { tId |-> val };

public NotifyThread : nat ==> ()
NotifyThread(tId) ==
( wakeUpMap := {tId} <-: wakeUpMap;
  WaitNotify`NotifyThread(tId)
);

public Notify : () ==> ()
Notify() ==
  let tId in set dom wakeUpMap in
    NotifyThread(tId);

public NotifyAll : () ==> ()
NotifyAll() ==
( wakeUpMap := {|->};
  WaitNotify`NotifyAll()
);

public NotifyAndIncTime : () ==> ()
NotifyAndIncTime() ==
( currentTime := currentTime + stepLength;
  for all t in set dom (wakeUpMap :> {1,...,currentTime}) do
    NotifyThread(t)
);

public GetTime : () ==> nat
GetTime() ==
  return currentTime;

sync

mutex(AddToWakeUpMap);
--per Notify => #active(NotifyAll) + #active(NotifyThread) + #active(AddToWakeUpMap) = 0;
--per NotifyAll => #active(Notify) + #active(NotifyThread) + #active(AddToWakeUpMap) = 0;
--per NotifyThread => #active(NotifyAll) + #active(AddToWakeUpMap) = 0;
--per AddToWakeUpMap => #active(NotifyAll) + #active(Notify) + #active(NotifyThread) = 0;
mutex(Notify);
--mutex(NotifyThread);
--mutex(NotifyAll);
mutex(AddToWakeUpMap, Notify, NotifyThread, NotifyAll);

end TimeStamp
\end{vdm_al}

\begin{rtinfo}[TimeStamp`NotifyAndIncTime]
{vdm.tc}[TimeStamp]
\end{rtinfo}

\begin{vdm_al}
class WaitNotify

instance variables

waitset : set of nat := {}

operations

public Wait : () ==> ()
Wait() ==
( AddToWaitSet (threadid);
  Awake()
);

public Notify : () ==> ()
Notify() ==
  let p in set waitset in
    waitset := waitset \ {p};

public NotifyThread: nat ==> ()
NotifyThread(tId) ==
  waitset :=  waitset \ {tId};

public NotifyAll: () ==> ()
NotifyAll() ==
  waitset :=  {};

private AddToWaitSet : nat ==> ()
AddToWaitSet(n) ==
  waitset := waitset union {n};

private Awake : () ==> ()
Awake() == skip

sync

  per Awake => threadid not in set waitset;

  mutex(AddToWaitSet)

end WaitNotify
\end{vdm_al}

\begin{rtinfo}[WaitNotify`AddToWaitSet]
{vdm.tc}[WaitNotify]
\end{rtinfo}
\begin{vdm_al}
class World

instance variables

-- maintain a link to the environment
public static env : [Environment] := nil;
public static timerRef : TimeStamp := new TimeStamp();

operations

public World: () ==> World
World () ==
  (-- set-up the sensors
   env := new Environment("scenario.txt");
   env.addSensor(CM`sensor0);
   env.addSensor(CM`sensor1);
   env.addSensor(CM`sensor2);
   env.addSensor(CM`sensor3);

   -- add the first controller with four dispensers
   CM`controller0.addDispenser(CM`dispenser0);
   CM`controller0.addDispenser(CM`dispenser1);
   CM`controller0.addDispenser(CM`dispenser2);
   CM`controller0.addDispenser(CM`dispenser3);
   CM`detector.addController(CM`controller0);

   -- add the second controller with four dispensers
   CM`controller1.addDispenser(CM`dispenser4);
   CM`controller1.addDispenser(CM`dispenser5);
   CM`controller1.addDispenser(CM`dispenser6);
   CM`controller1.addDispenser(CM`dispenser7);
   CM`detector.addController(CM`controller1);
 
   -- add the third controller with four dispensers
   CM`controller2.addDispenser(CM`dispenser8);
   CM`controller2.addDispenser(CM`dispenser9);
   CM`controller2.addDispenser(CM`dispenser10);
   CM`controller2.addDispenser(CM`dispenser11);
   CM`detector.addController(CM`controller2);
      
   -- start the detector
   start(CM`detector) );

-- the run function blocks the user-interface thread
-- until all missiles in the file have been processed
public Run: () ==> seq of Environment`outline
Run () == 
  (-- start the environment
   start (env);
   -- wait for the environment to handle all input
   env.isFinished();
   -- wait for the missile detector to finish
   CM`detector.isFinished();
   -- print the result
   env.showResult())

end World
\end{vdm_al}

\begin{rtinfo}[World`World]
{vdm.tc}[World]
\end{rtinfo}
\begin{vdm_al}
class A

operations

public Test:() ==> seq of Environment`outline
Test() ==
  new World().Run()

end A
\end{vdm_al}