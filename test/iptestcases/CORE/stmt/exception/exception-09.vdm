class A

operations
public Test : () ==> int | set of seq of int | <OK> 
Test() ==
  trap <ERR3> with return <OK>
  in
    Example();

DoCommand: () ==> set of seq of int
DoCommand() ==
( dcl l : seq of nat := [];
  trap <ERR2> with exit <ERR3> in
    return {TestSeq(l(1,...,i)) | i in set {1,...,9}} 
);

SetToSeq: set of int ==> seq of int
SetToSeq(s) ==
  if s = {} then
    exit <ERR>
  else
    let e in set s in 
      return [e] ^ SetToSeq(s \ {e});

TestSeq: seq of int ==> seq of int
TestSeq(l) ==
  if l = [] then
    exit <ERR2>
  else
    return l;

Example: () ==> int | set of seq of int
Example() ==
  tixe { 
    <ERR> |-> exit 7,
    mk_(t,t) |-> return t
  } in DoCommand()

end A
