-- This file has been automatically updated wrt. VDM++ Lang.Adjust, 1th iteration
class A

types


  AAA = R3 | R4;

  AAAA = R2 | R4;

  AA = R1 | R2 | AAA;

  R2 :: nat 
        nat;

  R3 :: nat 
        nat;

  R4 :: nat 
        nat;

  R1 :: nat 
        nat;

  B_ :: nat 
        nat;

  B' = bool | nat | char
  inv b == if is_nat(b) then 
             b > 10
           else
             true;

  D2 = set of nat
  inv s == s <> {};

  Y = R1 | R2 | int;

  A = B | C | D;

  B = B' | B_;

  C = real | <QUOTE>;

  D = D1 | D1 | D3;
  
  D1 = seq of B';

  D3 = D1 * D2;

  Item = MenuItem | RemoveItem;
  
  MenuItem = Separator | Action;
  
  Action:: text: seq of char
           s : <HELLOX>;

  Separator::;

  RemoveItem::;


operations




-- This file has been automatically updated wrt. VDM++ Lang.Adjust, 1th iteration
-- Testing quote types and union types composed of record types

public Test : () ==> int
Test () ==
( g(mk_R1(1,2));
  let a = if true then <hello> 
          else <HELLOX> in
  if <HELLOX> = a then
  return 33
  else
  return 34
);

g: AA ==> ()
g(a) ==
( dcl c : R1 := mk_R1(1,1),
      b : AAA := mk_R3(1,1),
      d : R1 := mk_R1(1,1),
      e : AA := d,
      f : R1 := e;
  skip;
);

f: R2 ==> AAAA
f(a) ==
( dcl c : R1 := mk_R1(1,1),
      b : AAA := mk_R3(1,1),
      d : R1 := mk_R1(1,1),
      e : AA := d,
      f : R1 := e;
  return mk_R2(2,3);
);

h : <hello>|<hallo_hallo> ==> bool
h(j) == if j = <hallo_hallo> then return true
        else return false;

i : <hello> ==> bool
i(j) == return false;

end A
