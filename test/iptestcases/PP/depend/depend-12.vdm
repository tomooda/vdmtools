class A is subclass of C

types
  x:: i:int;

instance variables
  state        : [B] := new B();
  a : (int*real) | int := 2;   
  pid : PathId := mk_PathId(1,2);
  path : [seq of PathId]:=nil;
  seq11 : seq of int :=[1,2];

  seq12 : seq of x :=[mk_x(1)];

   
operations
  public Test : () ==> real
  Test() ==
    (for i in seq11
    do skip;
    for i in seq12
    do let y = i.i in
       skip;
--    for pidm in path do
--      skip;
    return evalExpr())
   operations
   

addPath:  () ==> PathId
        addPath() == return pid;

  getState: () ==> B
  getState() == return state
  pre state <> nil;

  evalExpr: () ==> [ItemId] 
  evalExpr() ==
   (cases a:
    - -> error
    end
    );
 
newNumVal : () ==> real
newNumVal() ==
(
 getState().getVarVal().giveint()
);

end A

class B is subclass of C

instance variables
   id : ItemId := 4;
   pid : PathId := mk_PathId(1,2);
operations

addPath: () ==> PathId
addPath() ==
(
  addNewItem()
);

public getVarVal:() ==> D
getVarVal()==return new D();

end B

class C

instance variables
pid : PathId := mk_PathId(1,2)

types
public ItemId = nat | int | PathId;
public NumVal::
val:real;

public NatVal::
val:int;


public PathId :: 
  tid : nat
  id : nat

operations
protected addNewItem : () ==> ItemId
addNewItem() ==
(
return pid;
);

 
end C


class D is subclass of E

instance variables
a : int := 2;   
b : E := new D();
p: C`NumVal|real;

operations
newNumVal: real==>int
newNumVal(e)==
(return e;
);

public giveint : () ==> int
giveint() ==
(
cases p:
 mk_C`NatVal(v),
 mk_C`NumVal(v) -> newNumVal(v),
 others->error
end;

let x:real = a in
let y:D = b in 
return 3;
);
 
end D

class E
end E
