class A

instance variables
  public r1 : real := 1;
  public r2: real  := 2.2;


operations

  public initA: real * real ==> A
  initA  (a,b) ==
  ( r1 := a;
    r2 := b;
    return self);

  public Get: () ==> seq of real
  Get() ==
    return [r1,r2];


  public Set: real * real ==> ()
  Set(v1,v2) ==
  ( r1 := v1;
    r2 := v2 )

end A
class B

instance variables
  s : set of A

operations

  public Test : () ==> seq of real 
  Test () ==
  ( dcl a : A := new A(),
    sq    : seq of A,
    res   : seq of real := [],
    tmp   : seq of real;
    s := { a };
    while card s < 4 do
    ( a := new A ();
      s := s union  { a }
    );
    let {a, b, c, d} = s in 
     sq := [a, b, c, d];
    while sq <> [] do
    ( a := hd sq;
      tmp := a.Get();
      res := res ^ tmp;
      sq := tl sq
    );
    return res
  )

end B
