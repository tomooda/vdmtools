module A

exports all

definitions

types 

R :: f1 : nat
     f2 : bool
     f3 : seq of char

end A

module B

imports from A 
  types R :: f1 : nat
     f2 : bool
     f3 : seq of char
  renamed W
  
exports all  

definitions

functions

f : W -> bool
f(mk_W(n, b, t)) == b <=> len t = n ;

end B

module C

imports
  from A all,
  from B all

exports all
definitions

operations

Test : () ==> bool
Test() ==
  return B`f(mk_A`R(3, false, "hi")) 

end C
