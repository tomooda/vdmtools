module A
exports all
definitions
operations

Op2: set of nat ==> ()
Op2(s2) ==
  s := s2 union s;

Op3: set of nat ==> seq of nat
Op3(ss) ==
  if ss = {} then
    return []
  else
    let e in set ss be st forall e2 in set ss \ {e} & e >= e2 in 
      return [e] ^ Op3(ss \ {e});


Test: () ==> seq of nat
Test() ==
( 
  Op2(let s = {40,...,45} in s);
  Op2({99,...,102});
  Op2({50,42,200} union {-1000});
  Op3(if card s <> 1 then s else s union {1})
)

state Sigma of
  s : set of nat
  init s == s = mk_Sigma({})
end

end A


