class UnknownGraphic is subclass of RefDesNode
operations 
public  elementAt : int  ==> [String]
elementAt(index) == 
( return  pinList.elementAt(index)
) ;

public  UnknownGraphic : () ==> UnknownGraphic
UnknownGraphic() == 
( let - = UnknownGraphic(0 , 0)
  in 
    skip ;
  return  
) ;

private  getWireHeight : int  ==> int 
getWireHeight(pinIndex) == 
( dcl   wireHeight : int  := 0;
  if  pinIndex > -1 and  pinIndex < pinList.size()
  then  
    ( dcl   wirePinHeight : [Integer];
      ( dcl   idx : int  := 0;
        while  idx <= pinIndex do  
        ( wirePinHeight := PinHeight.elementAt(idx);
          def l_6 = wireHeight
          in wireHeight := l_6+wirePinHeight.intValue()-WireGraphic.SPREAD;
          idx := idx+1
        ) 
      ) 
    ) ;
  return  wireHeight
) ;

public  characterAscent : () ==> int 
characterAscent() == 
( return  pinFontMetrics.getAscent()
) ;

public  initGraphicPins : () ==> <VOID>
initGraphicPins() == 
( ( dcl   pinIndex : int  := 0;
    while  pinIndex < pinGraphics.size() do  
    ( dcl   nextPin : [PinGraphic] := pinGraphics.elementAt(pinIndex),
            pinName : [String] := nextPin.getName();
      let - = containingCanvas.addMouseListener(nextPin)
      in 
        skip ;
      let - = containingCanvas.addMouseMotionListener(nextPin)
      in 
        skip ;
      let - = nextPin.setFont(pinFont)
      in 
        skip ;
      ( dcl   yLocation : int  := getYConnectCoord(pinIndex)+(characterAscent()/4),
              nameWidth : int  := widthOf(pinName),
              xLocation : int  := getLocation().x+(getSize().width/2)-(nameWidth/2)-(SYMBOL_WIDTH/2);
        let - = nextPin.setBounds(xLocation , yLocation , nameWidth , pinFontMetrics.getHeight())
        in 
          skip 
      ) ;
      pinIndex := pinIndex+1
    ) 
  ) ;
  return  
) ;

public  addPin : [String] ==> <VOID>
addPin(pin) == 
( let - = pinList.addElement(pin)
  in 
    skip ;
  let - = pinGraphics.addElement(new  PinGraphic(pin , self  ))
  in 
    skip ;
  ( dcl   currentSize : [Dimension] := getSize(),
          newHeight : int  := currentSize.height+PIN_HEIGHT-WireGraphic.SPREAD,
          newWidth : int  := Math.max(currentSize.width , labelFontMetrics.stringWidth(pin)+SYMBOL_WIDTH+3);
    let - = setSize(newWidth , newHeight)
    in 
      skip ;
    let - = PinHeight.addElement(new  Integer(0))
    in 
      skip ;
    return  
  ) ;
  return  <VOID>
) ;

private  getFrameLocation : () ==> [Point]
getFrameLocation() == 
( dcl   location : [Point] := getLocation(),
        size : [Dimension] := getSize();
  return  new  Point(location.x , location.y+LABEL_HEIGHT)
) ;

public  UnknownGraphic : int  * int  ==> UnknownGraphic
UnknownGraphic(x, y) == 
( let - = RefDesNode(x , y , SYMBOL_WIDTH , 0)
  in 
    skip ;
  let - = setNotifyOnMouseClick(true  )
  in 
    skip ;
  let - = setNotifyOnMouseMotion(true  )
  in 
    skip ;
  pinFont := new  Font(new  String("Courier") , Font`PLAIN , 12);
  pinFontMetrics := getFontMetrics(pinFont);
  PIN_HEIGHT := pinFontMetrics.getHeight()+PIN_SPACING;
  TOP_HEIGHT := LABEL_HEIGHT+7;
  return  
) ;

protected  getYConnectCoord : int  ==> int 
getYConnectCoord(PinIndex) == 
( dcl   YLocation : int  := getLocation().y,
        WirePinHeight : [Integer] := PinHeight.elementAt(PinIndex);
  def l_26 = YLocation
  in YLocation := l_26+(PIN_HEIGHT*PinIndex)+TOP_HEIGHT+(ARC_SIZE/2)+(getWireHeight(PinIndex-1))+(WirePinHeight.intValue()/2);
  return  YLocation
) ;

public  paint : [Graphics] ==> <VOID>
paint(graphics) == 
( dcl   frameLocation : [Point] := getFrameLocation(),
        size : [Dimension] := getSize();
  def l_3 = size.width
  in size.width := l_3-SYMBOL_WIDTH;
  let - = graphics.setColor(getForeground())
  in 
    skip ;
  let - = paintPinNames(graphics)
  in 
    skip ;
  let - = graphics.drawRect(frameLocation.x , frameLocation.y+(ARC_SIZE/2) , size.width , size.height-ARC_SIZE)
  in 
    skip ;
  let - = graphics.drawRoundRect(frameLocation.x , frameLocation.y , size.width , size.height , ARC_SIZE , ARC_SIZE)
  in 
    skip ;
  let - = paintLabel(graphics)
  in 
    skip ;
  return  
) ;

public  widthOf : [String] ==> int 
widthOf(string) == 
( dcl   nameWidth : int  := pinFontMetrics.stringWidth(string);
  return  nameWidth
) ;

public  addWireAtPin : [String] ==> <VOID>
addWireAtPin(pin) == 
( dcl   currentSize : [Dimension] := getSize(),
        newHeight : int  := currentSize.height+WireGraphic.SPREAD;
  let - = setSize(currentSize.width , newHeight)
  in 
    skip ;
  ( dcl   PinIndex : int  := pinList.indexOf(pin);
    if  PinIndex > -1
    then  
      ( dcl   OldPinHeight : [Integer] := PinHeight.elementAt(PinIndex),
              NewPinHeight : int  := OldPinHeight.intValue()+WireGraphic.SPREAD;
        let - = PinHeight.setElementAt(new  Integer(NewPinHeight) , PinIndex)
        in 
          skip 
      ) ;
    return  
  ) ;
  return  <VOID>
) ;

protected  paintLabel : [Graphics] ==> <VOID>
paintLabel(graphics) == 
( if  refDes <> nil  
  then  
    ( dcl   location : [Point] := getLocation();
      let - = graphics.setFont(labelFont)
      in 
        skip ;
      ( dcl   TextX : int  := location.x+(getSize().width/2)-(SYMBOL_WIDTH/2)-(labelFontMetrics.stringWidth(refDes.displayName())/2);
        let - = graphics.drawString(refDes.displayName() , TextX , location.y+labelFontMetrics.getAscent())
        in 
          skip 
      ) 
    ) ;
  return  
) ;

protected  getYConnectCoord : [String] ==> int 
getYConnectCoord(pinName) == 
( dcl   index : int  := pinList.indexOf(pinName),
        YLocation : int  := getYConnectCoord(index);
  return  YLocation
) ;

public  getConnectionPoint : [String] * [Orientation] ==> [Point]
getConnectionPoint(pinName, direction) == 
( dcl   xLocation : int  := getFrameLocation().x,
        yLocation : int  := getLocation().y;
  if  pinList.contains(pinName)
  then  
    ( if  direction = Orientation.RIGHT
      then  
        ( def l_7 = xLocation
          in xLocation := l_7+getSize().width-SYMBOL_WIDTH
        ) ;
      yLocation := getYConnectCoord(pinName)
    ) ;
  ( dcl   returnLocation : [Point] := new  Point(xLocation , yLocation);
    return  returnLocation
  ) 
) ;

instance variables 
  protected  static PIN_HEIGHT : int  := 0;
  protected  static PIN_SPACING : int  := 12;
  private  static SYMBOL_WIDTH : int  := 12;
  private  static ARC_SIZE : int  := 24;
  private  static TOP_HEIGHT : int ;
  private  pinFont : [Font];
  private  pinFontMetrics : [FontMetrics]
  
end  UnknownGraphic
