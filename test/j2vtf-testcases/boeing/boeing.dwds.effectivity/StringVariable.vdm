class StringVariable is subclass of StringExpr, ExprVariable
operations 
public  toString : () ==> [String]
toString() == 
( dcl   sb : [StringBuffer] := new  StringBuffer(32);
  let - = sb.append(new  String("strVar:"))
  in 
    skip ;
  let - = sb.append(variableName)
  in 
    skip ;
  return  sb.toString()
) ;

public  toPostfix : () ==> [String]
toPostfix() == 
( return  StringVariable`toString()
) ;

public  StringVariable : () ==> StringVariable
StringVariable() == 
( skip 
) ;

public  getVariableName : () ==> [String]
getVariableName() == 
( return  variableName
) ;

public  doTask : [TokenStack] ==> <VOID>
doTask(stack) == 
( let - = stack.push(self  )
  in 
    skip ;
  return  <VOID>
) ;

public  accept : [ExprVisitor] ==> <VOID>
accept(visitor) == 
( let - = visitor.visitStringExpr(self  )
  in 
    skip ;
  return  <VOID>
) ;

public  StringVariable : [String] ==> StringVariable
StringVariable(variableName) == 
( StringVariable`variableName := variableName
) ;

public  setVariableName : [String] ==> <VOID>
setVariableName(variableName) == 
( StringVariable`variableName := variableName;
  return  <VOID>
) ;

public  evaluate : [ExpressionContext] ==> [Object]
evaluate(context) == 
( if  variableName = nil  
  then  
    ( dcl   ex : [DWDSException] := new  DWDSException();
      let - = ex.addMessage(DWDSException`InvalidOperationException , StringVariable`getClass().getName()+new  String(" was not assigned a name before evaluation"))
      in 
        skip ;
      exit  ex
    ) ;
  return  context.lookup(StringVariable`variableName)
) ;

instance variables 
  variableName : [String] := nil  
  
end  StringVariable
