class SeqModifyMapOverrideExprTest
	types

  MyType :: nt : bool;

   Name ::
    a: seq of char
    b: [nat];
    
 MyMap = map Name to MyType  

 functions
  h: Name -> Name
  h(nm) ==
   nm
 


------------------------------ Actual Test data ------------------------------
operations

TestOP: () ==> ()
TestOP() ==
  let - = let m : (map nat to nat) | seq of nat
                 = if true 
                   then {5 |-> 8}
                   else [4,2,9],
              abc = 9,
	      t = true
          in
           let m1 : (map nat to nat) | seq of nat = 
                  m++  { abc |-> t, 6 |-> 88.7  }
           in m1

  in skip;

------------------------------------------------------------------------------
end SeqModifyMapOverrideExprTest