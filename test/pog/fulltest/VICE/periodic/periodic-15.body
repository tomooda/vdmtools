-- Test case which checks that a blocked periodic thread is not
-- run afresh when its period arrives

class Shared

instance variables
  waitset : seq of nat := [];

operations

public wait : () ==> ()
wait() ==
  (AddToWaitSet(threadid);
   Awake());

AddToWaitSet : nat ==> ()
AddToWaitSet(n) ==
  waitset := waitset ^ [n];

Awake : () ==> ()
Awake() ==
  skip;

public notify : () ==> ()
notify() ==
  if waitset <> []
  then waitset := tl waitset;

public GetWait : () ==> ()
GetWait() == skip;

sync
  mutex(AddToWaitSet,notify);
  per Awake => threadid not in set elems waitset;
  per GetWait => len waitset = 1;

end Shared

class B

instance variables

  i : nat := 0;
  s : Shared;

operations

  public  Init : Shared ==> B
  Init(ns) ==
    (s := ns;
     return self);

  op : () ==> ()
  op() ==
    ( s.wait();
      s.wait();
      i := i + 1;
      s.notify());

  public finished : () ==> nat
  finished() == 
    return i;

sync

  per finished => #fin(op) > 0;

thread

  periodic (1000)(op)

end B

class A

operations

public Test : () ==> nat
Test() ==
  ( dcl s : Shared := new Shared(),
        b : B := new B().Init(s);
    start(b);
    s.GetWait();
    duration (1200) skip;
    s.notify();
    s.GetWait();
    b.finished()
  )

end A
