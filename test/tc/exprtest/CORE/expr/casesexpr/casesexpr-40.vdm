class CasesExprTest
	functions

  f : () -> inmap rat to nat
  f() ==
    {2 |-> 5}
  pre true
--  post true

types

  A :: a: int
       b: bool

values

  v1 : A = mk_A(1,true);
  n : real = 88



------------------------------ Actual Test data ------------------------------
operations

TestOP: () ==> ()
TestOP() ==
  let t = true,
      nill = nil,
      - = let m:seq of char =
        cases n:
         1
           -> t
	,
         2
           -> def a = {8} in a union {9}
        ,
         3
           -> let a = true in a
        ,
         4
           -> let a in set {0,...,5} in let m = {1|->'a'} in m(a)
	,
         others -> nill
        end
        in m 
  in skip;

------------------------------------------------------------------------------
end CasesExprTest
