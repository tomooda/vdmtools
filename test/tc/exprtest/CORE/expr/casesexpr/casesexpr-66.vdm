class CasesExprTest
	functions

  f : () -> inmap rat to nat
  f() ==
    {2 |-> 5}
  pre true
--  post true

types

  A :: a: int
       b: bool

values

  v1 : A = mk_A(1,true);
  n : real = 88



------------------------------ Actual Test data ------------------------------
operations

TestOP: () ==> ()
TestOP() ==
  let t = true,
      nill = nil,
      one = 1,
      two = 2,
      abc = "abc",
      - = let m:map char to int =
        cases n:
         1
	   -> t
	,
         48
	   -> {one |-> abc, two |-> mk_(2,true)} munion { |-> } 
	,
         49
	   -> {one |-> abc, two |-> mk_(2,true)} munion {one |-> two}
	,
         50
	   -> {one |-> abc, two |-> mk_(2,true)} ++ {one |-> two}
	,
         51
	   -> {one,two} <: {one |-> abc, two |-> mk_(2,true)}
	,
         52
	   -> {1,2} <-: {one |-> abc, two |-> mk_(2,true)}
	,
         53
	   -> {one |-> abc, two |-> mk_(2,true)} :> {1,2}
	,
         54
	   -> {one |-> abc, two |-> mk_(2,true)} :-> {1,2}
	,
         70
	   -> {one |-> mk_(8,nil), t |-> two, two |-> two}
	,
         others -> nill
        end
        in m 
  in skip;

------------------------------------------------------------------------------
end CasesExprTest
