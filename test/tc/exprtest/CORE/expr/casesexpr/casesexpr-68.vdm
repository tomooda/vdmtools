class CasesExprTest
	functions

  f : () -> inmap rat to nat
  f() ==
    {2 |-> 5}
  pre true
--  post true

types

  A :: a: int
       b: bool

values

  v1 : A = mk_A(1,true);
  n : real = 88



------------------------------ Actual Test data ------------------------------
operations

TestOP: () ==> ()
TestOP() ==
  let t = true,
      one = 1,
      two = 2,
      four = 4.4,
      test = "test",
      nill = nil,
      - = let m:map char to int =
        cases n:
         1
	   -> t
	,
         63
	   -> v1.a
	,
         60
	   -> v1.b
	,
         64
	   -> [1,8,9,true](9)
	,
         65
	   -> {one |-> mk_(8,nil), t |-> four, four |-> one}(7)
	,
         66
	   -> f()
	,
         67 
	   -> f(5)
	,
         68
	   -> [2,true,7.8]++{one |-> test}
	,
         69
	   -> {one |-> t, two |-> t}++{one |-> two}
	,
         70
	   -> {one |-> mk_(8,nil), t |-> four, four |-> one}
	,
         71
	   -> { i|->i*2 | i: nat }
	,
         72
	   -> mk_(1,true,mk_A(1,true),f())
	,
         others -> nill
        end
        in m 
  in skip;

------------------------------------------------------------------------------
end CasesExprTest
