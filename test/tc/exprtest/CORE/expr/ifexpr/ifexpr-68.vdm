class IfExprTest
functions

  f : () -> inmap rat to nat
  f() ==
    {2 |-> 5}
  pre true
--  post true

types

  A :: a: int
       b: bool

values

  v1 : A = mk_A(1,true);
  n : real = 88
    


------------------------------ Actual Test data ------------------------------
operations

TestOP: () ==> ()
TestOP() ==
  let t = true,
      nn = nil,
      one = 1,
      ff = 4.4,
      test = "test",
     - = let m:map char to int =
        if n=1
	then t
	elseif n=63
	then v1.a
	elseif n=60
	then v1.b
	elseif n=64
	then [1,8,9,true](9)
	elseif n=65
	then {one |-> mk_(8,nil), t |-> ff, ff |-> one}(7)
	elseif n=66
	then f()
	elseif n=67 
	then f(5)
	elseif n=68
	then [2,true,7.8]++{1 |-> test}
	elseif n=69
	then {one |-> t, one |-> t}++{one |-> one}
	elseif n=70
	then {one |-> mk_(8,nil), t |-> ff, ff |-> one}
	elseif n=71
	then { i|->i*2 | i: nat }
	elseif n=72
	then mk_(1,true,mk_A(1,true),f())
	else nn
        in m 
  in skip;

------------------------------------------------------------------------------
end IfExprTest