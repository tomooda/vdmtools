class Queue

functions
public empty : () -> seq of int
empty() == [];

public isEmpty : seq of int -> bool
isEmpty(s) == s = [];
public enQueue : int * seq of int -> seq of int
enQueue(e, aQueue) == aQueue ^ [e];

public deQueue : seq of int -> seq of int
deQueue(aQueue) == 
tl aQueue
pre
aQueue <> []
post
RESULT = tl aQueue;

public top : seq of int -> [int]
top(aQueue) == 
hd aQueue
pre
aQueue <> []
post
RESULT = hd aQueue;

end Queue

class UseQueue

instance variables

  q : Queue := new Queue();

traces

S1: let i in set {1, 2, 3} in 
let s in set {[], [1], [1,2], [1,2,3]} in (
q.empty(); q.enQueue(i, s){1, 3}; q.enQueue(i, s){1, 3}; q.deQueue(s){1,3}
)

end UseQueue